{"video": {"id": "Ee0HzlnIYWQ", "publishedAt": "2018-06-11T14:28:09Z", "title": "Big O: How Code Slows as Data Grows", "description": "Big O notation is a computer science technique for analyzing how code performs as data gets larger.  It's a very handy tool for the working programmer, but it's often shrouded in off-putting mathematics.\n\nIn this talk, I'll teach you what you need to know about Big-O, and how to use it to keep your programs running well.  Big-O helps you choose the data structures and algorithms that will let your code work efficiently even on large data sets.\n\nYou can understand Big-O even if you aren't a theoretical computer science math nerd. Big-O isn't as mystical as it appears. It's wrapped in mathematical trappings, but doesn't have to be more than a common-sense assessment of how your code will behave.\n\nTalk given by Ned Batchelder at PyCon 2018.\n\nThanks to PyCon for giving us permission to post this talk. freeCodeCamp is not associated with this talk. We're just excited to bring more exposure to to it!\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.com\n\nRead hundreds of articles on programming: https://medium.freecodecamp.com", "duration": "PT28M51S", "likes": "2594", "views": "55574"}, "comments": [{"topLevelComment": {"id": "UgxwS9U6Pkbfxux8YC14AaABAg", "publishedAt": "2023-01-02T04:29:29Z", "author": "AmexL", "text": "I like this guy.", "likes": 0}}, {"topLevelComment": {"id": "UgxLP-Ugz9AptYfGjjx4AaABAg", "publishedAt": "2022-12-01T15:41:43Z", "author": "pakistan Code Hub", "text": "I have a question related to Data structure and algorithms. we have studied bubble sort has a big O worst-case time complexity of O(n2). Linear search has O(n) and binary search has O(log N). With all the above info, my question starts here sir, let's have an array. we will apply the binary search to search an array element, before binary search we need bubble sorting because binary search work on sorting. worst case and good are equal linear. Question  Can we say linear search === binary search? \r\nbubble sort O(n2)  + binary O(log N) ) / 2 = linear O(n)?", "likes": 0}}, {"topLevelComment": {"id": "UgxdHRw2mllRrdbH5v94AaABAg", "publishedAt": "2022-11-21T18:01:52Z", "author": "M Anderson", "text": "As many have said, this video is the best explanation I have seen for Big O notation.", "likes": 0}}, {"topLevelComment": {"id": "UgxaqQDCHhL_OJZDpKB4AaABAg", "publishedAt": "2022-09-10T21:22:54Z", "author": "Ary Pawade", "text": "thank you very very much SIR I couldn't have understood as simpler as this it was made super easy by you !", "likes": 0}}, {"topLevelComment": {"id": "UgxXqCdGYCQ-2YmqPbl4AaABAg", "publishedAt": "2022-07-17T13:18:04Z", "author": "David James", "text": "I usually try to go for O(n^2) algorithms (such as bubble sort).  That way when I shrink my dataset (input data), I see the most speedup ha ha.  Actually this works, such as if you wanted to sort 1000 numbers, instead of using one big bubble sort which would have about 500,000 comparisons, you can instead break it up into 10 smaller groups of 100 numbers each, so that would be about 5,000 comparisons for each small group, so only about 50,000 total (1/10th as many as previously).  Then of course you would have to merge the results back together.  You could even break up the 1,000 numbers to sort into even smaller groups, such as 100 groups, each of size 10.  My question is this... if Mergesort already does this, by breaking a \"large\" array of numbers into single entry arrays, and then recombines them in a sorted way, but mergesort has a different big O time complexity vs. bubblesort, then what happens to the time complexity of bubblesort in an intermediate stage of divide and conquer (breaking the 1,000 entries up into say 100 arrays of size 10 each, bubble sorting each size 10 array, and then merging all the results into 1 big array of size 1,000).  When does it transition from O(n^2) to something else \"faster\" is my main question.", "likes": 0}, "replies": [{"id": "UgxXqCdGYCQ-2YmqPbl4AaABAg.9d_qziyRhde9ejdAEhB3S_", "publishedAt": "2022-08-15T05:01:06Z", "author": "jursamaj", "text": "You're on your way to  re-inventing quicksort\u2026\n\nThink about it this way: let's split the list into sqrt(n) lists, each of size sqrt(n).  Sort each list, then merge the lists.\n\nEach list is size sqrt(n), so bubblesorting that is O(sqrt(n)^2)=O(n).  But you have sqrt(n) lists, so sorting them all is O(n*sqrt(n)).  The merge has to find the smallest item from the lists, which is O(sqrt(n)), and it has to do that n times, so overall it's also O(n*sqrt(n)).  That is indeed faster than the bubblesort on the whole list.  Of course, it ignores all the overhead involved.  For small n, the basic bubblesort will actually be faster.  (This is that 'small cases' bit Ned mentioned.)\n\nNow you might think, \"I have this faster sort, why not use it instead of bubblesort on each small list?\"  In other words, do 2 layers of splitting.  I'm not doing the full analysis, but I think that would cut it from O(n^1.5) to O(n^1.25).  Maybe that low, but not lower.  It will still be a polynomial in n, just with an exponent that heads towards 1 with more layers (but never gets to 1).\n\nQuicksort does something similar, but because it only splits the list in 2 at each step, each layer of splitting & merging is only O(n).  And you only need O(logn) layers of splitting.  So overall, it's O(nlogn) which is less than any polynomial.", "likes": 0}]}, {"topLevelComment": {"id": "UgzX2hlxEjNSSbLwxs94AaABAg", "publishedAt": "2022-07-10T18:42:59Z", "author": "jeskers", "text": "Clear and patient teaching style. Wonderful. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "Ugw46OFQ-aMI8gEMUXZ4AaABAg", "publishedAt": "2022-04-13T05:20:20Z", "author": "Cs Joy", "text": "Thanks! O(1)", "likes": 0}}, {"topLevelComment": {"id": "Ugyx9r4mS4_bwBjBWK54AaABAg", "publishedAt": "2022-03-28T05:04:43Z", "author": "LaloysTV", "text": "Thanks for the knowledge you have shared. Amazing!", "likes": 0}}, {"topLevelComment": {"id": "UgyxsHdMTIOVrRTzHYx4AaABAg", "publishedAt": "2022-03-03T19:02:34Z", "author": "Turtle Code Shorts", "text": "Hey, I've posted +100 free programming videos. \ud83d\ude02\r\nFree tutorial \ud83d\udc49 https://www.youtube.com/c/TurtleCode/videos/?sub_confirmation=1", "likes": 0}}, {"topLevelComment": {"id": "Ugx_7Wm04ucgKa45JOd4AaABAg", "publishedAt": "2022-01-24T09:19:54Z", "author": "Elyes Laalai", "text": "Great presentation. Thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgzY1jWbVweyq0TdLHp4AaABAg", "publishedAt": "2022-01-21T07:03:43Z", "author": "Alex", "text": "Great talk. This guy really has a bone to pick with math.", "likes": 2}}, {"topLevelComment": {"id": "UgwQevkpwThFXuuEXDR4AaABAg", "publishedAt": "2021-12-19T21:42:21Z", "author": "Dina Ashraf", "text": "This is simply amazing", "likes": 0}}, {"topLevelComment": {"id": "Ugz1Qn3Y4-BStEcU5pR4AaABAg", "publishedAt": "2021-12-08T14:09:44Z", "author": "Ozzy Explains", "text": "Excellent video! It's interesting how when building blockchains and stuff (think proof of work), higher time complexity is better for building secure blocks, because it means it takes time for adversaries to attack the data structure. O(.) is important, but its interpretation depends on context :)", "likes": 2}}, {"topLevelComment": {"id": "UgyEggAvDflgk167fkh4AaABAg", "publishedAt": "2021-11-10T20:24:43Z", "author": "Jane Papa", "text": "amazing to find this! thank you so much.", "likes": 0}}, {"topLevelComment": {"id": "Ugz_s_zeBFC2lhWyA9R4AaABAg", "publishedAt": "2021-10-04T07:00:29Z", "author": "NBME Answers", "text": "Thanks!", "likes": 2}}, {"topLevelComment": {"id": "UgxKSRxXZe6Ey-NEsxt4AaABAg", "publishedAt": "2021-09-20T21:21:06Z", "author": "OJAS", "text": "G.H. Hardy introduces Big - O, Little - o,  and tilde ~ comparators in his Pure Mathematics, and Number Theory Texts. Wkipedia has a  page on these.", "likes": 0}}, {"topLevelComment": {"id": "UgxgZky9oIB15cMxwQ54AaABAg", "publishedAt": "2021-09-12T09:25:54Z", "author": "Chandan Tk", "text": "I had trouble understanding big o but after this video, I really understood each topic, really helpful and quality teaching from freecodecamp \ud83d\udc4d.", "likes": 0}}, {"topLevelComment": {"id": "UgzS8gTHAattmLYoSVd4AaABAg", "publishedAt": "2021-09-11T03:58:19Z", "author": "Hourglass84", "text": "Nicely done :)", "likes": 2}}, {"topLevelComment": {"id": "Ugx7Lnrnu4IpDp_dULV4AaABAg", "publishedAt": "2021-07-29T21:19:45Z", "author": "greenie62", "text": "well, we know who at least one of the people are who clicked the dislike. i think we can get a O(log(n)) divide n conquer to figure out the other 3", "likes": 3}}, {"topLevelComment": {"id": "UgxkPlPCl7RQWVv4eUh4AaABAg", "publishedAt": "2021-07-19T16:48:35Z", "author": "Shanthi surampudi", "text": "Thank you \u2763\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgyUBIa5NtoKsLxiuXx4AaABAg", "publishedAt": "2021-05-29T05:31:19Z", "author": "Mujeer Ahmed", "text": "The bean example was very helpful. Every time I think of BigO, the bean example is going to cross my mind. Thank you!", "likes": 2}}, {"topLevelComment": {"id": "UgxWUNNqk_mt30OtUvF4AaABAg", "publishedAt": "2021-05-12T00:29:20Z", "author": "The Journeyman", "text": "I salute you, sir.   You have done a great job of simplifying a topic that is oft over complicated.", "likes": 2}}, {"topLevelComment": {"id": "Ugx3xwXOQ_KEjUOs1zh4AaABAg", "publishedAt": "2021-05-11T09:05:18Z", "author": "Karina Anggelia", "text": "Very helpful and practical. Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwY8drOzGiblJKmcfp4AaABAg", "publishedAt": "2021-04-23T10:57:52Z", "author": "nikoladd", "text": "O(N^2) is NOT one of those terrible things you try to avoid. It's the lowest power polynomial(apart from N^1 of course). It's one of the things you try not to run too much, but as far as algorithmic complexity goes it's pretty good.\nAlgorithms of complexity O(N^3) are a dream for many real world tasks... like finding most points in space that are on the same line. ..and this is N times worse then O(N^2) for those that didn't get it.", "likes": 6}, "replies": [{"id": "UgwY8drOzGiblJKmcfp4AaABAg.9MTtEDD1LGz9ej_1D2dSy4", "publishedAt": "2022-08-15T04:24:55Z", "author": "jursamaj", "text": "\"Avoid\" doesn't mean \"never do that\", it means \"don't do that if you can do better\".  The point is that you want to find the lowest O that does the job.  The job may set limits on how low you can go, but if possible, get it under linear, better, under logarithmic.", "likes": 0}]}, {"topLevelComment": {"id": "UgwfFsem7YEAEiPFd_d4AaABAg", "publishedAt": "2021-04-12T13:18:05Z", "author": "iamserda", "text": "Oh, this is TERRIFIC. I am learning this to prep for upcoming interviews in tech and for a guy without a background in pure math and who took his last math course 13 years ago, I NEEDED THIS.", "likes": 0}}, {"topLevelComment": {"id": "UgwmHapjI7rbaZZ-iHN4AaABAg", "publishedAt": "2021-04-12T13:15:42Z", "author": "iamserda", "text": "wait a minute, even though the end result would have been the same, isn't it (using average instead of worst-case) 3N/2 + 3N/2 + 1. the only think happening 1 is one of the returns(mom_name or None). But the if statement occurs 3x, at each iteration. so technically, we end up with 3n/2 + 3n/2 + 1 = (6N + 2) / 2 = 3N +1 which leads to 3N(discard lowest terms) and eventually N(discard coefficient) .\n\nI could be wrong. The end result is the same. I just think there is an issue with the explaination of the if statement as if it does not occur at each iteration but it does, it just happens to be false 2 out 3 times if the item you are looking for is at the end of this array. But that does not mean the if statement wasn't executed 3x.\n\njust my 2 cents.", "likes": 0}, "replies": [{"id": "UgwmHapjI7rbaZZ-iHN4AaABAg.9M1oG2mIQm49NS-4gD7LN1", "publishedAt": "2021-05-17T13:50:39Z", "author": "A. Dollar", "text": "On avrage you go through only half the list each time which gives us N/2, in the for statement line you have three steps each time it executes: get the tuple, assign child name and assign mom name which equals 3*N/2 for us, the if statement on the other hand has just one step each time it executes which is the comparison of the current child name to the child name we are searching for, hence only adding N/2.", "likes": 0}]}, {"topLevelComment": {"id": "UgwpNzzzRLPLeVMM1Oh4AaABAg", "publishedAt": "2021-02-13T09:24:29Z", "author": "I'm Here As Always ", "text": "awesome!\r\n\r\n\rthank you.", "likes": 0}}, {"topLevelComment": {"id": "Ugw-gGU3pW5TAJh623R4AaABAg", "publishedAt": "2020-12-12T19:13:35Z", "author": "Abstract Approach", "text": "7:57 \"mathematcal detritus\" and \"chaft\". I hope your aware we rigorously define and understand these concepts for our own enlightenment. Theres definitely a place for people who can give an intuition about it, like yourself. But don't bash us for trying to understand it completely.", "likes": 2}, "replies": [{"id": "Ugw-gGU3pW5TAJh623R4AaABAg.9HAt1MqbEaq9Xn67aAfeGH", "publishedAt": "2022-01-29T17:09:27Z", "author": "Abstract Approach", "text": "@Alex (* -> by my definition which differs from convention)\n*TLDR I have become more invest and open minded and less sensitive, were he to think about like I have; he'd realizing is is criticizing the approach, maybe ZFC axioms/notations, which is fine. Mathematics** *is something he either doesn't understand or is doing by accident* \n\nOriginal Comment:\nDepends on how sensitive and invested you are. I believe when arithmetic * became mathematics * was much later than most. If you look at AlQuarizme or Plato they were doing it because they thought of it as physics/religion, as a duty to learn it.\n\nArchemedis might have been a freak early mathematician* or a very devoted \"believer\" in the power of mathematics idk\n\nJump forward to Euler, as I define it \"The Calculus\" is still arithmetic* as is Eulers work. They were brilliant, but did it for prestige (jumping back, the cubic duels were a great example of the closed source \"mystic\" wisdom as these the so called  \"mathematicians\" driving force.)\n\nSome were brilliant, and it's no diss. But when Gauss entered the scene everything changed. He didn't even bother to publish some if his work, but would gladly confer with worthy \"mathematicians\"/mathematician*s (not caring of gender sterotypes taken as truth ar the rime) and left most of his findings unpublished. He was doing mathematics* as I define it, chasing that light bulb moment, and when people developed the ability to learn for the sake of learning mathematics exploded. No longer was it lagging behing physics, and explored only for other causes as prior. Now math was ahead (a great example is Noethers Theorem, where mathematician* Emmy Noether solved a lingering arduous problem and shed light on \"conservation\" laws less than a half hour after being brought into a discussion by Einstein and .....Maxwell I think)\n\n*Mathematics is learning for the sake if learning, out if sheer interest with no care of practical reprocusions. Every constrain is necessarily non-optional. Sometimes reality presents interesting puzzles, but its the interest and the challenge; not the reality that drives the mathematician*\nThier are brilliant Arithmetist out there, who care about real problems and use mathematical ideas to solve them, maybe even developing the field as needed. \n\nI guess the point is, you could be doing mathematics and loving and not knowing it because standard conventions scare you but you still desire that pure light bulb moment. Thats what it's all about.", "likes": 0}, {"id": "Ugw-gGU3pW5TAJh623R4AaABAg.9HAt1MqbEaq9XSOMF5LMNy", "publishedAt": "2022-01-21T06:45:27Z", "author": "Alex", "text": "Yeah I agree with this. A practical explanation is an excellent contribution, and bagging on math isn't a big deal, but it isn't neccesary either. Math is cool, and we have advanced math, among other things, to thank for computers in the first place! Currently taking a class that is introducing me to logic and proofs and its striking how much of this would be transferable to programming", "likes": 0}, {"id": "Ugw-gGU3pW5TAJh623R4AaABAg.9HAt1MqbEaq9QYs-y3DDG5", "publishedAt": "2021-08-02T19:28:58Z", "author": "Abstract Approach", "text": "@Nishanth word, I appreciate your reply.", "likes": 1}, {"id": "Ugw-gGU3pW5TAJh623R4AaABAg.9HAt1MqbEaq9QTPHNC4RGy", "publishedAt": "2021-07-31T16:33:00Z", "author": "Nishanth", "text": "@Abstract Approach Really glad to see people that value math do exist around these places , its actually a pity how the guy tries to strip math off the topic as if it were something that inherently  obstructed it's understanding. \nAlso sorry to see how the hive mind against math in the comments is going pretty strong.", "likes": 2}, {"id": "Ugw-gGU3pW5TAJh623R4AaABAg.9HAt1MqbEaq9OFfffyoFQT", "publishedAt": "2021-06-06T15:32:51Z", "author": "Abstract Approach", "text": "@SquareRootOf2 tbh I don't know what pedantic means (or what the video this commentsectionis too was about), but I was not trying to \"appear\" anyway (I could give a f what you think of me, idevenk who you are), I am just sick of these claims of elitism when we (mathematicians) just want to learn and explain efficiently. \n\nMetaphors and intuitive understanding helps, but if you really want to know how something works you need to learn the math.\n\nIt's about delayed gratification, kids today are so used to getting excited by whatever show or game instantly. But learning to enjoy delayed gratification is soooooo valuable and soooooo worth it. \n\nSorry if I came off some way that irritates you. However I speak truths that I think are worth being said in the most polite and broad way I could think of. I won't apologize for that.", "likes": 1}]}, {"topLevelComment": {"id": "UgwpJhOO8dscHR6S1pF4AaABAg", "publishedAt": "2020-10-12T08:23:34Z", "author": "Ching-hsiu Lee", "text": "Thank you.", "likes": 0}}, {"topLevelComment": {"id": "UgyemyjvJAM1aYq00AN4AaABAg", "publishedAt": "2020-09-04T23:07:46Z", "author": "kevin benavides", "text": "Phenomenal talk, thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgzLXWnn6piZzavOCHp4AaABAg", "publishedAt": "2020-05-20T01:09:43Z", "author": "Abhra Biswas", "text": "Great great video", "likes": 0}}, {"topLevelComment": {"id": "UgxpNTCSkm8L4Toy-AB4AaABAg", "publishedAt": "2019-01-21T11:22:03Z", "author": "Ivan S.", "text": "This is simply the best video explaining what Big O is that I've managed to find. Great talk!", "likes": 53}, "replies": [{"id": "UgxpNTCSkm8L4Toy-AB4AaABAg.8qMlm7oOChY9fdQEVIW9_p", "publishedAt": "2022-09-06T15:35:18Z", "author": "PayBigDaddy", "text": "reported.", "likes": 0}]}, {"topLevelComment": {"id": "UgwSlUKWXbu-k8Yk6I94AaABAg", "publishedAt": "2018-11-28T16:13:01Z", "author": "mohana priya", "text": "Great stuff ... Thanks for the knowledge", "likes": 0}}, {"topLevelComment": {"id": "Ugzw6BE2GUYmzxYItRp4AaABAg", "publishedAt": "2018-06-29T20:46:10Z", "author": "Simone Icardi", "text": "awesome!", "likes": 0}}, {"topLevelComment": {"id": "UgxEKZkn_HvxvKTWAld4AaABAg", "publishedAt": "2018-06-12T11:41:44Z", "author": "Boris the Blade", "text": "superb talk this guy is a legend. its amazing how some people overcomplicate things when its really simple. Im not sure if they do it cuz they like thinking they are so great or smarter than other people or they just dont know any better. anyways 30 mjnutes well spent", "likes": 15}, "replies": [{"id": "UgxEKZkn_HvxvKTWAld4AaABAg.8hOalCxBZLn9ej_V9qX92-", "publishedAt": "2022-08-15T04:29:00Z", "author": "jursamaj", "text": "Part of the difference is like Ned said early in the talk: precise vs. pragmatic.  For the typical programmer, Ned's pragmatic explanation is all they'll ever need, and that's fine.  If you're going into the theory and working on the abstraction of it all, Ned's info is a laymen's explanation at best.  They have to deal with it on a different level.  And that also is fine.", "likes": 0}]}, {"topLevelComment": {"id": "UgwJN5C9UxgPaRx84iZ4AaABAg", "publishedAt": "2018-06-11T16:27:29Z", "author": "Thomas J.", "text": "Wow, this is awesome", "likes": 0}}, {"topLevelComment": {"id": "Ugzk82umMaq61X0ALkF4AaABAg", "publishedAt": "2018-06-11T15:03:17Z", "author": "Abhilash Sulibela", "text": "This is awesome \ud83d\udc4c\ud83d\udc4c", "likes": 0}}, {"topLevelComment": {"id": "UgxhyKvMj-nYaAtJtQd4AaABAg", "publishedAt": "2018-06-11T14:29:41Z", "author": "SPACE ZONE", "text": "First", "likes": 0}}]}