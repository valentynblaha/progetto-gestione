{"video": {"id": "3PUVr8jFMGg", "title": "Observer Design Pattern - Beau teaches JavaScript", "description": "With the Observer Design Pattern, if an object is modified it broadcasts to dependent objects that a change has occurred.\n\nCode\n\ud83d\udd17 http://codepen.io/beaucarnes/pen/mRaoyK?editors=0012\n\nOther resources on topic:\n\ud83d\udd17 https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know\n\ud83d\udd17 http://robdodson.me/javascript-design-patterns-observer/\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nFollow us on twitter: https://twitter.com/freecodecamp\nLike us on Facebook: https://www.facebook.com/freecodecamp\nFollow Quincy on Quora: https://www.quora.com/Quincy-Larson", "duration": "PT3M57S", "likes": "322", "views": "22682"}, "comments": [{"topLevelComment": {"author": "Evgeny Levchenya", "text": "OK, this pattern makes sense if when the subject state changes,  the observer's state changes too. In this example, there is no real data transferring between Subject and Observer. Just indexes", "likes": 1}}, {"topLevelComment": {"author": "Edilson Lima", "text": "Simple and extremelly useful. Keep it up bro!", "likes": 0}}, {"topLevelComment": {"author": "Ankit Mehrotra", "text": "Why new Observer(1)  is used insted of calling Observer(1)?", "likes": 0}, "replies": [{"author": "Maxim9575", "text": "Difference the next: with keyword \"new\" you say what you want create instance from constructor (it may be function or class), but without keyword you simple invoke the function or the class (anyway class can't be invoked without new keyword)", "likes": 0}]}, {"topLevelComment": {"author": "ouf cena", "text": "When & why use this Design Pattern?", "likes": 1}, "replies": [{"author": "Maxim9575", "text": "It uses in mvc pattern", "likes": 0}, {"author": "Chau Dinh Vo Bao", "text": "updating the ui component when the data change, like in React", "likes": 1}, {"author": "Chau Dinh Vo Bao", "text": "push notification when having new message, private message, new post (from whom you subscribed), ...", "likes": 0}]}, {"topLevelComment": {"author": "Sunil Sigar", "text": "It's good, you are explaining very fast, please make videos of 10-15 min long.", "likes": 3}}, {"topLevelComment": {"author": "John N", "text": "it seems as if this guys IQ is double what mine is...", "likes": 5}, "replies": [{"author": "Kre\u0161imir \u0106osi\u0107", "text": "This pattern is really just this:\n- list of elements/items/whatever which are listening for changes, ALL of them have some kind of update function/method which will update the new changed data to their view\n- observable is the watched data - whenever it changes it triggers a function on EACH of the observers which require the new information to update the view with the newly changed information; it's really just a function calling a function only in OOP perspective", "likes": 1}]}, {"topLevelComment": {"author": "Fredo Corleone", "text": "It seems the pattern of how Angular handle its sync between view and components under the hood", "likes": 2}}, {"topLevelComment": {"author": "Greg Slonina", "text": "Two great videos with the observer pattern using pubsub\n\nhttps://www.youtube.com/watch?v=nQRXi1SVOow\nhttps://www.youtube.com/watch?v=jDhDvnlbr4Q&t=165s", "likes": 1}}, {"topLevelComment": {"author": "Pan Zheng", "text": "Awesome video!!! And one quick tip for you, you might need to split your playlist into smaller ones, like basic js, design patterns, data structure and algorithms and maybe fps. It will help people with different needs to find their target easier : )", "likes": 1}, "replies": [{"author": "Beau Carnes", "text": "Yeah, I'll probably be doing that this week! Thanks.", "likes": 3}]}]}