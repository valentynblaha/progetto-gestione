{"video": {"id": "C1PZh_ea-7I", "title": "Hoisting - Beau teaches JavaScript", "description": "Hoisting is when variable and function declarations are processed before any code is executed. This is an important concept to understand for any programmer. Learn all about hoisting in this video!\n\nCode: \n\ud83d\udd17 http://codepen.io/beaucarnes/pen/wgoLeR?editors=0012\n\ud83d\udd17 http\nMore info:\n\ud83d\udd17 http://www.jstips.co/en/hoisting/\n\ud83d\udd17 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var#var_hoisting\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nFollow us on twitter: https://twitter.com/freecodecamp\nLike us on Facebook: https://www.facebook.com/freecodecamp\nFollow Quincy on Quora: https://www.quora.com/Quincy-Larson", "duration": "PT3M27S", "likes": "852", "views": "44126"}, "comments": [{"topLevelComment": {"author": "Mazdy Soraya", "text": "It is not hard to understand. In order your code to run, there has to be execution context. Creation of execution context consist of 2 phases: 1) Creation phase - your code is being SCANNED for variables and FUNCTION declarations and then reserve space in memory for variables and function declaration - That is ALL, ALL that is happening. That is so called hoisting. So in this phase, when your code is scanned and JS engine encounters function declaration, it reserve memory for your function and put it all in memory ( literally how it is written ). When it encounters VAR variable it also reserve space for this type of variable in memory. But IMPORTANT, in creation phase JS engine do not know what is the actual value of the VAR, so it puts UNDEFINED. LET and CONST are also HOISTED, but instead of initializing them to UNDEFINED it puts them into memory and so called TDZ or temporary zone is being created for LET and CONST. Meaning, you can not access this type of variables before they are lexically written. 2) In creation phase your code is executed line by line and during this phase your variables will get the real values.", "likes": 0}}, {"topLevelComment": {"author": "Sidi Sting", "text": "I have down voted this video because I think you should have commented the previously explained code. Why didn't you comment already explained code to remove the clutter printed from the above `console.log`s !!!!!!!", "likes": 0}}, {"topLevelComment": {"author": "A.H.S.", "text": "After watching this video I have one remark:\n\nCAPTAIN OBVIOUS!!!\n\nSeriously, calling your undefined variable will return undefined, but if you call functions that are not defined as variables, they will work. Why did someone have to create such a stupid terminology to explain something so obvious that literally exist in every single other language.", "likes": 0}}, {"topLevelComment": {"author": "Andrii", "text": "You show an example at a time but your log output contains output from other examples - it's very confusing. I'd suggest to show an example at a time and comment out all other examples", "likes": 0}}, {"topLevelComment": {"author": "U K", "text": "I would suggest to comment parts you were already explain", "likes": 0}}, {"topLevelComment": {"author": "MaxTryk", "text": "\"Error is actually is not shown.... but it's there\" - what's the point of the presentation then? It's misleading. Let alone the clean-ups and outputs...", "likes": 1}}, {"topLevelComment": {"author": "Bob Jenkins", "text": "I love how he doesn't add any fluff to his videos, just straight to the point and clear whenever possible.", "likes": 3}}, {"topLevelComment": {"author": "#hashtagTrends", "text": "Thank You @t !", "likes": 0}}, {"topLevelComment": {"author": "Musa Khan", "text": "So variable and function DECLARATIONS are hoisted to the top, but assignments and calls come in order.", "likes": 0}}, {"topLevelComment": {"author": "Aar\u00f3n Argotte L\u00f3pez", "text": "<3", "likes": 0}}, {"topLevelComment": {"author": "Roul P.", "text": "The simple  truth is that people who get their skills from YT will never be really good at it.", "likes": 0}}, {"topLevelComment": {"author": "Red Pills and Rabbit Holes", "text": "Hoisting is not a JavaScript feature, it's a 'process' that happens to variables and function declarations at the 'Creation Phase' and it's a term 'given' by JS developers to understand this process. But...you've not really explained it correctly. The JS engine goes through two phases....\n\n1. Creation Phase \n2. Execution Phase. \n\nAt the creation phase our code is scanned and ALL variables (used with the 'var' keyword) and function declarations gets stored in memory. Variable names are given space in memory and are given the default value of 'undefined' and the whole function declaration block also gets placed into memory. Then during the execution phase, these variables and functions are already available to the JS engine, which is why you can call a function before it's declared, because that call will 'point' to the function within memory. This behaviour of memory storage is what is called 'Hoisting' and happens within each function block too, where any variables declared within a function are stored in 'local' memory for that function to use.", "likes": 32}, "replies": [{"author": "Daniel .W", "text": "Thank you very much for the explanation", "likes": 0}, {"author": "PsilocyBen", "text": "Thanks for the explanation. So just to clarify, variables declared with 'const' and 'let' do NOT get immediately stored in global memory during the creation phase, where as 'var' variables do, but are undefined until it reaches the definition in the exeuction phase?", "likes": 0}]}, {"topLevelComment": {"author": "Renan Alves", "text": "3:04 TIP", "likes": 2}}, {"topLevelComment": {"author": "Steven Barnes", "text": "Did anyone else think they had their speed set to 1.5?", "likes": 0}}, {"topLevelComment": {"author": "The Design Creative - Diane Laidlaw", "text": "Wow i thought i had speed on higher automatically", "likes": 2}}, {"topLevelComment": {"author": "Osama Abbas", "text": "I don't know why you're always in a hurry. \nyou explain things in a good way but you need to slow down a bit.", "likes": 0}}, {"topLevelComment": {"author": "David Shook", "text": "way better than the other hand-waving, Harry Potter magic version I recently watched.", "likes": 1}}, {"topLevelComment": {"author": "Bikki Mahato", "text": "Amazing.", "likes": 0}}, {"topLevelComment": {"author": "Branko E", "text": "thanks a lot,your explanation is so easy to understand", "likes": 0}}, {"topLevelComment": {"author": "FADILI Abdeljalil", "text": "Hoisting well explained, good job (y)", "likes": 0}}, {"topLevelComment": {"author": "Myles Gmail", "text": "TY!", "likes": 0}}, {"topLevelComment": {"author": "Christian Fall", "text": "Mind Blown", "likes": 1}}, {"topLevelComment": {"author": "kanaan bahmani", "text": "Easy explanation: if you hoist (call) your variable before defining it it will say undefined case first needs to be defined and then called. But functions by themselvs can be hoisted at the top (not in case of being declared in a variable) so if you call a function before declaring it it will work. But not in variable AT ANY CASE.", "likes": 24}, "replies": [{"author": "bluex217", "text": "Yes also very good. \n\nJust to add on, though, there is a complication with this in regards to the \"let\" and \"const\" keywords. \n \nwhen we use the \"let\" or \"const\" keywords instead of \"var\", if we try to access/refer to the variable BEFORE it is initialized, we get a runtime exception \r\nstating that we cannot access the variable before it is initialized, unlike var. \n\nThis is because, unlike var, let and const are hoisted to the top but UNINITIALIZED by default. In other words, we must explicitly initialize (AKA assign a value to) let/const  and, until we do, let/const variables are uninitialized/NULL and thus we receive an uninitialized error when accessing let/const prior to explicit assignment. \n\nContrarily, var variables are hoisted to the top of the page and by default ARE initialized as \"undefined.\"", "likes": 1}]}, {"topLevelComment": {"author": "Almost Everywhere", "text": "I like the way u sound in starting every video. it's like cautions that given in starting of any movies.Like Smoking and drinking is injurious to health.. blaa blaa.. like that.. awesome work man... I like your series... keep it up........", "likes": 1}}, {"topLevelComment": {"author": "Diveg", "text": "BEST Video to understand Hoisting, Thx Beau", "likes": 0}}, {"topLevelComment": {"author": "Robert Cooper", "text": "Great video with great examples!", "likes": 0}}, {"topLevelComment": {"author": "Abhinav Sharma", "text": "Everything sounded and appeared great, but as a feedback kindly have a console ready where you can actually show the error rather than merely speaking out that there will be an error. It is not at all an overhead. It really helps beginners to actually see things while they happen.\n\nBut I appreciate what you still do , thanks", "likes": 7}}, {"topLevelComment": {"author": "Sara A", "text": "Was there a problem of speed in the video? It appears a little speed..", "likes": 11}}, {"topLevelComment": {"author": "DevDelight", "text": "Great video but the variables and functions are not moved to the top. JavaScript has a \"CREATION\" and an \"EXECUTION\" phase. During a creation phase, all the variables and functions are put into memory. Check out JS Hoisting video on my channel for more info.", "likes": 3}}, {"topLevelComment": {"author": "Brian Koo", "text": "What about variables created by let?", "likes": 0}, "replies": [{"author": "Beau Carnes", "text": "'Let' variables cannot be accessed before they are declared. However, technically they are hoisted but just are not initialized. Which basically means they act as if they were not hoisted.", "likes": 0}]}, {"topLevelComment": {"author": "Onur Koyun", "text": "Settings -> speed -> 0.75", "likes": 77}, "replies": [{"author": "Jimmy Procida", "text": "Amazing suggestion :D Many thanks. I honestly don't undestand what's the matter on explaining things so fast. You suppose to explain something to let people undestand, the fact that you are already explaining that implies that you know that certain topic. You don't need to be Flash :)", "likes": 2}, {"author": "Renan Alves", "text": "I thought I was the only doing that.", "likes": 1}, {"author": "Cheeseburger", "text": "I'm so used to speed up videos that I always forget u can slow em lol", "likes": 0}, {"author": "Onur Koyun", "text": "I wish there were a option like that :P", "likes": 0}]}, {"topLevelComment": {"author": "DamanDVS", "text": "Hate to sound stupid, but please speak a little slower, so I can follow", "likes": 22}, "replies": [{"author": "Khaidem Sandip", "text": "@Beau Carnes that speed is good, even better if I watch it at 2x", "likes": 0}, {"author": "Desmond Wilson", "text": "Click the gear icon to adjust the speed.", "likes": 0}, {"author": "Thami Memel", "text": "play it on 0.5 speed :)", "likes": 0}, {"author": "Alexey Kuznetsov", "text": "The speed is perfect, the one can always use youtube settings to adjust the speed to its own preference.\n\nps Huge thanks for the videos!", "likes": 6}, {"author": "PM Tech", "text": "Beau Carnes, I'm glad to hear that!", "likes": 0}]}, {"topLevelComment": {"author": "Basil Aiman", "text": "as I know JS is an interpreted language and is executed line by line. \nIs that means that It reads all the lines before executing ? and If so isn't that a sort of compiled language ?", "likes": 0}, "replies": [{"author": "Dev Mastery", "text": "It depends on the JavaScript engine. Some engines do what is called \"two-pass interpreting\" while others do indeed compile it. More info at:\n\nhttp://stackoverflow.com/questions/7252081/does-javascript-compile-or-two-pass-interpret\n\nhttps://en.wikipedia.org/wiki/JavaScript_engine", "likes": 0}]}, {"topLevelComment": {"author": "Tan Moy", "text": "Yo...This was the vid. ;-)", "likes": 0}}]}