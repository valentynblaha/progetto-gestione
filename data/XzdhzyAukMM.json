{"video": {"id": "XzdhzyAukMM", "title": "Clean Code: SOLID - Beau teaches JavaScript", "description": "Learn the best practices of how to write clean code in JS. This video tutorial is over the S.O.L.I.D. principles of clean code programming:\nS \u2013 Single Responsibility Principle\nO \u2013 Open-Closed Principle\nL \u2013 Liskov Substitution Principle\nI \u2013 Interface Segregation Principle\nD \u2013 Dependency Inversion Principle\n\nLearn what these mean and how to implement them in JavaScript!\n\nThe full Clean Code playlist: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\nCode: http://codepen.io/beaucarnes/pen/gmowZd?editors=0010\n\nRyan McDermott\u2019s original article: https://github.com/ryanmcdermott/clean-code-javascript\n\nOther resource on SOLID: http://thefullstack.xyz/solid-javascript/\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nRead our Medium publication at https://medium.freecodecamp.com/", "duration": "PT12M8S", "likes": "1523", "views": "65469"}, "comments": [{"topLevelComment": {"author": "Hungry Mind", "text": "No man  , examples are not to the point and technically incorrect.It is old video but should have replace this with the better one.", "likes": 0}}, {"topLevelComment": {"author": "Jan michael Besinga", "text": "O/C has two reasons to change. addflavor and makeIceCream", "likes": 0}}, {"topLevelComment": {"author": "Sai Sagar Sharma", "text": "Does good Open/Closed example violates SRP?", "likes": 0}}, {"topLevelComment": {"author": "crazylegs85", "text": "From what I understand, dependency injection is more about not having 'hidden' dependencies within the function that is being called, but rather explicitly state what dependencies are used. This helps with testability (mocking/stubbing). By injecting the dependency or class you can easily create an object that will give you the behavior or state that is being tested. In the example in the video, the function call is changed to determine the type of protocol used to perform the request. However, you still use different classes in the function that's being called without the ability to mock them and hence only test the actual logic behind your request. Another side benefit of injection is speed. Your tests will run faster if they have a 'canned' answer ready rather than use the actual service (implementation).", "likes": 3}}, {"topLevelComment": {"author": "We are Sisters tube", "text": "Amazing", "likes": 0}}, {"topLevelComment": {"author": "saharis sheme", "text": "You gave a bad example for the Liskov Sibstitution principle, the goal is to sibstitute the Parent class with child class but it needs to work on the reverse direction also, and it is not going to work", "likes": 0}}, {"topLevelComment": {"author": "Carnaru Valentin", "text": "With \"push\" you are modify reference so \"close\" from close to be modified is not respected.", "likes": 3}}, {"topLevelComment": {"author": "Md. Mainuddin", "text": "Thanks a lot for sharing.", "likes": 1}}, {"topLevelComment": {"author": "Bootstrapper", "text": "SOLID seems like an antipattern. Lol is this just super old fashioned? if you did this you would end up with thousands of classes.", "likes": 5}, "replies": [{"author": "Bootstrapper", "text": "@Nordin Bouchtaoui I guess not, I have only written global product distribution services for Nike, payment services for bluecross blue shield, etc\u2026 maybe this comes more into play on like desktop applications or something", "likes": 0}, {"author": "Nordin Bouchtaoui", "text": "I guess you haven\u2019t written complex app. If you don\u2019t follow SOLID your code will be hard to maintain and hard to understand by other developers. So it\u2019s not a problem with small apps, but with big complex apps, you\u2019ll be burnt out.", "likes": 0}, {"author": "madmanX1314", "text": "Yes! Especially young developers don\u2018t get that though. These principles can lead to over-engineered code that is actually more spaghetti than a naive solution that is not especially structured or sophisticated.", "likes": 3}]}, {"topLevelComment": {"author": "Bakaoug4 G4", "text": "Uncle Bob said this representatiof square and rectangle is wrong in his video", "likes": 0}}, {"topLevelComment": {"author": "JS Stallone", "text": "Strange only 33K views, it seems nobody wishes to write clean code and instead prefer \"Spaghetti\"", "likes": 1}, "replies": [{"author": "Sookiez Boly", "text": "more like SOLID is a lot of overcomplication, and actually would make people create billions class/module", "likes": 0}]}, {"topLevelComment": {"author": "Shijil Narayan", "text": "Great Explanation ! Thanks a lot !", "likes": 1}}, {"topLevelComment": {"author": "Marcus Pianco", "text": "Good abstraction :) thankssss!!!! a lot", "likes": 0}}, {"topLevelComment": {"author": "sdsdsdfsdf", "text": "At 6:30 you say that Im able to substitute squares and rectangles? How is it possible if square no longer extends rectangle?", "likes": 2}}, {"topLevelComment": {"author": "Mike Tkachenko", "text": "Very informative video, thank you!", "likes": 0}}, {"topLevelComment": {"author": "Fredddy", "text": "\u041e\u0442\u043b\u0438\u0447\u043d\u043e \u043e\u0431\u044a\u044f\u0441\u043d\u0438\u043b. \u0421\u043f\u0430\u0441\u0438\u0431\u043e \u0431\u043e\u043b\u044c\u0448\u043e\u0435!", "likes": 1}}, {"topLevelComment": {"author": "movax20h", "text": "There are few problems with this video.\n\nFirst these are PRINCIPLES, not RULES. As such you can't label things as BAD and GOOD. More like BETTER and WORSE. Or RECOMMENDED and DISCOURAGED. There are always situations where you need to ignore some principles, or say stop, and know at which point to say stop to making everything to adhere to principles to every last details. The problem with following some of these principles, is that the code and setup on a caller side is bigger than in your \"BAD\" examples, as such it can be actually BAD. One of the examples would be cryptographic libraries. You often want to restrict extensibility or dependency injection abilities, because it makes it easier to mess things up leading to unsecure system. There are many other situations in general code.\n\nAlso, you can make Square be a child class of Rectangle, as long as you put only read only properties / actions into interface, and the modifiable ones into constructor. There are few other options that will still adhear to the L principle, without creation of Shape interface.", "likes": 14}}, {"topLevelComment": {"author": "Mateja Petrovic", "text": "Thanks Beau, awesome series!", "likes": 0}}, {"topLevelComment": {"author": "Anthony L", "text": "Sorry Beau, that's not a good example of Open/Closed.  What if I want to add the ability to delete flavors?  O/C is more about extending functionality, not data manipulation.", "likes": 71}, "replies": [{"author": "gayan ranasinghe", "text": "SOLID explained very poorly", "likes": 0}, {"author": "lilsheep68", "text": "From what I can tell the \"wrong\" example according to you was right if you compared it to a class where  ice cream type was hardcoded into the if statement. I think just adding an element to iceCreamFlavors is sufficient and satisfies O/C. \n\ntl;dr: makeIceCream satisfies O/C but you could have Written it in a way that it didn't.\n\n: )", "likes": 0}, {"author": "Anthony L", "text": "In a strongly typed language, you would use something like an interface/abstract class, and have your module depend upon an implementation that can be swapped in/out.  Here's an example I dug up in javascript: https://github.com/ryanmcdermott/clean-code-javascript/issues/133", "likes": 5}, {"author": "Jim", "text": "I agree completely. This would be better with more explanation, though. I'd do it, but I don't have the concept as fully understood as I'd need!", "likes": 2}]}, {"topLevelComment": {"author": "Oleh Hordiienko", "text": "No time to explain. Just use this http://eslint.org/docs/user-guide/formatters/", "likes": 2}}, {"topLevelComment": {"author": "Forgoroe", "text": "I think I'd rather have the good way of doing things first, then the bad. I'm afraid my brain will somehow stick with the bad just cause it was explained first. Scumbag brain", "likes": 2}, "replies": [{"author": "wacky roo", "text": "Forgoroe it's okay, if you expose yourself to good side enough, you'll completely forget about the bad side whether you saw it first or not. it's al about where you spend your time.", "likes": 7}]}]}