{"video": {"id": "fAAZixBzIAI", "title": "Binary Tree Algorithms for Technical Interviews - Full Course", "description": "Learn how to implement binary tree algorithms and how to use them to solve coding challenges. \ud83c\udf33\n\n\u270f\ufe0f This course was developed by Alvin Zablan from Structy. Check out Alvin's channel: https://www.youtube.com/c/AlvinTheProgrammer\n\n\ud83d\udd17 Learn data structures and algorithms: https://structy.net/\n\n\u2b50\ufe0f Course Contents \u2b50\ufe0f\n\u2328\ufe0f (0:00:00) Course Introduction\n\u2328\ufe0f (0:01:09) What is a Binary Tree?\n\u2328\ufe0f (0:11:28) Binary Tree Node Class\n\u2328\ufe0f (0:14:19) Depth First Values - (https://structy.net/problems/depth-first-values)\n\u2328\ufe0f (0:36:00) Breadth First Values - (https://structy.net/problems/breadth-first-values)\n\u2328\ufe0f (0:47:43) Tree Includes - (https://structy.net/problems/tree-includes)\n\u2328\ufe0f (1:05:35) Tree Sum - (https://structy.net/problems/tree-sum)\n\u2328\ufe0f (1:19:53) Tree Min Value - (https://structy.net/problems/tree-min-value)\n\u2328\ufe0f (1:34:16) Max Root to Leaf Path Sum - (https://structy.net/problems/max-root-to-leaf-path-sum)\n\u2328\ufe0f (1:48:28) Conclusion\n\n\ud83c\udf89 Thanks to our Champion and Sponsor supporters:\n\ud83d\udc7e Wong Voon jinq\n\ud83d\udc7e hexploitation\n\ud83d\udc7e Katia Moran\n\ud83d\udc7e BlckPhantom\n\ud83d\udc7e Nick Raker\n\ud83d\udc7e Otis Morgan\n\ud83d\udc7e DeezMaster\n\ud83d\udc7e AppWrite\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news", "duration": "PT1H48M53S", "likes": "12932", "views": "474977"}, "comments": [{"topLevelComment": {"author": "Alvin the Programmer", "text": "Hey Programmers! Thanks for watching. Head to Structy for more data structure and algorithm tutorials from me. Link available in the description. There you'll find animated explanations and video walkthroughs for data structures and algorithms in JavaScript, Python, and C++.", "likes": 318}, "replies": [{"author": "Goblin Slayer", "text": "GAY", "likes": 0}, {"author": "Rocketman001", "text": "Thank you for the video. Pls which tool did you use for the animation?", "likes": 0}, {"author": "Javier Vallejo", "text": "What a nice course! Thank you Alvin!", "likes": 0}, {"author": "Abhi Rathod", "text": "You're a life saver, Alvin! structy is awesome, keep up the good work!", "likes": 0}, {"author": "Noodkhan Navin", "text": "\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f", "likes": 0}]}, {"topLevelComment": {"author": "Debayan Roy", "text": "I tried the last problem with java:\npublic class MaxRootToLeaf {\r\n    public int current = 0;\r\n    public int getCurrent() {\r\n        return current;\r\n    }\r\n    public void findMaxSumPath(Node root, int sum) {\r\n        if (root == null) return;\r\n        sum = sum + root.data;\r\n        if (root.left == null) {\r\n            if (sum > current) current = sum;\r\n        } else findMaxSumPath(root.left, sum);\r\n        if (root.right == null) {\r\n            if (sum > current) current = sum;\r\n        } else findMaxSumPath(root.right, sum);\r\n    }\r\n\r\n}\n\nmain(){\nSystem.out.println(\"current = \" + maxRootToLeaf.getCurrent());\r\n        int sum = 0;\r\n        maxRootToLeaf.findMaxSumPath(root,sum);\r\n        System.out.println(\"current = \" + maxRootToLeaf.getCurrent());\n}", "likes": 0}}, {"topLevelComment": {"author": "Michael Hamilton", "text": "Had to do a double-take. I was like, \"hey isn't that the guy from App Academy?\"  lol", "likes": 0}}, {"topLevelComment": {"author": "Caleb Taylor", "text": "At 33:47 I\u2019m not sure why his recursive version doesn\u2019t return the empty [] into the right side values array when it assess that C has no left hand value. Shouldn\u2019t there be an empty array present in the result?", "likes": 0}}, {"topLevelComment": {"author": "Shib Mobileverse", "text": "Jeez. Searching for ONNLY BT and NOT BST is a hassle.\nThankfully your video actually is about BT", "likes": 0}}, {"topLevelComment": {"author": "Zain Gulbaz", "text": "Tree Sum :D", "likes": 0}}, {"topLevelComment": {"author": "DomKeon", "text": "For the recursive maxPathSum(), can we not simply do the following?\n\nfun findMaxPathSum(root: TreeNode?): Int {\n\n    if (root == null) return 0\n\n    return root.`val` + maxOf(findMaxPathSum(root.left), findMaxPathSum(root.right))\n}", "likes": 0}}, {"topLevelComment": {"author": "James Yin", "text": "5 minutes into the video and I'm enjoying it already", "likes": 1}}, {"topLevelComment": {"author": "Mohit Yadav", "text": "the depthfirstvalues function doesn't work in vscode and the logic also doesn't make sense. Luckily i found his old video for same thing with better explanation. This video is made with minimal explanation.", "likes": 0}}, {"topLevelComment": {"author": "Troglodyte", "text": "Thank you very much!", "likes": 0}}, {"topLevelComment": {"author": "Dipenparmar12", "text": "Thank you Alvin, That was an amazing tutorial on Binary tree so far.", "likes": 0}}, {"topLevelComment": {"author": "zhipeng wang", "text": "Genius lecture", "likes": 0}}, {"topLevelComment": {"author": "Soulju", "text": "Alvin was born to teach anything coding related I'm certain. Got introduced to him while going through app academy and everytime i see a video of his I'll watch it several times over. Ofc I try to make an independent attempt at understanding but the amount of clarity that comes from him is amazing. Thank you", "likes": 1}}, {"topLevelComment": {"author": "Mohit Yadav", "text": "not sure how leftvalues constant is returning an array at 35:01  Could someone please explain?", "likes": 0}}, {"topLevelComment": {"author": "Ben L", "text": "alvin is the best instructor on this channel. his voice and explanations are clear, and the animations help so much. thank you for this free education", "likes": 2}}, {"topLevelComment": {"author": "I Love Math Academy", "text": "My solution to the last problem\nfunction getMaxRootToLeaf(root) {\n    if(!root) return -Infinity;\n    return root.value + Math.max(0, getMaxRootToLeaf(root.left), getMaxRootToLeaf(root.right))\n}\nthe check for the left node and the right node to be null is not necessary and can be replaced with comparing to zero in the min method.", "likes": 0}}, {"topLevelComment": {"author": "Bruh Moment", "text": "Really really good course. Really good.", "likes": 0}}, {"topLevelComment": {"author": "TURALOWEN", "text": "Thank you!", "likes": 0}}, {"topLevelComment": {"author": "Ahiamata Gabriel", "text": "Thanks You !!", "likes": 0}}, {"topLevelComment": {"author": "Deeznuts", "text": "KING", "likes": 0}}, {"topLevelComment": {"author": "Captain Treibholz", "text": "right? right.", "likes": 0}}, {"topLevelComment": {"author": "olivia zhai", "text": "Thanks for making the video", "likes": 0}}, {"topLevelComment": {"author": "Vincent Hou", "text": "20:50 DFT Time O(N) and Space O(N) complexities. 41:07 BFT Time O(N) and Space O(N) complexities. 52:16 Tree Includes Time O(N) and Space O(N) complexities. 1:11:52 Tree Sum Time O(N) and Space O(N) complexities. 1:25:21 Tree Min value Time O(N) and Space O(N) complexities. 1:42:56 Tree Min value Time O(N) and Space O(N) complexities.", "likes": 0}}, {"topLevelComment": {"author": "ZM", "text": "I really enjoy this tutorials, it is go step by step rather than throw all at once.", "likes": 0}}, {"topLevelComment": {"author": "Alp", "text": "i've learned lot about binary tree  even half of the video , thanks lot", "likes": 0}}, {"topLevelComment": {"author": "Hayk Isayan", "text": "A perfect video. Instantly subscribed!", "likes": 0}}, {"topLevelComment": {"author": "Medo Vasar", "text": "Do we have anything like this good to learn but using C++? Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Devi Krishna K R", "text": "This guy is a legend, idek js but i coded it in python just by watching this video. Thank you so much for putting this gold out here for free", "likes": 0}}, {"topLevelComment": {"author": "Deon Visser", "text": "Nothing short of excellent. Thanks for this video!", "likes": 0}}, {"topLevelComment": {"author": "\u0418\u0432\u0430\u043d \u0421\u0435\u0434\u043e\u0432", "text": "Thank you very much. It was very thoughtful, interesting and useful video", "likes": 0}}, {"topLevelComment": {"author": "Youssef Zekry", "text": "Dude, this course is a hidden gem.\nI always wanted to implement DFS and BFS by myself and no matter how i understood them and visualized it, I didn't know how to put that idea into code and you made it easier than i always thought", "likes": 20}}, {"topLevelComment": {"author": "me", "text": "Hello.\nHow do you type that triple line equal and what does it mean?", "likes": 0}}, {"topLevelComment": {"author": "Shahzeb Ahmad", "text": "MaxPathSum Solution : \n\nint maxSum(Node root){\r\n\t\tif(root==null) return 0;\r\n\t\telse{\r\n\t\t\tint leftSum = root.val+maxSum(root.left);\r\n\t\t\tint rightSum = root.val+maxSum(root.right);\r\n\t\t\treturn leftSum>rightSum?leftSum:rightSum;\r\n\t\t}\r\n\r\n\t}", "likes": 0}}, {"topLevelComment": {"author": "Shahzeb Ahmad", "text": "minVal problem recursive approach : \nHey Alvin can you suggest me what will be the the O(?):  coded in java\nint minVal(Node root){\r\n\t\tif(root ==null)return 100;//I should use Integer.MAXVALUE i guess :) \r\n\t\telse{\r\n\t\t\treturn (root.val>minVal(root.left))?\r\n\t\t\t\t(minVal(root.left)<minVal(root.right))?\r\n\t\t\t\t\tminVal(root.left):minVal(root.right):\r\n\t\t\t\t(root.val<minVal(root.right))?\r\n\t\t\t\t\troot.val:minVal(root.right);\r\n\t\t\t\r\n\t\t}\r\n\t}", "likes": 0}}, {"topLevelComment": {"author": "Daniyal Kabir", "text": "This is golden!", "likes": 0}}, {"topLevelComment": {"author": "Taban Cosmos", "text": "I am here to review this and boy oh boy your teaching style is making me feel like a genius again. Well you are the genius. I feel the transfer of knowledge. I didn't even need to open my editor. Just pen an paper.", "likes": 0}}, {"topLevelComment": {"author": "Phen", "text": "What a great course! For anyone wondering, I was able to follow along in Python despite the code being in JS with minimal issues! Would recommend", "likes": 1}}, {"topLevelComment": {"author": "quandele jingle", "text": "why he trying to make his voice sound deep when its not", "likes": 0}}, {"topLevelComment": {"author": "XZalla", "text": "Great course!", "likes": 0}}, {"topLevelComment": {"author": "Dana", "text": "This is an excellent video, when I sat down and really watched this thoroughly after practicing a bunch of binary tree algos, this helped to solidify even more concepts. <3", "likes": 2}}, {"topLevelComment": {"author": "Alexey Grom", "text": "awesome", "likes": 0}}, {"topLevelComment": {"author": "Shubham Garg", "text": "Awesome work!", "likes": 0}}, {"topLevelComment": {"author": "IntCoder", "text": "Great tutorial!! Thanks for the clear and detailed explanations!", "likes": 0}}, {"topLevelComment": {"author": "Thong Phan", "text": "Thanks for a concise lecture on Binary Tree <3", "likes": 0}}, {"topLevelComment": {"author": "Qing Xie", "text": "Much appreciate!  It\u00b4s very clear and easy to follow!", "likes": 0}}, {"topLevelComment": {"author": "Winnie the Pooh", "text": "Thank you Programmer Alvin! Everything is very clear and easy to follow.", "likes": 0}}, {"topLevelComment": {"author": "xbread31", "text": "How does he comment/un-comment multiple lines of code at once?", "likes": 0}, "replies": [{"author": "Ashraya United", "text": "click ctl + /", "likes": 0}]}, {"topLevelComment": {"author": "JustOneByte", "text": "ur the goat", "likes": 0}}, {"topLevelComment": {"author": "Lucas Criscuolo", "text": "Wow this is amazing. Thank you so much!", "likes": 0}}, {"topLevelComment": {"author": "Rishi Madan", "text": "here at time https://youtu.be/fAAZixBzIAI?t=2068, can somebody tell me how in line 26 and 27 a list of values is returned?", "likes": 0}}, {"topLevelComment": {"author": "Dharmindar Devsidas", "text": "Hi Alvin, Your course is brilliant. I really brushed up a lot of concepts. But one thing that I am noticing can you please clarify that in Tree Min Value example the Tree that you chose is not properly balanced and thus it looses the beauty of Binary Tree. See the root is 5 so on the right there should be a bigger value and on the left it should be smaller value. That will definitely reduce the effort of the algorithm to search the minimum value as half of the tree the complete right side will be avoided while being searched. And similarly all up coming nodes will do the same for each node that divides the child nodes in two portions. So searching for the Minimum will be pretty easy in this case as you have to just keep on searching the left side till the depth. Can be done recursive or iterative. Please see if I am missing something and you can elaborate well.", "likes": 0}, "replies": [{"author": "Just Ave0n ~ Recruiter", "text": "@xbread31 what he said x2", "likes": 0}, {"author": "xbread31", "text": "Sounds like you are talking about binary search tree, which are different from binary trees.  Binary search trees have left sub trees with elements of lesser value than the node and right sub trees with elements of greater value than the node.  So you are right that searching a *Binary Search Tree* is more efficient, but the trees in Alvin's video are specifically *binary trees*, which are unordered trees.", "likes": 0}]}, {"topLevelComment": {"author": "Zhen Zhang", "text": "For ther last question, find max path from root to leaf, just wondering if we are able to use regular iterative method to solve this problem ?\nif anyone could, please let me know", "likes": 1}, "replies": [{"author": "DomKeon", "text": "You can solve it with iterative DFS, my Kotlin implementation is below. The trick is to not only push each node to the stack, but also the sum of the values in the current path (sum of all values we have traversed on our current path):\n\nfun findMaxPathSum(root: TreeNode?): Int {\n\n    if (root == null) return 0\n\n    var maxPathSum = 0\n    val stack = Stack<Pair<TreeNode, Int>>()\n    stack.push(Pair(root, root.`val`))\n\n    while (stack.isNotEmpty()) {\n\n        val node = stack.pop()\n        maxPathSum = maxOf(maxPathSum, node.second)\n\n        node.first.right?.let { stack.push(Pair(it, node.second + it.`val`)) } // if node.right is not null, add it to the stack, with its current path total + its own value\n        node.first.left?.let { stack.push(Pair(it, node.second + it.`val`)) }\n    }\n\n    return maxPathSum\n}\n\n*** Not sure if the BFS approach is possible as it iterates layer by layer. I could not think of a solution.", "likes": 0}]}, {"topLevelComment": {"author": "Asadbek Muxtorov", "text": "the best", "likes": 0}}, {"topLevelComment": {"author": "Steakdriven Entertainment", "text": "I did those three lines in one:     return Math.min(root.value, treeMinValue(root.left), treeMinValue(root.right) )", "likes": 0}}, {"topLevelComment": {"author": "Burger Sandwich", "text": "Great content. \n\nI am sure why you decided to show yourself at 11:32  lol but no offense I think it's a distraction lol.", "likes": 0}, "replies": [{"author": "Just Ave0n ~ Recruiter", "text": "no its not lol", "likes": 0}]}, {"topLevelComment": {"author": "Sloooth", "text": "Why isn't W3Schools explaing this?", "likes": 0}}, {"topLevelComment": {"author": "Usman Qadri", "text": "I literally had an interview that watching and working along the examples in this video helped me pass and get a job offer. Thank you for posting this freeCodeCamp and Alvin for making the content!", "likes": 0}}, {"topLevelComment": {"author": "DuttyBwoy", "text": "my question is where the current.left, current.right or current.val is coming from?\ncurrent is an array element, right? not an object... so I don't understand", "likes": 0}, "replies": [{"author": "Just Ave0n ~ Recruiter", "text": "When he inserts \"root\" inside an array what he is doing is actually inserting the \"OBJECT A INSIDE THE ARRAY\" so root is the object inside the array. Actually current equals to \"a\"    (current == a ), which is the root of the tree so everytime he says (current.left) and (current.right) the current becomes (a.left)=> b  and (a.right)=> c and then (b.left)=> d and  (b:right)=> e and then (c.left) => null and (c.right) => f  \n\n\n                                         a current = root \r\n                              /                                                         \\                   \n current.left=>   b                                                            c <=current.right\r\n                            / \\                                                        /      \\\r\n  current.left=> d   e <=current.right    current.left null     f  <=current.right", "likes": 0}]}, {"topLevelComment": {"author": "Omar Shaikh", "text": "Great video on Binary Trees. I was struggling to solve basic problems in Binary Trees and then i finally stumbled upon this video. The way Alvin walks through the course really drills down the concept in your head and makes you feel so comfortable ! Amazing \ud83d\udcaf", "likes": 0}}, {"topLevelComment": {"author": "Leonardo Teruel", "text": "Very good course", "likes": 0}}, {"topLevelComment": {"author": "Superman Fan", "text": "I don't comment much but man...your teaching skills are awesome. You explain like how a student want a teacher should explain to them.", "likes": 0}}, {"topLevelComment": {"author": "IllogicalStuff", "text": "I am still trying to figure out, how is he able to understand recursion so well, explain it so well, and master it so well. \ud83e\udd7a", "likes": 11}}, {"topLevelComment": {"author": "North Sentinel Island", "text": "I am an App Academy student.  I was like this voice is familiar.", "likes": 0}}, {"topLevelComment": {"author": "Ignacio Leikis", "text": "Awesome course! Is there a way to print combinations / permutations using these binary trees? \nIs it also possible to construct composite trees (trees with nodes with more than two children)?\nThank you!", "likes": 1}}, {"topLevelComment": {"author": "tucc40095", "text": "COULD YOU PLEASE DO VIDEOS ON BINARY SEARCH TREE INTERVIEW QUESTIONS?? \ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"author": "xiang luo", "text": "Alvin is always very clear in his concepts", "likes": 0}}, {"topLevelComment": {"author": "xiang luo", "text": "Alvin! I love you, ever since from a/A", "likes": 0}}, {"topLevelComment": {"author": "spoilka666", "text": "thanks, very helpful", "likes": 0}}, {"topLevelComment": {"author": "Pramod Kumar", "text": "Thank you so much. It really helped me to understand the tree traversal in detail. Thanks again! I understood the DFS and BFS for the first time. Use of Queue and Stack for them is the key to understand the whole.", "likes": 2}}, {"topLevelComment": {"author": "Oliver Jackson", "text": "If you're doing this in python a good alternative to the spread operator is the splat operator so:\n\ndef depth_search_r(root):\n    if root is None: \n        return []\n    val_left = depth_search_r(root.left)\n    val_right= depth_search_r(root.right)\n    return [root.val, *val_left, *val_right] #splat operator flattens list returned", "likes": 6}, "replies": [{"author": "S. Wolf", "text": "Thanks!! Been looking for this", "likes": 0}]}, {"topLevelComment": {"author": "Gergely Csermely", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Billy Best", "text": "One bit that puzzles me on the first recursion example. How does the left values pick up the 'e' ? If it's only adding values based off the left pointer?", "likes": 0}, "replies": [{"author": "Billy Best", "text": "wouldn't 'e' be added to the right values and then joined after?", "likes": 0}]}, {"topLevelComment": {"author": "Mohib", "text": "So does BFS always use queue and recursion a stack?", "likes": 0}}, {"topLevelComment": {"author": "ujjwal jain", "text": "solution of lastone\nconst minSumOfPath=(root)=>{\r\n    if(root==null) return 0;\r\n    let leftNode=minSumOfPath(root.left)\r\n    let rightNode=minSumOfPath(root.right)\r\n\r\n    return Math.max(root.val+leftNode,root.val+rightNode)\r\n}\r\n\r\nconsole.log(minSumOfPath(a))", "likes": 0}}, {"topLevelComment": {"author": "experimental hypothesis", "text": "alvin, the best tutor ever", "likes": 0}}, {"topLevelComment": {"author": "Channel3000", "text": "Using O(n) ,\ud83e\udd2e\ud83e\udd2e don't use the letter O as a variable, it resembles a 0 (zero)\n\nAny other variable name is better", "likes": 1}, "replies": [{"author": "xbread31", "text": "@Channel3000 You too Mr. Ego.", "likes": 0}, {"author": "Channel3000", "text": "@xbread31 have a nice day King of the internet", "likes": 0}, {"author": "xbread31", "text": "@Channel3000 You speak more like a communist with the amount of 'we' you use. Who is 'we'? It's clearly just you and me in this reply chain.", "likes": 0}, {"author": "Channel3000", "text": "@xbread31 we didn't - you are breaking down our responses without context like a good communist\n\"Using O(n) ,\ud83e\udd2e\ud83e\udd2e don't use the letter O as a variable, it resembles a 0 (zero)\"\n\nAny other variable name is better\nHere is our original statement saying \"any other variable name is better\" we didn't ask for a syllabus of your own preconceived notions. \"Every programmer comes across at some point \" is the only speculative statement and it was made by you\n\nDo you need to win an argument you started on a YouTube video? You win", "likes": 0}, {"author": "xbread31", "text": "@Channel3000 \u00a0You are speculating and misinterpreting.  You speculate that Big O is my notation, when it's a notation that every programmer comes across at some point in their careers. I didn't invent this notation. You are assuming that since prototype pollution exists, a whole mathematical notation has to change because *you* didn't know what Big O Notation is.  If computer scientists have been using it for decades while talking about algorithms and code runtimes, how come none of them have had this problem like you are having?  I also didn't give you an opinion, I gave you a fact of why the guy in the video used that particular notation.  It's because it's the *universal* method to write time/space complexities! You're not going to go into a coding interview and argue with the interviewer that they shouldn't use O(n) when every single person that writes with software uses it!?!?!", "likes": 0}]}, {"topLevelComment": {"author": "P C Suryaprakash Rao", "text": "@Alvin, you are best, your voice and the way you explained is just fabulous.", "likes": 0}}, {"topLevelComment": {"author": "Camilo Castro", "text": "Dude, the way you explain this is impecable. Great job, please keep making videos like this \u270c\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Omaran Bazna", "text": "thank you very much", "likes": 0}}, {"topLevelComment": {"author": "Prateek Goyal", "text": "amazing explanation! Thank you so much!!", "likes": 0}}, {"topLevelComment": {"author": "Aaqib Hussain", "text": "Loved this course! Thank you for this.", "likes": 0}}, {"topLevelComment": {"author": "tanuj sharma", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"author": "SIOMARA CINTIA Pantarotto", "text": "Fantastic! I learned a lot with this tutorial. Thanks for sharing your knowledge with us. God bless you forever! \u2764\ud83d\udcaf\u2764", "likes": 0}}, {"topLevelComment": {"author": "Michael Vigato", "text": "Well, I am 26 and, thanks to this video, recursion just clicked in my brain for the first time in my life. Thanks", "likes": 1}}, {"topLevelComment": {"author": "Anwar", "text": "Great way of explaining binary treees", "likes": 0}}, {"topLevelComment": {"author": "Eugeniu Rata", "text": "to complicate the things, for the Max sum of paths, I'd like to also get the actual node values in an array. How would I do this?", "likes": 0}}, {"topLevelComment": {"author": "dcts", "text": "Loved that course, your teaching style is very clear and really easy to follow \ud83d\udcaf\ud83c\udf89", "likes": 0}}, {"topLevelComment": {"author": "Prasojo Jiwandono", "text": "thank you alvin, and free code camp", "likes": 0}}, {"topLevelComment": {"author": "Deep Mistry", "text": "We must go deeper", "likes": 0}}, {"topLevelComment": {"author": "Arnon Marcus", "text": "Using the value of a node when visiting instead of when pushing doesn't always produce the most optimal solution - for \"sum\" it doesn't matter, but for \"includes\" it does matter if using depth-first, because the \"target\" may at a shallow level, and if it's sub-tree is very large it'll have to be traversed in-full before realising that the root of that sub-tree already was the target. That's not an asymptotic-complexity issue though, as that only deals with worst-case, but it IS a real-world consideration for performance, so should not be just relegated to a \"matter of style\" - writing the code that does the optimal thing may be slighly more ugly but will be more performant in many cases, so the correct way of presenting that is as a performance vs. cleanliness tradeoff, not a stylistic choice.", "likes": 0}}, {"topLevelComment": {"author": "ChrisJ Fox", "text": "In using the LIFO Stack for Depth-First Search, it seems redundant to me that the removal of nodes from the Stack is the indication that its been visited. Decision criteria must exist to determine which got added to the Stack next to begin with so why not declare it visited based on the conditional then?", "likes": 0}}, {"topLevelComment": {"author": "Victor Von Doom", "text": "so , there's this girl who keeps asking me how to invert a binary tree. well ?", "likes": 0}}, {"topLevelComment": {"author": "Gabriel Fermy", "text": "This is a very greate tutorial and explaination. This video describe how a programmer mind set should be when facing problems in step by step.", "likes": 0}}, {"topLevelComment": {"author": "Keidon", "text": "Good video but I'd like to see step by step in debugging to make it even more clear", "likes": 2}}, {"topLevelComment": {"author": "J M", "text": "fantastic explanations.  i would like some more information on when and where i would use these in the real world.", "likes": 0}}, {"topLevelComment": {"author": "Mwee", "text": "Alvin = immediate upvote.", "likes": 0}}, {"topLevelComment": {"author": "Rokevh", "text": "\"push the children if they exist\" sounds hilarious out of context", "likes": 0}}, {"topLevelComment": {"author": "Stargazing", "text": "Excellent!!!!!!", "likes": 0}}, {"topLevelComment": {"author": "Benjamin Taylor", "text": "*Every* while loop can be converted to a recursion.", "likes": 0}}, {"topLevelComment": {"author": "Benjamin Taylor", "text": "const bredthFirstRecursive = (queue, values) => {\n  if (!queue.length) return values\n  const last = queue.pop()\n  values.push(last)\n  if (last?.left) queue.unshift(last.left)\n  if (last?.right) queue.unshift(last.right)\n  return bredthFirstRecursive(queue, values)\n}", "likes": 0}}, {"topLevelComment": {"author": "tagakosmos", "text": "make videos on maps queues hash and all the other  dsa topics", "likes": 0}}, {"topLevelComment": {"author": "Golu", "text": "Why everything in javascript?", "likes": 0}}, {"topLevelComment": {"author": "Khai No", "text": "This guy is the best data structure and algorithm instructor I have known so far\u2026.", "likes": 1}}, {"topLevelComment": {"author": "Manish Mishra", "text": "Excellent!!", "likes": 0}}, {"topLevelComment": {"author": "AJ", "text": "Alvin is the king!! Waiting for more videos form you!", "likes": 0}}, {"topLevelComment": {"author": "Inna Bulatova", "text": "Hi, I am a bit lost at 32:46. How come leftValues recursive solution would give you 'e' node if it is a right node on the left side?", "likes": 1}, "replies": [{"author": "Inna Bulatova", "text": "@Greg thank you!", "likes": 0}, {"author": "Greg", "text": "leftValues ends up being the return of calling the whole traversal function on the node it is passed, not just other leftValues calls. So leftVaues gets its value from [root.val {b}, ...leftValues{d}, ...rightValues{e}].", "likes": 1}]}, {"topLevelComment": {"author": "Mohamed Siddic", "text": "hey man you rocking, since 3 years i am learning data structure and algorithm.. i never feel this much understanding.", "likes": 0}}, {"topLevelComment": {"author": "Rajmanov", "text": "I just what to add the code in kotlin for the Iterative case for the Max root to leaf Path Sum problem:\nfun maxRootDFSIterative(root: TreeNode<Int>?):Int{\n    var maxSumPath = Int.MIN_VALUE\n    val stack = ArrayDeque<TreeNode<Int>>()\n    root?.let { stack.push(it) }\n    while (stack.isNotEmpty()){\n        val currentNode = stack.pop()\n        currentNode.right?.let {\n            it.value += currentNode.value\n            stack.push(it)\n        }\n        currentNode.left?.let {\n            it.value+=currentNode.value\n            stack.push(it)\n        }\n        if (currentNode.right==null && currentNode.left== null){\n            maxSumPath = max(maxSumPath, currentNode.value)\n        }\n    }\n    return maxSumPath\n}", "likes": 1}}, {"topLevelComment": {"author": "Md Harun", "text": "thanks , very easy to understand", "likes": 0}}, {"topLevelComment": {"author": "Anand Bhat", "text": "You guys are simply the best. Thank you very much for these wonderful gems.", "likes": 0}}, {"topLevelComment": {"author": "Ash", "text": "Hi, I'm thinking to buy full Structy course, Anyone wants to share it?", "likes": 0}}, {"topLevelComment": {"author": "Mike Chung", "text": "very soothing voice... good explanations as well", "likes": 0}}, {"topLevelComment": {"author": "Ifeanyi Okonkwo", "text": "I love when he says Alright", "likes": 0}}, {"topLevelComment": {"author": "Rene Corrales", "text": "I think this looks better for the last one \ndef maxPath(root):\r\n    if root == None: return 0\r\n    return root.val +  max([maxPath(root.right), maxPath(root.left)])", "likes": 0}, "replies": [{"author": "Rajmanov", "text": "It won't work for negative values", "likes": 1}]}, {"topLevelComment": {"author": "Ramesh Kumar", "text": "Which editor is this?", "likes": 1}}, {"topLevelComment": {"author": "Ramesh Kumar", "text": "Thank You Alvin..", "likes": 0}}, {"topLevelComment": {"author": "Santosh Vaza", "text": "Alvin, you are the best. Thank you", "likes": 0}}, {"topLevelComment": {"author": "Dawid Szyszko", "text": "You are getting my money, I'm being this course.", "likes": 0}}, {"topLevelComment": {"author": "\u042d\u043d\u0435\u0441 \u042d\u0441\u0432\u0435\u0442 \u041a\u0443\u0437\u0443\u0434\u0436\u0443", "text": "How to do the magic trick (selecting and editing both 'a' in  one line)  at 12:48", "likes": 1}}, {"topLevelComment": {"author": "ShivTheDev", "text": "Hi Sir,\nPython design patterns\u2026 is there a course already published?", "likes": 1}}, {"topLevelComment": {"author": "Anna M", "text": "I love that he goes over all the common mistakes people often make on the first try! It's very normalizing to see him show those mistakes, makes me feel much better lol, and also the explanations of those mistakes dig deeper and improve our understanding.", "likes": 8}}, {"topLevelComment": {"author": "Kris Meister", "text": "The shift operation runs in O(n) time. Why is your breadth first example running in O(n) instead of O(n^2) ?", "likes": 1}}, {"topLevelComment": {"author": "Sudhanshu Verma", "text": "Awesome!!!", "likes": 0}}, {"topLevelComment": {"author": "Shivam Rastogi", "text": "Hello, Why did the 3rd solution at 1:19:37 took less time to execute than the other two solutions?", "likes": 1}}, {"topLevelComment": {"author": "Sami Haroon", "text": "Covered this video in one night :D \nAmazing by the speed and quality of teaching from Alvin. \nReally helpful stuff, and recommend Alvin for getting prepared for DS&A.", "likes": 6}}, {"topLevelComment": {"author": "Viresh Ranjan", "text": "Alvin takes good care of his chipmunks, i.e. his viewers \ud83e\udd23", "likes": 0}}, {"topLevelComment": {"author": "Radhika Manivannan", "text": "I loved your Graph Algorithm. Could you please add more to it, more like an extension. Union find, problems like course schedule etc", "likes": 0}}, {"topLevelComment": {"author": "Anshul Choudhary", "text": "I'm getting wrong output for BFS. The output is similar to DFS. Can anyone point out the error?\n\ndef breadthfirst_iterative(root):\n    queue=[root]\n    result1 = []\n    while len(queue)>0:\n        curr=queue.pop()\n        result1.append(curr.val)\n        if curr.left: queue.append(curr.left)\n        if curr.right: queue.append(curr.right)\n    print (result1)\n\nbreadthfirst_iterative(a)", "likes": 0}, "replies": [{"author": "Andrew Hansbury", "text": "@Anshul Choudhary try at the beginning \" from collections import deque\" . \nthen in your first line  of your function change it to \"queue = deque([root]).\nNow in your while loop you can instead do \"curr = queue.popleft()\"\n\nthis is a better implementation of a queue in python", "likes": 0}, {"author": "Anshul Choudhary", "text": "seems like pop(0) was needed", "likes": 1}]}, {"topLevelComment": {"author": "Anupam Pandey", "text": "Thank you Alvin!", "likes": 0}}, {"topLevelComment": {"author": "Pankaj Chaurasia", "text": "Thank you so much for all the efforts that you put through in getting this knowledge out for free. !", "likes": 0}}, {"topLevelComment": {"author": "Anupam Pandey", "text": "Hey @Alvin, is the time and space complexity of treeIncludes problem O(n) and O(logn) respectively for the recursive depth first", "likes": 0}}, {"topLevelComment": {"author": "Yogi Bear", "text": "Thanks a lot dude! you made it so intuitive to solve these tree problems, just a suggestion I think last problem can be also be solved like this:\nfunction maxPathSum(node) {\r\n    if (!node) return -Infinity;\r\n\r\n    return node.val + Math.max(0, maxPathSum(node.left), maxPathSum(node.right));\r\n}", "likes": 1}, "replies": [{"author": "Serdar Kuyuk", "text": "@YONAH BYARUGABA AGRE but this might work\ndef max_path_sum(root):\r\n    if root == None : return 0\r\n    return root.val + max(max_path_sum(root.left), max_path_sum(root.right))", "likes": 0}, {"author": "YONAH BYARUGABA", "text": "This might not work. What happens when maxPathSum(node.left) and maxPathSum(node.right) evaluate to negative values, like say -5, -6? You end up returning 0.            Math.max(0, -5, -6), which would be wrong", "likes": 0}, {"author": "CGuru", "text": "That was what i thought before watching the solution", "likes": 0}]}, {"topLevelComment": {"author": "Snoudoubts", "text": "I\u2019m in awe of how good this guy is in every video.", "likes": 0}}, {"topLevelComment": {"author": "VanshPundir V_P_R", "text": "Ahhh thank you so muuuuchhhhhhh\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Sam", "text": "20:33 \u2014 Space complexity is actually O(h) where h = height of a tree", "likes": 4}, "replies": [{"author": "YONAH GRAPHICS", "text": "@scott nsiah That's a good explanation. I get you now!", "likes": 0}, {"author": "scott nsiah", "text": "The max for that example is 3 however as the tree grows so does the max number so in that case it's O(h) not O(1). However this is only true in ideal conditions, if the tree was unbalanced then the height tends to approach n hence it's also fair to consider the space complexity as O(n). The worst case of such an unbalanced tree would be a linkedList looking tree for example. So both O(n) and O(h) are right, but O(h) or even O(logn) are better answers for most real binary trees.", "likes": 0}, {"author": "YONAH GRAPHICS", "text": "I don't think so. Remember the maximum number of nodes that can be on a stack at any particular time is 3, so I think it is actually O(3) === O(1)", "likes": 0}]}, {"topLevelComment": {"author": "Yogesh Vasudevan", "text": "Thank you Alvin. You are a great teacher.", "likes": 0}}, {"topLevelComment": {"author": "Jesse Singer", "text": "hmm so a linked list is a specific case of a binary tree", "likes": 0}}, {"topLevelComment": {"author": "gagag96", "text": "This was a great video and very well organized. I finished watching the whole video while coding the problems on Visual Studio Code in Python and now feel I have a good grasp of BFS, DFS, especially using recursion which I struggled with before. Thank you Alvin!", "likes": 14}, "replies": [{"author": "Kowshik Thopalli", "text": "did you code binary tree in python yourself? or is his code available in python somewhere\n? TIA", "likes": 0}]}, {"topLevelComment": {"author": "M Mohammad Rizwan Hussain", "text": "It will be better to use a black screen instead of white , it helps most of us to see it even at night.\ud83d\ude01", "likes": 1}}, {"topLevelComment": {"author": "anit sarker", "text": "You are awesome dude !", "likes": 0}}, {"topLevelComment": {"author": "Nikolas Mal\u00edk", "text": "Can someone tell me please the usecase for this?", "likes": 0}}, {"topLevelComment": {"author": "Code-0X", "text": "\ud83d\ude42\n  / \\\n\ud83d\ude42\ud83d\ude42\nBinary tree", "likes": 0}}, {"topLevelComment": {"author": "Observed", "text": "This guy teaches so well", "likes": 1}}, {"topLevelComment": {"author": "Prudhvi Manda", "text": "beautifully explained. Thank you!", "likes": 0}}, {"topLevelComment": {"author": "CDMusicGroup", "text": "looking forward to more videos; especially videos about optimized versions of algorithm solutions", "likes": 0}}, {"topLevelComment": {"author": "Myogatino VI", "text": "I love your videos, super clear and intuitive! Thank you! Also love Structy! \nBut in this video, there's a small mistake during the explanation of Depth first values. Around 32:26, the leftValues should be ['b', 'd'] and the rightValues should be ['e', 'c', 'f']. Of course the final result will be the same. Nothing wrong with the code. \nCan't wait for more of your algorithm videos! <3", "likes": 1}}, {"topLevelComment": {"author": "Atif Bashir", "text": "Where were you Alvin when I was doing my Degree? Amazing content bro", "likes": 0}}, {"topLevelComment": {"author": "lulusaikou", "text": "Thank you Alvin, now I'm a fan of recursion\u2764", "likes": 0}}, {"topLevelComment": {"author": "Im Mythic", "text": "Hi bro! I followed the whole video until the end and finally did the last exercise by my own and it worked! Thanks for the lessons , i love you and wish you a Merry Christmas \u2665", "likes": 0}}, {"topLevelComment": {"author": "S. Kyle Deleon", "text": "such a clear and helpful resource! you explain things so well!!!", "likes": 0}}, {"topLevelComment": {"author": "Erik Bustos", "text": "Thank You a lot Alvin for the great Course. Definitively Structy is the best place to prepare efficiently for interviews.", "likes": 1}}, {"topLevelComment": {"author": "Eugene Kriulin", "text": "Legends never die \u2013 and you are about to become one \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"author": "Jean Rodrigues", "text": "IDE", "likes": 0}}, {"topLevelComment": {"author": "Jean Rodrigues", "text": "Floppy", "likes": 0}}, {"topLevelComment": {"author": "macjakjak", "text": "omg it's Alvin, I love Alvin.", "likes": 0}}, {"topLevelComment": {"author": "Jean Rodrigues", "text": "Floppy", "likes": 0}}, {"topLevelComment": {"author": "Bern", "text": "I wish my university would leave me alone and let me watch this stuff.", "likes": 1}}, {"topLevelComment": {"author": "Squid Sim", "text": "Alvin this is an excellent video. I wish you were my teacher when I started programming!", "likes": 1}}, {"topLevelComment": {"author": "Java With Hawa", "text": "such a great video, thank you so much!", "likes": 0}}, {"topLevelComment": {"author": "DELETED", "text": "If only this video was in C, i could watch all the video since it's in javascript, i don't understand the code so just went over the explanation part", "likes": 1}}, {"topLevelComment": {"author": "DELETED", "text": "I appreciate the video however if only you could do the coding part in a more manual language like C because every programmer knows C but not every programmer knows whatever language you used in that code. Please make your future videos in C language. Thanks!", "likes": 1}}, {"topLevelComment": {"author": "Afraz Ahmad", "text": "Millions times thanks. Really great tutorial", "likes": 0}}, {"topLevelComment": {"author": "TAKSH Patel", "text": "\ud83d\udc4c\ud83d\udc4c\ud83d\udc4c\ud83d\udc4c\ud83d\udc4c\ud83d\udc4c", "likes": 0}}, {"topLevelComment": {"author": "rodrigo reyes", "text": "i really want to get this down", "likes": 0}}, {"topLevelComment": {"author": "Benhard Sim", "text": "Alvin is my favorite tutor in free code camp, i always watch the video he make no matter what is it about. His video about dynamic programming and graph theory is really good , you guys should check it out. \ud83d\udc4d", "likes": 6}, "replies": [{"author": "Sz", "text": "@Jitendra kumar ,, His video about dynamic programming and graph theory is really good\"", "likes": 0}, {"author": "Jitendra kumar", "text": "Yes he is very good , have you seen his dp tutorial?", "likes": 0}]}, {"topLevelComment": {"author": "Davit Kvaratskhelia", "text": "I just watched day before to my interview and I was called today to be hired. Going to donate full of my first salary.", "likes": 4}}, {"topLevelComment": {"author": "Muhammed Shahan", "text": "1:19:33 - \"Eventually, everything's gonna leave\" - that hurt </3", "likes": 0}}, {"topLevelComment": {"author": "Shaunak Galvankar", "text": "Amazing videos alvin,got the clarity of thought needed for solving problems recursively and also dynamic programming doesn't seem a giant anymore", "likes": 22}, "replies": [{"author": "Arnold Sanders", "text": "ahh man , this is exciting to hear.", "likes": 0}]}, {"topLevelComment": {"author": "Zooming Morj", "text": "right", "likes": 0}}, {"topLevelComment": {"author": "Neebu And So Can You", "text": "Alvin is the GOAT", "likes": 1}}, {"topLevelComment": {"author": "Zor", "text": "Your org is a best incubator for baby programmers like me. Such a most valuable place ! i can say \" thank you for teaching me\" everyday until the rest of my life.\n\nwhile True:\n      print(\"Thank you for teaching me\")", "likes": 0}}, {"topLevelComment": {"author": "Mehmet Emin", "text": "As usual, a great video from Alvin. Thanks", "likes": 0}}, {"topLevelComment": {"author": "jorge bautista", "text": "Great video, as always.", "likes": 0}}, {"topLevelComment": {"author": "Malik Boutan", "text": "if only it was in java, oh well close enough", "likes": 0}}, {"topLevelComment": {"author": "Mishkat Hossain", "text": "Alvin is back in the game!!!!", "likes": 0}}, {"topLevelComment": {"author": "Yilmaz Durmaz", "text": "do we really need to check for \"null of left and right\" for root to leaf? I think returning \"-Infinity\" would be enough because \"Math.max(-Infinity,-Infinity)\" already returns \"-Infinity\".\n\nBy the way, instead of forming a tree focusing only on how to traverse tree makes this video a great resource. I didn't know traversing would be this easy since I first learned about forming the tree and it was confusing enough.\n\nThanks again.", "likes": 4}}, {"topLevelComment": {"author": "Denis Khakimov", "text": "This guy is the best! I just wanted to brush up on this topic and stumbled upon this precious lecture.  Now I want to watch all his lessons \ud83e\udd13\ud83d\udc4d", "likes": 62}}, {"topLevelComment": {"author": "OMNZero", "text": "3rd Failure2Edit \nHow Marvelous Rite Well Enough\nhttps://youtu.be/fAAZixBzIAI\nRoom With AbosLute Zero Libros B As =4+2bod Con Nunca Sole \u2022\u25cf\u25cb\u25cf\u2022 Book Author \u2022\u25cb\u25cf\u25cb\u2022 Powder Phenomenon \nLarisa Honey We Hope U R Self Publishing Ur Authored Works \n\ud83d\ude18\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\nAhhhh Thank U Mirror Sphere Whisp\nUnix = Roman Catholic\nLinux Distribution Clones = Christianity Denominations\nB This AcCur8Well Enough4Actuality2Relative Reality\nThomas Guides+Companion Chilton\nWhat Might Ye C B \"Convenient\"\nBiCicle Wheele SpokeZ\nBridge Connecting \u2022/-\\+|3\u2022 \n\u2022A+B\u2022\nWoW Cryptic Rite\nAtlantis\nhmmmm\nany connections covid/\\ble\nmotion sensor ... every time _ Richey Rich Where B Sniffer Snout2Nostril Whiffer Sampler Analyzer \n2nd\u00d74Failure2Edit\nhttps://youtu.be/y5sXWKK_gFM\nFailed2Edit\nDistancing4Civilization\nPopularity Contest Favor Flavoring\nRite Global Kin\nFederal Fiduciary Even\nFamilia5Acre Parcel What2Due When U Gattah \" GoGo \" WoW Face Could Ey CoWork4US2PurgeChewChew+SipSip\nWhat R EyeBall Masks\nU Coulda Utilized 15 From Fontana2Barstow maw dipqib WoW face con blinking winking ojos lidcovers\nObservatory Dome TeleScope Home\nHint Hint\nTelePhone\nTelepathic\nAny Connections\nTelePort\nWhere B CoVid/-\\ble Sign Post\nTax DeDeDeCuctable Rite F.I.R.S. F.D.i.C.\nAssurances-Inn-Insurances\nRite Global Kin\nB Prepared \nDisney Song PlayZ\nPrePaired\nPrePaid\nPreNump\nPrenUmp\nhmmmmm\nCoVid\nCoWork\nCoSubject\nCoTeamster\nchuggah chuggah chuggah \nwait4it\nnope\nchew chew\nnay4bileblast2out-in-inn-arena\nsheeeeeeeeeeeeesh\nhttp://www.chiltondiy.com/\nThomas Guide\n2021:10:10~29:5_2Busy4imobsolete De De De Deleted From CoVidSite Far From Corona TwilightZone Sight\nPopular Reference Material Only\nCousin Rob SayZ Under MicroScope CoVid Corona\nIT Appears As Un Crown \nY Has'T We Never CoVided MicroScope StillPhoto Image Vogue Vogue Vogue Kodak Moment Polaroid Or Perhaps MotionPicture Shhhhh Silent MotionPicture ShowTime Stravaganza Even \nShrug\nSnapZ\n\ud83d\ude18\ud83d\ude01\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\ud83d\ude42\ud83d\ude43\nEconomic Stabilizers \ud83d\ude02\ud83e\udd23\ud83d\ude02\ud83e\udd23\ud83d\ude02\ud83e\udd23\ud83d\ude02\ud83e\udd23\ud83d\ude02\ud83e\udd23\ud83d\ude02\nHitorical Hysterical DrumHum An Crystal Goblet Tibetan Menditation Bowl Musical\ni m cobreatheing how well enough\nmiles away", "likes": 0}}, {"topLevelComment": {"author": "Jayant", "text": "Hey when we are using shift function aren't we increasing time complexity there because shift has O(n)  time complexity ?", "likes": 2}, "replies": [{"author": "Jayant", "text": "@khu_maar ohh I see, actually in my interview same thing happened but back then I didn't knew about this reason. Thanks for this info!", "likes": 0}, {"author": "khu_maar", "text": "I think he addressed that by saying depending on what data structure (or language, because some languages have this thing called deques) you are using, time complexity could vary. If you are talking about using js built-in \"shift\" array method, yes, then it's O(n). However, you can use a singly linked list to construct your queue and implement a shift method in that class, which would give you a constant time for adding to the end and popping from the beginning. If you are worried about time constraints during your interview to implement a queue using SLL, then you can always ask your interviewer if it's ok to assume that this shift is a method implemented in an SLL class.", "likes": 2}]}, {"topLevelComment": {"author": "Dinia Adil", "text": "For the last problem, you could consider the null nodes as your base case but return 0 rather than negative infinity. In that way they would not contribute to the path sum, and you won't have to add leaf nodes in your base case as both paths would return your current node value + 0.\nHowever, this only works knowing that the node values are positive.", "likes": 13}, "replies": [{"author": "Raj Bhandari", "text": "Thanks! I was wondering the same thing.", "likes": 0}]}, {"topLevelComment": {"author": "M Remy", "text": "He's good. As a non technologist, I can now catch much more BS from programmers on our projects.", "likes": 0}, "replies": [{"author": "dragonore2009", "text": "Our scrum master doesn't know anything about programing at all, so it's frustrating explaining stuff to them.  I wish they would require scrum masters and product owners to at least take a basic course on software lingo and programming concepts for non programmers.", "likes": 0}]}, {"topLevelComment": {"author": "masternio", "text": "Was waiting for this", "likes": 0}}, {"topLevelComment": {"author": "Emanuel C", "text": "Thanks for this amazing content!", "likes": 0}}, {"topLevelComment": {"author": "EN Views", "text": "hii I have just joined BE CSE what is path way to big programmer", "likes": 2}, "replies": [{"author": "Perrissonwhitestone   Gmail Com", "text": "\ud83d\udc46for full guidance", "likes": 0}]}, {"topLevelComment": {"author": "EN Views", "text": "hi", "likes": 0}}, {"topLevelComment": {"author": "Daniel Crego", "text": "I like the way Alvin presents this topic.\nAlthough, I think the problems and the solutions are very general and not bound to bin-trees at all.\nI'm missing the problems that perform better by using bin-trees instead of other solutions.\nAlso, I think that some examples from the video were a good chance to use some patterns to separate traversal algorithms from the logic to solve the problem.", "likes": 0}, "replies": [{"author": "C", "text": "@EN Views pathway to big programmer drink milk eat rice. Enjoy", "likes": 0}, {"author": "EN Views", "text": "hii I have just joined BE CSE what is path way to big programmer", "likes": 0}]}, {"topLevelComment": {"author": "Night Fury", "text": "thank you, as always ;)", "likes": 1}}, {"topLevelComment": {"author": "jay surya", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"author": "Bhargav Pandya", "text": "Listening to the phrase: \"Heyyy Programmers, Alvin here\" makes me so happy!", "likes": 73}, "replies": [{"author": "Bhanu Datta", "text": "Yeah, but 'string' instead of 'phrase' would have been better i guess", "likes": 0}, {"author": "Bhargav Pandya", "text": "@EN Views dude don\u2019t call me sir haha! Even I\u2019m just a learner. \n\nI personally love MacBooks. Get a MacBook Air if it fits your budget. Even second handed Macs are very capable and value for money. \nBut if you like windows or linux, go with a Thinkpad that fits in your budget.", "likes": 1}, {"author": "EN Views", "text": "@Bhargav Pandya  ok thank you sir, which laptop should I choose for studies \n(specification of it sir)", "likes": 0}, {"author": "Bhargav Pandya", "text": "\u200b@EN Views Also make sure you focus a lot on Data Structures and Algorithms once you get comfortable with a language.", "likes": 1}, {"author": "Bhargav Pandya", "text": "\u200b@EN Views You need to decide what field do you wish to go ahead with. Some examples being: Web Development (Which itself has Front End, Backend, FullStack branches), Android development, iOS, ML etc\nfor that you will have to try out some languages like Python, Javascript (which are the ones I personally recommend) and more and try some frameworks as well. See where your interest takes you. \n\ndon't get too overwhelmed by the number of choices and waste a ton of time behind each of those.. try to decide relatively quickly on one field and then make progress only in that one or two fields.", "likes": 1}]}, {"topLevelComment": {"author": "Eidmone", "text": "Do you have a course that I can buy for data structures and algorithms??? You explain it very well!!", "likes": 0}, "replies": [{"author": "Eidmone", "text": "@Alvin the Programmer Thanks!", "likes": 0}, {"author": "Alvin the Programmer", "text": "Hey! Thanks for the kind words. Yup - you can check out my product Structy (link in the video description)!", "likes": 0}]}, {"topLevelComment": {"author": "Biswajit Singh", "text": "We need one marathon series on array problems as well  \ud83d\ude05\ud83d\ude05", "likes": 1}}, {"topLevelComment": {"author": "Jay Rollo", "text": "Alvin is the best teacher dude.", "likes": 1}}, {"topLevelComment": {"author": "Saurabh Nambiar", "text": "i am jus loving the fact that these are in Js\n...Thankyou sir!", "likes": 3}}, {"topLevelComment": {"author": "Nusret Aliyev", "text": "what a great channel, what a great topic and explanations) <3", "likes": 0}}, {"topLevelComment": {"author": "P. Wingert", "text": "Most useless interview question ever: Using proof by induction proves the existence of the binary tree structure.! Luckily, I did my course in computability and the second course in formal language theory. But I feel sorry for those others who simply didn't have such an abstract theoretical education.", "likes": 0}}, {"topLevelComment": {"author": "leandro abbas", "text": "thanks alot for this video", "likes": 0}}, {"topLevelComment": {"author": "Prashant Nigam", "text": "The dude is back!", "likes": 1}}, {"topLevelComment": {"author": "vaishnav", "text": "This is Gold", "likes": 0}}, {"topLevelComment": {"author": "ImmaGiveAid", "text": "Wow, this even helped me in my lumberjack career", "likes": 10}}, {"topLevelComment": {"author": "Judas The Pious", "text": "my head hurts..", "likes": 0}}, {"topLevelComment": {"author": "Dime K.", "text": "\"breath first traversal cannot be implemented recursively...\" ha ha, good to know.. I was trying to implement it in that way like for one hour with no success, obviously :D", "likes": 2}, "replies": [{"author": "Diryon Mora", "text": "In C++ it can be something like this:\n\n#include <vector>  // It is much better a deque, but in C++ pop_left() does not return the removed element.\n#include <string>\n#include <iostream>\n\nclass Node\n{\npublic:\n  [...]\n  std::string data = \"\";\n  Node *left = nullptr;\n  Node *right = nullptr;\n}\n\nclass Tree \n{\npublic:\n  [...]\n  void bfs();\n  [...]\nprivate:\n  [...]\n  void bfs(std::vector<Node *> &nodes);  // Note the pointer to the vector\n  Node *root;\n}\n\nvoid Tree::bfs() \n{\n  std::vector<Node *> nodes {root};\n  bfs(nodes);\n}\n\nvoid Tree::bfs(std::vector<Node *> &nodes)\n{\n  std::cout << \"[\" << nodes[0]->data << \"] \";\n  if (nodes[0]->left)\n    nodes.push_back(nodes[0]->left);\n  if (nodes[0]->right)\n    nodes.push_back(nodes[0]->right);\n  nodes.erase(nodes.begin());\n  if (nodes.size() > 0) // The recursive call and its base case here.\n    bfs(nodes); \n  else\n    std::cout << std::endl;\n}\n\nNote that if the vector is not received by memory, the recursive BFS function will be extremely memory inefficient. It is therefore implemented iteratively in high-level languages.\nSorry if my English is not understood; it's not my native language.", "likes": 3}]}, {"topLevelComment": {"author": "Jexter Jackson", "text": "I really like how u explain things. U move at a good pace and lvl of detail for a beginner like me. One thing that stuck out to my OCD tho, was the \"f-Node\" in ur trees. I can't help but think that by having a null space between \"e\" and \"f\" that u added an unnecessary amount of complexity to ur code. The left to right search is probably counting the null space between \"e and f\" and making it necessary to make the extra null distinction to the code, isn't it? \nI'm a noob, but my instincts are screaming, so \"from the mouth of babes, mayhaps?", "likes": 1}, "replies": [{"author": "EN Views", "text": "hii I have just joined BE CSE what is path way to big programmer", "likes": 0}]}, {"topLevelComment": {"author": "Harsh Rajput", "text": "Even before starting the video, I knew it's gonna be Alvin", "likes": 2}}, {"topLevelComment": {"author": "Innocent Mutusva", "text": "Love this guy, keep on doing this", "likes": 1}}, {"topLevelComment": {"author": "Bhargav Pandya", "text": "YES! Looking at the thumbnail emojis itself I knew I am gonna enjoy this video! Alvin is back!", "likes": 2}}, {"topLevelComment": {"author": "Blitz Park", "text": "Alvin Fan here\ud83d\udd90\ufe0f\ud83d\udd90\ufe0f\ud83d\ude4b\ud83d\ude4b", "likes": 1}}, {"topLevelComment": {"author": "Vinod Kumar", "text": "This video just showed at the right time, gonna finish this. Thanks \ud83d\ude0a", "likes": 1}}, {"topLevelComment": {"author": "Kribbs", "text": "Alvin for UN Secretary General for a world of peace and programmers with strong DSA knowledge", "likes": 0}}, {"topLevelComment": {"author": "Aayushi Mittal", "text": "What a timing!! \ud83d\ude0c", "likes": 0}}, {"topLevelComment": {"author": "Code with RSV", "text": "These are some premium quality tutorials.", "likes": 11}, "replies": [{"author": "Perrissonwhitestone   Gmail Com", "text": "\ud83d\udc46 for full tutoring", "likes": 1}]}, {"topLevelComment": {"author": "coding master008", "text": "We want linux... bash...", "likes": 0}}, {"topLevelComment": {"author": "hmmm", "text": "no way!!!! literally found his vids on dp and graphs last week, watching this asap.", "likes": 2}}, {"topLevelComment": {"author": "spread", "text": "You're  comming  in clutch, i have an interview  tomorrow", "likes": 0}}, {"topLevelComment": {"author": "Moe Saleh", "text": "That was refreshing..Thanks", "likes": 0}}, {"topLevelComment": {"author": "Anton Cid", "text": "Your narration is great, thank you for the educontent", "likes": 2}}, {"topLevelComment": {"author": "\u0404\u0432\u0433\u0435\u043d \u0411\u043e\u043d\u0434\u0430\u0440\u0454\u0432", "text": "Alvin for president!", "likes": 1}}, {"topLevelComment": {"author": "Dime K.", "text": "Oh man... I need to watch this course.. I struggle with recursion :D", "likes": 2}, "replies": [{"author": "Perrissonwhitestone   Gmail Com", "text": "Msg for proper tutoring sections", "likes": 0}]}, {"topLevelComment": {"author": "Coder Kid", "text": "Nice Content", "likes": 1}}, {"topLevelComment": {"author": "Peachii", "text": "Not all heroes wear capes. This channel is just too good.", "likes": 1}}, {"topLevelComment": {"author": "Nilesh Saini", "text": "This is so helpful.... \u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Hendra Prasetya", "text": "Good quality course \ud83d\udc4d\ud83d\udd25\ud83d\udd25", "likes": 0}}, {"topLevelComment": {"author": "Tata pramod", "text": "I'm a simple man, I see a freecodecamp video and immediately like it and go through it.", "likes": 10}}, {"topLevelComment": {"author": "Pranav", "text": "Legendary channel", "likes": 1}}, {"topLevelComment": {"author": "Son", "text": "Please make a full video on n-queen problem and backtracking \ud83d\ude4f", "likes": 1}}, {"topLevelComment": {"author": "Ahmed Khan", "text": "It clears out most of fugs in my mind", "likes": 0}}, {"topLevelComment": {"author": "Ahmed Khan", "text": "Awesome Explanation", "likes": 0}}, {"topLevelComment": {"author": "dlysele", "text": "Seems useful. I am making an app with complex features and this came in just handy.", "likes": 3}}, {"topLevelComment": {"author": "Manoj Kothwal", "text": "I love this channel.", "likes": 0}}, {"topLevelComment": {"author": "Shorts", "text": "I was waiting for your video.. Your content is superb man.. \ud83d\udd25", "likes": 5}}, {"topLevelComment": {"author": "Pol", "text": "Great work", "likes": 0}}, {"topLevelComment": {"author": "Flash\u26a1", "text": "Detailed Stl course with practice please!", "likes": 1}, "replies": [{"author": "Perrissonwhitestone   Gmail Com", "text": "\ud83d\udc46 for full guidance", "likes": 0}]}, {"topLevelComment": {"author": "Deepak Thakur", "text": "Thank u so much", "likes": 0}}, {"topLevelComment": {"author": "Calvin T", "text": "How many companies is this guy doing algos for?", "likes": 0}}, {"topLevelComment": {"author": "Heavy Gyan", "text": "Heavy Gyan channel ko", "likes": 0}}, {"topLevelComment": {"author": "Heavy Gyan", "text": "Support karo", "likes": 0}}, {"topLevelComment": {"author": "Rishi Raj", "text": "Great thanks for great content... always.", "likes": 0}}, {"topLevelComment": {"author": "sikandar shah", "text": "Happy to be here, don't mind being first or second. But I think I might be 1st", "likes": 1}}, {"topLevelComment": {"author": "Harimangal Pandey", "text": "2 days earlier I was just looking for this. \ud83d\ude02 Here we are thanks \u2764\u2764\u2764", "likes": 2}, "replies": [{"author": "Flash\u26a1", "text": "They have a hack over each and everyone's mind!", "likes": 0}]}, {"topLevelComment": {"author": "Fahad Bawazir", "text": "Good", "likes": 0}}, {"topLevelComment": {"author": "Mg Kyaw Zay ya", "text": "Legend is coming back again.", "likes": 109}}, {"topLevelComment": {"author": "app developer's and related channel", "text": "me!", "likes": 0}}, {"topLevelComment": {"author": "Sayantan Goswami", "text": "Thank you \u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Danny Osorio", "text": "Thank you for this!", "likes": 1}}, {"topLevelComment": {"author": "Ayaan", "text": "Thanks u all just give some links for ml and ai videos", "likes": 0}}, {"topLevelComment": {"author": "Strange Toucane", "text": "Love this channel\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Sahil Kumar", "text": "I am first to be here !!", "likes": 0}}, {"topLevelComment": {"author": "\u05de\u05d9\u05db\u05dc", "text": "firsttt\ud83d\ude43\ud83d\ude43\ud83d\ude43", "likes": 0}}, {"topLevelComment": {"author": "xdx x", "text": "1 st", "likes": 0}}, {"topLevelComment": {"author": "Maurice Yang", "text": "First!", "likes": 0}}]}