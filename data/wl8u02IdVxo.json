{"video": {"id": "wl8u02IdVxo", "title": "Sets (data structure) - Beau teaches JavaScript", "description": "See how the set data structure can be implemented. Also learn about the es6 Set object.\n\n\nCode: \n\ud83d\udd17 http://codepen.io/beaucarnes/pen/dvGeeq?editors=0012\nMore information:\n\ud83d\udd17 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nFollow us on twitter: https://twitter.com/freecodecamp\nLike us on Facebook: https://www.facebook.com/freecodecamp\nFollow Quincy on Quora: https://www.quora.com/Quincy-Larson", "duration": "PT10M23S", "likes": "305", "views": "28815"}, "comments": [{"topLevelComment": {"author": "Aar\u00f3n Argotte L\u00f3pez", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"author": "Leonardo Diehl", "text": "You could've just made an extended version of the ES6 Set.\nThe Set was implemented optimized looking to the peculiarities of the particular Data Structure.\nIt is much more performant when maintaining uniqueness and removing items.\n\nInstead of your approach, we can make an ExtendedSet, using Set as the basis for our extra methods.\n\nconst union = function(otherSet) {\n  const _union = new Set(this)\n\n  for(const otherSetItem of otherSet) {\n    _union.add(otherSetItem)\n  }\n\n  return _union\n}\n\nconst difference = function (otherSet) {\n  const _difference = new Set(this)\n\n  for (const otherItem of otherSet) {\n    _difference.delete(otherItem)\n  }\n\n  return _difference\n}\n\nconst intersection = function (otherSet) {\n  const _intersection =  new Set()\n\n  for (const item of this) {\n    if (otherSet.has(item)) {\n      _intersection.add(item)\n    }\n  }\n\n  return _intersection\n}\n\nconst isSuperSet = function (otherSet) {\n  for (const otherItem of otherSet) {\n    if (!this.has(otherItem)) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction bindExtensionMethods() {\n  this.union = union\n  this.difference = difference\n  this.intersection = intersection\n  this.isSuperSet = isSuperSet\n}\n\nfunction ExtendedSet(...args) {\n  const extendedSet = new Set(...args)\n  bindExtensionMethods.call(extendedSet)\n  return extendedSet\n}\n\nconst myExtendedSet = new ExtendedSet([1, 2, 3, 4, 5])", "likes": 1}}, {"topLevelComment": {"author": "Taha Saleh", "text": "Why do we use \"var collection = []\" instead of \"this.collection = []\"?", "likes": 0}, "replies": [{"author": "Leonardo Diehl", "text": "To not expose the collection property outside. Its manipulation must only be done through the add and remove methods.\nIf we exposed it, declaring through this.collection, someone could add a duplicated item through instance.collection.push(x).", "likes": 0}]}, {"topLevelComment": {"author": "Visual Intelligence", "text": "I was expecting you would discuss some performance metrics. A big part of why sets are useful is their computational complexity", "likes": 0}}, {"topLevelComment": {"author": "Buncha", "text": "as others have pointed out it looks like the difference method is only half done. But otherwise great tutorial, thanks!", "likes": 5}}, {"topLevelComment": {"author": "jahanzaib shahid", "text": "bullshit explanation", "likes": 0}}, {"topLevelComment": {"author": "Ismael Pamplona", "text": "this.difference(otherSet){\n    let differenceSet = new mySet();\n    let firstSet = this;\n    let secondSet = otherSet;\n    firstSet.values().forEach((e) => {\n      if(!secondSet.has(e)){\n        differenceSet.add(e);\n        firstSet.remove(e);\n        secondSet.remove(e);\n      };\n    });\n    secondSet.values().forEach((e) => {\n      !firstSet.has(e) && differenceSet.add(e);\n    });\n    return differenceSet;\n  };", "likes": 1}, "replies": [{"author": "Buncha", "text": "good catch, yeah i noticed that too, you have two loop through both sets to find all the differences, right?", "likes": 0}]}, {"topLevelComment": {"author": "P Pow", "text": "Very useful tut.  Thank you!\n Is there a reason that you are using var instead o const?\nAlso, I would have used a newer fat arrow syntax:\n    values1.forEach( (e) => {\r\n            unionSet.add(e);\r\n    });", "likes": 1}}, {"topLevelComment": {"author": "vaskort", "text": "Thanks a lot for this! Not a biggy but you forgot to define index in line 25, it will fail silently in codepen if you try to switch to a ES6 Class", "likes": 1}}, {"topLevelComment": {"author": "Yumin Gui", "text": "It seems that \"mySet\" would have serious performance issues.", "likes": 2}}, {"topLevelComment": {"author": "TheXmaxX Max", "text": "Why dont you use prototypes when adding functions (methods)??", "likes": 3}, "replies": [{"author": "akshay gupta", "text": "I guess because that might confuse people who don't yet know the concept of prototype. The focus here is to teach DS in JS.", "likes": 2}]}, {"topLevelComment": {"author": "Andriy Kuts", "text": "Your difference method is not full, because if you have two sets, for example: [1,2,3] and [1,5], your method will return only [2,3] but the full difference should be [2,3,5]. Am I right?", "likes": 9}, "replies": [{"author": "Danny Tran", "text": "//symmetric difference between two sets S and T is the union of S \u2013 T and T \u2013 S.\n    this.symmetricalDiff = setB =>{\n        let setA_B = this.difference(setB);\n        let setB_A = setB.difference(this);\n\n\n        return setA_B.union(setB_A);\n\n\n    }", "likes": 4}, {"author": "Travis Clarke", "text": "In set theory, [ 2, 3, 5 ] would actually be referred to as the \u201csymmetric difference\u201d (https://en.m.wikipedia.org/wiki/Symmetric_difference)", "likes": 1}, {"author": "Fernando Fleury", "text": "Yes you are right. You need to check the length of both sets to define which one you will use to compare the differences.", "likes": 2}]}]}