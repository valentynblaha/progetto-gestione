{"video": {"id": "NPtnp0w_mmA", "title": "Clean Code: Objects - Beau teaches JavaScript", "description": "Learn the best practices of how to write clean objects in JS. This video tutorial shows you how easy is to make Javascript objects that are readable, reusable, and refactorable. \n\nThe full Clean Code playlist: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\nCode: \n\ud83d\udd17 http://codepen.io/beaucarnes/pen/BpPevo?editors=0012\nRyan McDermott\u2019s original article:\n\ud83d\udd17 https://github.com/ryanmcdermott/clean-code-javascript\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nFollow us on twitter: https://twitter.com/freecodecamp\nLike us on Facebook: https://www.facebook.com/freecodecamp\nFollow Quincy on Quora: https://www.quora.com/Quincy-Larson", "duration": "PT5M49S", "likes": "274", "views": "12435"}, "comments": [{"topLevelComment": {"author": "Isaac Muniz", "text": "Why using Getters and Setters are the right way of doing it?\nOf course I can imagine the reason, but I would love to get an elaboration on it by someone more pro.", "likes": 0}}, {"topLevelComment": {"author": "ouf cena", "text": "Variables should use protection!", "likes": 0}}, {"topLevelComment": {"author": "Keith Corona", "text": "when getName() is used in the good way as return {getName(){return name;}};  -- I am not sure where the function getName was declared; is it declared in in the return object without the function keyword? I see where it is being called in the return obj., but is this it being declared as well?", "likes": 0}, "replies": [{"author": "Cliff Stamp", "text": "Yes, it is shorthand for objection declaration. JS knows that you mean there is a property getName which is the function getName as defined. \n\nIf you do this for example :\n\ntest=function() {return {logHello(){console.log(\"hello\")}}};\n\nand you do \n\nz=test()\n\nthen z is an object which has a property logHello, which points to the function logHello, thus you can do this \n\nz.logHello", "likes": 1}]}, {"topLevelComment": {"author": "Otter.pro", "text": "Another (and possibly the official if not the better way) is to use `class` in ES6, with private member variables inside its `constructor()`.   See http://stackoverflow.com/a/28165599", "likes": 0}, "replies": [{"author": "Travis Johnson", "text": "You are correct. \u00a0However, it's also useful to know the other ways because many of the codebases you work with in the real world aren't ES6, and the companies using them have no interest in upgrading, so the more you understand the easier your job will be. \u00a0Objects in javascript can be slightly overwhelming because there are so many different creation patterns, all with various pros/cons.", "likes": 0}]}, {"topLevelComment": {"author": "Aditya Hajare", "text": "We can't delete employee.name because now it is put inside the closure of an anonymous object (which is being returned by the Employee constructor). \n\nJust a silly question, if i end up with an object with several functions having values in their closures, will it be a bad practice? I mean performance wise or something?\n\nBTW, I just saw your entire clean code series and it is wonderful. It has really inspired me to go through your Beau teaches JavaScript series. Really excited to learn more cool stuff from that series.. Thank You very much for making  awesome series. Cheers!", "likes": 0}, "replies": [{"author": "Beau Carnes", "text": "Thanks! I don't think an object with several functions with values is necessarily bad practice or low performance. It just depends on the actual usage.", "likes": 1}]}, {"topLevelComment": {"author": "David da Silva Cont\u00edn", "text": "This is the \"GOOD\" way to create and store in memory a function for each public method for each instance. So if you have 1000 instances of Employee, and you want Employee to have 6 public methods, you are creating 6000 functions and storing them in memory. Instead of just using the same 6 functions stored in a prototype.\n\nAnd it doesn't forbid you from doing `employee.getName = () => undefined`. In JavaScript, if you don't use a 'class' as you should, you are going to get 'unexpected' behaviour.", "likes": 9}}, {"topLevelComment": {"author": "YeaDude SupBro", "text": "God damn you type fast son", "likes": 0}}, {"topLevelComment": {"author": "trapped cat", "text": "Treehouse and Code School Js courses are awesome, but this youtube series is actually better and more thorough in my opinion.", "likes": 4}}]}