{"video": {"id": "kEitFAY7Gc8", "title": "Elm crash course - Building unbreakable webapps fast", "description": "Elm is a delightful functional language for reliable webapps. It compiles to JavaScript, has great performance, no runtime exceptions, and can be embeded easily into existing JS projects without the need for huge rewrites or time investment.\nWe'll be taking a practically focused crash course tour of Elm, ideally you'll walk away being able to put Elm into production either from scratch or in an existing project.\n\nMario is an Australian living in London, where he organises the Elm London Meetup group. He believes technology should make life simple and joyful, and enjoys being able to prove so.\n\nTalk by Mario Rogic (@realmario) at the Reactivate London meetup.\n\nRecorded by Pusher.com. Check them out if you want awesome real-time tools, and subscribe to the their YouTube channel for more talks!\n\nPusher's channel: https://www.youtube.com/channel/UCoyqucxoFXDFnh3khD0rjUg\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org", "duration": "PT45M53S", "likes": "1822", "views": "86432"}, "comments": [{"topLevelComment": {"author": "Tamika", "text": "Elon musk Larry page Mark Zuckerberg \ud83d\udc4e\ud83c\udffe =Elmo", "likes": 0}}, {"topLevelComment": {"author": "MozesCodes", "text": "Great explanation, pity the syntax is ugly AF", "likes": 0}}, {"topLevelComment": {"author": "Amit Bhagat", "text": "Very clear explanation. JavaScript stack comparison with Elma (@ 9:21) is a great help for me. Thanks a lot for such a great talk.", "likes": 0}}, {"topLevelComment": {"author": "Oliver YT", "text": "Wow, this talk is quite helpful. Some things got much more clear and I got more understanding about Elm. Elm looks even better now.\nThanks!", "likes": 0}}, {"topLevelComment": {"author": "Virak Ngauv", "text": "Awesome talk! I don't have a need to learn or develop in Elm yet but even so, the talk was good enough that I watched it from start to finish!", "likes": 0}}, {"topLevelComment": {"author": "Lucas A", "text": "I'm learning now, but the documentation is not clear, I can not find anywhere how to create a hover effect for a fucking button", "likes": 0}}, {"topLevelComment": {"author": "Anonymous Anonymous", "text": "As somebody who needs to learn elm at a base level within the next month and a half, and as somebody who will be basically screwed if I dont learn elm within that timeframe, I very much appreciate this talk.", "likes": 5}, "replies": [{"author": "Marcelo Silva", "text": "like anything, takes time to unlock your brain capacity but then it's just pleasure", "likes": 0}]}, {"topLevelComment": {"author": "Fly Lord", "text": "This was an awesome talk. Really appreciate this knowledge.", "likes": 0}}, {"topLevelComment": {"author": "NuncNuncNuncNunc", "text": "There's always talk about how language X will ease developer pain, but rarely do  I hear my pains addressed. Immutable types, funtional syntax, type checking, cool, but what about declarative UI, model checking between client and server, opinionated error handling.  Virtually every app is a reinvention, so why do we always need to work our way up from the stone age each time we start a new app?", "likes": 0}}, {"topLevelComment": {"author": "Bilal Rasool", "text": "Beautiful explanation. simple and understandable", "likes": 2}}, {"topLevelComment": {"author": "Bryan Chance", "text": "First time I've heard of Elm. I'm shocked that able to grasp the whole concept. This never ever happened to me. :) I don't know the Elm syntax other than what you presented here but I'm confident Elm is my new favorite language.  I think credit has to Mario.  Thank you. \nI looked at Elixir and other FP languages, they all gave me such a bad headache.  LOL :_)", "likes": 10}, "replies": [{"author": "Loki", "text": "The concepts are great but unfortunately elixir buffs can't properly teach what is happening in toddler speak so a lot of people can't fully understand it. I might make some vids about it just to reinforce my knowledge about elixir", "likes": 0}]}, {"topLevelComment": {"author": "DevDive", "text": "Why do people often pronounce HTML like 'heytch TML' ?", "likes": 0}, "replies": [{"author": "DevDive", "text": "@Ghost Bluster Not true. The official pronounciation is \u02c8e\u026at\u0283 (aytch), however since writing my question I learned that haitch /\u02c8he\u026at\u0283/ is acceptable pronounciation regionally in England. No idea which regions, but good enough for me \ud83d\ude09", "likes": 0}, {"author": "Ghost Bluster", "text": "Thats how you pronounce h in english. In french we say 'ashe' instead of 'heytch'. German is 'ah'", "likes": 0}]}, {"topLevelComment": {"author": "Infinitus", "text": "Where can I get the source code of the live slide.", "likes": 0}}, {"topLevelComment": {"author": "Nicola Larosa", "text": "Awesome job, thanks a lot. <3", "likes": 0}}, {"topLevelComment": {"author": "LeSaboteur3981", "text": "Really good, interesting and entertaining Speak! This was my first touchpoint with Elm and a great overview", "likes": 2}}, {"topLevelComment": {"author": "Peter Ryb\u00e1r", "text": "Almost the same just simpler and in JS/TS - gitlab.com/peryl/peryl", "likes": 0}}, {"topLevelComment": {"author": "Bee Shep", "text": "Very helpful!", "likes": 0}}, {"topLevelComment": {"author": "Ed Leonard", "text": "Really good talk and light intro. Much appreciated", "likes": 2}}, {"topLevelComment": {"author": "F", "text": "FYI: SemVer works like this: MAJOR.MINOR.PATCH", "likes": 3}}, {"topLevelComment": {"author": "Jason Hunter", "text": "Jesus, get to the frigging point;)", "likes": 0}}, {"topLevelComment": {"author": "Dennis-steven Moffit", "text": "4 minutes into the video, still no info. going elsewhere already", "likes": 0}}, {"topLevelComment": {"author": "Noko Moko", "text": "my god what a weird language i feel like my brain is overheating", "likes": 0}}, {"topLevelComment": {"author": "seegybogy", "text": "12:04  Ya man...me. Right here....You got one guy here \ud83d\ude29", "likes": 0}}, {"topLevelComment": {"author": "I love tech", "text": "Sorry. I'm not sold. This is another project to transpile something to JS. Better time would be invested into Wasm or helping Clojure Script. There's just too many programming languages now days. We need general purpose languages... Not DSL languages.", "likes": 2}, "replies": [{"author": "Alex Jones", "text": "Why not both? The way I see it, more options are better. For me, a general purpose language can never be as good as a domain specific language can be. If there are 10 general purpose languages, then some might be better for my front-end use case but worse for my back-end, or better for mobile but worse for web, or any other such combinations. If instead there are 10 languages per domain, I can create a stack of languages and technologies that are uniquely suited to my particular problem/product. Of course, there is a compromise in the form of needing to use multiple different languages for the same product, and e.g. keeping parity between web and mobile may be harder, but whether or not that's worth it to you is part of the design process. I could go off on why I think general purpose languages are a fool's errand, but I respect some people's desire to have them around, and fully support the devs making them and the ones \"selling\" them.", "likes": 3}]}, {"topLevelComment": {"author": "mydemon", "text": "First 5:00 minutes are a complete waste of time. Not a word was useful.", "likes": 1}}, {"topLevelComment": {"author": "Hector Lopez", "text": "31:54 is literally why I'm here \ud83d\ude02\nBut I must say this video is getting me more excited to work with it", "likes": 6}, "replies": [{"author": "Degenerate Scumbag", "text": "I go around from company to company planting masses of Elm in their codebase, and then quitting just to spread the joy.", "likes": 3}]}, {"topLevelComment": {"author": "Gregory Boswell", "text": "Welcome to the world of compilers and almost writing real code...", "likes": 2}}, {"topLevelComment": {"author": "DiggOlive", "text": "really nice videography", "likes": 0}}, {"topLevelComment": {"author": "Krishnadas PC", "text": "is elm can be used in backend?", "likes": 0}, "replies": [{"author": "Anton Rich", "text": "No, however, there are a couple of close alternatives. Gleam lang (statically typed language on the BEAM machine), Haskell (though Haskell is stretch because it is more advanced), Hamler (which is Haskell on the BEAM machine), and maybe something else.", "likes": 0}, {"author": "Nicola Larosa", "text": "Watch the video and find out that the answer is no.", "likes": 1}]}, {"topLevelComment": {"author": "Tom\u00e1\u0161 Chaloupka", "text": "Brilliant talk! This is great and clear explanation even for someone like me as I've never written anything in Elm.", "likes": 15}}, {"topLevelComment": {"author": "Stephen Davies", "text": "Nice, but 0.19 Elm broke loads of backward compatibility so this doesn't really work for latest Elm 2019", "likes": 16}, "replies": [{"author": "absynce", "text": "I didn't have problems upgrading to 0.19. It took a few hours of going through the compiler errors and fixing things. When I finished, it just worked! In my experience, doing a rare update like that is so much nicer than trying to upgrade any JavaScript library or framework.\n\nI think a lot of the complaints about that upgrade were from folks who used the reverse-engineered \"native modules\" against advice.", "likes": 4}]}, {"topLevelComment": {"author": "flexairz", "text": "5:47 to get to business", "likes": 21}}, {"topLevelComment": {"author": "Angad Singh", "text": "Any idea where I can find the source code for the interactive presentation?", "likes": 3}, "replies": [{"author": "Angad Singh", "text": "@flexairz tried finding it, even went to the guy's GitHub.", "likes": 1}, {"author": "flexairz", "text": "Google?", "likes": 0}]}, {"topLevelComment": {"author": "Vishal Srinivas", "text": "I dont get it. How can it not have any runtime exceptions. Runtime Exceptions are mostly logical errors made by the programmer that are syntactically otherwise correct. Nothing stops the programmer in making logical errors. For example nothing stops me from giving an input 5/0 to the compiler. Nothing stops me from making Encoding errors, Regex parsing errors. I dont know how this claim is even valid. Probably elm can be marketed something like, Compiler catches most of the runtime exceptions internally and gives out a readable output without stopping the execution.\n\nWould like to suggest a few pointers for beginners trying out elm 0.19 :\n -> toString no longer exists, it comes from String module now, Use String.fromInt\n -> beginnerProgram is changed to Browser.sandbox in elm 0.19", "likes": 1}, "replies": [{"author": "Quang T\u00f9ng", "text": "Because every error will have an explicit type. For example, parseInt return a Maybe Int (like option types in many language) not an Int. It has 2 kind of values, one is Int, one is like null but you cant forgot to handle it because you cant get the value of Int inside of it without some kind of unwrap operators. Every functions that can cause error will have types like this. \nOr you can use function like \"map\" to not deal directly with it, or function like \"andThen\" for multiple Maybe that you dont know right away how to unwrap them properly. \nIt feels like you have a try catch mechanism without built in to the language, It works for simple cases like null handling and more sophisticated error types. The technical term for it is what people often called Monad but monad is more general than just error handling.", "likes": 5}, {"author": "Tj Holowaychuk", "text": "Vishal Srinivas because you have to handle those cases, if a regexp fails to parse you don\u2019t get an exception bubbling, you just have a result or error that you have to handle", "likes": 5}]}, {"topLevelComment": {"author": "Dmitrii Zolotuhin", "text": "is some one eating on the background?\nis it kitchen actually or what", "likes": 5}}, {"topLevelComment": {"author": "Code on Ice", "text": "I wish you guys can create a elixir and phoenix fullstack tutorial, it would so beneficial to us. Thank you", "likes": 17}}, {"topLevelComment": {"author": "Gabriel Klappenbach", "text": "Amazingly clear explanation of the Elm runtime!", "likes": 3}}, {"topLevelComment": {"author": "Sim", "text": "Too much bla bla.", "likes": 1}, "replies": [{"author": "cgarcia", "text": "it\u2019s called a talk.", "likes": 10}]}, {"topLevelComment": {"author": "Srini R", "text": "I Wonder, why 5 dislikes.. Very good diagram flow & explanations.", "likes": 3}, "replies": [{"author": "Maciej", "text": "https://guide.elm-lang.org/ this is the answer", "likes": 0}]}, {"topLevelComment": {"author": "Ahmed Tarek", "text": "3:07 that hand fart \ud83d\ude02", "likes": 70}}, {"topLevelComment": {"author": "Jo\u00e3o Fernandes", "text": "An updated version of this simple counter can be found here: https://guide.elm-lang.org/#a-quick-sample", "likes": 1}}, {"topLevelComment": {"author": "bocckoka", "text": "I think Noredink had a runtime exception, they left a Debug.crash in the prod code if I recall correctly.", "likes": 3}, "replies": [{"author": "John Michael Cipriano", "text": "Lol, you weren't kidding! To be fair, they did counter with \"In that period, our legacy JS code has crashed a mere 60,000 times.\"", "likes": 4}]}, {"topLevelComment": {"author": "Rafael", "text": "Yes. It's ridiculous how bloated are the depencies of an NPM project.", "likes": 18}, "replies": [{"author": "3nt3", "text": "@Simon WoodburyForget no?", "likes": 0}]}, {"topLevelComment": {"author": "moofymoo", "text": "This looks like Elm version 0.18.\nCurrent version is 0.19, but it have breaking changes and shitty documentation - elm architecture section is just a draft and examples from v0.18 doesn't work. that's kinda big red flag to not use it for anything at work (unless you plan to leave company and your enemies will have to support it :D)", "likes": 3}, "replies": [{"author": "John Michael Cipriano", "text": "I don't totally disagree, but I think it's a hard standard to apply since so much of the web-app-front-end world has that quality. (e.g. the need for jscodeshift on long-lived react projects)", "likes": 0}]}, {"topLevelComment": {"author": "Axea", "text": "Elm is nice for two reasons:\n1 Its syntax is simpler then for example clojure\n2 It is about web apps, so if you are modern front-end dev right now, so elm's concepts are very close", "likes": 6}, "replies": [{"author": "Gabriel Rabello", "text": "@I love tech But you only need one job  though. As a professional web developer, i think learning Elm can bring a lot of value.", "likes": 0}, {"author": "I love tech", "text": "Clojure syntax fits onto one page. We need general purpose languages. I'm hesitant to learn a language that can only produce web apps. I need backend, frontend, concurrency, web apps and phones.", "likes": 3}]}, {"topLevelComment": {"author": "Milad", "text": "Nice presentation. and great work explaining complicated concepts in simple terms.\nHowever, your example of the \"Worst possible scenario\" was very overpromised and kinda fake .\nI would be surprised if there's any application written in any language in which, if you go and introduce a new function ( or feature) and add a new switch case, would break anything,\nYour example proved nothing. Why would that code break anyway ? \nYou know what I mean ? \nIf I go into my application, written in Angular, find a switch case and add a new case, how's that gonna break anything in runtime? UNLESS that case is actually being met in the runtime, which could happen in your ELM example too.\nYou didn't add a new feature, you just created an empty function somewhere floating in the code base and praising ELM because nothing broke.\nHow about adding some new business logic . ?\nHow about playing a little bit with the markup and adding some new markup to see if something will break ? \nBasically, codes break because of change in the business logic, not because of introducing new unused functions.\nCool talk any way.", "likes": 5}, "replies": [{"author": "Ondrej Pinka", "text": "I am not sure I am understanding you correctly, I will try anyway. He added a new feature, thus business logic, which actually broke the app. Fortunately, it was compiler - before any runtime could happen - which told him so. Compiler told him to fix the broken code. He *explicitly* chose just to return the model without any change. If he chose to update the model, the compiler would again not let him any further if he broke something else (for example, trying to add an Int and a String). Elm guarantees that all the paths your runtime takes are handled in some way or fashion. It's then up to you how.", "likes": 0}, {"author": "John Michael Cipriano", "text": "He tells an anecdote along those lines at 43:33, but I agree, it'd be cool to see a live example.\n\nI haven't used Elm yet, but I can tell you that static typing is in general as he describes. There's a large-ish set of problems that you can catch quickly without having to reload your app. Often they appear during refactoring, since you need to update each reference to whatever you changed. Finding them manually takes longer, and there's no way to be sure you haven't missed any.\n\nUnit testing helps there, but it's a classic \"Turing tarpit\" -- lacking some language feature, the poor dev is doomed to endlessly reimplement it.\n\n(The catch, IMO, is that static types add friction in the early stages of getting an idea down, with the amount depending on how \"meta\" the idea is.)", "likes": 1}]}, {"topLevelComment": {"author": "Jorge Ricaldi", "text": "omg, I just saw a video about Elixir and its syntax was a little rare for me,  but this one is really a pain in the brain.", "likes": 5}, "replies": [{"author": "XPopCornX", "text": "@Ondrej Pinka Any IDE I have ever used for Java has done that. Tooling for Elm in general is lackluster. Maybe it's difficult to make good tooling since it compiles to JavaScript, but maybe then it's better to stick to JavaScript based frameworks.", "likes": 0}, {"author": "Ondrej Pinka", "text": "@XPopCornX Talking about compiled Java vs compiled Elm - you need to compile both to get the runtime. It seems to me what you are comparing is the tooling - your code editor for Java has a feature which is able to detect certain types of issues even before compiling. I believe there is a similar tooling (editor plugins) for Elm too - editor would highlight problematic code \"as you type\" without need to actually go to the console and manually compile.", "likes": 2}, {"author": "XPopCornX", "text": "@Gabriela Sartori I don't think the elm messages are any better than those of the java compiler. These compiler messages give the reason for the error, you don't need to print the code in the console because it is marked red in the code. You will fix these as you write, you don't even have to look at the console, and alt enter will often fix it for you. With elm you have to wait for compilation and then start scrolling through messages.", "likes": 0}, {"author": "Gabriela Sartori", "text": "@XPopCornX you are saying that because you are not used to any functional language such as Haskell or ML. And friendly error message is way better than to cryptic messages when compiler detect something wrong, you can't even argue about this. You are right about not having debugger, but I have never needed that, when I need to debug I use time machine to see the application states after each received message, it's way better.", "likes": 8}, {"author": "XPopCornX", "text": "@Gabriela Sartori Elm has a horrible syntax. It is difficult to see what is going on and there is no debugger. You have to do a lot of manual searching. They have even made it a talking point that the console guides you when making mistakes, but what this really means is that there will be a lot of errors when coding. If the language was good you wouldn't have to rely on the console telling you what to do.", "likes": 0}]}, {"topLevelComment": {"author": "striker865", "text": "Love it!!", "likes": 0}}, {"topLevelComment": {"author": "Nil Alexandr Shchelov", "text": "Here's one recent account of Elm in production (alonside React), which I recommend to anyone interested in the topic: \"Elm at Scale: More Surprises, More Pain Points\" https://youtu.be/uQjivmLan0E", "likes": 0}}, {"topLevelComment": {"author": "CorpsewieldeR", "text": "Yay for more Elm exposure!", "likes": 50}, "replies": [{"author": "Lennox Roger", "text": "A trick: watch movies on flixzone. Been using them for watching loads of movies lately.", "likes": 0}]}]}