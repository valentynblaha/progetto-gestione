{"video": {"id": "gANDd4l-G5U", "title": "Symbols - Beau teaches JavaScript", "description": "Learn how Symbols work in JavaScript ES6!\n\nCode:\n\ud83d\udd17 http://codepen.io/beaucarnes/pen/ZLQEWx?editors=0011\n\nMore info:\n\ud83d\udd17 http://www.2ality.com/2014/12/es6-symbols.html\n\ud83d\udd17 http://exploringjs.com/es6/ch_symbols.html\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nFollow us on twitter: https://twitter.com/freecodecamp\nLike us on Facebook: https://www.facebook.com/freecodecamp\nFollow Quincy on Quora: https://www.quora.com/Quincy-Larson", "duration": "PT3M4S", "likes": "496", "views": "24322"}, "comments": [{"topLevelComment": {"author": "Claudio Alejo Alarc\u00f3n", "text": "Thanks for the explanation!", "likes": 0}}, {"topLevelComment": {"author": "Ivan Che", "text": "I think you can think of symbol as JavaScript attempt at enums.\n\nLike the video says, it always returns unique value optionally associated with some key, that can\u2019t be mistaken with another symbol even with the same key, eg\n\n\u2018red\u2019 === \u2018red\u2019\nSymbol(\u2018red\u2019) !== Symbol(\u2018red\u2019)\n\nSo basically one could use them to be super safe and robust with their enums\n\nconst Colors = {\n  red: Symbol(\u2018red\u2019),\n  blue: Symbol(\u2018blue\u2019)\n}", "likes": 1}}, {"topLevelComment": {"author": "Dan Kierson", "text": "My problem is why use them for enums when static instances of some Color class can be created ?\nSomeone said you can use them to differentiate objects with otherwise identical data ... But how often does this have to be done and there must be other ways to do it. Multisets can be implemented without them. Maybe they may have some cryptographic use", "likes": 0}}, {"topLevelComment": {"author": "Ben Flynn", "text": "Yeah, yeah but *what are symbols for ?*", "likes": 1}, "replies": [{"author": "Ben Flynn", "text": "@schl\u00f6pp, pp dev I was just thinking about it. But have to defer it to later as I'm busy changing my hosting, mail servers, etc today.\nBut there seems to be something interesting in what you are saying. Something that could exploit the uniqueness of symbols.", "likes": 0}, {"author": "schl\u00f6pp, pp dev", "text": "Edit: the last example is sadly impossible. Symbols have very limited functionality compared to other languages, what a shame", "likes": 0}, {"author": "schl\u00f6pp, pp dev", "text": "@Ben Flynn Let's say you had to represent a range of numbers. They have a start and an end point. With vanilla JS you might just make an array containing all the numbers in the range, but that will take up a lot of memory. The better way would be to define an iterator symbol that yields the next number and then immediately frees the memory. This way you'll only be storing a maximum of 3 numbers (start, end, current), instead of, lets say, a billion.\nBut what if I do something like `50000 in new NumberRange(100000)`? This will have to loop 50000 times just to find the number we're looking for. Instead, we can define a symbol for the in-statement, that just checks if the number if bigger or equal to the start value, and smaller than the end value.\nThis is a perfect way to use symbols", "likes": 0}, {"author": "Ben Flynn", "text": "@schl\u00f6pp, pp dev Perhaps you'll elaborate with examples ?", "likes": 0}, {"author": "schl\u00f6pp, pp dev", "text": "Every object you use has symbols. Symbols are for abstracting away some more complex operations", "likes": 0}]}, {"topLevelComment": {"author": "Leo Plaw", "text": "I use my code to build my evil scientist secret hideout.", "likes": 0}}, {"topLevelComment": {"author": "Pranita Bhagat", "text": "Symbols are new JavaScript primitive, they are very useful when we use it with objects. Object is mostly used as collection in the form of key value pair, but it has a limitation. The key value should always be string, if you provide number, boolean etc then it will convert it into string.(you can use map data structure instead). Symbols are equivalent to objects because their instances are not equal. Symbol is incomplete as constructor because it does not support the syntax \"new Symbol()\".  String passed in symbol(Symbol('foo')) does not have much significance, it is mostly used for debugging purpose.\r\nconst people = {};\r\npeople.doctor = 'Pranita';\r\nlet sym = Symbol();\r\npeople[sym] = 'Boo';\r\nconsole.log(people);\t\t\t//{doctor: \"Pranita\", Symbol(): \"Boo\"}\r\nconsole.log(Object.keys(people));\t// ['doctor']\r\nSymbol does not get returned in Object.keys(), this is to maintain backword compatibility.Old code isn't aware of symbol. Reflect.ownKeys() has ability to get all the key values including symbols.", "likes": 14}, "replies": [{"author": "Ubong James", "text": "wow...nice explanation, pls  if you  don't mind, can I have a privilege of messaging you privately on any of social media handles (twitter or Instagram etc..). I'll  be glad if I can do so..thanks", "likes": 0}, {"author": "Adam Allalou", "text": "Thank you Pranita, you're comment adds a lot of value", "likes": 1}]}, {"topLevelComment": {"author": "daniel hat", "text": "but what is Symbol used for? like number to calculate, string to show text, boolean to check true false ???", "likes": 5}}, {"topLevelComment": {"author": "Subrato Patnaik", "text": "How can we display unique symbol key in console?", "likes": 0}, "replies": [{"author": "Woop", "text": "if you mean like Symbol() => \"8u83183u19083ulhh\", you can't. Use UUID or similar. The unique identifier is handled by the VM and is not available through JavaScript.", "likes": 0}, {"author": "Woop", "text": "const sym = Symbol.for(\"x\")\r\n  console.log(Symbol.keyFor(sym))", "likes": 0}]}, {"topLevelComment": {"author": "Araz Mammadov", "text": "I understood the meaning of symbols in javascript, but I am still not sure where to use them in my projects", "likes": 23}}, {"topLevelComment": {"author": "rafaelveggi", "text": "Symbol Red... great musician!", "likes": 1}}, {"topLevelComment": {"author": "hotmandead1", "text": "short and sweet", "likes": 0}}, {"topLevelComment": {"author": "Ross the Music and Guitar Teacher", "text": "I still don't fully understand lol. Gotta keep trying!", "likes": 28}, "replies": [{"author": "InSid Yes", "text": "https://youtu.be/6R82DEqrelw i guess here this person tried to explain the use case better", "likes": 0}]}, {"topLevelComment": {"author": "Pablo Bianchi", "text": "Sounds similar to UUIDs (universally unique identifier, version 4), no?", "likes": 0}}, {"topLevelComment": {"author": "Greg Munker", "text": "So would using the symbol() be good for keys in say react lists to create a random key each time?", "likes": 16}, "replies": [{"author": "danial", "text": "bruh its been fucking 5 years did you found the answer or not\ud83d\ude02", "likes": 0}, {"author": "Ibsa Gunjo", "text": "5 yrs now", "likes": 1}, {"author": "Jake Daurham", "text": "\ud83d\udc40\ud83d\udc40\ud83d\udc40", "likes": 1}, {"author": "Azamat Soodaev", "text": "SYMBOL DOES NOT WORK AS KEYS IN REACT LISTS. REACT TRYIES TO CONVERT SYMBOL TO STRING AND IT CAUSES AN ERROR.\n\nExample:\nconst numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((numbers) =>\n  <li key={Symbol()}>{numbers}</li>\n);\n\nReactDOM.render(\n  <ul>{listItems}</ul>,\n  document.getElementById('root')\n);\n\n// => ERROR OCCURED\nUncaught TypeError: Cannot convert a Symbol value to a string\nat Object.createElement", "likes": 6}, {"author": "Kyle Atienza", "text": "@Phurinat Puekkham uhm it's been\n... How long has it been? Anyway does it work?", "likes": 3}]}, {"topLevelComment": {"author": "\u0393\u03b9\u03ce\u03c1\u03b3\u03bf\u03c2 \u0393\u03b5\u03c9\u03c1\u03b3\u03af\u03bf\u03c5", "text": "What's the differece between the use of 'let' and the use of 'const' keyword?", "likes": 2}, "replies": [{"author": "Ale Ciao", "text": "Basically, they have the same scope (block scope), but a const value cannot be reassigned. When you define a variable, if you use \"let\" you can assign a value to it later in your script. When you use \"const\", you MUST initialize it with a value and you CANNOT use another assigment instruction to reassign its value. Anyway, you CAN modify a const if its value is an array or an object, because you can add/remove elements from a const array or change the value of a const object property. The only thing you CANNOT do with a const is to reassign (using the = instruction) its value.", "likes": 3}, {"author": "freeCodeCamp.org", "text": "That is explained in this video: https://youtu.be/1mgLWu69ijU", "likes": 8}]}]}