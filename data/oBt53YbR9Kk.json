{"video": {"id": "oBt53YbR9Kk", "publishedAt": "2020-12-03T14:50:22Z", "title": "Dynamic Programming - Learn to Solve Algorithmic Problems & Coding Challenges", "description": "Learn how to use Dynamic Programming in this course for beginners. It can help you solve complex programming problems, such as those often seen in programming interview questions about data structures and algorithms.\n\nThis course was developed by Alvin Zablan from Coderbyte. Coderbyte is one of the top websites for technical interview prep and coding challenges.\n\n\ud83d\udd17 Check out the Coderbyte channel: https://www.youtube.com/channel/UCOJtQcnBnIy4LERo6vkrItg\n\ud83d\udd17 Improve your coding and interview skills: https://coderbyte.com/member?promo=janpromo4351&utm_source=FCC&utm_medium=Video&utm_campaign=promo&utm_content=Dynamic%20Programming (NOT an affiliate link)\n\nThis course uses images and animations to help you visualize problems and important concepts. After understanding problems conceptually, you will learn how to solve them in JavaScript using Dynamic Programming. Even though JavaScript is used in this course, you will learn concepts and knowledge that you can apply to other programming languages.\n\n\u2b50\ufe0f Course Contents \u2b50\ufe0f\n\u2328\ufe0f (00:00:00) course introduction\n\u2328\ufe0f (00:03:30) fib memoization\n\u2328\ufe0f (00:38:39) gridTraveler memoization\n\u2328\ufe0f (01:04:52) memoization recipe\n\u2328\ufe0f (01:09:56) canSum memoization\n\u2328\ufe0f (01:29:29) howSum memoization\n\u2328\ufe0f (01:52:06) bestSum memoization\n\u2328\ufe0f (02:12:45) canConstruct memoization\n\u2328\ufe0f (02:38:36) countConstruct memoization\n\u2328\ufe0f (02:47:30) allConstruct memoization\n\u2328\ufe0f (03:10:53) fib tabulation\n\u2328\ufe0f (03:22:17) gridTraveler tabulation\n\u2328\ufe0f (03:34:32) tabulation recipe\n\u2328\ufe0f (03:37:59) canSum tabulation\n\u2328\ufe0f (03:53:01) howSum tabulation\n\u2328\ufe0f (04:07:21) bestSum tabulation\n\u2328\ufe0f (04:20:50) canConstruct tabulation\n\u2328\ufe0f (04:38:06) countConstruct tabulation\n\u2328\ufe0f (04:50:23) allConstruct tabulation\n\u2328\ufe0f (05:07:44) closing thoughts\n\n\u2b50\ufe0f Special thanks to our Champion supporters! \u2b50\ufe0f \n\ud83c\udfc6 Loc Do\n\ud83c\udfc6 Joseph C\n\ud83c\udfc6 DeezMaster\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news", "duration": "PT5H10M2S", "likes": "97311", "views": "3283939"}, "comments": [{"topLevelComment": {"id": "UgyKQfcuKuBIXfXWFO54AaABAg", "publishedAt": "2023-02-03T09:58:47Z", "author": "Niklas R\u00f6rbrink", "text": "Second example could preform better if you implemeted what you talked about before coding the solution, right? If key m,n or n,m exists in memo since they return the same value. So add a reversed order key and check if that exists aswell. Another thing is if either one of n or m is 1 you should return 1, you dont have to check if both are 1. Since you can either just go down or just right if either one is 1. Very nice video tho, learning alot.", "likes": 1}}, {"topLevelComment": {"id": "Ugz19Yuw0reWe0KHs8R4AaABAg", "publishedAt": "2023-02-03T08:11:02Z", "author": "Error 707", "text": "This is my first comment on youtube but i can't thank you enough for this course it literally saved my life and my algorithms and data structures exam. \nMy professor was completely useless, he just copy-pasted notes from a mit course by Erkik Demaine (while obviously not having the same teaching nor programming skills lol ) and arranged our exam as a coding interview (two problems in 1 hour and a half). University gave us little to no experience in programming (we just had two programming courses in computer engineering) and after graduations i felt like my skills were very weak and coding was my biggest fear. This course gave me confidence and made me realize  once and for all that coding is 80% thinking and 20% writing actual code. Now i can't say i'm a pro but i feel a lot better and i passed the exam with 30/30 so a complete success! Unfortunately i'm still studying so i don't have a job, but i will donate once i have a stable income! For everyone worrying about failure, trust yourself, you're smart enough, i know you can do it! Just don't panic and break the problem into simple fool-proof steps. I promise it gets easier and even fun, don't give up!", "likes": 0}}, {"topLevelComment": {"id": "UgzHu_qgoH4CIahtqUZ4AaABAg", "publishedAt": "2023-02-01T16:48:12Z", "author": "Amrom Steinmetz", "text": "Isn't the space complexity of the memoized version of the gridTraveler problem O(n * m), and not O(n + m)?", "likes": 0}}, {"topLevelComment": {"id": "Ugy9dp7jxnF550DcatJ4AaABAg", "publishedAt": "2023-02-01T11:21:53Z", "author": "Colios13", "text": "1:57:45 I did the same mistake and was thinking i can just solve that by sorting the array first ^^", "likes": 0}}, {"topLevelComment": {"id": "UgxQxjt0rb56HJgv5CF4AaABAg", "publishedAt": "2023-01-31T20:53:31Z", "author": "Pitooo! FUTI", "text": "Hey, in Fibo example, why explicitly give base case ? Why wouldn't you just remove the comparison for base case, and edit the optional argument to a dictionary with already 1:1 and 2:1 ?", "likes": 0}}, {"topLevelComment": {"id": "UgzIaq-W0PbJRhCkI_p4AaABAg", "publishedAt": "2023-01-29T22:49:33Z", "author": "Willy Dilly", "text": "This video is amazing, thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgwTLXvSNEcO7fmcPAB4AaABAg", "publishedAt": "2023-01-29T05:05:12Z", "author": "YSH Yin", "text": "gridTraveler is easier in R: choose(m + n - 2, m -1)", "likes": 0}}, {"topLevelComment": {"id": "Ugy3DVK3Tpk6ylJWztN4AaABAg", "publishedAt": "2023-01-28T06:23:50Z", "author": "Pravin Poudel", "text": "so what will be the memoization for the case when one element in an array can be used only once but not any number of time?", "likes": 0}}, {"topLevelComment": {"id": "Ugy1_o1iRPXSWRKiABV4AaABAg", "publishedAt": "2023-01-27T17:30:00Z", "author": "Damien Spectre", "text": "2:15:15 -> Why would Target sum of EMPTY STRING be true regardless of array words provided ? Im not sure I followed this base case!  Its critical to the problem", "likes": 1}}, {"topLevelComment": {"id": "UgwR0KU-NRw2kSkmR5d4AaABAg", "publishedAt": "2023-01-27T03:56:31Z", "author": "ThisTooShallPass", "text": "Can someone please explain why for canConstruct (2:17:18) its not good to remove characters from the middle of the string, the video mentions it will create new adjacencies. What does that actually mean?", "likes": 0}}, {"topLevelComment": {"id": "UgypytZfwJTvjGVpADd4AaABAg", "publishedAt": "2023-01-25T15:52:17Z", "author": "Juan Ignacio Quinteros Parada", "text": "2:58:36 Suffix waaaays. I love the array with suffix ways \ud83c\udfb5", "likes": 0}}, {"topLevelComment": {"id": "Ugyp0sV3jzhNwluCk7Z4AaABAg", "publishedAt": "2023-01-25T15:48:24Z", "author": "Juan Ignacio Quinteros Parada", "text": "2:56:30 this is what we, the programmers, say when we start every single day \ud83d\ude1c", "likes": 0}}, {"topLevelComment": {"id": "UgzLlPdC9icohaGk-fF4AaABAg", "publishedAt": "2023-01-25T10:53:02Z", "author": "johnny lane", "text": "GOD LIKE! \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgzZip7VTkcvP92DOwl4AaABAg", "publishedAt": "2023-01-21T19:13:25Z", "author": "love R", "text": "Great teacher, \nJust in howSum and bestSum if we pass an array \"numbers\" with the number 0 inside we'll get an error \"StackOverFlow\"\nbecause the targetSum will not decrease and will enter an infinite recursion. \nSo the best way to solve this is by filtering the \"numbers\" array in a new array without zeroes inside of it.\nthank you, Alvin", "likes": 0}}, {"topLevelComment": {"id": "UgwfEIZB7y_BwP4hJ3l4AaABAg", "publishedAt": "2023-01-21T17:14:59Z", "author": "Sarai Santiago", "text": "I can't give enough likes to this video.", "likes": 0}}, {"topLevelComment": {"id": "UgwI216cx3kPCBVY-rF4AaABAg", "publishedAt": "2023-01-18T17:53:52Z", "author": "Christo Bongende", "text": "For a first DP course this video make me more confident about the subject !\n\nthank's for this tutorial!", "likes": 0}}, {"topLevelComment": {"id": "UgzM3Zy1jZzRPu7dMI94AaABAg", "publishedAt": "2023-01-17T08:28:34Z", "author": "Nicole Lai", "text": "Alvin is one of the best teachers in the free code camp \ud83d\ude3b I hope he can cover more algorithm problems.", "likes": 0}}, {"topLevelComment": {"id": "UgxDyeivEqT4TKNex3Z4AaABAg", "publishedAt": "2023-01-15T15:54:49Z", "author": "kopfmann45", "text": "Fibonacci tabulation is amazing; this is how you would intuitively calculate n-th fib number by hand. How come I have never thought about it when writing algorithms? Amazing course, many thanks!", "likes": 1}}, {"topLevelComment": {"id": "UgwxvCYTqqqQlhtpVid4AaABAg", "publishedAt": "2023-01-14T19:19:08Z", "author": "Anton Kolupayev", "text": "this is a true gem of free education, examples are good, the instructor is great and visuals are beautiful. But I have some feedback, I think the deep definition of how to get the complexity of graph is presented pretty late, only in canConstruct momoization part. I think this vizualization should be presented in first or second parts, or at least at canSum part.", "likes": 0}}, {"topLevelComment": {"id": "UgyQmh5dTv6c4oGFyGV4AaABAg", "publishedAt": "2023-01-13T14:22:56Z", "author": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u041a\u0430\u043c\u0430\u0435\u0432", "text": "At 1:04:06 there is a mistake memoized space complexity is O(n * m)", "likes": 0}}, {"topLevelComment": {"id": "UgxNheKwI07GbMIOJKV4AaABAg", "publishedAt": "2023-01-12T16:16:54Z", "author": "d f", "text": "table = [0] * (n + 1)\n        table[1] = 1\n\n        for i in range(n+1):\n            table[i + 1] += table[i]\n            table[i + 2] += table[i]\n\n        return table[n]\n\n\nThe tabulation fib script doesn't translate in python, but it works in javascript. Great teaching, great series", "likes": 0}, "replies": [{"id": "UgxNheKwI07GbMIOJKV4AaABAg.9kn4k9VIvJN9koBcmTvGIX", "publishedAt": "2023-01-13T02:36:18Z", "author": "d f", "text": "table = [0] * (n + 2) to extend the list in python, it'll prevent the index out of range exception", "likes": 0}]}, {"topLevelComment": {"id": "Ugw15kQYcjX6epm1FTR4AaABAg", "publishedAt": "2023-01-12T13:10:29Z", "author": "naki araba", "text": "the best DP course in my life.", "likes": 0}}, {"topLevelComment": {"id": "Ugw7DF6vH-AvKHwpdbJ4AaABAg", "publishedAt": "2023-01-12T10:57:34Z", "author": "Emmanuel Torty", "text": "Who else heard the laptop fans come on at full speed with fib(50) 6:20  ? \ud83d\ude06 Thank you Alvin for your great video. I love it\ud83c\udf8a", "likes": 0}}, {"topLevelComment": {"id": "UgytWysoERFVuERRg3t4AaABAg", "publishedAt": "2023-01-12T08:13:50Z", "author": "Lakshya Negi", "text": "If we sort the array in descending order in best sum. The first solution should be the best solution I think.", "likes": 0}}, {"topLevelComment": {"id": "Ugxxtdmteofm5W2RtQR4AaABAg", "publishedAt": "2023-01-12T04:06:59Z", "author": "MsMarmima", "text": "This is so helpful. I stopped at 1:29:00 will be back tomorrow", "likes": 0}}, {"topLevelComment": {"id": "UgyCf7w29-_qxHWVmLx4AaABAg", "publishedAt": "2023-01-11T21:35:23Z", "author": "Petr Mor\u00e1vek", "text": "This is golden", "likes": 0}}, {"topLevelComment": {"id": "UgwjaT_3SH1ezppq3jN4AaABAg", "publishedAt": "2023-01-11T19:51:53Z", "author": "Vanessa Chebukwa", "text": "Tabulation is by far my favourite method.Very Simple! Thank you freecodecamp!\n", "likes": 0}}, {"topLevelComment": {"id": "UgyGgSG1LneUDV3ubhp4AaABAg", "publishedAt": "2023-01-11T16:48:37Z", "author": "Dayton Outar", "text": "1:22:14 Space and Time Complexity breakdown", "likes": 0}}, {"topLevelComment": {"id": "Ugwd0oC_spNgMjpqYe54AaABAg", "publishedAt": "2023-01-11T09:56:44Z", "author": "Gilbert Musengi", "text": "Great course. Very clear and easy to follow. Well done!", "likes": 0}}, {"topLevelComment": {"id": "UgyZcVokj4rLhyPMWbp4AaABAg", "publishedAt": "2023-01-10T14:13:12Z", "author": "Kaustubh Ramteke", "text": "\u0939\u0947 \u0938\u092c \u0924\u0941 \u092b\u0941\u0915\u091f \u092e\u0927\u0928\u0940 \u0936\u093f\u0915\u0935\u0942\u0928\u091a \u0915\u0938\u093e \u0930\u093e\u092f\u0932\u093e \u092c\u093e\u0935\u093e.", "likes": 0}}, {"topLevelComment": {"id": "UgxiyYkpzCxGPPt95y14AaABAg", "publishedAt": "2023-01-08T13:34:45Z", "author": "Michael Santiago", "text": "So [2, 3] can sum up to 7? Did I missed something about canSum()?", "likes": 0}}, {"topLevelComment": {"id": "UgzsMrgDBsJah5BF0554AaABAg", "publishedAt": "2023-01-07T01:16:12Z", "author": "midnight", "text": "me dumb java developer thinking its gon take gazillion lines in java", "likes": 0}}, {"topLevelComment": {"id": "Ugzy5mNttjZUeVJNP6J4AaABAg", "publishedAt": "2023-01-06T20:08:23Z", "author": "Mohit Yadav", "text": "for the grid_traveller function, why don't do if (m==1 or n==1 return 1) return 1; instead of using and statement. I've used or and it gives me correct output everytime plus its even more faster obviously", "likes": 0}}, {"topLevelComment": {"id": "UgzWyZ7d2HEWtHT70NF4AaABAg", "publishedAt": "2023-01-06T12:55:28Z", "author": "Jean-Pierre Gergie", "text": "can someone share the solution of bestSum in Python language??", "likes": 0}}, {"topLevelComment": {"id": "UgzP3bLFiV7gnluVfqt4AaABAg", "publishedAt": "2023-01-06T06:35:49Z", "author": "lam pham", "text": "The trees animations are so good. Which tool did he use?", "likes": 0}}, {"topLevelComment": {"id": "UgzDKPv-8oWkMYEHvJ54AaABAg", "publishedAt": "2023-01-05T07:09:52Z", "author": "J vixtor VIx", "text": "Thanks for the fabulous course \ud83d\udc4f\ud83d\ude4fOne modification that I think the video needs is that for the grid travel algo with memoization, the space complexity is O(m*n) and not O(m+n) [1:04:15]. The stack of course uses O(m+n) space but the 'memo' object grows to store m * n key/val pairs. So the overall space complexity would be O(m*n).", "likes": 0}}, {"topLevelComment": {"id": "UgxG1EMyenLDfi1pulx4AaABAg", "publishedAt": "2023-01-04T22:18:03Z", "author": "Larsoti", "text": "Could you do an example for minimum Set Cover problem?", "likes": 0}}, {"topLevelComment": {"id": "UgzYaQm_NifTtxy_q_F4AaABAg", "publishedAt": "2023-01-04T11:47:55Z", "author": "Rejected", "text": "maybe ill get good at this someday", "likes": 0}}, {"topLevelComment": {"id": "UgzdxrpybENeZtANBu94AaABAg", "publishedAt": "2023-01-03T21:17:40Z", "author": "ifeanyi", "text": "you are a legend.  thank u\ud83d\ude4f\ud83c\udffe", "likes": 0}}, {"topLevelComment": {"id": "Ugzj1bukt6_JtUTZr094AaABAg", "publishedAt": "2023-01-02T15:51:51Z", "author": "Saim Ahmed Emon", "text": "I really really loved it...", "likes": 0}}, {"topLevelComment": {"id": "UgxtVbzGaN4VDpiPkOJ4AaABAg", "publishedAt": "2023-01-02T14:15:00Z", "author": "Francesco Mollo", "text": "Thanks so much for this good course.. anyway please don't make use of too much language specific functions.. I'm still trying to figure out how to translate the map fcn in Python for the allConstruct part..", "likes": 0}}, {"topLevelComment": {"id": "UgwZ35R0LHBKSs6uUP54AaABAg", "publishedAt": "2023-01-01T09:12:41Z", "author": "Stefan Boman", "text": "Great stuff! Alvin is a great presenter. Very soothing voice.", "likes": 0}}, {"topLevelComment": {"id": "UgzP7xr461zSo2CXbQl4AaABAg", "publishedAt": "2023-01-01T07:21:30Z", "author": "Astaghfirullahalzim Astaghfirullahalzim", "text": "@1:45:54\n tried to debug the code to see what's going on.. and why is that remainder will always substract the first element of the array\nbecause everytime it enters the for loop it substract targetSum with the first element of the array before calling its own function\ni.e howSum(targetSum,numbers)\n\nso this means the array is useless right ? the second element of the array is never used by the program", "likes": 0}}, {"topLevelComment": {"id": "UgzGUK2UIVRvmGH-yVR4AaABAg", "publishedAt": "2023-01-01T02:10:26Z", "author": "Abhinav reddy", "text": "this is my first video playlist in 2021 to make me to learn DP concepts.", "likes": 0}}, {"topLevelComment": {"id": "UgzDsx36v9aZvLvvrUZ4AaABAg", "publishedAt": "2022-12-31T16:19:21Z", "author": "Subharup Chakraborty", "text": "50:54...in line number 3,if i replace the \"&&\" with \"||\",then will it be a wrong thing?", "likes": 0}}, {"topLevelComment": {"id": "Ugyzv3mBoypP39s2B5Z4AaABAg", "publishedAt": "2022-12-31T14:57:03Z", "author": "\u05e2\u05d5\u05de\u05e8 \u05e0\u05d3\u05dc\u05e8", "text": "wow !!! cool course very good !!!", "likes": 0}}, {"topLevelComment": {"id": "UgwTV_HsUlQ5Nt9csTd4AaABAg", "publishedAt": "2022-12-31T02:43:05Z", "author": "Penumetcha Sai Rakesh Varma", "text": "great concept truely learned a lot", "likes": 0}}, {"topLevelComment": {"id": "UgxcTkkWrF_hogMj0FF4AaABAg", "publishedAt": "2022-12-30T22:58:51Z", "author": "Par Machine", "text": "After the third time through, I am understanding real computing that doesn't require rehashing the very basics of some language.   BTW his lectures on Hast tables, linked lists, etc are also very informative.", "likes": 0}}, {"topLevelComment": {"id": "UgxpSEqDMaxYEv4LhS14AaABAg", "publishedAt": "2022-12-30T15:54:54Z", "author": "Fady al Dhaim", "text": "Impressive \u2764\nCould anyone please tell me what software is being used to illustrate these diagrams at 1:46 ?", "likes": 0}}, {"topLevelComment": {"id": "UgwpgUHr7qErC1r2BJN4AaABAg", "publishedAt": "2022-12-29T08:42:59Z", "author": "Yang Fei", "text": "Hats off to Alvin for such a well-explained course!", "likes": 0}}, {"topLevelComment": {"id": "Ugx0uxs1KppLw3aP5pV4AaABAg", "publishedAt": "2022-12-27T09:22:35Z", "author": "Sandhaka", "text": "Went through all the course with Python. Excellent and effective teaching method. Thanks to upload.", "likes": 0}}, {"topLevelComment": {"id": "Ugym5RtQTLNp1UxrwhV4AaABAg", "publishedAt": "2022-12-26T22:03:32Z", "author": "Maciej Rogala", "text": "The space complexity for howSum with memoization (1:50:30) can be improved very easily to be equal to m, instead of m^2 - you say that the worst case scenario is when we have m keys, with m elements each, however we don't have to store anything other than nulls in our memo map (basically, we can remove line 10 and simply return the new array) because once we enter that if statement in line 9, it will always return all the way to the first call and output the result (therefore we will never need those intermediate arrays in our memo).\n\nIn other words, we never use memo to help us identify correct 'branches' in our tree (since once we find one we exit the program instantly), it only helps us to find targetSums which won't lead to a solution.\n\nMoreover, we can improve time complexity as well by not copying the array at every recurrent call, instead we can append the element to the previous result.\nSo the resulting space complexity will be equal to m, and time complexity will be equal to n*m, same as in the canSum problem.\nCorrect me if I am wrong :)", "likes": 0}}, {"topLevelComment": {"id": "Ugw-B6aBySQuun5LoTR4AaABAg", "publishedAt": "2022-12-25T19:59:35Z", "author": "Traverse", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxQRRSDWHg4HLateCJ4AaABAg", "publishedAt": "2022-12-25T19:23:26Z", "author": "Ariel Brice\u00f1o", "text": "At the gridTraveler problem, you forgot to add the symetric validation at memo.", "likes": 0}}, {"topLevelComment": {"id": "UgwxtnafzSMfh05Pflt4AaABAg", "publishedAt": "2022-12-25T11:46:58Z", "author": "binh nguyen", "text": "Good explaination ! Tks bro :3", "likes": 0}}, {"topLevelComment": {"id": "UgyGM8I_L7cQqujdHd14AaABAg", "publishedAt": "2022-12-25T03:24:24Z", "author": "pranav pandey", "text": "Thank you very much", "likes": 0}}, {"topLevelComment": {"id": "UgzOQ3EbuL9vM_BI2x14AaABAg", "publishedAt": "2022-12-24T21:30:35Z", "author": "An engineer", "text": "Algoexpert is obviously one of the biggest advertizers for Google.", "likes": 0}}, {"topLevelComment": {"id": "Ugz_AWvj5Sovfc2I1WN4AaABAg", "publishedAt": "2022-12-23T00:27:47Z", "author": "Jamey B.", "text": "I tried implementing these problems in Java as a challenge. However, my memoized  java implementation of bestSum has weird output. Not sure why. \npublic static ArrayList<Integer> bestSumMemo(int targetSum, List<Integer> numbers,\r\n                                                 HashMap<Integer, ArrayList<Integer>> memo) {\r\n        if (memo.containsKey(targetSum)) {\r\n            return memo.get(targetSum);\r\n        }\r\n\r\n        if (targetSum == 0) {\r\n            return new ArrayList<>();\r\n        }\r\n\r\n        if (targetSum < 0) {\r\n            return null;\r\n        }\r\n\r\n        ArrayList<Integer> shortest = null;\r\n        for (int number : numbers) {\r\n            int remainder = targetSum - number;\r\n            var result = bestSumMemo(remainder, numbers, memo);\r\n            if (result != null) {\r\n                result.add(number);\r\n                if (shortest == null || result.size() < shortest.size()) {\r\n                    shortest = result;\r\n                }\r\n            }\r\n        }\r\n\r\n        memo.put(targetSum, shortest);\r\n        return shortest;\r\n    }\n\nRunning bestSumMemo(100, List.of(1, 2, 5, 25), new HashMap<>()) returns the below ungodly arraylist. I feel like I missed a step. Does anyone see what I did wrong?\n\n[25, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25]", "likes": 0}}, {"topLevelComment": {"id": "Ugw4LFQNgTxG5jNZqEV4AaABAg", "publishedAt": "2022-12-22T22:49:37Z", "author": "Angad Pal", "text": "I really like how you expanded on anything that could be confusing for someone new to the subject", "likes": 0}}, {"topLevelComment": {"id": "Ugz8wTktUpCCPXAp6Cl4AaABAg", "publishedAt": "2022-12-22T18:13:32Z", "author": "RandomShowerThoughts", "text": "tabulation seems way harder than recursion + memoization lol", "likes": 0}}, {"topLevelComment": {"id": "UgynZqdcMOoW-jzEdh54AaABAg", "publishedAt": "2022-12-20T23:08:37Z", "author": "Penumetcha Sai Rakesh Varma", "text": "just loving the concept", "likes": 0}}, {"topLevelComment": {"id": "UgzlQLUbYCS1ma_yP2l4AaABAg", "publishedAt": "2022-12-20T17:57:34Z", "author": "RandomShowerThoughts", "text": "still can't believe how good this course is, like legitimately taught me more on algorithms, recursion, and dp than anything I've ever seen", "likes": 34}}, {"topLevelComment": {"id": "UgyGHPyEMXYmy2io5kJ4AaABAg", "publishedAt": "2022-12-19T20:23:32Z", "author": "RandomShowerThoughts", "text": "Might be the best video on not just Dynamic Programming, but also for Recursion that I've ever seen", "likes": 1}}, {"topLevelComment": {"id": "UgyaSp3Sxj3Jy2v50eN4AaABAg", "publishedAt": "2022-12-19T19:39:46Z", "author": "Cag K", "text": "Around 1:49:35, when you calculate the time complexity for howSum, you do not mention the time spent to search the memo[targetSum]. Size of memo is restricted by m, so shouldn't the time complexity be O(n*m*m*m), assuming memo doesn't have any structure to speed up the search?", "likes": 1}, "replies": [{"id": "UgyaSp3Sxj3Jy2v50eN4AaABAg.9jpdt-QYL8Z9kHYPfx-ySA", "publishedAt": "2022-12-31T01:01:10Z", "author": "elhombreloco", "text": "Agreed with @angadpal5336. However, even if the lookup time was let's say O(m), the lookup is outside of the main loop so when calculating complexity you would add m and not multiply it so the complexity in that case would be O(n*m*m + m) which is just O(n*m*m) since n*m*m >> m", "likes": 2}, {"id": "UgyaSp3Sxj3Jy2v50eN4AaABAg.9jpdt-QYL8Z9jzqWu-rBKK", "publishedAt": "2022-12-23T18:42:36Z", "author": "Angad Pal", "text": "Its a dictionary/object/hashmap, so the look up time is constant (O(1)).", "likes": 5}]}, {"topLevelComment": {"id": "UgwtNrVyMMKH3vIQsSV4AaABAg", "publishedAt": "2022-12-17T12:14:20Z", "author": "Park Musni", "text": "So all i need to understand this topic are TREES? Bruh thank you very much", "likes": 0}}, {"topLevelComment": {"id": "UgyQLaDdDzUU5ZFtDDd4AaABAg", "publishedAt": "2022-12-15T16:03:24Z", "author": "Valentina M", "text": "4:07:09 Why i <= targetSum? I don't get it. I think it should be i < targetSum.", "likes": 0}}, {"topLevelComment": {"id": "UgwCiQ_jZUt3C8wZYgZ4AaABAg", "publishedAt": "2022-12-14T22:17:30Z", "author": "Nick Chykin", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwSdGuvskFGhF_yRf54AaABAg", "publishedAt": "2022-12-12T07:33:03Z", "author": "Ramirez", "text": "How does the code in 3:21:13 work? Won't the array index go out of bounds?", "likes": 0}, "replies": [{"id": "UgwSdGuvskFGhF_yRf54AaABAg.9jXK9IIzmzg9jf8Rr0zE6a", "publishedAt": "2022-12-15T17:43:53Z", "author": "Valentina M", "text": "In JavaScript arrays are objects.  So they behave almost like hash tables.", "likes": 1}, {"id": "UgwSdGuvskFGhF_yRf54AaABAg.9jXK9IIzmzg9jaFKoHLdla", "publishedAt": "2022-12-13T20:07:54Z", "author": "Abyx Atjov", "text": "I don't know JavaScript but I'm pretty sure he's \"abusing\" JS's innate handling of out of bounds errors. Tho, that's just my speculation.", "likes": 0}]}, {"topLevelComment": {"id": "UgzkVp9FQKcY8B_4f414AaABAg", "publishedAt": "2022-12-10T16:26:20Z", "author": "Sagar Wankhade", "text": "TimeStamps", "likes": 0}, "replies": [{"id": "UgzkVp9FQKcY8B_4f414AaABAg.9jT7aRXxa-D9jT7e0g1It3", "publishedAt": "2022-12-10T16:26:49Z", "author": "Sagar Wankhade", "text": "Fibonacci 31:50", "likes": 0}]}, {"topLevelComment": {"id": "UgznYZ-rOhr_dZKf8g14AaABAg", "publishedAt": "2022-12-08T14:13:36Z", "author": "Alexander Maasland", "text": "Wow Alvin, you are a champ! Thanks for this elaborate and very educative video!", "likes": 7}}, {"topLevelComment": {"id": "UgwOcq9wuEtWL07MN_J4AaABAg", "publishedAt": "2022-12-07T18:07:50Z", "author": "Alexandre Cheval", "text": "Just thank you, for my job I need to write python code for some automation of processes, but I do not have a computer science degree so I kind of leaned on the fly. I knew there was a way of doing some stuff recursively but never tried because I feared it would take me too much time to understand and implement with my basic knowledge. Just with the firsts 2 examples I already have a pretty good idea of how to do it and I am pretty sure it will also help me in the future.", "likes": 20}, "replies": [{"id": "UgwOcq9wuEtWL07MN_J4AaABAg.9jL_pFr1L8_9kPquAlpr65", "publishedAt": "2023-01-03T06:25:25Z", "author": "SYPHER", "text": "Good luck!", "likes": 0}]}, {"topLevelComment": {"id": "UgxpndjWBRLWzA2ZlSV4AaABAg", "publishedAt": "2022-12-07T18:07:23Z", "author": "John", "text": "great content! thanks a ton", "likes": 0}}, {"topLevelComment": {"id": "UgzNjJU679pYFHU0Smx4AaABAg", "publishedAt": "2022-12-06T19:48:29Z", "author": "Indrek K", "text": "In the last example. Spread operator pushes elements to call stack. Maximum call stack exception can be avoided by replacing this line:\n                    table[i + word.length].push(...newCombinations);\nwith:\r\n                    table[i + word.length] = [...table[i + word.length], ...newCombinations];\n\nGreat course!", "likes": 1}}, {"topLevelComment": {"id": "UgwrZogy6tLNAFtH1gZ4AaABAg", "publishedAt": "2022-12-05T07:27:47Z", "author": "SiriTechLife", "text": "thanks for providing useful content", "likes": 0}}, {"topLevelComment": {"id": "UgxTdvOmHiOp9BIqeK94AaABAg", "publishedAt": "2022-11-29T21:17:39Z", "author": "Dragon", "text": "The best algorithm will help us find out who makes the most climate damage. From CEO's to the everyday people who may just save for holidays abroad\u2026 If people ere dumb enough to buy shares in power companies that are not sustainable, they should confiscate ALL oil and gas companies around the world\u2026 If Governments owned all the profits, they wouldn't have to pay shareholders\u2026just spend all profits on research and building infrastructure that lasts\u2026 also every device that doesn't pass (for example) Amazons Longevity test should help\u2026 overengineer products like when the Empire State Building water pumps were made\u2026if one breaks they simply fix it as they are too afraid to replace them with products with tolerances that are designed to break\u2026 Another algorithm CEO killer\u2026 China would go out of business probably as every pair of socks I buy from Amazon are too breakable to even bother darning\u2026", "likes": 0}}, {"topLevelComment": {"id": "Ugy3_uKeQYDycBPHijt4AaABAg", "publishedAt": "2022-11-29T18:36:31Z", "author": "Gustavo Cieslar", "text": "Excellent material, thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgyDc6I5ZzqSaYl3FEh4AaABAg", "publishedAt": "2022-11-28T21:52:20Z", "author": "Kiran Gaonkar", "text": "Recursion would fail if you try for a really huge number. The maximum call stack is limited.\n\nTo solve this and to reduce to O(1) space complexity with O(n) time complexity I hope we can use below aproach in few cases:\n\nfunction fib(n) {\r\n  if (n == 1 || n == 2) {\r\n    return 1n;\r\n  } else {\r\n    let current = 1n;\r\n    let previous = 1n;\r\n    for (let i = 3; i < n; i++) {\r\n      let temp = current;\r\n      current = current + previous;\r\n      previous = temp;\r\n    }\r\n    return current;\r\n  }\r\n}", "likes": 0}}, {"topLevelComment": {"id": "UgyNVoB17qXQtB8G-p94AaABAg", "publishedAt": "2022-11-28T03:34:47Z", "author": "Osmar Quiroz", "text": "Anyone knows how to implement the solution using the memo object and only  call it the first call function on c++?", "likes": 0}}, {"topLevelComment": {"id": "UgzBtEXWHKP0r15MsUd4AaABAg", "publishedAt": "2022-11-27T06:12:36Z", "author": "Chris Tian", "text": "Why is 7 [2, 3] true? in canSum function", "likes": 0}, "replies": [{"id": "UgzBtEXWHKP0r15MsUd4AaABAg.9ivZ0yFep7R9j11uf6wy7j", "publishedAt": "2022-11-29T18:37:56Z", "author": "Gustavo Cieslar", "text": "2+2+3 = 7", "likes": 0}]}, {"topLevelComment": {"id": "UgzHDvzWEuVj_XIxKGZ4AaABAg", "publishedAt": "2022-11-26T18:19:31Z", "author": "Eric Kinder", "text": "Great lecture!! One error/extraneous line (I think?) in the targetSum problem (third example), you write \"memo[targetsum] = false\" on line 15, right before you return false on the next line. Setting the memo entry to false on line 15 does nothing, since that instance of memo is lost (out of scope ) once the function returns. I believe the  \"memo[targetsum] = false\" should be within the for loop after line 11, or it can be eliminated entirely since you only check for true instances. Same for 4th example and \"memo[targetsum] = null\", 5th example \"memo[target] = false\".\n\nPlease correct me if I'm wrong!", "likes": 0}}, {"topLevelComment": {"id": "UgxA4mJQxgapoYGpmCN4AaABAg", "publishedAt": "2022-11-26T02:29:24Z", "author": "John Louisse Polong", "text": "Does anyone know how to code the best_sum in python? 2:04:40", "likes": 0}, "replies": [{"id": "UgxA4mJQxgapoYGpmCN4AaABAg.9is_gJkUUm39isfCg5cHkV", "publishedAt": "2022-11-26T03:17:39Z", "author": "John Louisse Polong", "text": "I figure out\n\ndef best_sum(n, array_n):\n\n   if n == 0: return []\n   elif n < 0: return None\n\n   shortestCombination = None\n   for i in range(len(array_n)):\n      remainderCombination = best_sum (n-array_n[i], array_n)\n      if remainder is not None:\n         combination = remainderCombination + [array_n[i]]\n         If(shortestCombination is None) or (len(combination) < len(shortestCombination)):\n            shortestCombination = combination\n\n   return shortestCombination", "likes": 1}]}, {"topLevelComment": {"id": "UgxZooaTI3PpGK93kLx4AaABAg", "publishedAt": "2022-11-25T17:10:13Z", "author": "Niketh Donthula", "text": "Finally I've completed the course  and  it is really an interesting one !\nProbably one of the best tutorials on Dynamic Programming .\nI also got to learn something about JavaScript.......\ud83d\ude02\ud83d\ude02", "likes": 0}}, {"topLevelComment": {"id": "UgxaHdp9tU8dUKvQSAl4AaABAg", "publishedAt": "2022-11-23T13:32:05Z", "author": "David Yu", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "UgyC1XWXeZvvR76Zndp4AaABAg", "publishedAt": "2022-11-18T21:09:35Z", "author": "TheVoiceofreasonMMA", "text": "@1hr 43 min can somebody explain to me why we need a return null after the for loop? Wouldn't our base cases catch the case where no sumpossible can be calculated?", "likes": 0}}, {"topLevelComment": {"id": "UgxCzmv3_Hv3wZ9iedV4AaABAg", "publishedAt": "2022-11-18T17:19:57Z", "author": "retop56", "text": "At 13:45 why is the time complexity O(n/2)? If N = 6, n/2 would be 3, but there are 4 function calls in the example (6, 4, 2, and 0).", "likes": 0}, "replies": [{"id": "UgxCzmv3_Hv3wZ9iedV4AaABAg.9i__Es7-qch9ijDE1sXNL7", "publishedAt": "2022-11-22T11:11:16Z", "author": "xuanjian zhang", "text": "Maybe the initial function call does not count?", "likes": 0}]}, {"topLevelComment": {"id": "Ugw91aLtwsV5FiEAYU14AaABAg", "publishedAt": "2022-11-18T06:42:18Z", "author": "NachiketRaw", "text": "01:10:50 Why are we not checking reverse key here m,n or n.m exists in memo ?", "likes": 0}}, {"topLevelComment": {"id": "UgyNT4XSc0zU4WtiAad4AaABAg", "publishedAt": "2022-11-17T17:21:23Z", "author": "\u015eamil Korkmaz", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzPKJCEKdtlLQ0ctDJ4AaABAg", "publishedAt": "2022-11-16T18:22:07Z", "author": "Felix Boachie Yiadom", "text": "Please where can i get the python implementation of all the functions?", "likes": 0}, "replies": [{"id": "UgzPKJCEKdtlLQ0ctDJ4AaABAg.9iVXlPQ26c29iiuoWseLS8", "publishedAt": "2022-11-22T08:21:37Z", "author": "CrossWalker", "text": "U can get pythob code for almost all problems using dp in gfg or leetcode forums. Besides the js and python code is somewhat similar", "likes": 0}]}, {"topLevelComment": {"id": "UgzWeh3DLrHWt4SUD2x4AaABAg", "publishedAt": "2022-11-16T14:39:54Z", "author": "Felix Boachie Yiadom", "text": "How can i use the map and spread operator in python", "likes": 0}}, {"topLevelComment": {"id": "UgxE9jTgr3KajUrCSPZ4AaABAg", "publishedAt": "2022-11-14T05:21:21Z", "author": "Admin K", "text": "nice", "likes": 0}}, {"topLevelComment": {"id": "UgxxaLhdE0A4HW7XqSN4AaABAg", "publishedAt": "2022-11-11T11:18:17Z", "author": "Rose Makh", "text": "Two hours into the video and I was able to write my own little recursive function without looking at any notes! I never understood it before! The visualization at the beginning of the video was key for me. Thank you for breaking it down so thoroughly.", "likes": 0}}, {"topLevelComment": {"id": "UgxLQv9IwsbxDYK6dTl4AaABAg", "publishedAt": "2022-11-11T07:27:19Z", "author": "Sree Gopal", "text": "While solving howSum in python using this same conditions I'm not able to come up with answer. Anyone pls help", "likes": 0}}, {"topLevelComment": {"id": "UgwEsoIt_KoOv2q-zc54AaABAg", "publishedAt": "2022-11-09T15:49:02Z", "author": "John C", "text": "Fantastic - great help sir.\n\nJust thinking about the howsum/bestSum tabulation example.\n(Great solution using booleans for canSum - bravo!)\n\nBack to howsum.\n\nWhy not simply enter the part values into the table instead of arrays?\nEach time you would enter the part value, you ensure the part value is greater than the previous value in the array cell.\nThen loop backwards using the part numbers in the table and append these values to an array.\n\nSimply return the array.\n\nThis would be time (m*n) + m (for appending to the table)", "likes": 0}}, {"topLevelComment": {"id": "UgzxGgXNw9lg_xSFN3h4AaABAg", "publishedAt": "2022-11-09T11:30:46Z", "author": "Wangari Kimotho", "text": "I was able to follow this to the very end using Python. Best Youtube tutorial I have taken so far. Thanks a lot!", "likes": 0}}, {"topLevelComment": {"id": "Ugyg7TtJJl0LAJCvKLZ4AaABAg", "publishedAt": "2022-11-08T16:44:42Z", "author": "Parker", "text": "Use Binet's formula", "likes": 0}}, {"topLevelComment": {"id": "UgxehLNDZ1rW6K12xeF4AaABAg", "publishedAt": "2022-11-08T16:11:19Z", "author": "Sherniyaz Bolat", "text": "1:27:23 there is no point in memoizing true once, cause it will return, stop recursion. Thanks anyway!!!", "likes": 0}}, {"topLevelComment": {"id": "UgwyvNnLJ1p0eBdwK454AaABAg", "publishedAt": "2022-11-08T15:29:48Z", "author": "Patrick Lawrence", "text": "Found this while cramming for an exam. Helped me to understand the material better than months of classes and multiple homework assignments", "likes": 0}}, {"topLevelComment": {"id": "UgyDCst_mSmH4XlG6u94AaABAg", "publishedAt": "2022-11-07T10:30:44Z", "author": "A Akenteva", "text": "I watched this in just 2 sittings. The explanations are so clear and well laid out. A lot of repeats of course, but that's kind of a good thing in this case because it helps to get used to the topic. Alvin is an amazing teacher.", "likes": 0}}, {"topLevelComment": {"id": "UgzGjlnLdFoapuq7y1t4AaABAg", "publishedAt": "2022-11-07T08:40:29Z", "author": "B Henry", "text": "Why people don't code w. \" because I can \" mindset - : just because you can has nothing to do with whether you should.\n\nWhy would anyone consider using recursion for a cumulative add function ?\nMaybe so they can fail the interview and quit wasting the company's time ?\nThis is simple logic and any real programmer would know this .\n\nIt was one of the first exercises in assembler class - 40 years ago.\nAlso Fortran , etc.\nPascal advocates were So proud of recursion they tried breaking every system they could by using it wrong - like the Fib example .\nIt was a great way to determine who was getting walked out vs hired/kept/promoted/etc.\nEspecially with APU engineers tasked with designing hardware logic and circuit layout. \nOne time Texas Instruments \" software engineer \" ( code pusher ) w. 25+ years software experience. No , I wasn't fired .\nOne way  to do it : \nC\n\nint fib(int n)\n\n{\n\n\u00a0\u00a0\u00a0\u00a0/* Declare an array to store Fibonacci numbers. */\n\n\u00a0\u00a0\u00a0\u00a0int f[n + 1];\n\n\u00a0\u00a0\u00a0\u00a0int i;\n\n\u00a0\u00a0\n\n\u00a0\u00a0\u00a0\u00a0/* 0th and 1st number of the series are 0 and 1*/\n\n\u00a0\u00a0\u00a0\u00a0f[0] = 0;\n\n\u00a0\u00a0\u00a0\u00a0f[1] = 1;\n\n\u00a0\u00a0\n\n\u00a0\u00a0\u00a0\u00a0for (i = 2; i <= n; i++) {\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/* Add the previous 2 numbers in the series\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0and store it */\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0f[i] = f[i - 1] + f[i - 2];\n\n\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\n\n\u00a0\u00a0\u00a0\u00a0return f[n];\n\n}\n\n\u00a0\u00a0\n\nint main()\n\n{\n\n\u00a0\u00a0\u00a0\u00a0int n = 9;\n/* or input value of n . Single value output  Or , to make it useful , output all or select values of Fib(n)   or .. whatever is the desired output  */\n\n\u00a0\u00a0\u00a0\u00a0printf(\"%d\", fib(n));\n\n\u00a0\u00a0\u00a0\u00a0getchar();\n\n\u00a0\u00a0\u00a0\u00a0return 0;\n\n}\n\n\n****\n\nFastest way is determined by desired output.\n\n\nFor example , potential future coders : \nIf output is All Fib of all 1 to n - what is the fastest way to do this ?\nAnd if you only have 4 value  registers and no external read/write storage ( i.e. it must output a value to \" hard storage \" * paper, screen , external write only device ) every time all internal registers are full and there are still more n left to calculate )  ?", "likes": 0}}, {"topLevelComment": {"id": "Ugx4iH-wQ5ydlgreC594AaABAg", "publishedAt": "2022-11-06T08:01:35Z", "author": "ACRODILE", "text": "1:49:00 ~ what if you we use the push operator instead of spread, woldn't it reduce time complexity since its constant?", "likes": 0}}, {"topLevelComment": {"id": "UgyZTBXiJQ5Wip7QWf94AaABAg", "publishedAt": "2022-11-05T05:40:01Z", "author": "Normie Cyrox", "text": "gridTraveller java code : \n public static long count(int r, int c, Map<String, Long> memo) {\n        String key = r + \",\" + c;\n        if (memo.containsKey(key)) {\n            return memo.get(key);\n        }\n        if (r == 1 || c == 1)\n            return 1L;\n\n        memo.put(key, count(r - 1, c, memo) + count(r, c - 1, memo));\n\n        return memo.get(key);\n    }", "likes": 0}}, {"topLevelComment": {"id": "UgxAqrEceeQtHwWY7Nh4AaABAg", "publishedAt": "2022-11-05T02:25:07Z", "author": "Ming Zhang", "text": "Many thanks for the high-quality course!!! Definitely learned more than $5! Hope you can create more in the future!", "likes": 4}}, {"topLevelComment": {"id": "Ugy1tJxMe-8A-iD_G_F4AaABAg", "publishedAt": "2022-11-02T13:50:04Z", "author": "OolSlainerloO", "text": "2022/11/2 38:48\n2022/11/4 1:52:21", "likes": 0}}, {"topLevelComment": {"id": "UgxvlDvQDUHATHwA1bx4AaABAg", "publishedAt": "2022-11-01T21:57:15Z", "author": "Syed Ammad Hassan", "text": "I love how Alvin explains things. This course is an absolute must to watch if you want to learn Dynamic Programming, the examples used to describe are amazing!!", "likes": 1}}, {"topLevelComment": {"id": "UgxZqTeUSGH9ZronArt4AaABAg", "publishedAt": "2022-11-01T00:23:04Z", "author": "Aaditya Yadav", "text": "For BestSum would it be a good solution to just sort the numbers array in decending order, that way we don't have to calculate every possible combination and compare it. out first solution would be the correct solution", "likes": 0}}, {"topLevelComment": {"id": "UgxgI71KcbR6rtXF9mF4AaABAg", "publishedAt": "2022-10-29T19:25:06Z", "author": "Goblin Moblin", "text": "Alvin, this course is EXTREMELY well done. I thoroughly enjoyed working through it. It taught me the importance of diagramming a problem visually before attacking it.", "likes": 0}}, {"topLevelComment": {"id": "UgwuFPyv1kpxIvt1mKV4AaABAg", "publishedAt": "2022-10-29T14:29:20Z", "author": "Aditya Mishra", "text": "3:04:02 Probably the most essential thing to realize when you are solving DP problems. You cant just imagine the entire recursion in your head, don't try to go through the recursion calls in your head, instead go through *one* function call in your head which solves the first non-trivial call in your solution and just assume that your recursion call is gonna work (just trust the function works for the sub-problem). This pattern really helps while solving complex DP problems.", "likes": 0}}, {"topLevelComment": {"id": "Ugy2ywnlXmSIYu2Mo9Z4AaABAg", "publishedAt": "2022-10-28T04:34:37Z", "author": "Jose Sylve", "text": "For any python users attempting the canSum problem. Make sure when creating a default for the memo dict, do not make the default an empty dict ( i.e. memo = { } )\nInstead, you can set the default to None (i.e. memo = None) and then check if it exists in your recursive function and create it ( if memo == None: memo = { } )\n\nAlternatively, you could create a separate function that invokes your recursive function and pass an empty dict that way:\n\ndef can_sum(target_sum, numbers, memo):\n    ...\n    return bool\n\ndef can_sum_invoker(target_sum, numbers)\n    return can_sum(target_sum,numbers, { })\n\nhopes this helps!", "likes": 0}, "replies": [{"id": "Ugy2ywnlXmSIYu2Mo9Z4AaABAg.9hi7y2CRMgD9i9Z2h5-ghz", "publishedAt": "2022-11-08T05:30:03Z", "author": "Jose Sylve", "text": "@Elvin Uthuppan pythons own documentation warns against this. Not that it is not doable, just that it can have unexpected results.", "likes": 0}, {"id": "Ugy2ywnlXmSIYu2Mo9Z4AaABAg.9hi7y2CRMgD9i9QVzb__M_", "publishedAt": "2022-11-08T04:15:25Z", "author": "Elvin Uthuppan", "text": "I don't think there's a problem with starting it off as memo = {}. I've implemented most of these with that without issues, and don't have to bother with that extra if statement that way.", "likes": 0}, {"id": "Ugy2ywnlXmSIYu2Mo9Z4AaABAg.9hi7y2CRMgD9i5AWFsorAE", "publishedAt": "2022-11-06T12:38:40Z", "author": "Ciro G.", "text": "what's wrong with making the default an empty dict?", "likes": 0}]}, {"topLevelComment": {"id": "UgwvZxQ5VGPtTKn4v0t4AaABAg", "publishedAt": "2022-10-27T17:49:13Z", "author": "Rajesh A", "text": "Longest Youtube video I ever watched, of-course in a week span. Really good content \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgwZcYWjLqB6urFgMX14AaABAg", "publishedAt": "2022-10-27T15:34:32Z", "author": "Angela Grondle", "text": "Actually the best video I've found. You're explainations are easy to follow and clear. Even if the concept it's tricker, I didn't find myself getting frustrated. Thank you for this!!", "likes": 0}}, {"topLevelComment": {"id": "UgyTSpfUuatWib7TG754AaABAg", "publishedAt": "2022-10-27T01:57:26Z", "author": "Adhiraj Bhattacharya", "text": "In grid traveller memoization - space complexity is shown to be O(m+n). would the space for memo object be O(m*n), since we will be storing all nodes in the memo? in that case the overall space should be  O(m*n). can someone explain to me, where i am going wrong in thought process.", "likes": 0}}, {"topLevelComment": {"id": "Ugxf72qvzgXboqVBMXV4AaABAg", "publishedAt": "2022-10-26T01:36:39Z", "author": "Iron Sugar", "text": "Question regarding canSum time complexity at 1:24:27 :\n\nIsn't it n ^ (n * m)?\nBecause each node could've had 3 children. So on the second floor it could be 9 nodes, on the third floor 27 and so on.\n\nAlso the example given - canSum(300, [x1, x2] - would just give us 300 ^ 2 = 90000 time complexity according to the slide, which should've been done in a split second.", "likes": 0}, "replies": [{"id": "Ugxf72qvzgXboqVBMXV4AaABAg.9hcf-n1rWUs9htv8Dn6XC5", "publishedAt": "2022-11-01T18:24:42Z", "author": "Iron Sugar", "text": "I guess it did lose :(", "likes": 0}, {"id": "Ugxf72qvzgXboqVBMXV4AaABAg.9hcf-n1rWUs9hcf8_gnS7Q", "publishedAt": "2022-10-26T01:37:51Z", "author": "Iron Sugar", "text": "Hope this comment won't be lost in YT abyss.", "likes": 1}]}, {"topLevelComment": {"id": "UgzAbrNatRGQjpOJXOJ4AaABAg", "publishedAt": "2022-10-25T12:44:57Z", "author": "Niv Rabin", "text": "Perfectly made and superb problems choice!\nThank you so much", "likes": 0}}, {"topLevelComment": {"id": "Ugy_CSPWBjGxWSpYpZl4AaABAg", "publishedAt": "2022-10-24T20:29:23Z", "author": "Sukhada Ghewari", "text": "Really helpful tutorial. I knew it is great when he perfectly explained fib :) Kudos!", "likes": 1}}, {"topLevelComment": {"id": "UgxznpQtegHb76xxldx4AaABAg", "publishedAt": "2022-10-23T02:41:15Z", "author": "Elvin Uthuppan", "text": "This is the slickest way I've ever seen not only Dynamic Programming, but also recursion presented. His slides/animations are just perfect for guiding every single step your brain needs to go through along the way, and he handles all kinds of gotchas and keeps you from getting stuck. I'm already going from \"holy cow how am I going to even approach these problems\" to \"ok this is starting to get intuitive with this workflow\" just an hour in. Literally better than any professor's teaching style than I remember from my college CS program. The effort put into this video is insane!\n\nI have a feeling this video just covers some of the basics-intermediate problem types, but I bet this will be a great stepping stone to tackling the harder DP problems.", "likes": 2}}, {"topLevelComment": {"id": "UgydMrnujgToTYFhQqh4AaABAg", "publishedAt": "2022-10-21T01:31:09Z", "author": "Hanif", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxCUdUqgQ2uJD19Ilt4AaABAg", "publishedAt": "2022-10-20T21:00:11Z", "author": "Kashif Nazar", "text": "Man, your videos are so addictive. The most positive addiction ever I experienced.", "likes": 0}}, {"topLevelComment": {"id": "UgzJazDWSChn3GX9C4h4AaABAg", "publishedAt": "2022-10-18T21:26:25Z", "author": "collins chibuike", "text": "Thank You, Alvin, this video is very helpful", "likes": 0}}, {"topLevelComment": {"id": "UgwIDw8VCzioyXQQ3SJ4AaABAg", "publishedAt": "2022-10-18T15:24:15Z", "author": "Mayank", "text": "1:04:05 shouldn't space complexity be also O(n*m) in gridTraveler problem", "likes": 1}}, {"topLevelComment": {"id": "UgwXdP5sVGvr8XfdNRd4AaABAg", "publishedAt": "2022-10-18T15:16:03Z", "author": "Rajkaran Singh Gill", "text": "Such a good course. Great work \ud83d\udc4d .\n\nI\u2019m just curious to learn what technology or software was used to make slides for the course. Very interactive engaging slides", "likes": 0}}, {"topLevelComment": {"id": "Ugw9Ai21SlXYOmW3m6B4AaABAg", "publishedAt": "2022-10-14T17:32:49Z", "author": "Tharsis Soares", "text": "many seniors dev dont know this :D", "likes": 0}}, {"topLevelComment": {"id": "UgzIhCC0bvpZTYG3kHN4AaABAg", "publishedAt": "2022-10-14T05:18:41Z", "author": "Madhav Anand", "text": "Does anyone know which tool is used to make slides shown, these looks so sick.", "likes": 1}}, {"topLevelComment": {"id": "UgwyksvuwtBlVbtJitJ4AaABAg", "publishedAt": "2022-10-13T19:47:15Z", "author": "Mitrank Shah", "text": "Hello folks, I'm trying to solve these using C++ and I'm facing issues in the canSum problem using memoization. As per the given input, in the recursive way I'm getting 1 1 0 1 0 but when I try using memoization, I get 1 1 0 1 1 as output, i.e. wrong answer for the last one. I'm stuck, if anyone could help then it'd be greatly appreciated! Thank you in advance.", "likes": 0}, "replies": [{"id": "UgwyksvuwtBlVbtJitJ4AaABAg.9h88UCewZ_K9hA4UyvYgQe", "publishedAt": "2022-10-14T13:50:53Z", "author": "Alessandro Camilleri", "text": "bool canSumMemo(vector <int> numList, int sum, vector<int> &memoTable)\n{\n\tif (sum == 0) return true;\n\tif (memoTable[sum] != -1) return memoTable[sum];\n\t\n\tfor (int i : numList)\n\t{\n\t\tif (sum-i >=0 && canSumMemo(numList, sum - i, memoTable))\n\t\t\treturn memoTable[sum] = true;\n\t}\n\t\n\treturn memoTable[sum] = false;\n}\n\nbool canSum(vector<int> numList, int target)\n{\n\tvector<int> memoTable(target + 1, -1);\n\treturn canSumMemo(numList, target, memoTable);\n}\n\nint main()\n{\n\tcout << canSum({ 2, 3 }, 7) << endl;\n\tcout << canSum({ 5, 3, 4, 7 }, 7) << endl;\n\tcout << canSum({ 2 ,4 }, 7) << endl;\n\tcout << canSum({ 2, 3, 5 }, 8) << endl;\n\tcout << canSum({ 7,14 }, 300) << endl;\n}", "likes": 0}]}, {"topLevelComment": {"id": "Ugz8pOeEc4JI6VKqiHl4AaABAg", "publishedAt": "2022-10-12T00:04:46Z", "author": "Damon Garfield", "text": "Great tutorial!\nOne thing though, your canSum function isn't working the way you think it is, it's just looping over the first number of the array. For example try doing this: console.log(canSum(7, [1, 1, 2]));\nIt will return true since it's just subtracting 1 over and over again...", "likes": 0}}, {"topLevelComment": {"id": "UgxgHWsI_YPrb3i44a14AaABAg", "publishedAt": "2022-10-11T21:36:40Z", "author": "Fortune Ochi", "text": "I get some really weird result for allConstruct 2:48 using these inputs\ntarget: \"hello\"\nwordBank: [\"he\", \"ll\", \"o\", \"ell\", \"o\", \"h\" ]\n\nCan someone try this?", "likes": 0}}, {"topLevelComment": {"id": "UgyN4gLEF7Y72xxLai14AaABAg", "publishedAt": "2022-10-10T23:17:39Z", "author": "ZEEG", "text": "Simply incredible. Keep it up, you're making an invaluable impact on those who need a little extra help :)", "likes": 1}}, {"topLevelComment": {"id": "UgyyZMn6xP0UgVuO5cZ4AaABAg", "publishedAt": "2022-10-09T07:41:58Z", "author": "MY Street Dog Tuk-Tuk", "text": "Dhan nirankar ji", "likes": 0}}, {"topLevelComment": {"id": "UgyJb7ontnT1CS-MO6t4AaABAg", "publishedAt": "2022-10-09T02:45:52Z", "author": "leojboby", "text": "I did not follow why the memoization space time complexity of canSum is o(m*n), seems like it only depends on targetSum. Is this related to primes?", "likes": 0}}, {"topLevelComment": {"id": "UgxwMor0Eqr3IkYE8VZ4AaABAg", "publishedAt": "2022-10-08T19:13:36Z", "author": "Nguyen Toan", "text": "In the canSum problem 1:25:39. I think more efficient if we put => memo[remainder] = false; into the else statement of (canSum() == true). It has less number of times calling canSum().", "likes": 0}}, {"topLevelComment": {"id": "UgwYxCuIInIgo4OFdMx4AaABAg", "publishedAt": "2022-10-07T08:22:25Z", "author": "\u5415\u6daf", "text": "PPT code animation explanation is made with what software?", "likes": 0}}, {"topLevelComment": {"id": "UgzbD2h7A8vhAkdbYth4AaABAg", "publishedAt": "2022-10-06T19:24:59Z", "author": "LifeLikeWeeds", "text": "A further optimization of gridTraveler (which was pointed out on the drawing board, but not implemented) is to always swap m with n if n is less than m. This takes advantage of the symmetry of gridTraveler(3, 4) and gridTraveler(4, 3) - The time complexity class will still be the same, but still, it reduces computation time by half. \n\nYou can also take it as a base case if *either* m is 1 *or* n is 1. If n is 1, then no matter what m is (as long as it's positive), the answer will be 1.", "likes": 0}}, {"topLevelComment": {"id": "UgyNQ7Z8POoZVzNSuLd4AaABAg", "publishedAt": "2022-10-06T19:23:11Z", "author": "Mahyar KL", "text": "awesome", "likes": 0}}, {"topLevelComment": {"id": "Ugwa4xs6ojxXNIFuGi54AaABAg", "publishedAt": "2022-10-06T19:04:19Z", "author": "Idan Liberman", "text": "Is there a Discord channel, or a forum of some sort, where we can ask questions about this course?\n\n I have a slightly different version of the canSum memoization problem (at 1:28:15 or so), which seems to work on the test cases, but I'd like to discuss it with others to see if it's truly valid.", "likes": 0}}, {"topLevelComment": {"id": "Ugx2FWnlLpqebCqaPS94AaABAg", "publishedAt": "2022-10-06T16:15:22Z", "author": "Sandeep Gamot", "text": "at 49:32 I think we can change the if condition to if( m === 1 || n === 1) return 1 instead of if( m === 1 && n === 1) return 1\n\nBecause if either of them are one like one row one column case it's pretty straight forward to imagine that there's just one way.\nThe benefit of this would be that either of the node is 1 we can shortcut out of it instead of going deeper into the tree.\n\nFor example for some case we end up with 1 row and 100 cols, then there's just one way to reach end. Vice versa 1 col and 100 rows theres only one way again.", "likes": 1}}, {"topLevelComment": {"id": "UgwaDU2xNf6ziO7mcQJ4AaABAg", "publishedAt": "2022-10-06T08:33:12Z", "author": "Wakil Ahmed", "text": "How O(2^n/2) is equal to O(2^n)?", "likes": 0}}, {"topLevelComment": {"id": "UgwU7YrdVZAgf0v-9IJ4AaABAg", "publishedAt": "2022-10-06T03:14:29Z", "author": "Tu\u011f\u00e7e Ak\u0131n", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzulqktX5SwhLUTfXl4AaABAg", "publishedAt": "2022-10-05T13:00:40Z", "author": "\u0420\u043e\u043c\u0430\u043d \u041f\u0430\u0432\u043b\u0435\u043d\u043a\u043e", "text": "1:50:15 are we really need to store an array in our memo object as a value? If we find a solution we quiqly go to the top of recursion just with our array as a return result. I think that there we don't really need to use memory to store array another time. We only need memo object to store that cases where we have null array, as a result to don't call functions in recurtions with same targetSum values", "likes": 0}}, {"topLevelComment": {"id": "Ugzx4E-X2PEUywnp7Hh4AaABAg", "publishedAt": "2022-10-05T07:56:59Z", "author": "Saurabh Gangamwar", "text": "Thanks you so much. This is the best Dynamic Programming course. Thank you for putting lot of efforts for explaining with diagrams.", "likes": 0}}, {"topLevelComment": {"id": "UgxkZl3zk_x4BUBu41N4AaABAg", "publishedAt": "2022-10-02T19:04:16Z", "author": "Abdur Rahman", "text": "1:42:00", "likes": 0}}, {"topLevelComment": {"id": "UgwcCyN2KakNJHIFDrh4AaABAg", "publishedAt": "2022-10-01T18:39:21Z", "author": "gabs", "text": "Great explanation thank you", "likes": 0}}, {"topLevelComment": {"id": "UgzWtEtt3KcHJJdrjel4AaABAg", "publishedAt": "2022-10-01T17:41:21Z", "author": "Chillivisuals", "text": "hmm, confused on the first memoization explanation. Why isnt the table filled from 6 to 3, not the other way round. Also does it compute left to right always?", "likes": 0}}, {"topLevelComment": {"id": "Ugwx2KsXWtzLdvhwdap4AaABAg", "publishedAt": "2022-09-30T12:34:54Z", "author": "Idan Liberman", "text": "Still at the beginning of it, but already I think this is a FANTASTIC work of teaching in a field that is so difficult and also (surprisingly) lacks good teachers. I do have one comment on the basic gridTraveler solution at 50:10 or so:\n\nAlvin writes that, in the case of a 1x1 grid (that is, n == 1 && m == 1), we need to return 1. I would argue that this can be optimized by requiring that ONLY ONE of the args needs to be 1 to return 1. After all, when you have a 1xm or nx1 grid (basically either a single row or column), you can only go straight, right? And straight == 1. So, there's no need to continue recurring down the tree if one of the arguments equals 1. Just return 1. And in code: if (n == 1 || m == 1) { return 1;}\n\nComments welcomed!", "likes": 0}, "replies": [{"id": "Ugwx2KsXWtzLdvhwdap4AaABAg.9gatfD5Bw_w9h1yBGErX3E", "publishedAt": "2022-10-11T10:13:06Z", "author": "Idan Liberman", "text": "@Danielle Barker Nice. It's a nice optimization that I wanted to discuss with someone. \nDid you do any other FCC courses or projects?", "likes": 0}, {"id": "Ugwx2KsXWtzLdvhwdap4AaABAg.9gatfD5Bw_w9h0o_LcKct-", "publishedAt": "2022-10-10T23:29:54Z", "author": "Danielle Barker", "text": "I caught that too, a year ago and commented about it.", "likes": 1}]}, {"topLevelComment": {"id": "UgzJ64dzan-sfeQuZp94AaABAg", "publishedAt": "2022-09-30T07:20:25Z", "author": "MatlabPhile", "text": "you skipped the check for n by m in the memo for grid traveler. so using your algorithm for 50 by 50 will run into a problem, because grid traveler is like a 2D case of fibonacci problem. So if you run the 50 by 50 with you code, it would be 1D fibonacci and would not return the solution in a really really long time.", "likes": 0}}, {"topLevelComment": {"id": "UgzuXiUBJi7NHAfV4tx4AaABAg", "publishedAt": "2022-09-29T18:24:51Z", "author": "DAS", "text": "Really confused with canSum in Python.\nAfter giving doing it independently or with minor guidance a couple shots and having it fail I tried to put in the EXACT same code as you. It ended up with the same problem - returning True for the (7,[2,4]) case.\nWhat was weird is if I ran that independently it returned False. If I ran it first it also returned False. But otherwise it returns True if proceeded with the other test cases.\n\nNote in my definition of the function canSum I gave memo={} to have a clear new memo every time the function was called from the bottom print lines. And yet it appears the results of previous memo calls were somehow making it give a false Positive (which I also don't understand). Even more oddly if I specify print(canSum(7,[2,4],memo={})) at the bottom it does work even if I run this after other printed function calls that normally broke it. Which means resetting the memo manually makes it work.\n\nI feel like there's something I don't get about how local variables work in Python that apparently works different in JS.\nI also don't understand how any previous value of memo would result in this weird situation. How can old stored memos return false positives, they should only record accurate values for function calls.", "likes": 1}, "replies": [{"id": "UgzuXiUBJi7NHAfV4tx4AaABAg.9gZwvQ5F4Hs9gkSOf-CIs0", "publishedAt": "2022-10-04T05:40:14Z", "author": "DAS", "text": "\u200b@Courtney Singleton One last reply. I watched that video and luckily the last question he gets directly addresses this. Essentially variables have a scope in Python. A variable you define in a function won't survive after returning out of the function (except by returning it out directly). However, when you give a function a default value like memo = {} in howSum, this basically makes the variable memo directly referenced by a function and so always in scope since a function is always in scope.\n\nWhat that means is our memo object will just keep growing and changing as we call on the function. 7,[2,4] returns 2,2,3 it thinks it can use 3 since 3 is still in the memo. I can only assume Javascript doesn't work this way and that's why the code works for him, but not us.\n\nFrom the last bit of the video I linked:\n\"Default values are held onto by the function itself. If you use a list as a default value for a function argument that is a value that is referred to by the function object itself and so it will stick around forever and be used for every function call that gets made [...] it'll grow indefinitely and surprise you\"\n\nThe stupidly easy fix is to just not have a keyword assignment for memo in the function itself. This way the memo object falls out of scope every time the function finishes its recursion, and means we have a clean memo for each print.\n\nHow that looks in our code:\ndef howSum(targetSum, numbers, memo):\nblah blah blah\n\nprint(howSum(7,[2,3],{})\n\nThe only difference between what we did and what we're doing now is we pass along an empty dictionary to be used as the argument for memo, rather than having memo default to {}. This allows memo to fall out of scope and be reset on the next function call. \n\nHope this helps.", "likes": 0}, {"id": "UgzuXiUBJi7NHAfV4tx4AaABAg.9gZwvQ5F4Hs9gk8O5wrr1y", "publishedAt": "2022-10-04T02:45:24Z", "author": "DAS", "text": "@Courtney Singleton I ran into another recursion problem with variables when making a recursive version of Markov chains. I was stumped until I manually reset the variable on every call to the function, which fixed my problem. \n\nI was referred by someone to check out this video: https://www.youtube.com/watch?v=_AEJHKGk9ns&t=2s\nAs how Python tracks variables in function calls can be quite non-intuitive. Hope it helps.", "likes": 0}, {"id": "UgzuXiUBJi7NHAfV4tx4AaABAg.9gZwvQ5F4Hs9gaFr-yM3QU", "publishedAt": "2022-09-30T06:38:15Z", "author": "DAS", "text": "@Courtney Singleton Good to see I'm not insane and there's something weird happening here. Do you also feel like the difficulty curves pretty high after the third or fourth exercise haha. He's building slow, but still blew past me there.", "likes": 0}, {"id": "UgzuXiUBJi7NHAfV4tx4AaABAg.9gZwvQ5F4Hs9g_nSIcDE2h", "publishedAt": "2022-09-30T02:21:20Z", "author": "Courtney Singleton", "text": "I came here looking to see if anyone else had commented on the same issue! If I specify memo={} when I make the call it works correctly. I don't understand why python is using the same dictionary for every function call otherwise", "likes": 0}]}, {"topLevelComment": {"id": "Ugz_AGenAZ-AYbrq5AJ4AaABAg", "publishedAt": "2022-09-29T05:09:57Z", "author": "Reddit_Duck", "text": "Thanks this course helped me a lot. I never really understood how and why dynamic programming is different from regular programming. But after going through the visualizations in this course, creating a mental map was a lot easier. This course helped me a lot, thank you for creating this master piece.", "likes": 0}}, {"topLevelComment": {"id": "UgwFC6rL8ALdZ2Nugv54AaABAg", "publishedAt": "2022-09-29T04:18:57Z", "author": "Tobiah Rex", "text": "Last Problem:\nThe recursive Time Complexity for generating every possible combination is intuitive only because if we draw a state-spaced-tree, we can actually manually calculate that TC is exponential. In DP however, the same logic doesn\u2019t apply (no state-spaced-tree), so it would have been AMAZING if you could have explained why the DP approach results in the same TC as it\u2019s NOT intuitive whatsoever. In an attempt to try, my logic is below but it doesn\u2019t seem to equate to exponential time?\n\n1. Iterating across the table = m\n2. looking at each n\u2019th prefix = n\n3.1. Copying m up to the i\u2019th character to check for a prefix match = m\n3.2. Copying the i\u2019th list of sub-arrays to concatenate a prefix match into = m[i].length * n\n3.3 Pushing in 3.2 answer to m[i+k] position = m[i].length * n\n\nTotal Time Complexity = O(m{1}*n{2}*(m{3.1} + 2(m[i].length * n){3.2, 3.3}) => O(m*n*(m+2(m[i].length*n)). \n\nHow is that exponential?", "likes": 0}}, {"topLevelComment": {"id": "Ugx3o-HxQM46ltzTA7N4AaABAg", "publishedAt": "2022-09-29T03:43:44Z", "author": "Domo", "text": "3:23:23 why is 3 row 3 col have to have 4 array + 4 array?", "likes": 0}}, {"topLevelComment": {"id": "Ugx9Qb7Q6zHs0D2jRj94AaABAg", "publishedAt": "2022-09-28T20:40:25Z", "author": "david016", "text": "I just wanna make sure...in the second exercise (grid traveler) you made a key \"m,n\" but since gridTraveler(m,n)==gridTraveler(n,m), you should make also key \"n,m\"...or am I mistaken?", "likes": 0}}, {"topLevelComment": {"id": "Ugzk2lrq_2aTElyDgSR4AaABAg", "publishedAt": "2022-09-28T19:24:52Z", "author": "EZboyrocks", "text": "1:04 wouldn't the space complexity be O(n*m) for memoizing every spot on the grid?", "likes": 0}}, {"topLevelComment": {"id": "Ugxw49EO3c5tMeoh1el4AaABAg", "publishedAt": "2022-09-28T05:21:12Z", "author": "Fran Kezic", "text": "LEGENDARY", "likes": 0}}, {"topLevelComment": {"id": "UgzkXToUv2y7l42YJe94AaABAg", "publishedAt": "2022-09-27T17:03:34Z", "author": "Domo", "text": "53:09 why high of tree is n + m ?", "likes": 0}}, {"topLevelComment": {"id": "UgyssBWMylpKEmSoUWJ4AaABAg", "publishedAt": "2022-09-27T14:19:43Z", "author": "Omkar Shetkar", "text": "Thank You Alvin! \ud83d\ude4f\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgyshdcIm73q8t-uklJ4AaABAg", "publishedAt": "2022-09-25T10:40:48Z", "author": "Pratik Hadawale", "text": "1:45:52 He uses the spread operater from javascript, for example, [...remainderResult, num] .My question is why didn't just pushed the \"num\" at the back of the list, which would just take constant  amount of time", "likes": 0}}, {"topLevelComment": {"id": "UgxvJr9z2_Mk_vsm9El4AaABAg", "publishedAt": "2022-09-24T19:22:06Z", "author": "helium73", "text": "It seems to be using  memo it before it stores it.   Does memo only work because memo is passed by reference?", "likes": 0}}, {"topLevelComment": {"id": "UgytKSp8DYIY7KXZD9J4AaABAg", "publishedAt": "2022-09-24T15:57:50Z", "author": "Andrew Awakened", "text": "The only thing missing from this excellent tutorial was a detailed explanation about how the map() method works. If that was included this would have been absolutely perfect.", "likes": 0}}, {"topLevelComment": {"id": "UgzHR8MmvoPPf4xI2xl4AaABAg", "publishedAt": "2022-09-24T14:23:16Z", "author": "TURALOWEN", "text": "Isn't it the case that O(dib) = O(2^(n/2)) = O(1.414^n) and not O(2^n)? I mean, there is no constant C such that 2^(n/2) >C * 2^n. What am I missing? (20:55)", "likes": 0}}, {"topLevelComment": {"id": "UgxIK9FkveKN4ILuu3V4AaABAg", "publishedAt": "2022-09-22T14:45:37Z", "author": "Pramesh Bajracharya", "text": "I never imagined DP problem could be something of my understanding, \nThat is no longer true.\nThank you Alvin, You are amazing.", "likes": 0}}, {"topLevelComment": {"id": "UgwhKLiaLYJ88RiDCvx4AaABAg", "publishedAt": "2022-09-22T10:55:28Z", "author": "azavier a", "text": "My mind was blown when i got to the tabulation part of the video, because while I was orIginally watching fib, i thought to myself \"wouldn't it be pretty fast to just calculate the sequence up to n in a for loop?\" and I'm glad my thoughts were validated", "likes": 0}}, {"topLevelComment": {"id": "Ugwy57zJiLbL-b7ylM54AaABAg", "publishedAt": "2022-09-22T09:56:53Z", "author": "Ahmed Madkour", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugx3F7O7vCiSH1pOGdh4AaABAg", "publishedAt": "2022-09-20T17:41:28Z", "author": "lim wilfred", "text": "How about the memory allocated for memo object in memoization method for GridTraveler? Do we have account for it in space complexity?", "likes": 0}}, {"topLevelComment": {"id": "Ugxsx21wkLOijv_WWs94AaABAg", "publishedAt": "2022-09-19T21:40:06Z", "author": "Gunwoo Kim", "text": "thank you for a quick and concise introduction to dynamic programming. this helped me a lot on getting started!", "likes": 0}}, {"topLevelComment": {"id": "UgwSAn8nt1OG-L-j3JR4AaABAg", "publishedAt": "2022-09-19T04:50:35Z", "author": "Andr\u00e9 Freitas", "text": "why JavaScript \ud83e\udd22\ud83e\udd22\ud83e\udd22", "likes": 0}}, {"topLevelComment": {"id": "UgygltdRR2SrKLaXPgh4AaABAg", "publishedAt": "2022-09-19T04:40:08Z", "author": "Satheeshkumar Kanakasabapathy", "text": "In CanSum memoized solution, I tried adding a print(\"Came here\") to see how many times it used the optimization happened, it did not even get there once! Given that we are storing only the remainders I am not sure how it will work", "likes": 0}}, {"topLevelComment": {"id": "UgztUPy7bGzlUOqCdJt4AaABAg", "publishedAt": "2022-09-18T10:07:28Z", "author": "Hari's Fashion", "text": "One of the best explanation...", "likes": 0}}, {"topLevelComment": {"id": "UgzwsmjsTbnsi4SAJ8N4AaABAg", "publishedAt": "2022-09-18T04:14:49Z", "author": "Carlos Jonathan Bernal", "text": "At 1:23:45, can we really say the maximal depth of the tree is m?\n\nThis idea is based on the assumption that the lowest number you can be provided, as part of the array parameter, is 1. But the question does not state that we cannot be provided decimal numbers as part of the array input; only non-negative inputs are prohibited. \n\nMeaning, if the target sum were 8, and the lowest array input were 0.1, the depth of the tree would be 10m (80), not m (8).", "likes": 0}}, {"topLevelComment": {"id": "UgxN0nO6LkuaN-w80H94AaABAg", "publishedAt": "2022-09-18T02:39:46Z", "author": "Carlos Jonathan Bernal", "text": "At 54:01, is space complexity really O(m + n)? \n\nCan't you use nodes for which either coordinate is 1 (m or n) as the base case, since whether it's 8, 1 or 1, 8, there's still only one way to traverse both grids, like with a 1, 1? \n\nThis would mean that space is not m + n, but rather m OR n, whichever is larger (due to the worst-case assumption of Big O notation). \n\nI believe time complexity remains at O(2 ^ (m + n)) though.", "likes": 0}}, {"topLevelComment": {"id": "Ugz4jGebpZ_XPEPWuj94AaABAg", "publishedAt": "2022-09-17T14:52:12Z", "author": "uday kiran", "text": "Courser is truely amazing. Could you also provide  the links to these problems for practicing   Thanks!! \ud83d\ude42", "likes": 0}}, {"topLevelComment": {"id": "UgwgSj53gGq-2S3uB994AaABAg", "publishedAt": "2022-09-17T13:49:38Z", "author": "Serge Kamga", "text": "Got to finish this course this weekend", "likes": 0}}, {"topLevelComment": {"id": "Ugz4lB9QLWbgiisc1ZB4AaABAg", "publishedAt": "2022-09-16T15:10:49Z", "author": "Fenrir", "text": "Great tutorial. Just a friendly reminder to the viewers, if you use the playback speed of 1.25 for this video, you can reduce the time spent on it to about 4 hours.", "likes": 0}}, {"topLevelComment": {"id": "UgyM24gwrRO82UmFIGt4AaABAg", "publishedAt": "2022-09-16T02:09:51Z", "author": "tyrolearner30", "text": "At 3:00:11, could anyone tell me the syntax in line 8 in Python? I am so lost in that line.", "likes": 0}, "replies": [{"id": "UgyM24gwrRO82UmFIGt4AaABAg.9g0j01zYLgl9gZYPtXVr31", "publishedAt": "2022-09-29T14:41:57Z", "author": "Fran Ke\u017ei\u0107", "text": "You can use:\nsuffix = target[len(word):]", "likes": 0}]}, {"topLevelComment": {"id": "UgyO3uS9-yFwT_bWwUN4AaABAg", "publishedAt": "2022-09-14T10:36:53Z", "author": "Qyum 1234", "text": "Man you are just beauty.I'm struggling for Dp and basically in Faang interview..Now I more clarify about that..", "likes": 0}}, {"topLevelComment": {"id": "Ugxgvi580p8lfluEvkp4AaABAg", "publishedAt": "2022-09-12T18:08:23Z", "author": "Carlos Galves", "text": "Did it in kotlin:\n\nfun main() {\n    println(gridTraveler(1, 1))\n    println(gridTraveler(2, 3))\n    println(gridTraveler(3, 2))\n    println(gridTraveler(3, 3))\n    println(gridTraveler(18, 18))\n}\n\nfun gridTraveler(m: Int, n: Int, memorize: HashMap<String, Float> = hashMapOf()): Float {\n    val key = \"{$m},{$n}\"\n\n    if (memorize.containsKey(key)) return memorize[key]!!\n    if (m == 1 && n == 1) return 1F\n    if (m == 0 || n == 0) return 0F\n\n    memorize[key] = gridTraveler(m - 1, n, memorize) + gridTraveler(m, n - 1, memorize)\n\n    return memorize[key]!!\n}\njust4fun", "likes": 0}}, {"topLevelComment": {"id": "UgxL9nckNnCPQv4curJ4AaABAg", "publishedAt": "2022-09-12T15:55:48Z", "author": "blackcurrant07", "text": "Great tutorial. However, it is odd that the knapsack problem does not even get mentioned. Knapsack is a prototypical dynamic programming problem.", "likes": 0}}, {"topLevelComment": {"id": "UgzOtiEMfXNDDzfKMWl4AaABAg", "publishedAt": "2022-09-12T00:55:22Z", "author": "Las Ranas Malevolas", "text": "1:52:00", "likes": 0}}, {"topLevelComment": {"id": "UgxxZ0iwJWejr2MCRDp4AaABAg", "publishedAt": "2022-09-10T23:06:34Z", "author": "david lafontant", "text": "Thank you very much\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f", "likes": 0}}, {"topLevelComment": {"id": "UgxPRwSV-PmunVMUAYB4AaABAg", "publishedAt": "2022-09-10T04:02:16Z", "author": "ali helbah", "text": "at time 1:44 on the howSum question, i dont know how the array getting each number added.  I am totally confused on how that works.  He is explaining it properly but I am just not understanding it.", "likes": 0}, "replies": [{"id": "UgxPRwSV-PmunVMUAYB4AaABAg.9fmU68ET6Qb9fmUCZ_n47O", "publishedAt": "2022-09-10T04:03:09Z", "author": "ali helbah", "text": "correction --- 1:44:40 time marker", "likes": 0}]}, {"topLevelComment": {"id": "Ugw2fo4fBPU518tDvIF4AaABAg", "publishedAt": "2022-09-10T01:21:14Z", "author": "Bob Jones", "text": "If anyone tries to replicate his default argument strategy in Python, then watch out! Python has mutable default arguments that are defined only once when the function is created. This is not the case in JS.", "likes": 0}}, {"topLevelComment": {"id": "UgzkyEEcVYj1-I_XyK94AaABAg", "publishedAt": "2022-09-10T01:06:38Z", "author": "Bob Jones", "text": "Tl;dr of below: This tutorial is great, but you can't reduce constants in exponents like you did in the Fibonacci function's time complexity calculation. The time complexity of the Fibonacci function is \u0398(Z^n) where Z is the golden ratio.\n\nThis tutorial is great, but there is a problem in the Fibonacci function's time complexity.\n\nThe time complexity O(2^(n/2)) is technically reducible to O(2^n) in the way that O(2^(n/2)) is reducible to O(n^n) (if you use O(f(n)) to mean the upper-bound time complexity).\n\nHowever, it is likely that you mean O(f(n)) as the tight bound time complexity (both lower and upper bounds reduce to O(f(n))), which can more accurately be noted as \u0398(f(n)). In which case, \u0398(2^(n/2)) is NOT reducible to \u0398(2^n).\n\nFor time complexity, the following rules exist:\n1) You can remove (divide) *constant multipliers*.\n2) You can remove smaller terms.\n\nExamples:\n\u0398(5n) -> \u0398(n)\n\u0398(5000) -> \u0398(1)\n\u0398(log2(n^2)) -> \u0398(2log2(n)) -> \u0398(log2(n))\n\u0398(log2(n) + log3(n)) -> \u0398(log2(n) + log2(n)/log2(3)) -> \u0398((1 + 1/log2(3))log2(n)) -> \u0398(log2(n))\n\u0398(3n^2 + 7n + 10) -> \u0398(n^2)\n\n\u0398(2^(n/2)) is NOT reducible to \u0398(2^n) in the same way that \u0398(2^n) is not reducible to \u0398(3^n). You cannot divide by any constant to make the two terms equivalent. \u0398(2^(n/2)) is approximately \u0398(1.41421^n).\n\nIt is true that the time complexity for fibonacci is between \u0398(2^(n/2)) and \u0398(2^n) as you suggested, though. Specifically, the closed form time complexity of fib(n) is \u0398(Z^n) where Z is the golden ratio.\n\nI won't go into the actual calculation as it is not very relevant to the conversation and likely wouldn't be expected from a programmer. Knowing that Fibonacci is exponential time complexity is likely good enough.", "likes": 0}}, {"topLevelComment": {"id": "Ugx75AjNwRPR38b9iLl4AaABAg", "publishedAt": "2022-09-08T16:40:41Z", "author": "Leonardo Vargas", "text": "pure gold.", "likes": 0}}, {"topLevelComment": {"id": "UgzYkSzAIgn1R9vyKiF4AaABAg", "publishedAt": "2022-09-08T16:29:07Z", "author": "Michael Winter", "text": "Is this also good for Java or just java script", "likes": 0}}, {"topLevelComment": {"id": "UgxlYymuIjmR66RTZjx4AaABAg", "publishedAt": "2022-09-08T15:40:37Z", "author": "Mikhail D", "text": "Definitely the best DP explanation on youtube, thank you sooooo much!", "likes": 0}}, {"topLevelComment": {"id": "UgyQ-Scf6gW83KSa5bZ4AaABAg", "publishedAt": "2022-09-08T02:46:34Z", "author": "Jeff Brubaker", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwZb29w8LShKaVJiYR4AaABAg", "publishedAt": "2022-09-07T16:55:10Z", "author": "RK", "text": "Super helpful lesson for introduction to dynamic programming.  Gradually builds on complexity in an easily understandable style.  Thanks for putting this together !", "likes": 0}}, {"topLevelComment": {"id": "UgweTJ2r7-Tj8i_Rrlx4AaABAg", "publishedAt": "2022-09-06T05:22:28Z", "author": "XiaoFei Yu", "text": "This is an amazing and helpful tutorial! \nFor GridTraveler program, we can solve it analytically. Assume a grid with size m*n ,  then to go from the top left to the bottom right, the total number of step moving right has to be (n-1), and the total number of step moving bottom has to be (m-1), the overall total number of step has to be n-1+m-1 = m+n-2. \nAny particular path is an arrangement of steps of these two types of directions. Therefore, it is equivalent to say that if we have total m-1+n-2=m+n-2, then count the number of ways we can pick m-1. So the analytical solution is (m+n-2)!/[(m-1)!(n-1)!] , where ! means factorial", "likes": 2}}, {"topLevelComment": {"id": "UgyLQPCdlvz587kHp4p4AaABAg", "publishedAt": "2022-09-06T04:36:49Z", "author": "Liang Yu", "text": "Why the time complexity of `canSum` with a memo is O(m*n)?", "likes": 0}, "replies": [{"id": "UgyLQPCdlvz587kHp4p4AaABAg.9fcEsc8DviL9fc_6KZmyHf", "publishedAt": "2022-09-06T07:42:19Z", "author": "Ramakrishnan S", "text": "An approximate reasoning is when the array element contains 1.  That is the case where the tree will grow the deepest.  For ex take target sum = 45 and a 3 element array  = [1, x, x].  The left most node will keep growing till hits a 0 and then it winds back up, the results will all be available in the memo. So the left most node at each level will result in a 3 recursive calls and the the number of levels is the target sum itself in the case of it getting reduced by 1 at each level. Hence the complexity is m * n .   Drawing out the graph for this will make it more clear. While this is understandable with 1 being in the array,  I am still unable to reason out for cases where there is a number > 1 . In that case the height of the tree will get reduced but not clear how the total number of calls will be <= m*n.", "likes": 1}]}, {"topLevelComment": {"id": "UgzzFPVOympeCC62vKV4AaABAg", "publishedAt": "2022-09-05T06:41:04Z", "author": "Arindam Paul", "text": "Excellent Content...", "likes": 0}}, {"topLevelComment": {"id": "UgxJzHQuQKktkHaUqJF4AaABAg", "publishedAt": "2022-09-04T22:03:57Z", "author": "Faisal Naeem", "text": "Should the memoization solution of gridTraveller not account for a key,  n,m in addition to m,n. since they both result in the same path as mentioned in the solution", "likes": 0}}, {"topLevelComment": {"id": "UgwLf2fyoQNCCglvnsR4AaABAg", "publishedAt": "2022-09-03T06:28:38Z", "author": "RAGZZY TV", "text": "my man Alvin! I'm a Senior Developer but it was always a grind to brush up DSA topics when I'm in the job hunt. Your videos helped me quantify it a lot. I just watch your DSA videos in 1.5x half a day before an interview and that is all I need. Very well put both for beginners and for folks like me who need a quick run-through. This is the kind of stuff internet is made for. Appreciate the great work. keep it up!", "likes": 21}}, {"topLevelComment": {"id": "UgxTtJP3VIl9xDT64eV4AaABAg", "publishedAt": "2022-09-02T11:40:04Z", "author": "Chukwuemeka Inya", "text": "Very lovely tutorial. I finally feel confident about solving recursion and DP problems.\n\nI have a observation: At 2:32:27, why is the target.indexOf(word) === 0 not factored in, in the calculation for time complexity. Even though we are comparing against 0, target.indexOf(word) will first search through the word, which is (O(m)) before comparing against 0. This should leave us with an overall time complexity of O(n ^ m * m ^ 2).", "likes": 1}}, {"topLevelComment": {"id": "Ugwa8OZHVtrzoO-5McJ4AaABAg", "publishedAt": "2022-09-01T17:13:26Z", "author": "019dona b", "text": "so is dfs dp?", "likes": 0}}, {"topLevelComment": {"id": "Ugyz-9ZmVXXYp22IFT54AaABAg", "publishedAt": "2022-09-01T06:41:33Z", "author": "Shakthi sri", "text": "2:58:43", "likes": 0}}, {"topLevelComment": {"id": "UgwYYpqDp-01tJnVl3F4AaABAg", "publishedAt": "2022-09-01T01:23:01Z", "author": "maisSorteQJuizo", "text": "In the allConstruct tabulation problem, I think you should test if table[i] !== [] before searching in the wordBank, seems like you may construct wrong answers without this test. Example: allConstructTab('abcxdef', ['ab', 'cd', 'ef', 'xd']) will give [['xd', 'ef']], wich is wrong", "likes": 0}}, {"topLevelComment": {"id": "UgwhYqeFBrjYgCj4fUl4AaABAg", "publishedAt": "2022-08-31T03:46:16Z", "author": "Vicky K", "text": "I understand the concept i am facing difficulty in implementing this using java, since I don't know node.js, does anyone have a java code for best sum problem.", "likes": 0}}, {"topLevelComment": {"id": "UgxLyfGP09LhSGAkjDB4AaABAg", "publishedAt": "2022-08-29T19:53:31Z", "author": "alex tran", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgyAj9ESrihGek3JiPF4AaABAg", "publishedAt": "2022-08-26T17:11:53Z", "author": "dexter 247", "text": "", "likes": 0}}, {"topLevelComment": {"id": "Ugz2IljFaZGOGEkAHdJ4AaABAg", "publishedAt": "2022-08-26T15:46:17Z", "author": "PANKAJ CHOUHAN", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgwIqVD9axG2pPbBSAV4AaABAg", "publishedAt": "2022-08-25T20:05:54Z", "author": "Bharath Govinda", "text": "This is awesome, thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgwmhBpuXXdUmGCD4qJ4AaABAg", "publishedAt": "2022-08-25T12:39:18Z", "author": "Aniket Gadhe", "text": "Here's link to my Personal Repository of all codes in video :\nhttps://github.com/Aniket6518/Dynamic_Programming\n\nI hope you all take them as reference for practice :)", "likes": 1}}, {"topLevelComment": {"id": "UgxW76aCMZ71M_LLANl4AaABAg", "publishedAt": "2022-08-24T21:29:47Z", "author": "Ciro Sequea", "text": "Thank you!, nice tutorial. \nI tryed the last exercise with allConstruct(\"eeeeeeeeeeeef\", [e... but didn\u00b4t  work cuz of stack overflow..., so I used push(newCombinations) istead of push(....newCombinations) and it works and just add a Array.map() to get the deepest array. Keep going guys.", "likes": 0}}, {"topLevelComment": {"id": "UgxU_FttisiBrUObLCN4AaABAg", "publishedAt": "2022-08-23T18:10:39Z", "author": "Hamood Habibi", "text": "3:22:12 the fib(n) tabulation code wouldn't that be index out of range? how is that working o.o", "likes": 0}}, {"topLevelComment": {"id": "Ugx_nmCzr0WCgTTdg3R4AaABAg", "publishedAt": "2022-08-23T17:04:45Z", "author": "TiiikToook", "text": "This is very worth 5hrs course! good job!", "likes": 0}}, {"topLevelComment": {"id": "Ugxgl_qIMtYlT42jWTR4AaABAg", "publishedAt": "2022-08-23T11:08:00Z", "author": "Frontend Geek", "text": "Are you god ?", "likes": 0}}, {"topLevelComment": {"id": "Ugw21mhfAWcyQ0zv-VZ4AaABAg", "publishedAt": "2022-08-22T20:48:05Z", "author": "Pratik Mhatre", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgxgDyBwpEei4Tw3pTB4AaABAg", "publishedAt": "2022-08-22T20:45:19Z", "author": "Pratik Mhatre", "text": "Very very useful and thaughtfully structured video. Took me 3 whole days to grasp but now I feed I understand these complex topics thoroughly.\nThanx Alvin.", "likes": 0}}, {"topLevelComment": {"id": "UgyBIRBhHCXqjb93LGV4AaABAg", "publishedAt": "2022-08-21T17:47:55Z", "author": "a2xd94", "text": "Brilliant video! The entire community of learners owes you a coffee for teaching us this excellent approach to solving the infamous dynamic programming problems. Other videos and books do not go into this well-defined  mindset and step-by-step strategy that you need to develop, in order to understand and ultimately solve these problems from a *pragmatic* approach (which is what ultimately aces technical interviews). Keep up the great work, Alvin!", "likes": 14}}, {"topLevelComment": {"id": "UgxVwwqqHPVvdfu39vh4AaABAg", "publishedAt": "2022-08-21T16:39:37Z", "author": "psyd chic", "text": "mathematically, the formula for number of ways to travel to the end of a m*n grid is (m+n-2)!/(m-1)!(n-1)!\nyou can figure this out by placing all possible grids in an arrangement that resembles pascals triangle to realize the answer involves a factorial, and then realizing that the grid dimensions set the number of steps to the right or down in all possible paths which remain constant. The factorial is an expression of all the possible arrangements of these steps, in which the steps of right are indistinguishable from one another as is for the steps down\nyou do not need a computer to solve this problem", "likes": 1}, "replies": [{"id": "UgxVwwqqHPVvdfu39vh4AaABAg.9f-KsawdYz_9f-L4MjIHWN", "publishedAt": "2022-08-21T16:41:22Z", "author": "psyd chic", "text": "although, you may need a calculator", "likes": 0}]}, {"topLevelComment": {"id": "Ugw5MRadxOVQgbNjCIt4AaABAg", "publishedAt": "2022-08-21T13:45:52Z", "author": "Tanmay Patel", "text": "Thanks for the amazing course!\n\nI have a doubt in the gridTraveller problem:\nDuring memoization, Why didn't we declare a base condition for when gridTraveller(a,b) == gridTraveller(b,a)? How did the program work without it?", "likes": 1}, "replies": [{"id": "Ugw5MRadxOVQgbNjCIt4AaABAg.9f-1-3K1i379fEh0n4kfeQ", "publishedAt": "2022-08-27T15:50:27Z", "author": "Tanmay Patel", "text": "@Andrew Awakened oh okay. Thanks.", "likes": 0}, {"id": "Ugw5MRadxOVQgbNjCIt4AaABAg.9f-1-3K1i379fEgK-96r63", "publishedAt": "2022-08-27T15:44:20Z", "author": "Andrew Awakened", "text": "He must have forgotten to do that part. But remember, that was just a further optimization to make it even faster, it isn't needed for the algorithm to work.", "likes": 1}]}, {"topLevelComment": {"id": "Ugx7xAfCcJK-yMQ6KHd4AaABAg", "publishedAt": "2022-08-21T06:16:52Z", "author": "BillH2949", "text": "For the fib tabulation algorithm, the array should be of size (n + 2) if you're not going to do bounds checking.  Apparently JavaScript doesn't catch this, but my Java code definitely doesn't like an n-size array. *EDIT* At 3:50:47 he actually mentions this characteristic in JavaScript.", "likes": 0}}, {"topLevelComment": {"id": "UgyDg_jQKkdNl1P82lx4AaABAg", "publishedAt": "2022-08-20T20:37:15Z", "author": "Joe F", "text": "I think actually the gridTraveler problem can be solved analytically as a permutation problem with repetition, so it is O(1).   For example the for the 18x18 square, we're trying to permute 17 R  moves and 17 D moves to get from upper left to lower right.  The formula for that is just (17 + 17 )!/(17!*17!) or 2333606220.", "likes": 1}}, {"topLevelComment": {"id": "UgzeiGKaPXJ88499TeF4AaABAg", "publishedAt": "2022-08-20T19:10:34Z", "author": "Samuel Stidham", "text": "There's one way you can optimize the grid traveler problem. If either m or n is 1, the number of ways you can travel to the destination is just one. Instead of if (m == 1 && n == 1), writing if (m == 1 || n == 1) is slightly more optimal.", "likes": 0}, "replies": [{"id": "UgzeiGKaPXJ88499TeF4AaABAg.9ey1MKiAt0x9ey1RQkVEjP", "publishedAt": "2022-08-20T19:11:16Z", "author": "Samuel Stidham", "text": "You're skipping the need to check n if m is 1.", "likes": 0}]}, {"topLevelComment": {"id": "Ugw2cK7dLze87Fqm2x94AaABAg", "publishedAt": "2022-08-20T16:28:33Z", "author": "Avighna", "text": "3:32:30 over here, I don't get why you don't do:\n\nif i or j is 0 set table[i][j] to 0 and continue\nif i or j is 1 set table[i][j] to 1 and continue\n\nthen, table[i][j] = table[i][j - 1] + table[i - 1][j]\n\n/*\nMore formally, in C++:\nint gridTraveler(int m, int n) {\r\n  if (m == 0 || n == 0)\r\n    return 0;\r\n  if (m == 1 || n == 1)\r\n    return 1;\r\n\r\n  std::vector<std::vector<int>> table(m + 1, std::vector<int>(n + 1, 0));\r\n  for (auto i = 0; i < table.size(); i++) {\r\n    for (auto j = 0; j < table[0].size(); j++) {\r\n      if (i == 0 || j == 0) {\r\n        table[i][j] = 0;\r\n        continue;\r\n      }\r\n      if (i == 1 || j == 1) {\r\n        table[i][j] = 1;\r\n        continue;\r\n      }\r\n\r\n      table[i][j] = table[i - 1][j] + table[i][j - 1];\r\n    }\r\n  }\r\n\r\n  return table[m][n];\r\n}\n*/\n\nThis method uses the 'recursive' pattern, and is tabular (best of both worlds), and due to that is also easier to understand.\n\nHowever, don't take this as a 'hate' comment. This content is absolutely gold, I used to find DP daunting but you explain it so well! All of the memoization is literally flawless, and it's amazing that this quality of content is available for free on YouTube. I've only watched till the timestamp mentioned in my comment, so I can't say comment on the rest of the tabulation stuff.", "likes": 0}}, {"topLevelComment": {"id": "UgzKKOcoJkaoMx82bzN4AaABAg", "publishedAt": "2022-08-20T15:52:05Z", "author": "Jialing Zhou", "text": "Thank you for the video! It is very clear and helpful!", "likes": 0}}, {"topLevelComment": {"id": "UgxKRzq_IsEuiU54A314AaABAg", "publishedAt": "2022-08-20T14:30:54Z", "author": "Supriya Bansal", "text": "Thanks for the great content.\n\nIn gridTraveler problem, base condition could be that if either of rows or columns is 1 , we can return 1\n\nSo, if(m == 1 || n == 1) return 1;\n\nAnd i think we could just check m and n interchangeably :\n\nif ((m + \"-\" + n) in memory) return memory[m + \"-\" + n];\nif ((n + \"-\" + m) in memory) return memory[n + \"-\" + m];\n\nAs number of ways to travel a grid for (2,3) will be same as number of ways in case of (3,2)", "likes": 1}}, {"topLevelComment": {"id": "UgzRqPoAEk3FxQpL3U94AaABAg", "publishedAt": "2022-08-20T06:23:57Z", "author": "Xavier J", "text": "What software was used to make this presentation? It is so well made.", "likes": 1}}, {"topLevelComment": {"id": "UgxOeDg8JuXSPNb4xvx4AaABAg", "publishedAt": "2022-08-20T03:24:23Z", "author": "Tom\u2019s Daily Study", "text": "Sweet", "likes": 0}}, {"topLevelComment": {"id": "UgxnhmMnaAjay_2tS-B4AaABAg", "publishedAt": "2022-08-19T04:34:20Z", "author": "Shree Bohara", "text": "Wow just amazing!!", "likes": 1}}, {"topLevelComment": {"id": "UgwC0vG2EriBVnGEr0V4AaABAg", "publishedAt": "2022-08-16T15:09:39Z", "author": "Mahmoud Bouchefa", "text": "I can't understand how your program doesn't crash when you tried to access to  table[i+2] when i==n on the for loop because of out the range", "likes": 0}}, {"topLevelComment": {"id": "UgwyEaHksf6sSbGXRPt4AaABAg", "publishedAt": "2022-08-16T07:21:38Z", "author": "Ekim Kurtulmaz", "text": "One of the bes ttutorials i ve ever seen on youtube", "likes": 0}}, {"topLevelComment": {"id": "UgylmzNXOjVFygRT7vd4AaABAg", "publishedAt": "2022-08-15T08:44:43Z", "author": "abdul hafizuddin", "text": "One of the best tutorial I've watched on YouTube.", "likes": 0}}, {"topLevelComment": {"id": "UgwvuY8Hv7keax3Aykt4AaABAg", "publishedAt": "2022-08-12T11:24:31Z", "author": "Guan Waver", "text": "https://youtu.be/oBt53YbR9Kk?t=6562\n\nA computational bug was found.\nFor the memoized version of howSum, the time complexity should be O(m*n+m\u00b2) . And the result O(m\u00b2*n)in the video is wrong.\n\nThe key point is , not every iteration will execute [...remainderResult, num] . Actually it is only executed m times,  as one time for one key of memo.", "likes": 1}}, {"topLevelComment": {"id": "UgxVG3k2HxfmaTdonK14AaABAg", "publishedAt": "2022-08-12T07:03:29Z", "author": "parikshit das", "text": "For the howSum code, if you're having trouble spreading the array (in case you're using something other than JS). Try solving it with booleans, kinda like the canSum problem, and then if it returns true, then just add the num in a global array/ ArrayList/ Vector.", "likes": 5}}, {"topLevelComment": {"id": "UgybuiYVFI4fSsR5Cn94AaABAg", "publishedAt": "2022-08-11T17:30:53Z", "author": "Roli Bernanda", "text": "Long life brother!", "likes": 0}}, {"topLevelComment": {"id": "UgzncqyngPYBBiA5UrZ4AaABAg", "publishedAt": "2022-08-11T06:37:23Z", "author": "Aman Kaushik", "text": "In bestSum problem, can we just sort the numbers array in decending order? Because doing so will always generate the best sum first.", "likes": 0}}, {"topLevelComment": {"id": "UgxNxKzd0NqM1-Zb9Yt4AaABAg", "publishedAt": "2022-08-10T20:53:29Z", "author": "Matt Zuo", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzeEPnAD8fk9IL69x14AaABAg", "publishedAt": "2022-08-10T17:07:13Z", "author": "Jaya Kumar", "text": "Hi", "likes": 1}}, {"topLevelComment": {"id": "Ugw05DZLn-kYCZH8vGB4AaABAg", "publishedAt": "2022-08-10T15:22:57Z", "author": "Nh\u00f3m 1 XMCB49", "text": "Thanks so much for sharing this tutorial!", "likes": 0}}, {"topLevelComment": {"id": "Ugz-hBiIYGmkL1RBSox4AaABAg", "publishedAt": "2022-08-09T21:51:46Z", "author": "Ertu\u011frul \u015eent\u00fcrk", "text": "It's the best quality course by far I have seen on youtube. \nBut I think if we consider these problems at a higher level we can use backtracking to reduce space complexity on most of these questions.\nAnd for can sum tabulation if we increase size of the array our space complexity increases from m to the maximum value of the array. If there is a very big number in the array then we will probably run out of memory.", "likes": 0}}, {"topLevelComment": {"id": "Ugz3r4V9iYVtBK7w2jR4AaABAg", "publishedAt": "2022-08-09T13:32:56Z", "author": "Aarjav Jain", "text": "the time complexity for howSum should surely be m^n, not n^m as shown at 1:44:14??", "likes": 0}}, {"topLevelComment": {"id": "Ugwm0OXhvGNIXQMyrGJ4AaABAg", "publishedAt": "2022-08-09T06:55:49Z", "author": "Daniyal Kabir", "text": "This is legendary! Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgxX8h8eVbVm1-EUr4l4AaABAg", "publishedAt": "2022-08-08T12:37:39Z", "author": "Shruti", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugzf425t0G1kbOXiz1x4AaABAg", "publishedAt": "2022-08-07T14:08:11Z", "author": "higalex", "text": "Thanks for the great content! One improvement that could be made is that the grid traveler's \"if\" condition can be simply \"if (x == 1 || y == 1) return 1;\".", "likes": 3}, "replies": [{"id": "Ugzf425t0G1kbOXiz1x4AaABAg.9eR0QDEGcjv9fKVV951n2Q", "publishedAt": "2022-08-29T21:56:27Z", "author": "Dennis Folz", "text": "That is correct, because in this case one child will return 0 and the other child will return 1 after going down to (1,1) ^^", "likes": 0}]}, {"topLevelComment": {"id": "UgyzvMME_U5LtOhYkm54AaABAg", "publishedAt": "2022-08-07T07:27:13Z", "author": "Deepanshu Choudhary", "text": "[URGENT]  at 1:28:19 I'm using the following python code for CanSum fucntion and it's different results than yours and it is exactly equivalent.\n\n\r\ndef canSum(targetSum,numbers,memo={}):\r\n\tif targetSum in memo:\r\n\t\treturn memo[targetSum]\r\n\tif targetSum == 0:\r\n\t\treturn True \r\n\tif targetSum < 0 :\r\n\t\treturn False\r\n\tfor num in numbers:\r\n\t\trem = targetSum - num\r\n\t\tif canSum(rem,numbers,memo) == True:\r\n\t\t\tmemo[targetSum] = True\r\n\t\t\treturn True\r\n\tmemo[targetSum] = False\r\n\treturn False\r\n\r\nprint(canSum(7,[2,3])) \r\nprint(canSum(7,[5,3,4,7]))\r\nprint(canSum(7,[2,4]))\r\nprint(canSum(8,[2,3,5]))\r\nprint(canSum(300,[7,14]))\r\n\n\nit gives\nTrue\nTrue\nTrue\nTrue\nTrue\n\n\n\nCAN ANYONE TAKE A LOOK?", "likes": 1}, "replies": [{"id": "UgyzvMME_U5LtOhYkm54AaABAg.9eQIXVYwC8_9eujkbLFT2q", "publishedAt": "2022-08-19T12:30:16Z", "author": "Surendhar V", "text": "I am not a python guy.\nI tested your code.\nRun it with any one of the test cases.\nIt will show the correct result.", "likes": 0}]}, {"topLevelComment": {"id": "UgxYogB_ho_ayLrUDo94AaABAg", "publishedAt": "2022-08-06T18:22:44Z", "author": "Victor Cui", "text": "for the time complexity at https://www.youtube.com/watch?v=oBt53YbR9Kk&t=8189s, shouldn't it be O((n^m) * n*m) b/c the indexOf operation is n*m time complexity?", "likes": 0}}, {"topLevelComment": {"id": "Ugw9_nArqwdmU3iF6W14AaABAg", "publishedAt": "2022-08-06T11:32:18Z", "author": "Stephen Mbaalu", "text": "This is Gold Boss. I wish I knew all these before OpenAI interview.  Note python users, the memorized objects best works with an inner function otherwise when you run two consecutive statements the results are are really crazy", "likes": 0}}, {"topLevelComment": {"id": "UgweQ0SgdEz2o3gdGnJ4AaABAg", "publishedAt": "2022-08-05T20:16:01Z", "author": "Andrew Grant", "text": "I was following the canSum problem and im coding in Python ; for the canSum(7, [2,4]) example if I run that example by itself it will return False, but paired with the other examples it returns True, not sure what im doing wrong.  Thank you for this video :)", "likes": 0}}, {"topLevelComment": {"id": "Ugx_LaA3p2YCwFLCmtB4AaABAg", "publishedAt": "2022-08-05T12:48:15Z", "author": "No Name", "text": "What IDE is this?", "likes": 0}, "replies": [{"id": "Ugx_LaA3p2YCwFLCmtB4AaABAg.9eLig1PP65L9eTqUTf9dzD", "publishedAt": "2022-08-08T16:30:22Z", "author": "Ken P", "text": "VS Code", "likes": 0}]}, {"topLevelComment": {"id": "UgzccW2FrbUH4l_BoCd4AaABAg", "publishedAt": "2022-08-05T06:29:43Z", "author": "blockify", "text": "AT 1:01:30 Would it be better to be checking if (n + \u201c , \u201d + m) is in memo too? As this would cut down on a lot of the recursion..", "likes": 1}, "replies": [{"id": "UgzccW2FrbUH4l_BoCd4AaABAg.9eL2Mb72qDc9eSTxVHtkm3", "publishedAt": "2022-08-08T03:45:31Z", "author": "Snowball Effect", "text": "I think so.\nAnother option is I added that as a key into the object, which essentially doubles the space complexity:\n*memo[n + ',' + m] = memo[key]*\n\nYour solution is probably the better one; just have another if statement that returns the value in the memo object.", "likes": 0}]}, {"topLevelComment": {"id": "UgzXCFF1TmLmgJWQ_kl4AaABAg", "publishedAt": "2022-08-05T04:12:56Z", "author": "Manoj b", "text": "The tutorial on DP can't get any better! Quality content. Best out there. Thank you very much!", "likes": 1}}, {"topLevelComment": {"id": "Ugzih40dzOOf01B1Bkp4AaABAg", "publishedAt": "2022-08-05T03:32:56Z", "author": "wizha", "text": "For the grid traveler memoization, you only check if the key (m,n) is in the memo, but what about the key (n,m), the reversed order? Does it do that already or no?", "likes": 0}}, {"topLevelComment": {"id": "Ugzds8eI_2ZFQlMMPsl4AaABAg", "publishedAt": "2022-08-04T18:27:51Z", "author": "Mustafa Assaf", "text": "Thank you, it is a great toturial", "likes": 0}}, {"topLevelComment": {"id": "UgyHj6mwKIJzPN8ZJcZ4AaABAg", "publishedAt": "2022-08-04T14:57:04Z", "author": "Ashutosh", "text": "Damn most useful three days i have spent on coding", "likes": 0}}, {"topLevelComment": {"id": "UgwHm9grLyrQlq9dMdd4AaABAg", "publishedAt": "2022-08-04T14:54:21Z", "author": "derp", "text": "I've been a professional programmer for 21 years, and the only time I've EVER had to use this technique was in interviews.", "likes": 0}}, {"topLevelComment": {"id": "UgwHIcBMjJLETdU8QD14AaABAg", "publishedAt": "2022-08-04T13:59:50Z", "author": "Learn To Grow", "text": "this video is a gold mine need more videos like this", "likes": 0}}, {"topLevelComment": {"id": "UgxB4wwlpxB28ruPA594AaABAg", "publishedAt": "2022-08-04T04:02:52Z", "author": "Rachit Nagwani", "text": "Can I get a Certification after doing this course , willing to Pay if available on any other platform?", "likes": 0}}, {"topLevelComment": {"id": "UgzGl4ah26tjF265fch4AaABAg", "publishedAt": "2022-08-03T22:56:32Z", "author": "Jo\u00e3o Guilherme", "text": "Very nice. I knew some of the concepts in advance but the way the tutor organized the problems and the overall presentation really gave me a whole new perspective on the subject. \n>>> Onto the Graph tutorial now!", "likes": 0}}, {"topLevelComment": {"id": "Ugy9TamSuXUKHBihQJ14AaABAg", "publishedAt": "2022-08-03T18:08:18Z", "author": "Ali Badra", "text": "This guy is the best he helped understand advanced recursion algos and dynamic programming", "likes": 0}}, {"topLevelComment": {"id": "UgycMxlOeRPLYYDeVAZ4AaABAg", "publishedAt": "2022-08-03T13:45:50Z", "author": "sethika blip", "text": "is there a spread operator in c++?", "likes": 0}}, {"topLevelComment": {"id": "UgzPWnNU9-4SSYgpj2B4AaABAg", "publishedAt": "2022-08-02T07:01:39Z", "author": "Micha\u0142 Dobrza\u0144ski", "text": "Great video. But you mistake height of a tree (around 16:45). It is depth, not height. Height is the largest number of egdes from the deepest leaf to the root node. Depth is the max number of nodes to the deepest leaf.", "likes": 1}}, {"topLevelComment": {"id": "UgxIGyulIAocaKNDnzx4AaABAg", "publishedAt": "2022-08-01T21:43:35Z", "author": "Mohammad B", "text": "it was an amazing tutorial overall ! \nIf I could just change one little thing about it, it was the tabulation table explanation which you started from the first index and you went through it and said that it will be the word without that last letter but if you could just imagine the first index as an empty character and start the target from the second index it would be much easier to understand\nnevertheless thank you very much for this amazing tutorial.", "likes": 0}}, {"topLevelComment": {"id": "UgzMyeyq43C3QpCvccF4AaABAg", "publishedAt": "2022-08-01T10:25:40Z", "author": "Software Job Tips", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwYCnuCEiTWOtFk90V4AaABAg", "publishedAt": "2022-07-31T22:07:35Z", "author": "Sean", "text": "At 4:30:26, doesn't it make more sense to align the letters 'abcdef' under the array visual, to the right side? Since table[0] is describing the event if the empty string can be formed from the word bank, and table[1] representing, if 'a' can be formed and so on. It's a bit confusing with the chars in the wrong position, or maybe I've misunderstood something", "likes": 1}}, {"topLevelComment": {"id": "Ugy0I_URvTEHnL-ahQF4AaABAg", "publishedAt": "2022-07-30T11:58:41Z", "author": "Nikolai Poriadin", "text": "Alvin, thank you much! Only you could open my eyes on this science domain!", "likes": 0}}, {"topLevelComment": {"id": "UgzIjXkMt2lCKBBX4YJ4AaABAg", "publishedAt": "2022-07-30T07:52:23Z", "author": "Mydala Harsha", "text": "Very thankful for the video....very confused about recursion and dynamic programming ,this video made the difference now. I have one question in fib tabulation, while changing i+2 when i ==n wont there be any index out of range error in java script ? I'm implementing in python so I'm getting this error", "likes": 0}}, {"topLevelComment": {"id": "UgyOv7ccRtioqbF398d4AaABAg", "publishedAt": "2022-07-29T19:55:59Z", "author": "Brumarul", "text": "Pure gold.", "likes": 1}}, {"topLevelComment": {"id": "UgxgZxDjsmoQ-S0_Isd4AaABAg", "publishedAt": "2022-07-29T15:44:36Z", "author": "Diego Rocha", "text": "In the example of canConstruct 2:24:00 you can use the method `startsWith` since you're just interested in knowing if the target starts with the word, so you don't need to traverse the entire string finding the index! Amazing course btw I really appreciated!", "likes": 5}, "replies": [{"id": "UgxgZxDjsmoQ-S0_Isd4AaABAg.9e40IZwYy1n9eONnTasYUF", "publishedAt": "2022-08-06T13:34:45Z", "author": "Repent and believe in Jesus Christ", "text": "Repent to Jesus Christ \u201cWe demolish arguments and every pretension that sets itself up against the knowledge of God, and we take captive every thought to make it obedient to Christ.\u201d\n\u202d\u202d2 Corinthians\u202c \u202d10:5\u202c \u202dNIV\u202c\u202c", "likes": 0}]}, {"topLevelComment": {"id": "Ugx1d1q7_-Bqy3jUGCB4AaABAg", "publishedAt": "2022-07-29T11:10:54Z", "author": "Shibin B", "text": "#TimeComplexity #shibinlearnings", "likes": 0}}, {"topLevelComment": {"id": "UgzGXD9uLCL2VprBq1t4AaABAg", "publishedAt": "2022-07-28T20:51:43Z", "author": "Jarle Stavnes", "text": "Why does O(2^(n/2)) simplify to O(2^n)? It should be O(sqrt(2)^n), which is different from O(2^n).", "likes": 0}, "replies": [{"id": "UgzGXD9uLCL2VprBq1t4AaABAg.9e1zdzyT0w29e3FpP8Jrjx", "publishedAt": "2022-07-29T08:41:03Z", "author": "vanchark", "text": "Graph both of them on desmos. They look the same asymptotically (as n gets larger).", "likes": 0}]}, {"topLevelComment": {"id": "UgxD-fnnfMmdjr_sGKN4AaABAg", "publishedAt": "2022-07-27T23:08:20Z", "author": "Magus Art Studios", "text": "Ah thank goodness this is much easier in practice than it sounds", "likes": 0}}, {"topLevelComment": {"id": "Ugx9GR5wug2VOIv6_Ol4AaABAg", "publishedAt": "2022-07-27T15:10:26Z", "author": "Patryk Kotarski", "text": "The grid traveler can be solved through an operation. If your arguments are a and b then you do b * (a - 1) and it will give you the result :/", "likes": 0}}, {"topLevelComment": {"id": "UgxTHudl8q3XFHx5Cfp4AaABAg", "publishedAt": "2022-07-27T04:07:07Z", "author": "Pyllergy Jiang", "text": "Anyone knows how to do the last question in Python3?\ud83d\ude27", "likes": 0}}, {"topLevelComment": {"id": "UgwN7UStu1rD2r650jZ4AaABAg", "publishedAt": "2022-07-26T18:32:54Z", "author": "Marco Grubert", "text": "Great examples. Up to the fibonacci table that is: that implementation is terrible with out of bounds access and unnecessary read/writes.", "likes": 0}}, {"topLevelComment": {"id": "UgxQZCm6zkMSTiH5C4h4AaABAg", "publishedAt": "2022-07-26T17:34:27Z", "author": "Kashif Carri", "text": "The symptomatic harmonica nomenclaturally appear because rhythm beautifully obtain through a halting holiday. mere, muddled policeman", "likes": 0}}, {"topLevelComment": {"id": "Ugwtaz40kalivxl-CAB4AaABAg", "publishedAt": "2022-07-26T13:33:44Z", "author": "minciNashu", "text": "55:55 you didn't implement that nuance in the final solution -- your key is 'm,n' which leads to duplicate values i.e '2,3' treated as different from '3,2'\n\nSo the key should be something like 'min(m,n) , max(m,n)'\nThis leads to M * N iterations, instead of 2 * M * N.", "likes": 0}}, {"topLevelComment": {"id": "UgxcwBsclPIRooBEFVt4AaABAg", "publishedAt": "2022-07-26T09:23:12Z", "author": "Kashif Carri", "text": "The incredible burma rationally warm because sky behaviourally glue sans a delirious account. moaning, happy grandson", "likes": 0}}, {"topLevelComment": {"id": "UgzNX4ry4hrP_ZBAD_x4AaABAg", "publishedAt": "2022-07-26T04:51:35Z", "author": "Elliot", "text": "I don\u2019t understand why you refuse to check for out of bounds. That\u2019s never gonna work for most languages except for JavaScript. I like all the other parts of the video but the bounds check really bothers me.", "likes": 2}}, {"topLevelComment": {"id": "UgxviiYzJer9SwE4d-F4AaABAg", "publishedAt": "2022-07-25T20:17:56Z", "author": "R S", "text": "The best video on YouTube \ud83d\ude4c", "likes": 0}}, {"topLevelComment": {"id": "UgyM7riUBL4lmCDFXp94AaABAg", "publishedAt": "2022-07-25T12:27:10Z", "author": "Nithin Padayatti", "text": "i was not sure why i started watching this video, but it blew me away. the teaching method is amazing , i loved it . pls forgive the no caps situation ,shift key is not working and im lazy to use the caps key. any how amazing stuff keep it coming", "likes": 0}}, {"topLevelComment": {"id": "UgyckymJWYKXAnkc8H54AaABAg", "publishedAt": "2022-07-24T12:55:43Z", "author": "TimePes", "text": "hoe to change the language from js to c++", "likes": 0}}, {"topLevelComment": {"id": "UgxzQkRZqSIvmy6ySQN4AaABAg", "publishedAt": "2022-07-23T19:31:27Z", "author": "Aanandakrishnan D", "text": "For Best Sum problem 1:58:59, We could have been sorting the elements in reverse order and Followed the HowSum Logic ( It will always return the best combination in my perspective). Please correct me if I am wrong.", "likes": 0}}, {"topLevelComment": {"id": "UgzCxakW0MZF6ceyXDF4AaABAg", "publishedAt": "2022-07-23T19:11:42Z", "author": "Bhavesh Gupta", "text": "which language is used here?", "likes": 0}, "replies": [{"id": "UgzCxakW0MZF6ceyXDF4AaABAg.9dpwE6pgpj39dr8BEY8ogp", "publishedAt": "2022-07-24T06:24:08Z", "author": "Harihararam Sriram", "text": "Javascript", "likes": 0}]}, {"topLevelComment": {"id": "UgxFblLbtYLNWaHrmW54AaABAg", "publishedAt": "2022-07-22T19:31:16Z", "author": "Borisz Olah", "text": "I have no idea what dynapic programming is. I Am a beginner web developer learning react, node, javascript, html, css, and such. Should I go through this, will it help me, or will it only make me confused and I should go thru an easier more beginner tutorial ? (note, I just wanna go thru it to increase programming skills/because im curius about it, just stumbled on the vid and sounds interesting...) Thanks for all the answers!", "likes": 0}}, {"topLevelComment": {"id": "UgxodYynGyC_TgDrXxV4AaABAg", "publishedAt": "2022-07-22T16:15:30Z", "author": "\ud604\uc2e4\ub0a8", "text": "this was by far the most comprehensive and easily understandable way going through dynamic programming. Thank you for providing\ud83d\udc4f", "likes": 0}}, {"topLevelComment": {"id": "UgzDp131djptaocSyOp4AaABAg", "publishedAt": "2022-07-22T10:20:02Z", "author": "Mr hat", "text": "Is this helpful to start codeforces", "likes": 0}}, {"topLevelComment": {"id": "UgwmRsN5ZsbqO6UDE0B4AaABAg", "publishedAt": "2022-07-22T02:43:23Z", "author": "dog", "text": "memoize sounds like babytalk for memorize", "likes": 0}}, {"topLevelComment": {"id": "Ugw1NMQwi2InOAzygL14AaABAg", "publishedAt": "2022-07-21T16:01:17Z", "author": "x X (Breb)", "text": "O(2^n) for a na\u00efve Fibonacci sequence irks me a bit. The na\u00efve solution models the sequence itself so it scales according to the golden ratio and not 2. You can even see how it heavily skews in your tree whereas a 2^n problem would generate an approximately balanced tree.\n\nIn most cases a big-O you can throw away constants but approximating the base of an exponent completely misrepresents the asymptotic performance of an algorithm. O(1.6^n) grows much slower than O(2^n), for n=30 that's 1329228 and 1073741824 respectfully, already ~99.87% slower.", "likes": 1}}, {"topLevelComment": {"id": "Ugzz3jSV_biCDBKjb1N4AaABAg", "publishedAt": "2022-07-21T15:18:17Z", "author": "AE V", "text": "I'm afraid the Fibonacci problem teaches wrong kind of thinking. That whole problem can be made way more efficient with simple math algorithm that simply counts a + b. I understand what you're trying to teach with this, but everyone learning here should't take this as the only right answer or way of thinking.", "likes": 0}}, {"topLevelComment": {"id": "UgwlXLbCE5lnUoqgnyV4AaABAg", "publishedAt": "2022-07-20T23:32:20Z", "author": "Marvei Pana", "text": "Is 1 hr a day a good approach to better understand this tutorial?  or it's too slow?", "likes": 1}, "replies": [{"id": "UgwlXLbCE5lnUoqgnyV4AaABAg.9diffTwe1bT9dkhbGY7uKf", "publishedAt": "2022-07-21T18:27:43Z", "author": "Dave Merkury", "text": "I would say whatever you are comfortable with. You got this! You will pick up these concepts and continue to grow. Take care.", "likes": 0}]}, {"topLevelComment": {"id": "Ugyh3bAJktwqVwbso3B4AaABAg", "publishedAt": "2022-07-20T01:23:18Z", "author": "Soundararajan Venkatasubramanian", "text": "In canSum problem (7, [2, 3])  is true? It should be false. Right? \nOr did I understand the problem wrong?", "likes": 0}, "replies": [{"id": "Ugyh3bAJktwqVwbso3B4AaABAg.9dgI_FVp9W19dhmrjlw__P", "publishedAt": "2022-07-20T15:15:56Z", "author": "yamen malik", "text": "3 + 2 + 2 = 7\nyou can use the same  number more than once", "likes": 2}]}, {"topLevelComment": {"id": "Ugyw0FTlRyKC3Byo0NF4AaABAg", "publishedAt": "2022-07-19T20:22:26Z", "author": "Andrew Westley", "text": "Alvin I have been studying for months and i have taken my time through this video - single handedly drove home soo many concepts and helped me get a solid understanding and an easy translation into Python code. Thank you!", "likes": 1}}, {"topLevelComment": {"id": "UgyKACcd2yAr4b0yKK54AaABAg", "publishedAt": "2022-07-19T18:39:28Z", "author": "Adri\u00e1n Kiss", "text": "Excellent course! 10/10", "likes": 0}}, {"topLevelComment": {"id": "Ugya5kDXoTC8TBP1pht4AaABAg", "publishedAt": "2022-07-19T15:55:10Z", "author": "Reis Koryph\u00e4e", "text": "53:22\n1:12:00", "likes": 0}}, {"topLevelComment": {"id": "Ugw0Fnz7PIS1CayRdYN4AaABAg", "publishedAt": "2022-07-19T14:39:07Z", "author": "arda u\u00e7ar", "text": "Finally someone who speaks english", "likes": 0}}, {"topLevelComment": {"id": "Ugzr_bYMHgAfBpwrT8F4AaABAg", "publishedAt": "2022-07-19T11:09:29Z", "author": "Kedar Satwik", "text": "howSum (4,[1,3,2]) means i should get 1+1+1+1, 2+2, 1+1+2, 1+3 combinations but i am getting only [1,1,1,1]", "likes": 0}, "replies": [{"id": "Ugzr_bYMHgAfBpwrT8F4AaABAg.9delrjZUsGQ9dmsRjjrZRU", "publishedAt": "2022-07-22T14:40:53Z", "author": "Hash", "text": "Topper!!!!!!!", "likes": 0}]}, {"topLevelComment": {"id": "UgzR-sDSFw_MvxI5jyZ4AaABAg", "publishedAt": "2022-07-19T09:05:46Z", "author": "Chess Master", "text": "Start with recursive approach. There is a base case. Dp says start with base case and go up. That will help with a pattern", "likes": 0}}, {"topLevelComment": {"id": "UgyEuyGVUUZe_S7g4QV4AaABAg", "publishedAt": "2022-07-19T05:44:50Z", "author": "\uc720\ub514\ub9e8", "text": "2:07:50", "likes": 0}}, {"topLevelComment": {"id": "Ugzh5UKOi2xeeF8C2sB4AaABAg", "publishedAt": "2022-07-18T12:09:35Z", "author": "Srimanth Mahadev", "text": "1:23:47 BM", "likes": 0}}, {"topLevelComment": {"id": "Ugz0SRv3eibFQ41Y8Yt4AaABAg", "publishedAt": "2022-07-17T19:13:30Z", "author": "Jertdw", "text": "Is this java?", "likes": 0}}, {"topLevelComment": {"id": "UgyIJhYUm7yi8FRrEPZ4AaABAg", "publishedAt": "2022-07-17T18:52:23Z", "author": "Victor Cui", "text": "For gridTraveler, couldn't the base case by when m == 1 or n == 1? b/c the number of ways to travel through a 1 x n grid or a n x 1 grid is just one. I believe this would help improve the time complexity.", "likes": 0}, "replies": [{"id": "UgyIJhYUm7yi8FRrEPZ4AaABAg.9daSFOSEDoj9eOtnq3QGuQ", "publishedAt": "2022-08-06T18:23:10Z", "author": "Victor Cui", "text": "@yamen malik true thanks", "likes": 0}, {"id": "UgyIJhYUm7yi8FRrEPZ4AaABAg.9daSFOSEDoj9dhl5HDCCey", "publishedAt": "2022-07-20T15:00:27Z", "author": "yamen malik", "text": "Yes, you can do that, you can even say if m==0 or n==0 (or just m*n == 0) return 0\nit might help a bit but it will not change the time complexity, remember you still have to do the call and the membership check to see if (m,n) is in the memo object\nbut even if it did change the complexity it might look like this O((m-1)*(n-1)) which is the same as O(m*n) because in big o notation constants are ignored\nthe aim of big o notation is to describe how the algorithm will scale with larger inputs, \ntry thinking of it as plotting a function \nf(x) = x + c\nthe value of c will not change the shape of the graph it will just change the placement of the graph on the x-axis", "likes": 2}]}, {"topLevelComment": {"id": "UgzjUnousqgzumqg8SN4AaABAg", "publishedAt": "2022-07-17T12:04:39Z", "author": "Van sf", "text": "What you call as dynamic prgramming languages are merely a part of data structure in CS, and thus its value is so limited as the knowledge of any pure computer prgrammer", "likes": 0}}, {"topLevelComment": {"id": "Ugxl0uFlPRaasFfBmyF4AaABAg", "publishedAt": "2022-07-17T04:41:44Z", "author": "Kanuos", "text": "This is definitely the best course on Dynamic Programming I have ever done. Notice, not the _best free_ course, the _best_ course, period.", "likes": 5}}, {"topLevelComment": {"id": "UgyJ9lbMZHvx0nBlNwR4AaABAg", "publishedAt": "2022-07-16T20:11:31Z", "author": "Andriy Sidorkin", "text": "Excellent tutorial here. Thank you\n\nSomehow I felt the task about coins (that is mentioned at the very beginning of the tutorial)\nwould also be solved here, but apparently it wasn't", "likes": 0}}, {"topLevelComment": {"id": "UgyDa3qxar51zPRkfbt4AaABAg", "publishedAt": "2022-07-16T16:52:51Z", "author": "Maclunky", "text": "This was better than how universities usually teach these subjects.", "likes": 0}}, {"topLevelComment": {"id": "UgzT9icVhgUYfHGQWIp4AaABAg", "publishedAt": "2022-07-16T16:47:26Z", "author": "NOOB 9INZ4", "text": "Thank you so much for the course. I tried all the problems in both Javascript and Python. \nCodes: https://drive.google.com/drive/folders/1ZRl8MgArhBIjAYxiXT5f2fHC7GzNcPF9?usp=sharing\nIn Python I couldn't solve the problem \" allconstruct \" in any of the shown ways. I am really stuck. Thank you in advance for your help.", "likes": 2}, "replies": [{"id": "UgzT9icVhgUYfHGQWIp4AaABAg.9dYe9OXCuDn9iUhJ7IRPNH", "publishedAt": "2022-11-16T10:34:59Z", "author": "SparrowC1", "text": "Thanks for this - very helpful.\n\nallConstruct memo in python is:\n\ndef allConstruct(target, wordBank, memo = dict()):\n    if target=='':\n        return [[]]\n    if target in memo:\n        return memo[target]\n    result =[]\n\n    for i in wordBank:\n        position = target.find(i)\n        if position == 0:\n            # we've got a match at start of target\n            suffix = target[len(i):]\n            suffixWays = allConstruct(suffix, wordBank, memo)\n            for way in suffixWays:\n                result.append([*way, i])\n    memo[target] = result\n    return result", "likes": 0}]}, {"topLevelComment": {"id": "UgxXWP5TKxK3ZzN9Uxd4AaABAg", "publishedAt": "2022-07-15T15:02:37Z", "author": "yogeshwar singh", "text": "Awesome video... Just a thought for grid travelers problems wouldn't be another base case - either or row or column value equals to 1 would be 1 way to travel.", "likes": 0}}, {"topLevelComment": {"id": "Ugz72Z_ntED_1DAx_5B4AaABAg", "publishedAt": "2022-07-14T07:43:18Z", "author": "DumbassOpinions", "text": "I have a question, how is the canSum and howSum different from backtracking solution ?", "likes": 0}}, {"topLevelComment": {"id": "UgxbqLa0ONIIA-mInpd4AaABAg", "publishedAt": "2022-07-14T01:52:48Z", "author": "GamingButNotReally", "text": "Although it might not be needed in interviews, this tutorial only covers the very basics of dp, the tip of the iceberg. There is so, so much more to learn about if you're interested!", "likes": 0}}, {"topLevelComment": {"id": "UgxAdAEip3irFsNqrch4AaABAg", "publishedAt": "2022-07-13T23:02:54Z", "author": "Just Ave0n ~ Recruiter", "text": "Two days well inverted. After reading Thomas Cormen explanation about dynamic programming it was impossible to follow through the reading LoL. But now everything is clear, so thanks my g.", "likes": 0}}, {"topLevelComment": {"id": "Ugxx7it_9-ht6BuY4wZ4AaABAg", "publishedAt": "2022-07-13T13:10:08Z", "author": "JDERA", "text": "thank u so much", "likes": 0}}, {"topLevelComment": {"id": "Ugx2D-c48_Zs0XesNK14AaABAg", "publishedAt": "2022-07-13T10:08:43Z", "author": "Chetan Borase", "text": "Where can I get more content from this instructor??", "likes": 0}}, {"topLevelComment": {"id": "Ugw0czbyRBliRjipJ_t4AaABAg", "publishedAt": "2022-07-13T08:44:16Z", "author": "Qifan Deng", "text": "That's extremely clear! Had fun and learnt. Thanks Alvin!\n\nBtw, the exceeddings (3:20:45) of array at line 5 and 6 are okay for js, but may trouble other language practicing.\n", "likes": 4}, "replies": [{"id": "Ugw0czbyRBliRjipJ_t4AaABAg.9dQ3TrofDh19dnlZZcas9-", "publishedAt": "2022-07-22T23:00:02Z", "author": "Ken P", "text": "@Jertdw It's JS ran through through the Node interpreter", "likes": 0}, {"id": "Ugw0czbyRBliRjipJ_t4AaABAg.9dQ3TrofDh19dayNTvVuA_", "publishedAt": "2022-07-17T23:41:51Z", "author": "Qifan Deng", "text": "@Jertdw Isn\u2019t it NodeJS?", "likes": 0}, {"id": "Ugw0czbyRBliRjipJ_t4AaABAg.9dQ3TrofDh19daUiEyWPTr", "publishedAt": "2022-07-17T19:13:56Z", "author": "Jertdw", "text": "do you know what programming language he is using?", "likes": 1}]}, {"topLevelComment": {"id": "UgwPYyxjGC8qRGOTCmB4AaABAg", "publishedAt": "2022-07-13T04:08:50Z", "author": "Alexander Betaev", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzHVoGsHCA0GSjsDiZ4AaABAg", "publishedAt": "2022-07-13T04:07:22Z", "author": "Flora Trace", "text": "Hello. I was doing the AllConsturct Question using python. I am stuck with the error,     \ntargetWays = [x.insert(0,word) for x in suffixWays]\r\nAttributeError: 'NoneType' object has no attribute 'insert'.\n\n\nThis is my code. \ndef allConstruct(target,WordBank):\r\n    if not target:\r\n        return [[]]\r\n    result = []\r\n    for word in WordBank:\r\n        if target.startswith(word):\r\n            suffix = target[len(word):]\r\n            suffixWays = allConstruct(suffix,WordBank)\r\n            targetWays = [x.insert(0,word) for x in suffixWays]\r\n            result.append(*targetWays)\r\n    return result\r\n\r\nprint(allConstruct('purple',['purp','p','ur','le','purpl']))\nHow do I debug the targetWays statement? Thank you.", "likes": 0}}, {"topLevelComment": {"id": "Ugx21OZv6NsYE9wv6VB4AaABAg", "publishedAt": "2022-07-13T01:52:53Z", "author": "Andrew Westley", "text": "3:45:18 how is it possible to generate a 6 from an array of [5,4,3]??? \n\nDid I miss something in the explanation that just doesn\u2019t seem possible?", "likes": 0}, "replies": [{"id": "Ugx21OZv6NsYE9wv6VB4AaABAg.9dPKOsrOUA99dPKf9MiF1g", "publishedAt": "2022-07-13T01:55:15Z", "author": "Andrew Westley", "text": "Jk realized you could use the same value n > 1 times. \n\nLove this video!!!", "likes": 0}]}, {"topLevelComment": {"id": "UgwqrFfSM3atbDt-z5d4AaABAg", "publishedAt": "2022-07-12T16:03:51Z", "author": "Simon Newman", "text": "I've been coding since 1998 and have watched countless tutorials on countless topics. This guy is definitely one of the best teachers I've ever come across.", "likes": 1}}, {"topLevelComment": {"id": "UgzI4Y4EtvTC1mGjxUx4AaABAg", "publishedAt": "2022-07-12T11:04:13Z", "author": "Abhishek Varshney", "text": "Can you provide Java code for the problem All Construct memoization...\nI am stuck please help me", "likes": 0}}, {"topLevelComment": {"id": "UgxiS-O_vu2nU1eggqZ4AaABAg", "publishedAt": "2022-07-12T06:55:33Z", "author": "Vahe Karapetyan", "text": "If I nail my interview, that would be because of this video.\nAmazing job, Alvin, thanks for the teach!", "likes": 0}, "replies": [{"id": "UgxiS-O_vu2nU1eggqZ4AaABAg.9dNIEjB4rpo9eP9-szXcx8", "publishedAt": "2022-08-06T20:44:45Z", "author": "Gabriel Moreyra", "text": "Did you nailed it?", "likes": 0}]}, {"topLevelComment": {"id": "UgxD6W2IVgzaOoZeaNt4AaABAg", "publishedAt": "2022-07-11T19:40:00Z", "author": "semantixpt", "text": "I thought I understood all your math logic (coding it is easy), so I tried a real life problem I found recently. \n\nGiven a matrix (array of arrays, if you want, L lines by C columns) like this:\n1 -> 0 1 0\n2 -> 1 0 0\n3 -> 1 1 0\n4 -> 0 1 0\n5 -> 0 1 1\nFind the line which is closest to other line(s) that, adding them, will eliminate zeros, the result being the biggest distance between that line and the other(s).\n\nIn the example, the result line would be 4, because it is at a distance of 1, up and down, that would eliminate the zeros (adding lines 3, 4, and 5 gives 1 3 1, no zeros). \n\nTo eliminate the zeros on line 1, you need lines 2 (distance 1) and 5 (distance 4). -------------> 4\nTo eliminate the zeros on line 2, you need lines 1 (distance 1) and 5 (distance 3). -------------> 3\nTo eliminate the zeros on line 3, you need line 5 (distance 2). ---------------------------------------------> 2\nTo eliminate the zeros on line 4, you need lines 3 (distance 1) and 5 (distance 1). -------------> 1\nTo eliminate the zeros on line 5, you need line 3 (distance 2). ---------------------------------------------> 2\n\nI can solve this in a non-exponential way (time less than  L^2*C, discarding distances bigger than min_dist already found, space LC), but I i don't see how I can apply memoization or tabulation to the problem, although I definitely sense it could be solved that way and maybe improve my result.\n\nI should upload my code somewhere, perhaps...\n\nDoes anyone have a clue? I'm feeling that with all this big description I am almost to something, but can't get it.\n\nThanks in advance.", "likes": 0}, "replies": [{"id": "UgxD6W2IVgzaOoZeaNt4AaABAg.9dM4vsABxmQ9dM55QF1Rzj", "publishedAt": "2022-07-11T19:41:26Z", "author": "semantixpt", "text": "Oh, and by the way, many thanks for Alvin Zablan for this excellent tutorial!", "likes": 0}]}, {"topLevelComment": {"id": "UgxD5168jGJ1b7jmTvx4AaABAg", "publishedAt": "2022-07-11T15:57:50Z", "author": "Tiyen", "text": "I am not sure how in the 3rd example 1:21:58 the first one returned true. CanSum(7, [2+3]) should be false no? because 2+3 cannot be 7.\nThat 'allConstruct' is so complicated :D 2d arrays are hard to get my head around.\nRight now, I found the recursive way of doing it much more better and uniform compared to the tabular. It follows a similar pattern and only needs to be concerned with the input and output of one iteration at a time. Also because all of those problems could be mapped using a tree diagram. The tabular one where we move right one by one and somehow fix the issue looked like magic to me at first and really had to think about how did that work. \nOverall, a massive thank you for providing us with this course for free! It's an absolute gem!", "likes": 0}, "replies": [{"id": "UgxD5168jGJ1b7jmTvx4AaABAg.9dLgVjrnm9Q9dhn7oQFez7", "publishedAt": "2022-07-20T15:18:16Z", "author": "yamen malik", "text": "You can use the same number more than once so \n3 + 2 + 2 = 7", "likes": 0}]}, {"topLevelComment": {"id": "Ugyr82R-AyIFzWWNVmZ4AaABAg", "publishedAt": "2022-07-11T09:48:45Z", "author": "Kaushik Kishore", "text": "For the tabular format I approached the problem in the same way he did in tree way. \nFirst fill the 1st column all values as 1 \n2nd fill the all rows (1) with values as 1 \nThen approach the problem  seeing the left and up and sum. The benefit of this is you do not need bound check. \n\nconst gridTraveller2 = (m, n) => {\n  const table = Array(m + 1)\n    .fill(0)\n    .map(() => Array(n + 1).fill(0));\n  table[1][1] = 1;\n\n  for (let i = 1; i <= m; i++) {\n    table[i][1] = 1;\n  }\n\n  for (let j = 1; j <= n; j++) {\n    table[1][j] = 1;\n  }\n\n  for (let i = 2; i <= m; i++) {\n    for (let j = 2; j <= n; j++) {\n      table[i][j] = table[i - 1][j] + table[i][j - 1];\n    }\n  }\n\n  return table[m][n];\n};", "likes": 0}}, {"topLevelComment": {"id": "Ugzr82Z8zKcM_FOIeE94AaABAg", "publishedAt": "2022-07-11T09:00:39Z", "author": "Jeremy Pruitt", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzrzJYDi28mJLIrYzl4AaABAg", "publishedAt": "2022-07-10T18:53:23Z", "author": "Ifidon Chris Ikhide", "text": "If (m == 1 || n == 1)\n    return 1;", "likes": 1}}, {"topLevelComment": {"id": "UgwHHSZ-kX7LDZQh0K94AaABAg", "publishedAt": "2022-07-10T16:12:10Z", "author": "NAMEERSHAYT", "text": "Omg why i dint see this tutorial till now", "likes": 0}}, {"topLevelComment": {"id": "UgzMY2AYIpnfjkEKeYp4AaABAg", "publishedAt": "2022-07-10T11:03:11Z", "author": "Andrei Toma", "text": "Is this implementation of the fib correct also?\n\nconst fib = (n) => {\n    if (n <= 2) return 1;\n    // return fib(n-1) + fib(n-2)\n    let array = [1,1]\n    for(let i =2; i <n; i++){\n        array[i]=array[i-1] + array[i-2]\n    }\n    return array[n-1]\n}\nconsole.log(fib(50))", "likes": 0}}, {"topLevelComment": {"id": "UgwDh5Lb0w488-gpQxp4AaABAg", "publishedAt": "2022-07-10T05:10:11Z", "author": "Yash Nagda", "text": "in grid travel, space complexity should be O(n*m) rather than O(n+m). Right?", "likes": 0}}, {"topLevelComment": {"id": "UgxdWlXrGpPKjAckWn94AaABAg", "publishedAt": "2022-07-09T12:48:51Z", "author": "Fiyin Akinsiku", "text": "Is the computer's processor another factor to consider for time complexity? Cos when I tried the memoized fib solution at 31:36 on n=50,  it wasn't as fast as in the video.", "likes": 0}}, {"topLevelComment": {"id": "UgxIZRIk3bfmAAW_v654AaABAg", "publishedAt": "2022-07-08T20:51:53Z", "author": "Jose Lores", "text": "I came here thinking this would help me with my macroeconomics course", "likes": 0}}, {"topLevelComment": {"id": "UgxLaduvhL65XA-Z3Z54AaABAg", "publishedAt": "2022-07-08T20:12:22Z", "author": "Mohiuddin Syed", "text": "For *how_sum* tabulation part if you only update the table if that index is null then you only take the first possible way to get to that number which is also the smallest cuz it took the least number of steps to reach.\nAlso you check the sum of the list at index targetSum is equal to targetSum then you can return the correct result as soon as it is made", "likes": 0}}, {"topLevelComment": {"id": "UgxpZXRcadcCvBHJNb14AaABAg", "publishedAt": "2022-07-08T18:26:15Z", "author": "Toby Chow", "text": "gridTraveler space complexity should be O(m*n) b/c there can be m*n solutions", "likes": 0}}, {"topLevelComment": {"id": "UgyWsCfOjmwqUjS7KbR4AaABAg", "publishedAt": "2022-07-08T17:26:41Z", "author": "Samarth Varshney", "text": "Thank you! It was an amazing course!", "likes": 0}}, {"topLevelComment": {"id": "Ugym_x90fK76Gbo3o_R4AaABAg", "publishedAt": "2022-07-07T04:23:57Z", "author": "WhoUfinnnaTry", "text": "i think alvin earned his spot in heaven", "likes": 0}}, {"topLevelComment": {"id": "UgyXbQCYWRNbMFBVNE94AaABAg", "publishedAt": "2022-07-07T02:28:02Z", "author": "Justin Smith", "text": "Before doing memoization on grid-traveler, the base conditions could use some simplification:\nif(m === 0 || n === 0) return 0;\nif(m === 1 || n === 1) return 1;\n\nThis should greatly cut down the number of recursions even before memoization. I am not sure why only the case of a (1,1) grid is returning 1. It should be any (n,1) or (1,n) provided that n > 0. A single column or single row has only one solution.", "likes": 2}, "replies": [{"id": "UgyXbQCYWRNbMFBVNE94AaABAg.9d9we5EM7xU9dBo4XdyoFI", "publishedAt": "2022-07-07T19:51:37Z", "author": "Jiyue Fan", "text": "I just wrote in the same way.But the method in the video is OK,because its just for teaching the very naive method .", "likes": 0}]}, {"topLevelComment": {"id": "Ugw7HiY6IQgh2y25eYx4AaABAg", "publishedAt": "2022-07-06T19:22:55Z", "author": "Chris Vin", "text": "In C hash tables are equivalent to memo objects? Can I implement those the same way?", "likes": 0}}, {"topLevelComment": {"id": "UgzehwQmUslgrRrVj_54AaABAg", "publishedAt": "2022-07-06T13:27:09Z", "author": "HASH", "text": "Great tutorial..\nCan u please share the slides?", "likes": 0}}, {"topLevelComment": {"id": "UgwT_y5J-8Y-lpCPlz94AaABAg", "publishedAt": "2022-07-06T13:00:31Z", "author": "Mohiuddin Syed", "text": "The fib alg just blew my mind, It went from taking me 4 sec to get fib of 40 to getting fib of 999 is a few milliseconds just WOW \ud83e\udd2f", "likes": 0}}, {"topLevelComment": {"id": "Ugx9tMZGBwSpuKa_XXt4AaABAg", "publishedAt": "2022-07-06T11:40:21Z", "author": "lizardfog", "text": "This is soo good!!! Just came down with covid and got bored to death.. Then I found this gem :) I live again !!", "likes": 0}}, {"topLevelComment": {"id": "Ugw-ykHV7QwQwTC7CoJ4AaABAg", "publishedAt": "2022-07-05T22:47:23Z", "author": "David Hovsepyan", "text": "I didn't understand one thing in matrix's problem when we want to go from 0,0 item to m,n. \nSo, you say that for m, n we need to calculate (m-1,n) + (m, n-1), but to go to these points we do 2 additional steps (one for (m-1,n) and another one for (m,n-1), so why isn't it (m-1,n) + (m, n-1) + 2?", "likes": 0}}, {"topLevelComment": {"id": "Ugz_DHZU3ST3mmnj_JB4AaABAg", "publishedAt": "2022-07-05T18:45:09Z", "author": "mistah mayne", "text": "left off at 1:09:56", "likes": 0}}, {"topLevelComment": {"id": "UgwQhnJxGDx8UeaHKKN4AaABAg", "publishedAt": "2022-07-05T16:43:22Z", "author": "Ketan Rathod", "text": "How can i implement howSum function in C++ as i can't return null ..", "likes": 1}}, {"topLevelComment": {"id": "UgyN-FgCt2VJ-A7JAgp4AaABAg", "publishedAt": "2022-07-05T14:46:15Z", "author": "Dave", "text": "very very good explanations! but you dont need to memorize the array in the howsum function. If you ever meet a sum that has already been seen it must have returned null. So the space complexity should be 2m -> m", "likes": 0}}, {"topLevelComment": {"id": "UgzPIBjhtozWy6fd1nd4AaABAg", "publishedAt": "2022-07-05T11:48:52Z", "author": "Mohit Sharma", "text": "Great course. Thank you very much.", "likes": 0}}, {"topLevelComment": {"id": "UgzB1kFd14OxFSpTV_p4AaABAg", "publishedAt": "2022-07-05T10:29:15Z", "author": "Kunal Thakur", "text": "can we use dynamic programming if we are not allowed to use elements more than once?", "likes": 0}}, {"topLevelComment": {"id": "UgzeHAkquWJBJNFGtw54AaABAg", "publishedAt": "2022-07-05T02:04:36Z", "author": "Toby Chow", "text": "Is the time complexity of brute force sol of canConstruct, O(2^n)? It seems to be the same as Word Break which is that time complexity.", "likes": 0}}, {"topLevelComment": {"id": "UgxitpWCgYA_dIZCExB4AaABAg", "publishedAt": "2022-07-04T17:25:40Z", "author": "diynevala", "text": "In best sum could be hugely optimized by ordering the numbers array in descending order, thus making the tree branches shorter (substract bigger values from the target, less steps to reach 0).\n\n*Edit* Alvin mentions that this is an incorrect assumption, but I will stand behind it. Taking the smaller numbers first will dive deep into the tree, whereas big numbers will find or fail sooner and thus result shorter answers faster. In Alvin's example he will get 1,1,1,1,1,1,1,1; 1,1,1,1,4; 4,1,1,1,1; and so on before finding 4,4. Descending order will only find 5,1,1,1; \n\nAlso if there is a sum with 2 numbers found, there is no point in searching deeper than that in other branches.", "likes": 1}}, {"topLevelComment": {"id": "UgxfILD9Yy8qhFsR-oN4AaABAg", "publishedAt": "2022-07-04T13:41:57Z", "author": "July17", "text": "While I found this course awesome and very helpful. I still have an issue with the grid problem. Instead of going through all that hassle, isn't it better to solve it mathematically? Simply M + N choose N for example and have a memoization factorial function to do it? \n\nThe logic behind it is that, say M is the horizontal length and N the vertical one. Regardless of the path you take the length of the path will be M + N steps. Of those steps, N will have to be vertical (down in this case). So it all comes to where you choose to take each of those N downwards steps. In other words, Choose(N+M, N).", "likes": 0}, "replies": [{"id": "UgxfILD9Yy8qhFsR-oN4AaABAg.9d3QOGv6EM59d3Sx72gjjI", "publishedAt": "2022-07-04T14:04:19Z", "author": "Yath", "text": "yeah it is , but there are many similar problems like this one which you can't solve mathematically.", "likes": 1}]}, {"topLevelComment": {"id": "Ugz3iJg5-DgWWz6iZvZ4AaABAg", "publishedAt": "2022-07-04T08:51:05Z", "author": "diynevala", "text": "FIRST check the base cases THEN concatenate the [max,min] key and check the memoization for optimal speed.\n\nIn fib() you could also just initialize the memo with 0=0, 1=1, 2=1 to minimize code. (would still need to check negatives).\n\n\nIt seems that a lot of programmers have this video recommended, and everyone wants to optimize the crap out of it! (me included)\n\nThis video is for learning purposes, I presume.", "likes": 0}}, {"topLevelComment": {"id": "UgyubIN3i3R4_EhQLbJ4AaABAg", "publishedAt": "2022-07-04T07:12:53Z", "author": "Vishal Jain", "text": "In gridTraveler memoization problem, for grid having 'm' rows and 'n' cols we know that m*n = n*m grid have the same no. of paths. So for the memo object, when we are adding the key (1,2) in memo object shouldn't we also add the key (2,1) as it also has the same no. of paths. Otherwise we would have to calculate it again ?", "likes": 3}, "replies": [{"id": "UgyubIN3i3R4_EhQLbJ4AaABAg.9d2irkKIxaV9dAi0ApW2nw", "publishedAt": "2022-07-07T09:39:22Z", "author": "Mohiuddin Syed", "text": "@Chandru S it sure will do but you don't have to add key_vv to the dict as you are checking both key and kay_vv are inside the dict or not, also it's wasted memory.", "likes": 1}, {"id": "UgyubIN3i3R4_EhQLbJ4AaABAg.9d2irkKIxaV9dAhnv6XLx4", "publishedAt": "2022-07-07T09:37:33Z", "author": "Mohiuddin Syed", "text": "using the inverted key made by gridtraveller(500, 499) run from 350 ms to 250 ms (using python btw)", "likes": 1}, {"id": "UgyubIN3i3R4_EhQLbJ4AaABAg.9d2irkKIxaV9d3M88bAkF0", "publishedAt": "2022-07-04T13:04:47Z", "author": "Chandru S", "text": "```\ndef gridTraveller(m,n, memo={}):\r\n    key = f\"{m},{n}\"\r\n    key_vv = f\"{n},{m}\"\r\n    \r\n    if (key in memo):\r\n        return memo[key]\r\n    if (key_vv in memo):\r\n        return memo[key_vv]\r\n    # are the args in the memo\r\n    if (m==1 and n==1): return 1\r\n    if (m==0 or n==0): return 0\r\n    memo[key] = memo[key_vv] =gridTraveller(m-1,n, memo) + gridTraveller(m,n-1, memo)\r\n    return memo[key]\r\n\r\nprint(gridTraveller(18,18))\n```\n\nI've tried adding that part. Can someone confirm whether this addition improves the efficiency of the code.", "likes": 0}]}, {"topLevelComment": {"id": "Ugw_c0bXDQZJLkoTi-F4AaABAg", "publishedAt": "2022-07-03T22:16:05Z", "author": "Coco L'Asticot", "text": "Learning to code by myself, this course brought me so much.\n\nI didn't know anything about dynamic programming, not much about time and space complexity.\nNow I wouldn't say that i master it of course, but with those great explanations and examples I happened to cruise through all these exercises with ease.\n\nI am genuinely shocked to see how easy it is for me now, as those problems just seemed impossible before and their solutions looked like witchcraft.\n\nThank you so much, this is a wonderful course !", "likes": 6}}, {"topLevelComment": {"id": "UgxIiLrZC9YmKz1o8254AaABAg", "publishedAt": "2022-07-03T13:54:05Z", "author": "KX36", "text": "I haven't got all the way through yet, but I noticed something really odd in that \"most replayed\" feature of youtube. It looks like of the millions of views this video has, almost all of them are only watching the bestSum tabulation chapter. I'll be interested to see why. (I'll be a little disappointed if it turns out that that chapter is just embedded elsewhere on the internet.)", "likes": 0}}, {"topLevelComment": {"id": "UgxxomiDk66kaNEbeDJ4AaABAg", "publishedAt": "2022-07-03T12:40:34Z", "author": "Doug Gale", "text": "Why needlessly assign a function to a variable? You want it to be undefined until executes that line? I can't stand every function is a variable nonsense.", "likes": 0}}, {"topLevelComment": {"id": "UgwaFtCe1UyYTCX1v6N4AaABAg", "publishedAt": "2022-07-02T23:49:37Z", "author": "Emmmlll", "text": "You can alse solve the gridTraveler ( 38:39 ) mathematicly: \nconst factorial = (x, mem_number = 0, mem_value=1) =>{\n  if(mem_number == x) return mem_value;\n  if(mem_number == x -1) return mem_value * x;\n  return factorial(x-1, mem_number, mem_value);\n};\nconst gridTraveler = (m, n) => {\n  if(m<0 || n<0) return -1;\n  let mem_number = (m<n ? n : m) - 1; \n  let mem_lower_val = factorial(mem_number);\n  mem_number = (m<n ? m : n) - 1;\n  let mem_value = factorial( mem_number, (m<n ? n : m) -1, mem_lower_val);\n  return factorial(m+n-2, mem_number, mem_value) / mem_value / mem_lower_val;\n};\nI don't know if it is more efficient (because of the multiplication and stored variables) but I usually have a factorial function in my code so I use this way\n\nplus if you have a built in factorial function and don't care about a little time loss you could have a one liner like\nconst gridTraveler = (m, n) => { return factorial(m+n-2) / factorial(m-1) / factorial(n-1) };", "likes": 0}}, {"topLevelComment": {"id": "UgzyR3SJvZQhqDHn9k94AaABAg", "publishedAt": "2022-07-02T23:44:06Z", "author": "Toy For Kids ", "text": "In tabulation technique the first element of the table(array) should be empty or null but in all examples you put empty in the last element, that's why when you describe the loop doesn't make sense", "likes": 0}}, {"topLevelComment": {"id": "Ugw4NSgSNU3mN5WKKHV4AaABAg", "publishedAt": "2022-07-02T21:10:17Z", "author": "Tirupati Rao", "text": "How can problem is not solved fully to print all combinations", "likes": 0}}, {"topLevelComment": {"id": "UgzU3kXVaVFo8HBAeyJ4AaABAg", "publishedAt": "2022-07-02T13:27:41Z", "author": "Kaushik Dey", "text": "at 49:56\n\nWhy can't we just (m == 1 || n == 1) since its the case of  case of one linear path", "likes": 0}}, {"topLevelComment": {"id": "UgxFRluGtdqgfCfkx1l4AaABAg", "publishedAt": "2022-07-01T23:37:24Z", "author": "Shikhanshu Agarwal", "text": "for gridTraveler, you should lookup both m,n and n,m in memo, as they will have the exact same answer", "likes": 0}}, {"topLevelComment": {"id": "UgweOZ9xzfPonY58ish4AaABAg", "publishedAt": "2022-07-01T20:36:27Z", "author": "Benevolent Dictator", "text": "Excellent presentation. People pay a lot more to get a lot less.", "likes": 0}}, {"topLevelComment": {"id": "UgzoOqHZMNrZp_o10nl4AaABAg", "publishedAt": "2022-07-01T18:49:37Z", "author": "Theopneusty", "text": "For the gridTraveler problem you say the base case is (1,1) ie  m==1 and n==1\n\nBut the real base case should be (1,x) or (x,1) ie m==1 or n==1\n\nAny grid that has only 1 col or 1 row will only have 1 solution so you don\u2019t need to waste time breaking it down into further sub problems", "likes": 3}, "replies": [{"id": "UgzoOqHZMNrZp_o10nl4AaABAg.9cxFD35ab3I9d3TVbI9NN2", "publishedAt": "2022-07-04T14:09:09Z", "author": "Kshitij Pal", "text": "@That's Alex! thank you for saying that... I was searching for this comment", "likes": 1}, {"id": "UgzoOqHZMNrZp_o10nl4AaABAg.9cxFD35ab3I9d1jgT2Pfqj", "publishedAt": "2022-07-03T22:00:51Z", "author": "Coco L'Asticot", "text": "Well you can even go one step further with :  gridTraveler(2,x) = gridTraveler(x,2) = x\n\nBut I guess at this point it's just simpler to generate those recursively than defining them as base cases.", "likes": 0}, {"id": "UgzoOqHZMNrZp_o10nl4AaABAg.9cxFD35ab3I9d1S807jBmK", "publishedAt": "2022-07-03T19:18:43Z", "author": "That's Alex!", "text": "Also didn't he forget to implement the case where 3,2 is the same value as 2,3? Just wondering because i'm following along rn.", "likes": 0}]}, {"topLevelComment": {"id": "Ugxy5ULWW6XRC-X3z9B4AaABAg", "publishedAt": "2022-07-01T18:47:58Z", "author": "hello pleychess", "text": "nonnegative means that a number can also be a 0, it will be crazy!", "likes": 0}}, {"topLevelComment": {"id": "Ugy4vr4WJyheZOetP654AaABAg", "publishedAt": "2022-07-01T18:32:04Z", "author": "hello pleychess", "text": "ok", "likes": 0}}, {"topLevelComment": {"id": "UgydG7ZVlPUuBdfp5Ap4AaABAg", "publishedAt": "2022-07-01T15:26:15Z", "author": "Neo", "text": "Hello World... how original", "likes": 0}}, {"topLevelComment": {"id": "UgzO_0IpuIPEJauT_9h4AaABAg", "publishedAt": "2022-07-01T02:38:08Z", "author": "D Rcl", "text": "Not convinced js is a good language for this.  Such ugly code.", "likes": 0}}, {"topLevelComment": {"id": "UgwktAsY2mSC3-ZeyfF4AaABAg", "publishedAt": "2022-06-30T18:28:08Z", "author": "Chris Alvino", "text": "This is a great tutorial for anyone really wanting to learn this well. Very detailed and thorough. If I was new to DP this would be a good pace. It's a little slow for a refresher, but otherwise fantastic.", "likes": 4}}, {"topLevelComment": {"id": "UgwsmYHc-YsXQRDylEV4AaABAg", "publishedAt": "2022-06-30T17:59:28Z", "author": "hello pleychess", "text": "m+n-1", "likes": 0}}, {"topLevelComment": {"id": "UgxN3yZUJnUmyPDdr614AaABAg", "publishedAt": "2022-06-30T17:55:08Z", "author": "hello pleychess", "text": "chess has very high space complexity", "likes": 0}}, {"topLevelComment": {"id": "UgwY7rj5CwszD8DxFCR4AaABAg", "publishedAt": "2022-06-30T17:45:48Z", "author": "hello pleychess", "text": "I think you should add more colors to the important words in the exercises", "likes": 0}}, {"topLevelComment": {"id": "UgyVkW0WmLt2P1AUpfF4AaABAg", "publishedAt": "2022-06-30T17:41:45Z", "author": "hello pleychess", "text": "this gridTraveler reminds of chess AI search", "likes": 0}}, {"topLevelComment": {"id": "UgzV-bTwtsdIi2ZglLd4AaABAg", "publishedAt": "2022-06-30T17:41:06Z", "author": "hello pleychess", "text": "I think at getting the complexity \"we can simplify\" is not well said. In my mind, at least, it is not simplified but abstracted.\nthe O complexity is the type of growth that the function has.\nthe fib memoization has linear growth as always 2 nodes were added at the top, linear is written as O(n)\nO(2^n) is important it is exponential growth with 2 as a base, there is no universal \"exponential\" growth, there's different exponential growths, depending on the base, the growth is growing.\n\nand the growth is growing while the growth is growing while the growth is growing while the growth is growing while the growth is growing while the growth is growing while the growth is growing and the growth grows while the growth is growing while the growth is growing and it grows while the growth is growing while the growth is growing while the growth is growing while the growth is growing while the growth is growing just to grow.", "likes": 0}}, {"topLevelComment": {"id": "UgwA0x10YO_OGlCCKZx4AaABAg", "publishedAt": "2022-06-30T17:10:47Z", "author": "hello pleychess", "text": "I think it is 2^n-1 but we remove the -1 !??? because the constant doesn't matter supposedly\n\nmy guess is that the space is the amount of different nodes so that would be 5 in the example which is 1 n or just n, growing linearly", "likes": 0}}, {"topLevelComment": {"id": "UgwPdtXjomUmWHH_Ma94AaABAg", "publishedAt": "2022-06-30T16:04:47Z", "author": "hello pleychess", "text": "I cant hear this because of heavy rain is raining here man oh man", "likes": 0}}, {"topLevelComment": {"id": "UgxXeT484FdTzM2frZJ4AaABAg", "publishedAt": "2022-06-30T14:47:53Z", "author": "AlienYT", "text": "47:08 right side  2,0", "likes": 0}}, {"topLevelComment": {"id": "UgwfACWke7eFJLbbIt94AaABAg", "publishedAt": "2022-06-30T13:59:27Z", "author": "Long Road Games", "text": "Stopped watching the instant you started typing in javascript.  Instant thumbs down.", "likes": 1}}, {"topLevelComment": {"id": "UgxIgCwzf8coZVP7CVF4AaABAg", "publishedAt": "2022-06-30T13:37:42Z", "author": "Shikhanshu Agarwal", "text": "so enjoyable! loving this video", "likes": 0}}, {"topLevelComment": {"id": "UgxDieuh7qZ-EGKy3_t4AaABAg", "publishedAt": "2022-06-30T06:41:26Z", "author": "Olanrewaju Gabriel Ibironke", "text": "It's really nice, I'll like to know it's name (Software name)", "likes": 0}}, {"topLevelComment": {"id": "UgxFAWELTXTU_6Fmp6R4AaABAg", "publishedAt": "2022-06-30T06:40:27Z", "author": "Olanrewaju Gabriel Ibironke", "text": "Hi @Alvin, what presentation software did you use for this video (The one that puts numbers in circles, grids, trees etc.)?", "likes": 0}}, {"topLevelComment": {"id": "UgyMdLb2iX7hCxH5w_d4AaABAg", "publishedAt": "2022-06-29T19:46:01Z", "author": "Young Man, Old Man", "text": "did this by myself in my spare time: O(n) time, O(1) space fibonacci with no recursion:\n\n\r\nint fib(int n)\r\n{\r\n    int nums[2] = { 0 , 1 };\r\n    for(int i = 1; i < n; i++)\r\n    {\r\n        nums[!(i%2)] += nums[i%2];\r\n    }\r\n    return (nums[n%2]);\r\n}", "likes": 0}}, {"topLevelComment": {"id": "Ugzqt6aoWYLHhc3njkF4AaABAg", "publishedAt": "2022-06-29T16:04:20Z", "author": "Tarek Said", "text": "For the bestSum problem we could exit earlier if we find, in the numbers, the exact value of targetSum. For instance, for bestSum(7, [5,3,4,7]), 7 is equal to the targetSum, therefore [7] is the shortest possible answer.", "likes": 0}}, {"topLevelComment": {"id": "UgyGmzZO-0-zfeX6A5N4AaABAg", "publishedAt": "2022-06-29T00:00:08Z", "author": "aydasu", "text": "Alvin and FreeCodeCamp you are a hero to many including myself <3 Thank you! \nJust donated to FCC thru paypal! I will donate more when I get into my dream company soon thanks to you.", "likes": 0}}, {"topLevelComment": {"id": "Ugzc_kur5O5w65BK_pV4AaABAg", "publishedAt": "2022-06-28T19:51:59Z", "author": "Arpit", "text": "Hey can someone explain why after memoization the complexity reduced from O(N**M) to O(N*M). Alvin said we don't need to traverse all subtrees now but i'm not getting how time complexity O(N*M) is computed. Please Explain I'll be really grateful", "likes": 0}}, {"topLevelComment": {"id": "UgzAAhvnwhvgn8B_0q54AaABAg", "publishedAt": "2022-06-28T19:11:48Z", "author": "Hindigo", "text": "Although I'm not a programmer by trade, my line of work sometimes demands some rather tricky coding, and I'm sure this intro to dynamic programming will prove to be quite helpful. Can't thank you enough for making it freely available.", "likes": 2}}, {"topLevelComment": {"id": "UgxfLKbU66eYYmWv2-t4AaABAg", "publishedAt": "2022-06-28T18:02:15Z", "author": "wow man 9999", "text": "if you need a fibonacci, use a lookup table. it'll always be faster than any dynamic solution..", "likes": 0}}, {"topLevelComment": {"id": "UgxB8-pNora9ZbWjzPp4AaABAg", "publishedAt": "2022-06-28T16:20:48Z", "author": "Edward Han", "text": "this guy can teach like a demon", "likes": 0}}, {"topLevelComment": {"id": "UgzfM9nemi7XFFVTjmF4AaABAg", "publishedAt": "2022-06-28T10:57:52Z", "author": "hello pleychess", "text": "very suspicious", "likes": 0}}, {"topLevelComment": {"id": "Ugy387WFUFPpTNCZsjt4AaABAg", "publishedAt": "2022-06-28T06:47:30Z", "author": "Miljan Matovic", "text": "Love the methodical approach and no steps being jumped over, great job!", "likes": 1}}, {"topLevelComment": {"id": "UgzMzCyWjEgERzriFf14AaABAg", "publishedAt": "2022-06-28T05:41:55Z", "author": "sg games", "text": "@freeCodeCamp for the gridTraveler you know that 2,3 is the same as 3,2 but you're still calculating them separately What I would've done for the key would be:\n\nconst key = [m,n].sort((a,b) => a - b).join();\n\nThat way if M is 3 and N is 2 it will give out key \"2,3\"\nand if M is 2 and N is 3 will give the same key and you won't have to calculate it a second time", "likes": 0}}, {"topLevelComment": {"id": "UgwrxOLqtkFTq_60MIJ4AaABAg", "publishedAt": "2022-06-28T04:00:12Z", "author": "Shiva", "text": "Can you make videos on backtracking please?", "likes": 0}}, {"topLevelComment": {"id": "UgxiPziu1-ZdZOqkEuB4AaABAg", "publishedAt": "2022-06-27T16:59:12Z", "author": "Natan Shimeles", "text": "great tutorial", "likes": 0}}, {"topLevelComment": {"id": "Ugx7C5_EmLEBwHSZQwl4AaABAg", "publishedAt": "2022-06-27T16:40:38Z", "author": "Ahsan Miardi", "text": "I fucking love this tutorial!! Keep it up Alvin", "likes": 0}}, {"topLevelComment": {"id": "Ugy51JbRMQ1NDz29pTV4AaABAg", "publishedAt": "2022-06-27T16:35:51Z", "author": "Loz D", "text": "It seems like \"Memoization\" could just have been called \"Memorization\", tbh \ud83e\udd14", "likes": 0}}, {"topLevelComment": {"id": "Ugzr_cKj13svk-dSuil4AaABAg", "publishedAt": "2022-06-27T07:36:44Z", "author": "Tony Han", "text": "This video helped alot!", "likes": 1}}, {"topLevelComment": {"id": "UgyQnK283DFW-32gRx14AaABAg", "publishedAt": "2022-06-27T04:44:53Z", "author": "Hobbies and Mathematics", "text": "There were a couple of improvements that I was waiting for you to make to the grid traveller, use 1 as a base case instead of zero, and restrict m >=n, you would use a wrapper function to return 0 for 0s and - ves, and also to switch m and n  if the input n>m. Then the inner function would return 1 if n=1 and if n=m would return 2* inner(m, m-1)otherwise it would return inner(m, n-1)+inner(m-1,n). with memoisation of course. Neither  of these improvements would change the order number of calls but would reduce the calls by a factor of 2 at least. I get that optimising the problem isn't the purpose of this. \ud83d\ude42", "likes": 0}, "replies": [{"id": "UgyQnK283DFW-32gRx14AaABAg.9clRMZWOCaf9cuNb0VKzVS", "publishedAt": "2022-06-30T16:05:12Z", "author": "hello pleychess", "text": "YES OK", "likes": 0}]}, {"topLevelComment": {"id": "Ugy7ZTVLbcaxXj2fvUp4AaABAg", "publishedAt": "2022-06-27T01:22:00Z", "author": "Praful Parashar", "text": "Great video !!\nBest one out there for DP.\nPersonally, I feel better to work through subsets generation or having different combination through memoization technique.\nWhile for grid problems in DP, tabulation is best to visualise and solve as well.", "likes": 1}}, {"topLevelComment": {"id": "UgykesJ0DsH4xvHAkFN4AaABAg", "publishedAt": "2022-06-27T00:14:27Z", "author": "Jason Guo", "text": "Wow, amazingly done Alvin!", "likes": 0}}, {"topLevelComment": {"id": "UgxzKKoDg6tpMB-gbz54AaABAg", "publishedAt": "2022-06-26T22:36:14Z", "author": "chichi90504", "text": "For canSum and howSum I'd make two functions first function would sort the numbers array large to small then do what is basically his function with the sorted array with the larger numbers being evaluated first it would more often than not find the answer faster", "likes": 0}}, {"topLevelComment": {"id": "UgyIsZgqt98QWvQzZpZ4AaABAg", "publishedAt": "2022-06-26T17:52:30Z", "author": "Nadiia Heckman", "text": "Hi Alvin, Can you also add knapsack problem analysis? Would be super helpful.", "likes": 0}, "replies": [{"id": "UgyIsZgqt98QWvQzZpZ4AaABAg.9ckGhNBz7YC9dPR2J_sDbc", "publishedAt": "2022-07-13T02:50:58Z", "author": "Antariksh", "text": "hey check out back to back swe", "likes": 0}]}, {"topLevelComment": {"id": "UgyVtldkZr4GQpEmXcB4AaABAg", "publishedAt": "2022-06-26T13:34:01Z", "author": "tester tester", "text": "Pointless video. You are not getting anything out of this fake problems.", "likes": 0}}, {"topLevelComment": {"id": "UgxdlWifvuCzlYIjn-F4AaABAg", "publishedAt": "2022-06-26T08:09:28Z", "author": "Nadiia Heckman", "text": "That was brilliant! Thank you, Alvin :)", "likes": 0}}, {"topLevelComment": {"id": "UgzcTDq1rGJt8HBLFmh4AaABAg", "publishedAt": "2022-06-26T03:14:56Z", "author": "YimYamYo", "text": "howSum & bestSum space complexity question 1:46:00 & 2:07:00 :\nIn howSum, he said the space complexity of the array being built up can be ignored because it was O(m) - the same as the stack space. Why doesn't that make space complexity O(m^2)?\n\nSimilarly in bestSum, there's O(m) stack space and each stack frame stores an array \"shortestCombination\", which at worst is O(m). I get how this means O(m^2), but what about \"combination\"? Isn't that also an array in each stack frame? And in the memoized solution, I get how the memo obj is O(m^2) so does that make the whole thing have O(m^2 + m^2) space which just simplifies to still O(m^2)? I'm trying to understand how these all fit together.", "likes": 1}}, {"topLevelComment": {"id": "Ugz6-CwLXe_dDQrQqW94AaABAg", "publishedAt": "2022-06-25T20:56:44Z", "author": "Bhargava Sai", "text": "for canSum problem. I could solve it without memoization like below.\n\n`const sumPossible = (amount, numbers) => {\n  if(amount === 0) return true\n  for(let n of numbers){\n    if(n <= amount){\n      if(sumPossible(amount%n, numbers)) return true\n    } \n  }\n  return false\n}`", "likes": 0}}, {"topLevelComment": {"id": "UgxqaC_xbqlG1xBEDSh4AaABAg", "publishedAt": "2022-06-25T20:37:31Z", "author": "Bernhard Baumgartner", "text": "I've never seen anyone before who was able to better and more clearly explain dynamic programming. The way you're leading us there step by step and also how the material is presented is outstanding. I'm very impressed Good Sir :-) Thank you very, very much \ud83d\ude47", "likes": 40}}, {"topLevelComment": {"id": "Ugw0dQiQFz7c92NYbT94AaABAg", "publishedAt": "2022-06-25T14:41:17Z", "author": "Kemal Kochekov", "text": "There is some word mistakes in between 35:43-38:40 you wrote \"memoized\"! But amazing work thanks for your explanation, it is very usefull.", "likes": 0}}, {"topLevelComment": {"id": "UgyRb-ajFhOTQRBlVe54AaABAg", "publishedAt": "2022-06-25T14:16:16Z", "author": "Ragnarok", "text": "for the howSum and canSum, could you not cut down the tree by having a base case that checks wheter targetSum is dividable by any num in number?\nor how would that affect space/time complexity?", "likes": 0}}, {"topLevelComment": {"id": "Ugxyj9n5KXgzeMNIdAJ4AaABAg", "publishedAt": "2022-06-24T20:01:08Z", "author": "Jan Krynicky", "text": "If the parameter to the function is something JavaScript accepts as a property name, you don't have to write the memoization into the function and thus complicate it. You can install the memoization around the function\n\nfunction memoize(f) {\r\n\tvar memo = {};\r\n\treturn (n) => {\r\n\t\tif (n in memo) {\r\n\t\t\treturn memo[n];\r\n\t\t} else {\r\n\t\t\tvar res = f(n);\r\n\t\t\tmemo[n] = res\r\n\t\t\treturn res;\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction fib(n) {\r\n\tif (n <= 2) return 1;\r\n\treturn fib(n-2) + fib(n-1);\r\n}\r\n\r\nfib = memoize(fib); // notice I replace the original fib. JavaScript will call the constructed function from within the original. Most other languages would not!", "likes": 0}, "replies": [{"id": "Ugxyj9n5KXgzeMNIdAJ4AaABAg.9cfLpmh46_j9cfMjOxBTxA", "publishedAt": "2022-06-24T20:09:00Z", "author": "Jan Krynicky", "text": "In case of Fibonacci and similar functions you do not need to use memoization at all though. You can do it like this: \n\n(C# style code)\n\n(int,int) fib2(n) { // return the fib(n-1) and fib(n)\r\n  if (n <= 2) return (1,1);\r\n  var (fib_n2,fib_n1) = fib2(n-1);\r\n  return (fib_n1, fin_n2+fib_n1);\r\n}\r\n\r\nint fib(n) {\r\n  var (_, fib_n) = fib2(n);\r\n  return fib_n;\r\n}\n\nJavaScript code (slightly less readable IMHO)\n\nfunction fib2(n) { // return the fib(n-1) and fib(n)\r\n  if (n <= 2) return [1,1];\r\n  var fibs = fib2(n-1);\r\n  return [fibs[1], fibs[0] + fibs[1]];\r\n}\r\n\r\nfunction fib(n) {\r\n  var fibs = fib2(n);\r\n  return fibs[1];\r\n}\r\n\nJust have a function that returns both the value for n and n-1 and you only need a single recursive call, not two.", "likes": 0}]}, {"topLevelComment": {"id": "Ugzk9DxLHztlqRsWkBh4AaABAg", "publishedAt": "2022-06-24T07:41:43Z", "author": "shivam rawat", "text": "The holy grail to understanding DP.", "likes": 0}}, {"topLevelComment": {"id": "UgzCwS8EAEnmRguZ7xZ4AaABAg", "publishedAt": "2022-06-24T04:13:56Z", "author": "Tim Spears", "text": "This is really good, but there\u2019s something to be said for combining some mathematics into the mix. The first solution to the grid problem was O(2^(m+n)); second solution was O(m+n). However math will give you O(1): (m+n-2)!/((m-1)!(n-1)!)\n\nMost Math functions use lookup tables for factorials, making them an O(1) operation. That said if you do calculate them from scratch this is still O(m+n).", "likes": 0}}, {"topLevelComment": {"id": "Ugx_QFKI-iPur_wGvsV4AaABAg", "publishedAt": "2022-06-23T22:35:53Z", "author": "Hecdeveloper", "text": "what vs code theme is that one? looks nice", "likes": 0}, "replies": [{"id": "Ugx_QFKI-iPur_wGvsV4AaABAg.9cd2kOfvQEE9cj-ib2KCLw", "publishedAt": "2022-06-26T06:04:52Z", "author": "Rahil Rashid", "text": "Monokai pro", "likes": 0}]}, {"topLevelComment": {"id": "UgzU4lh0-yK3ZS3_awp4AaABAg", "publishedAt": "2022-06-23T20:56:09Z", "author": "arh baramov", "text": "\ud83d\ude03\ud83d\udc4d great \ud83d\ude0a just one think \ud83e\udd14 Fibonacci sequence starts from ZERO \ud83d\ude0b\ud83d\ude06\ud83e\udd70", "likes": 0}}, {"topLevelComment": {"id": "Ugwjmtbha9ysyyTYBLh4AaABAg", "publishedAt": "2022-06-22T20:35:23Z", "author": "Gregory Alsheimer", "text": "I have a question. On the 2x3 grid, you mention (right, right, down), (down, right, right), and (right, down, right), but isn't there another option of (down, right, up, right, down)? I'm not a talented programmer, I just want to understand the material entirely.", "likes": 0}, "replies": [{"id": "Ugwjmtbha9ysyyTYBLh4AaABAg.9caG9wqxur59caGiSVc8aS", "publishedAt": "2022-06-22T20:40:14Z", "author": "Gregory Alsheimer", "text": "Nevermind it says right and down only, my bad.", "likes": 0}]}, {"topLevelComment": {"id": "UgxU0BP87j4f0a4yzFt4AaABAg", "publishedAt": "2022-06-22T19:50:43Z", "author": "Sreejith Vs", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgzorjA1tJKCxS2NMZR4AaABAg", "publishedAt": "2022-06-22T17:18:35Z", "author": "Dev Kumar", "text": "I don't wanna job at google \ud83d\ude14", "likes": 0}}, {"topLevelComment": {"id": "UgwKVd-wH_DPnTxy_2d4AaABAg", "publishedAt": "2022-06-22T11:55:24Z", "author": "Dimensional Blade", "text": "Love this tutorial \u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgwfyDPRXS-Nxzk4TJ94AaABAg", "publishedAt": "2022-06-22T10:32:48Z", "author": "Adria Romero", "text": "great tutorial", "likes": 0}}, {"topLevelComment": {"id": "UgzDD69elt_3914FPFJ4AaABAg", "publishedAt": "2022-06-22T07:59:04Z", "author": "Tushar Marda", "text": "Wouldn't space complexity for memoized solution of gridTraveller be O(m*n)? The video says O(m+n).", "likes": 0}}, {"topLevelComment": {"id": "Ugw-udl1SNPfVmot9C54AaABAg", "publishedAt": "2022-06-21T12:39:03Z", "author": "Ryan I", "text": "This is a fantastic, helpful video. I'm brushing up on some concepts I learned in university in preparation for interviews, and frankly you explain things better than most of my professors did. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgzoqavGeW5mlOLJx7F4AaABAg", "publishedAt": "2022-06-21T00:56:33Z", "author": "David", "text": "If allConstruct fail on big input (Maximum call stack size exceeded) how do we actually solve this problem?", "likes": 0}}, {"topLevelComment": {"id": "UgxCYBHM9PLIxOmu5Vp4AaABAg", "publishedAt": "2022-06-20T19:17:58Z", "author": "Ekrem Dervisoglu", "text": "Way better than paid solutions.", "likes": 0}}, {"topLevelComment": {"id": "UgzOozJtW9s0dCzjGtd4AaABAg", "publishedAt": "2022-06-20T18:31:06Z", "author": "Alok Pratap Singh", "text": "best everrr", "likes": 0}}, {"topLevelComment": {"id": "UgwmQuMg3uhU0xDI6-N4AaABAg", "publishedAt": "2022-06-20T18:12:50Z", "author": "LrdKGB", "text": "For Python users : https://github.com/idy-3/DynamicProgramsEx/blob/main/main.py\n\nPersonally I wrote (but you can do it how ever you want to):\n\ndef Best_sum_of_num(Targetsum,numbers, memo={}): # what is the best way to do it\r\n    \r\n    if Targetsum in memo: return memo[Targetsum]\r\n    \r\n    if Targetsum == 0 : return [] # base case so not stored in memo\r\n    \r\n    if Targetsum < 0 : return None #base case so not stored in memo\r\n    \r\n    shortestcombination= None\r\n    \r\n    for num in numbers:\r\n                \r\n        remainder= Targetsum - num\r\n        \r\n        remaindercombination= Best_sum_of_num(remainder,numbers)\r\n        \r\n        if remaindercombination != None:\r\n            \r\n            combination=[*remaindercombination, num]\r\n            \r\n            if shortestcombination == None:\r\n                \r\n                shortestcombination=combination\r\n            \r\n            elif len(combination) < len(shortestcombination):\r\n                                \r\n                shortestcombination=combination\r\n                \r\n    memo[Targetsum] = shortestcombination               \r\n    return shortestcombination\r\n\r\nprint(\"Best_sum_of_num O(n^*m) time O(m*m) space= \",Best_sum_of_num(Targetsum,numbers))", "likes": 0}}, {"topLevelComment": {"id": "UgzLtumxLfuJ-sYc-LJ4AaABAg", "publishedAt": "2022-06-20T15:13:21Z", "author": "Android-17", "text": "This is awesome!\nThank you kind Sir \ud83c\udfa9", "likes": 0}}, {"topLevelComment": {"id": "UgxFx09LJkYExXX9pcV4AaABAg", "publishedAt": "2022-06-20T12:42:51Z", "author": "Siva Basava Kolli", "text": "For grid traveler the space complexity should be O(m*n) not O(m+n)", "likes": 0}}, {"topLevelComment": {"id": "UgzQQMtVvkrpTfLgJNB4AaABAg", "publishedAt": "2022-06-20T04:24:11Z", "author": "Tribikram Adhikari", "text": "1:45 instead of unpacking remainder array in new array why dont you just add number to remainder and return remainder, much effective.", "likes": 0}}, {"topLevelComment": {"id": "Ugy02y52aNwBYHmCLjR4AaABAg", "publishedAt": "2022-06-20T03:31:37Z", "author": "RnD", "text": "play with 0.75 speed and thank me later.\nThank you for making this video easy to understand and thank you again for the quality, clarity and the brevity of the content.", "likes": 0}, "replies": [{"id": "Ugy02y52aNwBYHmCLjR4AaABAg.9cUHPoAsb0r9cW_IgPUHg9", "publishedAt": "2022-06-21T00:55:09Z", "author": "David", "text": "haha, I did 2x", "likes": 0}]}, {"topLevelComment": {"id": "UgyQK98_WbVm77fIh9B4AaABAg", "publishedAt": "2022-06-19T16:58:01Z", "author": "Kalyan Boro", "text": "Great explanation brother. You are really smart!", "likes": 0}}, {"topLevelComment": {"id": "UgxhuM9bxE2k6ln4XAd4AaABAg", "publishedAt": "2022-06-19T13:36:27Z", "author": "modernSolutions", "text": "Why was down right up right down excluded at 40:15", "likes": 0}}, {"topLevelComment": {"id": "UgwMaKYldPhdmvg4_ed4AaABAg", "publishedAt": "2022-06-18T19:49:10Z", "author": "Aaron Schooley", "text": "For \"can sum\", I think you should also check if the number selected from the array is zero. The prompt says they are non-negative, so zero is a valid number. But selecting zero first can cause a stack overflow as you will call your recursive function with your remainder equal to your initial target. You will get stuck in a loop. Guard against this by not making the recursive call if the number selected is zero.", "likes": 0}}, {"topLevelComment": {"id": "Ugz198c8TEt-Wax1YHF4AaABAg", "publishedAt": "2022-06-18T16:21:46Z", "author": "Tribikram Adhikari", "text": "For the gridTraveler problem base case you really do not need for both to be 1. if one of row or column is 1 then there is only 1 way to traverse through the grids. For example\n\"# # # #\" what I have drawn here is a grid of 1 x 4. You can only move through it in 1 direction so number of ways to traverse is only 1. You can say the same for 100 * 1 grid.", "likes": 0}}, {"topLevelComment": {"id": "Ugz6DBOoSvujj4mMqxh4AaABAg", "publishedAt": "2022-06-18T15:55:10Z", "author": "Oh Oh", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxS-tcGJlqdL01Vqut4AaABAg", "publishedAt": "2022-06-18T12:01:54Z", "author": "Shashank", "text": "I know Python only. Where can I practice dynamic programming using Python. Please suggest good sources.", "likes": 0}}, {"topLevelComment": {"id": "Ugz1j6rUHDxh5-ookoF4AaABAg", "publishedAt": "2022-06-18T11:41:11Z", "author": "Amit kumar", "text": "I always prefer loop over recursion, because well let's be honest, the stack memory is too small for a task too big.", "likes": 0}}, {"topLevelComment": {"id": "UgzbU-1vLRWDg-SRSMd4AaABAg", "publishedAt": "2022-06-18T06:33:50Z", "author": "Ketan kumar", "text": "Most blogs say not to prefer javascript for dp. What are your opinions on this ? Even I have seen company prefer c/c++, java, python in DSA coding rounds.", "likes": 0}}, {"topLevelComment": {"id": "Ugz32CfL4gqytM4Avbd4AaABAg", "publishedAt": "2022-06-18T06:33:01Z", "author": "Robera Geleta", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgyWfHl01az9qTX0vDV4AaABAg", "publishedAt": "2022-06-17T16:19:40Z", "author": "Philip Debrah", "text": "Wow!!!", "likes": 0}}, {"topLevelComment": {"id": "UgxoJOwZLibnC4rYQqB4AaABAg", "publishedAt": "2022-06-17T11:42:27Z", "author": "Omer Tamir", "text": "Amazing explained, Thanks !!", "likes": 0}}, {"topLevelComment": {"id": "Ugx2J3Mpq2dUV8IIHzR4AaABAg", "publishedAt": "2022-06-17T09:18:07Z", "author": "Rupernita Sahoo", "text": "Amazing .. Such a simplified way of teaching toughest problem.", "likes": 0}}, {"topLevelComment": {"id": "UgzAIeXLwbxqCOv4lu14AaABAg", "publishedAt": "2022-06-17T01:25:09Z", "author": "Feng Liu", "text": "The same issue happens with python when you * an array or string... it just copies the same thing n times..", "likes": 0}}, {"topLevelComment": {"id": "UgxUARc-9RU9GWbx_DN4AaABAg", "publishedAt": "2022-06-16T15:50:15Z", "author": "Tanoy Bhowmick", "text": "Thanks a ton for the hard work!", "likes": 0}}, {"topLevelComment": {"id": "UgxST48xraAZNCCsRzh4AaABAg", "publishedAt": "2022-06-16T05:16:39Z", "author": "Murali Shal", "text": "For grid traveller problem I think the space complexity would be m*n in the solution shown in the video. Because we will have m*n key values in the memo object. Correct me if I am wrong. I am new to data structures and algorithms.", "likes": 0}}, {"topLevelComment": {"id": "UgxtdjcKKlS1oj1cYy54AaABAg", "publishedAt": "2022-06-16T01:36:25Z", "author": "Paulo Rezeck", "text": "A curiosity about the gridTraveler problem.\n\nAs this is a combination problem, we can find how many ways to travel to the goal just using permutation. \nWe know we have at most m and n moves to go left and down, respectively. So doing the permutation with repetitions, we would have:\n\nnWays = (n+m)! / (n! m!),\n\nreaching a time complexity O(m+n) and space complexity O(1).\n\nFor instance, for m=18-1, n=18-1 assuming starting at zero position:\n\n(17+17)! / (17!17!) = 2333606220", "likes": 0}}, {"topLevelComment": {"id": "Ugw9Vv0Q7yaKj7lGvYZ4AaABAg", "publishedAt": "2022-06-15T03:06:33Z", "author": "Amandeep Singh", "text": "I have been following this tutorial and trying to implement the same algorithms in python (just started learning..). However, I got stuck at \"best_sum\" problem and not able to find out where my implementation is going wrong. If someone experienced can help me out that would be much appreciated. Thnx : )\nFollowing is my Code:\nmemo = {}\n\n\ndef best_sum(target_sum, numbers):\n    if target_sum in memo:\n        return memo[target_sum]\n    if target_sum == 0:\n        return []\n    if target_sum < 0:\n        return None\n\n    shortest_combination = None\n\n    for num in numbers:\n        remainder = target_sum - num\n        remainder_combination = best_sum(remainder, numbers)\n        if remainder_combination is not None:\n            remainder_combination.append(num)\n            combination = remainder_combination\n            if shortest_combination is None or len(combination) < len(shortest_combination):\n                shortest_combination = combination\n\n    memo[target_sum] = shortest_combination\n    return shortest_combination", "likes": 0}, "replies": [{"id": "Ugw9Vv0Q7yaKj7lGvYZ4AaABAg.9cHMZwSdu4u9ceWP4YTjq8", "publishedAt": "2022-06-24T12:14:13Z", "author": "Amandeep Singh", "text": "@LrdKGB thnx for the solution : )", "likes": 1}, {"id": "Ugw9Vv0Q7yaKj7lGvYZ4AaABAg.9cHMZwSdu4u9cVVFgodvaL", "publishedAt": "2022-06-20T14:51:48Z", "author": "LrdKGB", "text": "def Best_sum_of_num(Targetsum,numbers, memo={}): # what is the best way to do it\r\n    \r\n    if Targetsum in memo: return memo[Targetsum]\r\n    \r\n    if Targetsum == 0 : return [] # base case so not stored in memo\r\n    \r\n    if Targetsum < 0 : return None #base case so not stored in memo\r\n    \r\n    shortestcombination= None\r\n    \r\n    for num in numbers:\r\n                \r\n        remainder= Targetsum - num\r\n        \r\n        remaindercombination= Best_sum_of_num(remainder,numbers)\r\n        \r\n        if remaindercombination != None:\r\n            \r\n            combination=[*remaindercombination, num]\r\n            \r\n            if shortestcombination == None:\r\n                \r\n                shortestcombination=combination\r\n            \r\n            elif len(combination) < len(shortestcombination):\r\n                                \r\n                shortestcombination=combination\r\n                \r\n    memo[Targetsum] = shortestcombination               \r\n    return shortestcombination", "likes": 1}]}, {"topLevelComment": {"id": "Ugyr657seZj1AFW3o854AaABAg", "publishedAt": "2022-06-14T15:09:09Z", "author": "ItzSHINOBI", "text": "As a beginner programmer I'm asking,\nsame Fibonacci series can be achieved using for loop and its fast. why to use this complex recursion?\n\nCheck Below Code:\n#include <stdio.h>\r\n\r\nvoid main(){\r\n  printf(\"Enter The Number:\");\r\n  int d;\r\n  scanf(\" %d\", &d);\r\n  unsigned long long fibstr[d+1];\r\n  fibstr[0] = 0;\r\n  fibstr[1] = 1;\r\n  for (int i = 2; i < (d + 1); i++) {\r\n    fibstr[i] = (fibstr[i - 1] + fibstr[i - 2]);\r\n  }\r\n  printf(\"%llu\\n\", fibstr[d]);\r\n}", "likes": 0}}, {"topLevelComment": {"id": "UgxoSyAH4wYy1mfLWsR4AaABAg", "publishedAt": "2022-06-14T15:03:03Z", "author": "strongesthumanbeing", "text": "howSum memoization:\n\nHow do we print all the possibilities/combinations (not just return the earliest possibility). We need to traverse back (return) + continue the loop -> both are not possible, right?", "likes": 1}}, {"topLevelComment": {"id": "Ugy4WroT1UyzzkvJMPl4AaABAg", "publishedAt": "2022-06-14T14:54:07Z", "author": "Rahul R", "text": "JS have hashmap now, use new Map()\nand for first problem fibanacci, we can eliminate the line   \" if(n<=2) return 1 \"   by initializing the hashmap with values 1 => 1, 2 => 1\nand thanks for such an amazing tutorial", "likes": 0}}, {"topLevelComment": {"id": "UgwghdGa0xaDH-Xlrjx4AaABAg", "publishedAt": "2022-06-13T20:34:07Z", "author": "Sneha John", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugxigk7TdJxN90L-4uR4AaABAg", "publishedAt": "2022-06-13T15:54:17Z", "author": "dheeraj dagar", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwqhV6aM23Pp-FM8C14AaABAg", "publishedAt": "2022-06-13T11:41:56Z", "author": "lomrithsa", "text": "Nice", "likes": 0}}, {"topLevelComment": {"id": "UgyYtUq3vSMNZPN7-Ul4AaABAg", "publishedAt": "2022-06-13T03:33:43Z", "author": "Ayush Agarwal 4-Year B.Tech. Electronics Engineering", "text": "in the gridtraveler problem why not just use the o(1) soln ((m-1)+(n-1))!/(m-1)!(n-1)!", "likes": 0}}, {"topLevelComment": {"id": "UgyQCr1qDj6QcQsY_yF4AaABAg", "publishedAt": "2022-06-12T19:45:12Z", "author": "Kith Stack", "text": "i think it the 2nd memoization [gridtraveler] would be even faster if we considered (m,n) to be the same as (n,m) and therefore get a way to represent this in form of a hash map key", "likes": 0}}, {"topLevelComment": {"id": "Ugy282sVbrMMp91fRN54AaABAg", "publishedAt": "2022-06-12T12:24:41Z", "author": "Darren Odi", "text": "All I can say is \"Thank you very much!!!\"", "likes": 0}}, {"topLevelComment": {"id": "Ugxo0ZmwqWOvm-9bTXZ4AaABAg", "publishedAt": "2022-06-12T12:06:42Z", "author": "Parth Phalke", "text": "I have a question, what if I wanted to have all the possible combinations in an array, like a 2-D array with each row representing one combination. How to store these combinations if we follow this DP approach. I tried it but I'm a bit confused and stuck :/", "likes": 0}}, {"topLevelComment": {"id": "UgxKuWqYKhTMglIiesB4AaABAg", "publishedAt": "2022-06-12T07:14:54Z", "author": "Si G", "text": "Very nice video. Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgwsqiE3i14QQ9y3frF4AaABAg", "publishedAt": "2022-06-11T18:10:49Z", "author": "A Lmb", "text": "@53:19 how is height(no of levels) of the tree m+n.? (2+3) whereas the num of nodes is only 4 can some one explain?", "likes": 0}}, {"topLevelComment": {"id": "UgzckwVwffY3M5jR7cl4AaABAg", "publishedAt": "2022-06-11T06:24:58Z", "author": "Alexander & Viktor in virtual reality", "text": "This is so good. Thank you so much. Learned a lot about dynamic programming from this. Kudos", "likes": 1}}, {"topLevelComment": {"id": "UgxZ-TYvUyqPo5oxJZt4AaABAg", "publishedAt": "2022-06-10T16:37:41Z", "author": "Salami Swami", "text": "Better than my Uni course so far and I\u2019m only 10min in!", "likes": 0}}, {"topLevelComment": {"id": "UgzhS2qS5ghYEJQUhch4AaABAg", "publishedAt": "2022-06-10T14:41:46Z", "author": "John Snow", "text": "At 1:04:12, shouldn't the memoized space complexity be O(m*n) ? The result of each possible function call will be stored in the memo object.", "likes": 0}}, {"topLevelComment": {"id": "UgwB5BHZjWBBkCxn5p14AaABAg", "publishedAt": "2022-06-10T10:15:52Z", "author": "Sopheak Samreth", "text": "Hi alvin or anyone in this comment section, i have questions regarding the canSum problem. what if one of the element in the list is 0? or is it not allowed? and how do we specify that in the code?", "likes": 0}, "replies": [{"id": "UgwB5BHZjWBBkCxn5p14AaABAg.9c5FitDr3aG9c5H3av_LBL", "publishedAt": "2022-06-10T10:27:34Z", "author": "Sopheak Samreth", "text": "never mind, i got it now. we just skip the iteration and move on to the next element.", "likes": 0}]}, {"topLevelComment": {"id": "UgygcB-uOtqMaurxmXt4AaABAg", "publishedAt": "2022-06-10T04:09:05Z", "author": "The TopShottah", "text": "2:25:00", "likes": 0}}, {"topLevelComment": {"id": "Ugzv3kGoUmiSHpRr3Md4AaABAg", "publishedAt": "2022-06-09T19:33:51Z", "author": "Pedro Matijasevic", "text": "One of the best videos i have seen", "likes": 0}}, {"topLevelComment": {"id": "UgxRvO00EvyXpGEmTKN4AaABAg", "publishedAt": "2022-06-09T10:23:02Z", "author": "qHfCWWfEP4Zn2KhEG2Fu", "text": "Too basic", "likes": 0}}, {"topLevelComment": {"id": "UgxceX26rNhBiJIYRW14AaABAg", "publishedAt": "2022-06-09T02:56:18Z", "author": "Rahul Kumar", "text": "Absolutely stunning! Never thought Dynamic programming could be this easy to grasp :D", "likes": 0}}, {"topLevelComment": {"id": "UgxRPeulTVh7_0CplZt4AaABAg", "publishedAt": "2022-06-08T20:05:29Z", "author": "TheJackal917", "text": "What about TLA+?", "likes": 0}}, {"topLevelComment": {"id": "UgxSDBjEJPNijqtWKh94AaABAg", "publishedAt": "2022-06-08T18:53:22Z", "author": "Saqib Malik", "text": "Can I something like this for Java?", "likes": 0}, "replies": [{"id": "UgxSDBjEJPNijqtWKh94AaABAg.9c11MPv2p8j9c1aQm-AkfV", "publishedAt": "2022-06-09T00:08:32Z", "author": "acode", "text": "He uses JS but it was very easy to follow along and just replace the syntax with java stuffs :)", "likes": 0}]}, {"topLevelComment": {"id": "Ugydae8BGARVXh_cIst4AaABAg", "publishedAt": "2022-06-08T15:26:09Z", "author": "Ray Jin", "text": "Thank you!!", "likes": 0}}, {"topLevelComment": {"id": "UgyBnxq0eeQZR2weH4B4AaABAg", "publishedAt": "2022-06-08T09:16:33Z", "author": "Preethi Albert", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgwO7djJXzKnSbs_r2N4AaABAg", "publishedAt": "2022-06-08T06:32:45Z", "author": "Ravi Kumar Shah", "text": "PURE GOLD! Create a NFT out of it.", "likes": 0}}, {"topLevelComment": {"id": "UgysMensj7pzgn3RmiJ4AaABAg", "publishedAt": "2022-06-08T02:44:43Z", "author": "James Washer", "text": "This video was just amazingly good. Thanks so much.", "likes": 0}}, {"topLevelComment": {"id": "Ugzp79y6yQmzVHjuKbh4AaABAg", "publishedAt": "2022-06-07T14:28:14Z", "author": "Mukesh", "text": "Great course!", "likes": 0}}, {"topLevelComment": {"id": "Ugx-iERfJjCSFUa5wR54AaABAg", "publishedAt": "2022-06-06T17:25:32Z", "author": "Roland Ding", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgyyGgQAO50oupvYerF4AaABAg", "publishedAt": "2022-06-06T16:03:28Z", "author": "AyushK", "text": "In the bestSum  problem do we really need to perform the if condition to check the length. because since we are performing a iterative approach because of which the first combination will always be the optimal one. Only We just have to make sure if for a number a combination exists then we will not override its combination.( because that is already best) ?\nany opinions ?", "likes": 0}}, {"topLevelComment": {"id": "UgyeWpqsJnHe6nWRjJd4AaABAg", "publishedAt": "2022-06-06T13:48:46Z", "author": "Theblack Gods", "text": "3:53", "likes": 0}}, {"topLevelComment": {"id": "UgzVuAginqc64tBtU514AaABAg", "publishedAt": "2022-06-06T11:36:21Z", "author": "Audic", "text": "Fibonacci function can be implemented in O(1) by using some math (linear algebra)", "likes": 0}}, {"topLevelComment": {"id": "Ugyb1rEtdWbS97LWfmd4AaABAg", "publishedAt": "2022-06-06T07:29:40Z", "author": "Tak Irr", "text": "teaching to INVALID space complexity + bad pronunciation (e.g. saying 8 as \"easy\" ???) + bad subtitles\n\n01:04:10 - \"space\" should be O(n * m). Forgot to calculate space occupied by THE CACHE?\n01:49:29 - \"time\" should be O(m * (n+m)), because array of size \"n\" is copied NOT every iteration, but only ONCE when the loop completes (both \"return\" statements are executed ONCE, when the loop completes). And even that would be a BAD LESSON - you must teach to use a linked list here, so \"space\" and \"time\" will be what we will see in production code.\n03:21:07 - teaching how to do out-of-bound access to an array ?!!  At the last iteration, i+1 and i+2 point to outside of the array, that's a bad service to viewers.", "likes": 0}}, {"topLevelComment": {"id": "UgxnNPLMlXu-r3VFzJx4AaABAg", "publishedAt": "2022-06-06T07:21:49Z", "author": "Abdullah XO1", "text": "53:15     Not sure I understand why the height is n+m? It should be max(n,m), no?", "likes": 0}}, {"topLevelComment": {"id": "Ugw-D_ez-UrHDvGFYhx4AaABAg", "publishedAt": "2022-06-06T06:17:53Z", "author": "Kieran928", "text": "Does anyone think they can help? I'm trying to implement the BestSum Memoization function in Lua..\n\n\nI wrote as:\n\nlocal function BestSum(target_sum,numbers,memo)\r\n      if memo[target_sum] ~= nil then return  memo[target_sum] end\r\n     if target_sum == 0 then  return {} end\r\n      if target_sum < 0 then return nil end\r\n      \r\n      local shortest_combination = nil\r\n      \r\n      for i, num in ipairs (numbers) do\r\n\t        local remainder = target_sum - num\r\n\t        local remainder_combination =  BestSum(remainder,numbers, memo) \r\n\t        if remainder_combination ~= nil then\r\n\t\t\t    \t local combination = remainder_combination\r\n\t\t\t    \t   table.insert(combination,num )\r\n                    if (shortest_combination == nil) or (#combination < #shortest_combination )then  \r\n                 \r\n                          shortest_combination = combination\r\n           \r\n                    end\r\n\t        end\r\n      end\r\n  \r\n          memo[target_sum] = shortest_combination;\r\n  \t\t return shortest_combination;\r\n  end\n\nI get results: \r\n BestSum(7,{5,3,4,7},{}){\"7\"}\r\n\r\nBestSum(8,{2,3,5},{}){\"5\",\"3\"}\r\n\r\nBestSum(8,{1,4,5},{}){\"4\",\"1\",\"4\"}\r\n\r\nBestSum(150,{5,25},{}){\"25\",\"5\",\"5\",\"5\",\"5\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\",\"5\",\"25\"}\n\nthe answers for the last two should be:\n   console.log(bestSum(8,[1,4,5])); //[4,4]\r\n    console.log(bestSum(100,[1,2,5,25])); //[25,25,25,25]\r\n\ncan anyone see the error?\n\n\nAny help is much appreciated.", "likes": 0}}, {"topLevelComment": {"id": "UgxoWx6sjNjfSuTTAAt4AaABAg", "publishedAt": "2022-06-06T04:40:52Z", "author": "Cypher Xu", "text": "This is THE BEST algorithm course I have ever seen on youtube. Wish there are more videos like this!", "likes": 7}}, {"topLevelComment": {"id": "UgxPNQzp1SkZig7JtiN4AaABAg", "publishedAt": "2022-06-05T22:23:00Z", "author": "Othman", "text": "Something has to be mentioned in 20:54 : O(2^{n/2}) is not the same as O(2^n), yes if something is O(2^{n/2}) then it's O(2^n) but the converse is not true. (Example: 2^n=O(2^n)  but not equal to O(2^{n/2}) )", "likes": 0}}, {"topLevelComment": {"id": "UgyVePaIoPz6UZulD-94AaABAg", "publishedAt": "2022-06-04T17:18:58Z", "author": "Daniyal Ahmed", "text": "Anyone here knows where to use pointers to make the code more optimized?\nI know the concept of pointers but haven't gotten the grasp of where to use it.", "likes": 0}}, {"topLevelComment": {"id": "UgzZiRQ_KENk3hbla1d4AaABAg", "publishedAt": "2022-06-04T03:01:58Z", "author": "li kevin", "text": "Alvin Chin, is it that you?!", "likes": 0}}, {"topLevelComment": {"id": "Ugz5JpRUVflaFBxWrKd4AaABAg", "publishedAt": "2022-06-03T15:48:46Z", "author": "Pramod Ashta", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxRKoEYBwTdPW0x_jl4AaABAg", "publishedAt": "2022-06-03T13:41:18Z", "author": "Lucas Reis", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxGSFs1A8Npod5Sgx14AaABAg", "publishedAt": "2022-06-03T11:31:21Z", "author": "Creative Ataraxia", "text": "this is better than college..", "likes": 0}}, {"topLevelComment": {"id": "UgxAnFJJd7aD2DvYCFN4AaABAg", "publishedAt": "2022-06-02T21:17:43Z", "author": "Rafael lacerda silva", "text": "my grid traveler have O(m+n) time complexity, but dont kno if its beauty, is it possible write in another way?\n\nconst gridTraveler = (m, n) => {\r\n    const fac = (n, memo = {}) => {\r\n        if (n === 1) memo[1] = 1\r\n        else memo[n] = n * fac(n - 1, memo)[n - 1]\r\n        return memo\r\n    }\r\n    const factorial = fac(m + n - 2);\r\n    return factorial[m + n - 2] / (factorial[m - 1] * factorial[n - 1])\r\n}", "likes": 0}}, {"topLevelComment": {"id": "Ugxths5CgC-i8MkuTiB4AaABAg", "publishedAt": "2022-06-02T07:48:45Z", "author": "Pavel M", "text": "Isn\u2019t it for memoized recursive solutions the space complexity calculated should have a sum of the recursion call stack size and a size of the memo? For instance, for the gridTraveler I\u2019d say it\u2019s O(m+n+m*n), and not just O(m+n), unless I miss something.", "likes": 0}}, {"topLevelComment": {"id": "UgxyVrSF6L5uV-ENRER4AaABAg", "publishedAt": "2022-06-02T02:26:43Z", "author": "rakesh kumar", "text": "O(lib) <= O(fib) <= O(dib)", "likes": 0}}, {"topLevelComment": {"id": "UgwGc23hmeU-xQ_Pold4AaABAg", "publishedAt": "2022-06-01T22:26:18Z", "author": "luis garcia", "text": "I will keep watching this video because i agree with  rudycenaronaldo , I just want to become a web developer but in some point of programming algorithm, you will need some muscle logic.... thanks for the torture...:)", "likes": 0}}, {"topLevelComment": {"id": "Ugzyur-86NHX1ClUO1t4AaABAg", "publishedAt": "2022-06-01T19:45:29Z", "author": "Dragon4Light", "text": "For improved gridTraveler solution, isn't space complexity O(m * n) - with except of base cases there is one entry in \"memo\" per function call and we have O(m * n) function calls.", "likes": 0}}, {"topLevelComment": {"id": "UgznztDWrGK4mr1ce9F4AaABAg", "publishedAt": "2022-06-01T02:52:31Z", "author": "Moritz Sontheimer", "text": "It is very well and easy explained! Thank you for the great content.\nI was just wondering, in the grid traveler tree, don't we have m+n-1 levels?\nFor example for the presented case (m=3,n=2) we have 3+2-1=4 levels\nOr is there a reason we can neglect the -1?", "likes": 0}}, {"topLevelComment": {"id": "UgzwkKnCPOnht1YLba14AaABAg", "publishedAt": "2022-05-31T19:02:29Z", "author": "Madhushan Buwaneswaran", "text": "I wanted to watch the first bit just to refresh my memory of DP.\nBut, I ended up watching it all. It is so methodical, well explained and interesting to watch. \nIf I am to teach DP any day I would follow your style.\n\nA small mistake I noticed is after 53:10, you say the time complexity of the vanilla recursion is O(2^(n+m)), because when we traverse the tree we take either down or right direction. I think it is a mistake. When depicting it as a tree, in the tree both these steps are taken at \"one level\". So the number of levels will always be max(n,m). Hence the time complexity should be O(2^max(n,m)). The example of (2,3) has only 3 levels of grid. But it doesn't matter because still the time complexity is \"exponential with regards to the number of input elements\". Nothing wrong conceptually, I pointed out a numeric mistake.\n\nSimilarly, the space complexity is also O(max(n,m)) because at any given time the stack is not going to have n+m elements.\n\nKeep up the great work", "likes": 0}}, {"topLevelComment": {"id": "Ugzdcv7eaux5lwZOFCd4AaABAg", "publishedAt": "2022-05-31T18:56:46Z", "author": "T A", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgwnVTtIvB7OGWrwiMd4AaABAg", "publishedAt": "2022-05-31T16:27:49Z", "author": "Joshua Campbell", "text": "I don't know the best way to clarify the canConstruct complexity analysis by I will try, the improvement we experience by implementing the memo takes us from O(n^m * m) time to O(n * m^2) time. This improvement can be explained by understanding that Big O is a notation that aims to capture the asymptotic complexity of an algorithm as numbers grow to inifinity. What alvin breezes over is the fact that the brute force solution (n^m) *m actually becomes (n * m) * m, this further simplifies to n * m^2. The main thing to realize here is that we will save time on duplicate effort, and that we don't know the exact savings as it will differ from input to input, (some inputs may have do effort that needs to be memoized) hence, the best we can assume for our asymptotic upper bound, is that it will be some factor of n ( the target.length) and m (the branching factor) the justification is that instead of having m be mulplied for every 1 in n. we only need to multiple every 1 in n by a single scalar, m - where m is now the number of unique entries in the wordbank.", "likes": 0}}, {"topLevelComment": {"id": "Ugwb7L5cES0iP_D_7jV4AaABAg", "publishedAt": "2022-05-31T15:20:13Z", "author": "Kun Ran", "text": "The moment I saw that tabulation approach for `canSum`, my eyes sparkles!", "likes": 0}}, {"topLevelComment": {"id": "UgwR66GaL8I-w2lo9XZ4AaABAg", "publishedAt": "2022-05-31T13:42:11Z", "author": "Mufassir Azam", "text": "The sum problems show StackOverflowError", "likes": 0}}, {"topLevelComment": {"id": "Ugw7-K4m_iz-dM15SwV4AaABAg", "publishedAt": "2022-05-31T08:09:07Z", "author": "Jack Mac", "text": "What would the binary tree look like for, find all prime numbers up until N and find their sum.\nI have tried to draw trees but can't see anything repeating to memoize... even a binary tree for find all primes up to 1000... ta", "likes": 0}}, {"topLevelComment": {"id": "Ugwdv_nHh7Qm9Dt8ZUJ4AaABAg", "publishedAt": "2022-05-30T22:33:45Z", "author": "S Chan", "text": "What kind of software tools did you use to create this presentation?", "likes": 0}}, {"topLevelComment": {"id": "UgzfdHCwHamiCTBauct4AaABAg", "publishedAt": "2022-05-30T08:49:56Z", "author": "Weed Whisperer", "text": "could someone please translate the canSum function into python? the memoized version", "likes": 0}, "replies": [{"id": "UgzfdHCwHamiCTBauct4AaABAg.9bdm8tfYHgY9iUiD_0JkHz", "publishedAt": "2022-11-16T10:42:58Z", "author": "SparrowC1", "text": "def cansum(target_sum, numbers, memo=None):\n\n    if memo is None:\n        memo ={}\n    if target_sum in memo:\n        return memo[target_sum]\n    if target_sum<0:\n        return False\n    if target_sum in numbers:\n        return True\n\n    for i in numbers:\n        if cansum(target_sum-i, numbers, memo) == True:\n            memo[target_sum] = True\n            return True\n    memo[target_sum] = False\n    return False", "likes": 0}]}, {"topLevelComment": {"id": "UgwbWbmsRLQPP7ghMAx4AaABAg", "publishedAt": "2022-05-30T04:22:18Z", "author": "Jodomo", "text": "Hands down THE best course on DP.", "likes": 0}}, {"topLevelComment": {"id": "UgyWvho0GVitieCkAWd4AaABAg", "publishedAt": "2022-05-29T11:11:49Z", "author": "Sushant Kumar", "text": "Good one", "likes": 0}}, {"topLevelComment": {"id": "Ugx7ccWHaV7yLoLoW-B4AaABAg", "publishedAt": "2022-05-28T21:14:48Z", "author": "SOMESH VEMULA", "text": "This video is gold.", "likes": 0}}, {"topLevelComment": {"id": "UgxV90ammsZmlz1D7D14AaABAg", "publishedAt": "2022-05-28T02:18:32Z", "author": "Christopher O'Grady", "text": "My notes so far:\n1) gridTraveler space complexity looks like O(NxM) to me. I think at best you could get it to (N*M)/2, but that doesn't really matter when discussing complexity. It's definitely more than N+M\n2) You do not need to go through every node for bestSum. If you do a breadth first search of the tree, then you are checking shortest paths first, so the first hit you have will at least be tied for shortest path.", "likes": 2}, "replies": [{"id": "UgxV90ammsZmlz1D7D14AaABAg.9bYvlUNbrpG9iFwMZ8ac1Z", "publishedAt": "2022-11-10T16:57:55Z", "author": "Hazem Khairy", "text": "Exactly, I definitely agree with the first part. I was searching the comments to see if someone else noticed that. It looks he forgot to take the memo into account when calculating the space complexity.\nI haven't reached the second part though xD", "likes": 0}]}, {"topLevelComment": {"id": "Ugy9xfeb9TCa5IVQfxd4AaABAg", "publishedAt": "2022-05-27T17:08:05Z", "author": "mutaemma", "text": "Question, on canSum problem given array of [2,3] and target sum of 7, how is the return value is true? I thought it is false", "likes": 0}}, {"topLevelComment": {"id": "UgwXJU510OA-3810I014AaABAg", "publishedAt": "2022-05-27T14:06:04Z", "author": "Manish Arya", "text": "someone can help me \nwhat is the error in this code\n\n\nconst countConstruct = (target, wordBank,memo={}) =>  {\n    if(target in memo) return memo[target];\n    if(target ===''){\n        return 1;\n    }\n    const totalCount =0;\n    for(let word of wordBank) {\n        if(target.indexOf(word)===0){\n            const suffix = target.slice(word.length);\n            // if(canConstruct(suffix, wordBank,memo)=== true){\n            //     memo[target]= true;\n            //     return true;\n            const var1= countConstruct(suffix,wordBank,memo);\n            totalCount = totalCount+ var1;\n            }\n            \n        }\n    \n    memo[target] = totalCount;\n    return totalCount;\n}\n\nconsole.log(countConstruct(\"abcdef\",[\"abc\",\"cd\", \"def\", \"abcd\"]));\nconsole.log(countConstruct(\"skateboard\", [\"bo\",\"rd\", \"ate\", \"t\",\"ska\",\"sk\",\"boar\"])); \nconsole.log(countConstruct(\"enterapotentpot\",[\"a\",\"p\",\"ent\", \"enter\",\"ot\",\"o\",\"t\"]));\nconsole.log(countConstruct(\"hoeruwerheeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", [\"e\",\"eee\",\"eedhsf\", \"eefie\",\"eee\",\"ee\",\"he\",\"eeeeeeeee\", \" r\", \"u\",\"p\",\"a\"]));", "likes": 0}}, {"topLevelComment": {"id": "UgzmOg0i2PVOc_2YnLl4AaABAg", "publishedAt": "2022-05-27T06:06:34Z", "author": "MANISH KUMAR", "text": "00:00 Intro to dynamic programming\n3:22 Understanding the need for Dynamic programming\n10:48 Understanding time complexity and space complexity\n22:27 Back to the need for dynamic programming with an example\n23:31 Dynamic programming - how it reduces the  time complexity\n25:56 Implementation of dynamic programming using memoization \n38:38 More problem", "likes": 8}}, {"topLevelComment": {"id": "Ugzj9qDQXy1PsdYuFGB4AaABAg", "publishedAt": "2022-05-26T21:02:36Z", "author": "Vibrating Aught", "text": "Excellent video! Very simple to understand.", "likes": 0}}, {"topLevelComment": {"id": "UgyzDXoTDT_VLUOnNfV4AaABAg", "publishedAt": "2022-05-26T03:35:00Z", "author": "d \u0301buC", "text": "ur poor computer", "likes": 0}}, {"topLevelComment": {"id": "UgwwIwJUq73prAXqyDJ4AaABAg", "publishedAt": "2022-05-25T23:31:56Z", "author": "praetor fenix", "text": "It would be nice to show the iteration methods to solving these problems", "likes": 0}}, {"topLevelComment": {"id": "UgxUTwgF8BdLZoRB_Td4AaABAg", "publishedAt": "2022-05-25T23:31:20Z", "author": "praetor fenix", "text": "It would be nice to show the iteration methods to solving these problems", "likes": 0}}, {"topLevelComment": {"id": "Ugygfw2RjIlkYYysEA54AaABAg", "publishedAt": "2022-05-25T23:31:11Z", "author": "praetor fenix", "text": "It would be nice to show the iteration methods to solving these problems", "likes": 0}}, {"topLevelComment": {"id": "UgxF9-Av5TKpJy6IC294AaABAg", "publishedAt": "2022-05-25T21:03:19Z", "author": "Gala Desonne", "text": "\u2764\u2764\u2764\u2764\u2764\u2764\u2764\u2764\u2764", "likes": 0}}, {"topLevelComment": {"id": "UgzmUck939kNofyVG2l4AaABAg", "publishedAt": "2022-05-25T16:45:34Z", "author": "Prakhar Gupta", "text": "At 3:48:42 time, 1st test case CanSum(7,[2,3]) returns true. But how is this possible 2+3 can be 5 only??", "likes": 0}}, {"topLevelComment": {"id": "UgxwnbRa--Jk2PSeKxh4AaABAg", "publishedAt": "2022-05-25T15:13:29Z", "author": "BHARGAV VADLA", "text": "Hi can u tell me what is the board or software used to makes drawing like u and to make animation ...?", "likes": 0}}, {"topLevelComment": {"id": "Ugzb-jPdXSFIC2oxA9J4AaABAg", "publishedAt": "2022-05-25T14:49:40Z", "author": "ICUSmooth", "text": "This is actually inspirational content. Thank you so much for producing it!", "likes": 0}}, {"topLevelComment": {"id": "UgxkGjqr1FF-YwRFwKN4AaABAg", "publishedAt": "2022-05-25T13:20:43Z", "author": "Jayden", "text": "Hi. At 53:35, may I know why the time complexity is O(2^(n+m)), why it is not O(2^(n+m-1))? Thanks in advance.", "likes": 1}}, {"topLevelComment": {"id": "UgzdpHMBSwgFNwg0k0p4AaABAg", "publishedAt": "2022-05-25T04:45:58Z", "author": "The Silent Watcher", "text": "Wanted to practice memoization with Recam\u00e1n sequence,  but for the life of me I am unable to visualize it as a tree :(", "likes": 0}}, {"topLevelComment": {"id": "UgzdOcezHR_BglZQjqt4AaABAg", "publishedAt": "2022-05-24T22:44:28Z", "author": "Mein Deutschkurs mit Johannes", "text": "Alvin, thank you so much for uploading this video. I got into programming as some kind of a hobby. Your video not only taught me two very important principles, but also brought me understanding for terms that my math teacher\u201425 years ago\u2014was not able to explain. Thank you so much!!! \ud83e\udd17", "likes": 0}}, {"topLevelComment": {"id": "UgwQCJp55qOou23XjNJ4AaABAg", "publishedAt": "2022-05-23T23:54:44Z", "author": "Keith R", "text": "using target.indexOf(word) is O(len(target)*len(word)) for each iteration ... you should have a startsWith which would just be O(n) in word, which is usually smaller", "likes": 0}}, {"topLevelComment": {"id": "UgyeiXTIkl1HPB36NuJ4AaABAg", "publishedAt": "2022-05-23T19:55:35Z", "author": "Shehriyar Nadeem", "text": "I just paused this video out of excitement to post this comment. THANKYOU freeCodeCamp this is an awesome channel. <3", "likes": 0}}, {"topLevelComment": {"id": "Ugxou5yRppQgpsZVYXx4AaABAg", "publishedAt": "2022-05-22T21:29:35Z", "author": "Gopinatha PR", "text": "Amazing way of teaching.. You are very very good at what you do Alvin!! Thanks a lot. I really enjoyed this course and thanks to you I am now finally able to solve dp problems after learning from you. Hats off \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgzMECjM4LZ1UO6jLxF4AaABAg", "publishedAt": "2022-05-22T13:44:32Z", "author": "Motivation", "text": "Can you please use light mode instead of dark mode for tutorials.", "likes": 0}}, {"topLevelComment": {"id": "UgxS32Mh6P4KloigV9V4AaABAg", "publishedAt": "2022-05-22T01:31:14Z", "author": "Rhen", "text": "Just wondering, would it matter if we do:\n\nconst suffix = target.replace(word, \"\");\n\ninstead of using String.split(...)?\n\nWould it actually reduce the complexity down to O(n * m) only?", "likes": 0}}, {"topLevelComment": {"id": "UgxPakh3iLVcWdUeDLZ4AaABAg", "publishedAt": "2022-05-20T20:17:52Z", "author": "Bombay Bloke", "text": "40:15 i had been breaking my brains thinking how chess games work.\ni think ive got the answer now haha", "likes": 0}}, {"topLevelComment": {"id": "Ugw6LYoCwB1CcqgP6ft4AaABAg", "publishedAt": "2022-05-20T17:25:28Z", "author": "Vyacheslav Kononenko", "text": "I hate when developers write \"if( something == true )\". Why to stop? Why not \"if( (something == true) == true )\" ?", "likes": 0}}, {"topLevelComment": {"id": "Ugy2XxexgoOeFCSvXM54AaABAg", "publishedAt": "2022-05-18T15:47:30Z", "author": "Rami", "text": "I wish I watched this years ago.", "likes": 0}}, {"topLevelComment": {"id": "UgxItwyxVgKyp71vrUF4AaABAg", "publishedAt": "2022-05-18T04:41:29Z", "author": "Aswini Yallanki", "text": "When you are coding in Java for BestSum problem,\nYou need to create a copy of the remaindercombination list, and add the number to the new list, so that you will assign a new object referrence for each Target value in the Memo object. \nElse, every parent node changes the object of its chaild's value in the object, which results in wrong result.\n\nEx: In bottom node of 10, we will create memo as {10:[10]}\nwhen you return to the parent loop (target as 20), you will add another 10 to the result object so that it can be {10,10}, which makes the previous object change.\nResult -> memo = {10:[10,10],20:[10,10]} At a point for target 25, you will have referrence as [25,25,10] -> which got updated by 60 \ud83e\udd2f \n\nSo need to take care of handling objects. (Learnt lesson)", "likes": 1}}, {"topLevelComment": {"id": "UgznU2g_LTeB5Kkfvrd4AaABAg", "publishedAt": "2022-05-16T14:04:41Z", "author": "Devendra Singh", "text": "This video helped in developing intuition for solving dp problems.. Thanks very much:)", "likes": 0}}, {"topLevelComment": {"id": "Ugyhwkp5Ig3nwVhTtZd4AaABAg", "publishedAt": "2022-05-16T10:38:58Z", "author": "cron coder", "text": "what is the cost of lookup in the fibonacci example ? If we do it using arrays, then it will be 1. When we look it up from an object there definitely should some cost incurred, correct ?", "likes": 0}}, {"topLevelComment": {"id": "UgzksxclQulIN1Kkpwl4AaABAg", "publishedAt": "2022-05-16T04:43:13Z", "author": "Obada Yahya", "text": "howSum tabulation : isn't faster if we used the previous code (canSum) and then if the output in our case is true(we can generate the target by numbers we have) we start from the target and start implementing the same algorithm in reverse this will give us o(n * m) and space of o(m)", "likes": 0}}, {"topLevelComment": {"id": "UgwE0EkmgkkcGaFOYFp4AaABAg", "publishedAt": "2022-05-15T14:17:24Z", "author": "Avinash Thombre", "text": "Simply Awesome!", "likes": 0}}, {"topLevelComment": {"id": "UgwgtG3ByWB6cAf1wKZ4AaABAg", "publishedAt": "2022-05-15T12:16:28Z", "author": "David Hovsepyan", "text": "You're quite strong! I would love to be as strong as you to work at Google and become a millionaire after a few years :). I guess it is the only way to become a millionaire if you don't have a business :D", "likes": 0}}, {"topLevelComment": {"id": "UgxLTXqJaw-A5YDmg0Z4AaABAg", "publishedAt": "2022-05-14T01:39:14Z", "author": "mora tanga", "text": "WOW", "likes": 0}}, {"topLevelComment": {"id": "UgxP-Vg86Pat1-tpZ514AaABAg", "publishedAt": "2022-05-11T16:11:31Z", "author": "HarperCFC_", "text": "Spent a few days to complete this tutorial which helped clear away many of my confusions about DP... Thx again, Alvin!", "likes": 0}, "replies": [{"id": "UgxP-Vg86Pat1-tpZ514AaABAg.9atd_YYmQZS9atdqH9WjX-", "publishedAt": "2022-05-11T16:13:48Z", "author": "HarperCFC_", "text": "Ofc it's needed for me to take more practices to better understand your discourses. I'll definitely do that!", "likes": 0}]}, {"topLevelComment": {"id": "UgxtrNKTc-PxhBFbUw54AaABAg", "publishedAt": "2022-05-11T02:04:45Z", "author": "Bhavin Desai", "text": "3:21:50 Your fib tabulation code will face ArrayIndexOutOfBounds in some languages. So in line 2, you can create the array size of n+2 \n    val table = IntArray(n+2) { 0 }\n\n3:52:34    Line 9  should be   if(i + num <= targetSum) table[i + num] = true", "likes": 3}}, {"topLevelComment": {"id": "Ugyd_2Vv3ZKAgL4nOuN4AaABAg", "publishedAt": "2022-05-10T13:54:16Z", "author": "Lukash K.", "text": "hey Alvin, can you make a similar series on Bactracking?", "likes": 0}}, {"topLevelComment": {"id": "UgxGm2Y6-eyvO3dYaMl4AaABAg", "publishedAt": "2022-05-10T07:01:38Z", "author": "abi abi", "text": "why using javascript?", "likes": 0}}, {"topLevelComment": {"id": "Ugy8nsQte7geLiHsI5V4AaABAg", "publishedAt": "2022-05-10T05:25:35Z", "author": "ARJUN S", "text": "Is there a HCF, way of doing the factorisatio of arrays ? , for example 300 is not a multiple of 7 or 14?", "likes": 0}}, {"topLevelComment": {"id": "UgxRsLEWM86vyxNirBZ4AaABAg", "publishedAt": "2022-05-10T02:56:46Z", "author": "HarperCFC_", "text": "Finished nearly a quarter of this tutorial. It is really awesome.\nThank you so muuuuuch Alvin.", "likes": 0}}, {"topLevelComment": {"id": "UgwkyReopXOjhs5Ii4N4AaABAg", "publishedAt": "2022-05-09T14:30:21Z", "author": "Michail Shultz", "text": "The best explanation I've ever seen. Thank you very much.", "likes": 0}}, {"topLevelComment": {"id": "Ugz9S6gLCPAIC9Cfgwd4AaABAg", "publishedAt": "2022-05-09T12:25:16Z", "author": "Josiah David", "text": "Can someone help me with clarification??\nI believe the Tabulation method in Best Sum has a Space complexity greater than O(M^2) because it would store all the possible combinations of numbers in an array and not just the length of numbers.\nFor instance: if we have target_number 100 and [2, 3, 5] we would have all the numbers in range 1-8 stored in the array.\nfor all the numbers from 1 - 100 we would have their best sum in the array. imagine number 76 it would have combinations of 2s and 3s and 5s so the Space Complexity would be far greater than O(M^2).\n\nTo improve on this large space complexity once we iterate past an array we can intialize the previous value to 0 to save on space.\nIf I am wrong someone please help out.", "likes": 0}}, {"topLevelComment": {"id": "Ugy1jJllq0XPDKAX1-V4AaABAg", "publishedAt": "2022-05-08T11:24:48Z", "author": "Pranav Kumar", "text": "For me, its memoization for now :) Tabulation will need more time. I will need to revisit the second of this course", "likes": 0}}, {"topLevelComment": {"id": "UgyA-G_9OsMc4EvV2Ep4AaABAg", "publishedAt": "2022-05-08T10:23:11Z", "author": "ANKAN CHANDA", "text": "Watch", "likes": 0}}, {"topLevelComment": {"id": "UgzexZkSZBN3NCdaYpN4AaABAg", "publishedAt": "2022-05-08T00:13:39Z", "author": "omar aboutaleb", "text": "Can someone explain why the time complexity for the gird traveler problem is m*n and not m+n? At 1:04:19", "likes": 0}}, {"topLevelComment": {"id": "UgzUux2FiW3M1u8ASTN4AaABAg", "publishedAt": "2022-05-07T14:23:59Z", "author": "Bhargav Srinivas", "text": "In canSum memoization around 1:21:30... array numbers are said to be non negative. say the first element of the array is zero , then cansum() will go in infinite loop...right ?", "likes": 0}}, {"topLevelComment": {"id": "Ugy52T98xhbqDbBahIJ4AaABAg", "publishedAt": "2022-05-05T20:48:21Z", "author": "smurfandturf", "text": "3:52:52 the space is actually the size of the largest value in the numbers array, (due to growing the array to i + num) which could be way larger than the target value (unless I am misunderstanding and the array becomes sparsely represented for a huge index so not memory hungry)", "likes": 3}}, {"topLevelComment": {"id": "Ugw1Y0DwHXnoMSyOq7Z4AaABAg", "publishedAt": "2022-05-05T07:56:54Z", "author": "Barmaja For Everyone - \u0628\u0631\u0645\u062c\u0629 \u0644\u0644\u062c\u0645\u064a\u0639", "text": "Thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgwRZfueBw_Wu9hQmKB4AaABAg", "publishedAt": "2022-05-05T06:20:23Z", "author": "Arenthesium", "text": "\"potentpot\" hmmm", "likes": 0}}, {"topLevelComment": {"id": "UgwX2Dq5X54lviMZVKB4AaABAg", "publishedAt": "2022-05-03T19:24:34Z", "author": "Planet of the Idiots", "text": "F' I am so stupid :( my brain hurts. PLZ do this in c++", "likes": 0}}, {"topLevelComment": {"id": "UgxKDQ2TAgbH92Elqjp4AaABAg", "publishedAt": "2022-05-03T18:28:42Z", "author": "Guide4Ever", "text": "Amazing, simply amazing!", "likes": 0}}, {"topLevelComment": {"id": "UgwTVE_B2_jhrdoRM0x4AaABAg", "publishedAt": "2022-05-03T06:56:27Z", "author": "Life moments", "text": "Can you please try and solve the \"skateboard\" example for canConstruct with the tabulation strategy. It doesn't look possible to solve it with tabulation strategy discussed here.", "likes": 0}}, {"topLevelComment": {"id": "Ugz4jprs_V6EAs5GdGV4AaABAg", "publishedAt": "2022-05-01T20:16:23Z", "author": "Ivan Zhigalov", "text": "The best explanation I've ever had! Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgxBx5qpIKzGvJwN-et4AaABAg", "publishedAt": "2022-05-01T13:41:01Z", "author": "Vishwanath Gulabal", "text": "This is one of the best videos that explain DP very well.", "likes": 0}}, {"topLevelComment": {"id": "UgxfZ36zeTLfNU_b6NV4AaABAg", "publishedAt": "2022-05-01T02:21:07Z", "author": "Ali Askri", "text": "Finally done!!!! \ud83c\udf86", "likes": 0}}, {"topLevelComment": {"id": "UgxI8GVfJ2oDtwlveFR4AaABAg", "publishedAt": "2022-04-30T17:51:23Z", "author": "Lucario", "text": "32:00\n1:10:28", "likes": 1}}, {"topLevelComment": {"id": "UgzGfkqb5pSyNHpjevV4AaABAg", "publishedAt": "2022-04-30T12:27:13Z", "author": "Samuel Agbede", "text": "AMAZING course! Thanks Alvin.\n\nA quick question please - is it me or does the canSum function fail when you pass in 0 as the target? It returns true irrespective of the array of numbers.", "likes": 0}}, {"topLevelComment": {"id": "Ugwl1Fy_rzjIPJ7Kjl94AaABAg", "publishedAt": "2022-04-29T06:42:57Z", "author": "imukai", "text": "So I watched this, I agree it's very good for what it is .  The examples are contrived to hammer home similar points.  My question:  how do these same exact problems change when you do NOT allow choosing the same elements repeatedly in the sets, and those sets are much, much larger?", "likes": 0}}, {"topLevelComment": {"id": "UgxkDIIJW93qNx-WyQN4AaABAg", "publishedAt": "2022-04-27T20:02:25Z", "author": "Suman Saurabh", "text": "Nothing can be as useful as this video on YT.", "likes": 0}}, {"topLevelComment": {"id": "Ugwku51rFrbmn9Kzchl4AaABAg", "publishedAt": "2022-04-27T05:22:32Z", "author": "Light Sense Studio", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxQ-tdrM44jXdtdBll4AaABAg", "publishedAt": "2022-04-27T00:04:17Z", "author": "Rajmanov", "text": "This is a great tutorial, thank you Alvin.\nJust and advice for new comers, don't try so hard the tabulation part, it's not intuitive, the algorithms used overther are not generalistics and there is not any recipe that works totally for them (contrary to memorization) , there are enormous jumps on the logic, and it's ok no worries, with memorization part it's enoght to pass the problems. Success!", "likes": 1}}, {"topLevelComment": {"id": "UgzZEpF5kZNGFPYpIx94AaABAg", "publishedAt": "2022-04-26T07:17:02Z", "author": "Derfie McGoo", "text": "You lost me at 1/2 simplifies to 1", "likes": 0}}, {"topLevelComment": {"id": "UgzT8e9tqJ_lEk_W2jF4AaABAg", "publishedAt": "2022-04-25T21:17:02Z", "author": "sami ", "text": "i just want to thank you n^m times\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgwT6yt_SkPJvy4ExQZ4AaABAg", "publishedAt": "2022-04-25T05:08:25Z", "author": "Alex Maldonado", "text": "This is an amazing course! Thank you for sharing this with us! Just curious, is there any way we can have access to the illustrations? They are also amazing and would be great to keep in some notes. Thank you!", "likes": 1}}, {"topLevelComment": {"id": "UgxNPSG03p1FrKajYPF4AaABAg", "publishedAt": "2022-04-24T17:32:20Z", "author": "Teja Balu", "text": "Just completed the course and this is awesome! Thank you so much!!!", "likes": 0}}, {"topLevelComment": {"id": "UgwSmN93iYM90TtdGRt4AaABAg", "publishedAt": "2022-04-24T13:40:58Z", "author": "Sunil Bajpai", "text": "How CanSum(7,[2,3]) will return true it should be false can someone please explain me.", "likes": 0}, "replies": [{"id": "UgwSmN93iYM90TtdGRt4AaABAg.9aCapwjH-VT9bicifpA20C", "publishedAt": "2022-06-01T06:03:46Z", "author": "Vishal Tuniki", "text": "the numbers in array can be used any number of times. so 2 will be substracted twice and 3 will be substracted once.", "likes": 0}, {"id": "UgwSmN93iYM90TtdGRt4AaABAg.9aCapwjH-VT9aRv_ruvyah", "publishedAt": "2022-04-30T12:30:52Z", "author": "Samuel Agbede", "text": "Saw this in a comment below. 7 = 2 + 2 + 3. You can re-use numbers in the array", "likes": 0}]}, {"topLevelComment": {"id": "UgybVOl9s5-BnJtl1VR4AaABAg", "publishedAt": "2022-04-24T10:25:26Z", "author": "Gaetano Piazzolla", "text": "49:48 should be if(n==1 || m==1)", "likes": 0}}, {"topLevelComment": {"id": "UgzQX9NYSQ3-6b4o9R14AaABAg", "publishedAt": "2022-04-24T03:41:47Z", "author": "Joaquin Sanchez", "text": "This man literally change the way i see recursion, i'm not blind anymore", "likes": 0}}, {"topLevelComment": {"id": "Ugwvve3oXGPYChAQdRt4AaABAg", "publishedAt": "2022-04-23T07:57:27Z", "author": "Nomad '", "text": "awesome dude!", "likes": 0}}, {"topLevelComment": {"id": "Ugx_fjRtPEIaK2yIcnN4AaABAg", "publishedAt": "2022-04-22T21:44:36Z", "author": "Michael Branconier", "text": "Great tutorial! Thanks for the help!", "likes": 0}}, {"topLevelComment": {"id": "UgxDOy5THdg-GR-x5i54AaABAg", "publishedAt": "2022-04-21T15:20:14Z", "author": "Nguyen Viet", "text": "OMG!!! Sooooo easy to understand, thank you \ud83d\ude18", "likes": 0}}, {"topLevelComment": {"id": "Ugz5orfk2oG7t_fZaUZ4AaABAg", "publishedAt": "2022-04-21T08:51:47Z", "author": "Bud", "text": "This course is beyond awesome, thanks for sharing this powerful stuff! I think this course sums up essential and fundamental stuffs i need to know about dynamic programming.", "likes": 2}}, {"topLevelComment": {"id": "UgzkDjIv2WtO0DJ8krR4AaABAg", "publishedAt": "2022-04-20T20:22:05Z", "author": "YesAndNo", "text": "Either I, finally, start to get recursion and dynamic programming or this teacher is just superb or both:)!", "likes": 0}}, {"topLevelComment": {"id": "UgxGe7yOAcfRnWyAolF4AaABAg", "publishedAt": "2022-04-20T06:14:18Z", "author": "Robin Felix", "text": "AWesome explanation. But one things which struck me is. to solve DP problems first we need to know these type of pattern exisits or getting these approaches on time?", "likes": 0}}, {"topLevelComment": {"id": "UgxnjjCKssTfyh9w2v14AaABAg", "publishedAt": "2022-04-19T16:19:25Z", "author": "Qu\u00e1ch H\u00eang T\u00f4ny", "text": "Man I hate recursion", "likes": 1}}, {"topLevelComment": {"id": "Ugw3VZwkUGfY4VCsgph4AaABAg", "publishedAt": "2022-04-18T05:42:57Z", "author": "Gaurav Varshikar", "text": "Is the canSum problem same as the TwoSum? Can we solve the canSum and howSum problems iteratively by using a Set or HashTable(Map) in the actual interviews. The time and space complexity will be O(n). At least that's how I solved these questions on LeetCode so far. Kindly correct me if am wrong.", "likes": 0}, "replies": [{"id": "Ugw3VZwkUGfY4VCsgph4AaABAg.9_xIMaKHfoN9i1qek4PfNB", "publishedAt": "2022-11-05T05:38:45Z", "author": "Normie Cyrox", "text": "yes you can , i also did with hashmap", "likes": 0}]}, {"topLevelComment": {"id": "Ugy73W0SCZOzLTQ8QM94AaABAg", "publishedAt": "2022-04-17T14:48:13Z", "author": "Aashu Kumari", "text": "Best explanation i have ever found on youtube. You make it so simple to understand even a complex problem. Thanks a Ton!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugxiv98ug5chEu8l3mh4AaABAg", "publishedAt": "2022-04-17T11:59:23Z", "author": "Dave Graham", "text": "Java not Javascript: x is 0 thru targetSum, y is each elem in array. Can  you come up with a set of parameters which justify the need for the OR in the 2nd condition? I am asserting that only the if (arr[newpos] == null) check is needed.\n\t\t\t\t\tint newpos = x + y;\r\n\t\t\t\t\tif (newpos <= t) {\r\n\t\t\t\t\t\tif (arr[newpos] == null || arr[newpos].size() > (arr[x].size() + 1)){//add to array logic", "likes": 0}}, {"topLevelComment": {"id": "UgzcypwL15V54Qr0XCh4AaABAg", "publishedAt": "2022-04-17T11:52:03Z", "author": "Mo Nguyen", "text": "Unfortunately I can't hit the like button twice~~~ Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgxKACr9Bt_2vS1kf4p4AaABAg", "publishedAt": "2022-04-16T22:09:46Z", "author": "Simon Traub", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugyne_uvrOkIdSbLmQV4AaABAg", "publishedAt": "2022-04-16T19:14:13Z", "author": "Tholkappiar", "text": "Fibonacci can be solved by \u201cdo while\u201d Loop. Not sure why he solving using a recursive function.", "likes": 0}}, {"topLevelComment": {"id": "UgwaquxAHBWpy-oKjBZ4AaABAg", "publishedAt": "2022-04-16T16:25:33Z", "author": "Devin Gleason Lambert", "text": "Question: \nFor howSum(), the Brute Force time complexity is stated as O(n^m*m). Is that supposed to be O(n^(m*m)) OR O((n^m)*m) ?\nEx 2^(2*2) = 16\nvs\nEx (2^2)*2 = 8.", "likes": 0}, "replies": [{"id": "UgwaquxAHBWpy-oKjBZ4AaABAg.9_tIJS14akP9_tSL-NKZtW", "publishedAt": "2022-04-16T17:53:09Z", "author": "Devin Gleason Lambert", "text": "NVM, he answers my question @ 1:51:18. Is intended to be O((n^m)*m)", "likes": 0}]}, {"topLevelComment": {"id": "UgxuoED2wkxmWWFM6rp4AaABAg", "publishedAt": "2022-04-15T21:04:38Z", "author": "Jai Kang", "text": "What whiteboard app are you using?", "likes": 0}}, {"topLevelComment": {"id": "Ugy3CaNKMdSG-urYEul4AaABAg", "publishedAt": "2022-04-15T16:32:28Z", "author": "Ihsan Nurul Iman", "text": "In allConstruct I don't really get the saying of \"dp doesn't benefit much\" when it still has the property of optimal subproblem and overlapping subproblem.\n\nSay input target is : abcde and wordBank: [a,b, ab, c,cd,cde, de, e]\n\nWhen at the node ab and want to construct the rest, we can still store that  to construct the remaining for ab there are [c, de], [cde], and [cd,e]. So that the next node that went to the same remaining for ab can get from that instead.", "likes": 0}}, {"topLevelComment": {"id": "UgyN644PLDx-U6S8urN4AaABAg", "publishedAt": "2022-04-15T00:46:25Z", "author": "Mo Nguyen", "text": "skipped memoization at 1:52:01 to jump to 3:10:55", "likes": 0}, "replies": [{"id": "UgyN644PLDx-U6S8urN4AaABAg.9_p226FK_Kc9_r1kqJHcUa", "publishedAt": "2022-04-15T19:22:24Z", "author": "A.", "text": "What do you mean???????????????????????????????????????????????????????", "likes": 0}]}, {"topLevelComment": {"id": "UgxYGOjxD__dy1mPFIN4AaABAg", "publishedAt": "2022-04-14T14:50:12Z", "author": "\u0412\u0430\u0434\u0438\u043c \u0414\u0435\u043c\u0447\u0443\u043a", "text": "outstanding!", "likes": 0}}, {"topLevelComment": {"id": "UgyFilwI0lWxnybTo2B4AaABAg", "publishedAt": "2022-04-14T12:15:19Z", "author": "Muzammil Abdul Rauf", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzQjR7_pubKqNdnkP54AaABAg", "publishedAt": "2022-04-13T15:29:52Z", "author": "shailja prabhakar", "text": "in case, if someone is struggling with the bestSum python code,\ndef bestSum(targetSum, numbers=[]):\r\n    if targetSum==0:\r\n        return []\r\n    if targetSum<0:\r\n        return NULL\n\r\n    shortestCombination=NULL\r\n    for number in numbers:\r\n        remainder = targetSum - number\r\n        remainderCombination=bestSum(remainder, numbers)\r\n        if remainderCombination!=NULL:\r\n            combination=[*remainderCombination, number]\r\n            if shortestCombination==NULL or (len(combination)<len(shortestCombination)):\r\n                shortestCombination= combination\r\n    return shortestCombination\r\n                \r\nprint(bestSum(7,[5,3,4,7]))\r\nprint(bestSum(8,[2,3,5]))\r\nprint(bestSum(8,[1,4,5]))", "likes": 1}, "replies": [{"id": "UgzQjR7_pubKqNdnkP54AaABAg.9_lTZ-JtpIp9cVfOoFfc4V", "publishedAt": "2022-06-20T16:29:10Z", "author": "shailja prabhakar", "text": "@LrdKGB on laptop just write.. purfe dynamic programming.\nThere will be some blue color logo there.", "likes": 0}, {"id": "UgzQjR7_pubKqNdnkP54AaABAg.9_lTZ-JtpIp9cVYv5odAFX", "publishedAt": "2022-06-20T15:23:48Z", "author": "LrdKGB", "text": "Did you find a way to bypass the ValueError: substring not found for Can_construct? Or do we have to result in using a Try/except? \r\ndef Can_construct(target_string,array_of_words):\r\n    \r\n    if target_string == '':\r\n        return True\r\n    \r\n    for word in array_of_words:\r\n        if target_string.index(word) == 0:\r\n            print(word)\r\n            suffix = target_string[len(word):]\r\n            if Can_construct(suffix,array_of_words) == True :\r\n                return True\r\n    \r\n    return False #return false once all option have been tested", "likes": 0}]}, {"topLevelComment": {"id": "UgwgQE6XZ6m4gIJj_5t4AaABAg", "publishedAt": "2022-04-13T09:22:48Z", "author": "shailja prabhakar", "text": "In the howSum problem's memoization there is a problem popping up as if, in any case a targetSum is stored previously in the memo then in that case the output will be similar as the earlier output, so the memoization of the howSum problem is basically giving an error.", "likes": 0}}, {"topLevelComment": {"id": "Ugw3KzXpzW50dTAgkPZ4AaABAg", "publishedAt": "2022-04-12T18:38:29Z", "author": "Kim Stuart", "text": "Question for Python users on the canSum() memoization function:\n\nit seems there is a problem when the memo evaluated from one main level call will get passed into the subsequent main level calls.  So when evaluating\n\nprint(canSumMemoization(7, [2, 3]))  # true\nprint(canSumMemoization(7, [5, 3, 4, 7]))  # true\nprint(canSumMemoization(7, [2, 4]))  # false\nprint(canSumMemoization(8, [2, 3, 5]))  # true\nprint(canSumMemoization(300, [7, 14]))  # false\n\nin main, after print(canSumMemoization(7, [2, 3])) is completed, that same memo object used gets passed into print(canSumMemoization(7, [5, 3, 4, 7])) and all the rest of the subsequent main level calls.  I noticed this when I kept getting all 5 test cases evaluating to true and when debugging, they all started off already having a completely full memo object, which was the same memo object used in the first canSumMemoization() call.  Anybody know a workaround to this?  As of now, I have to run each test case one by one, uncommenting and commenting test cases as I iterate through my test cases.  \n\nThank you for all of your help and this video is absolutely life changing.  I legitimately use that word because of how important a solid understanding of recursion and DP is for interviews.", "likes": 0}, "replies": [{"id": "Ugw3KzXpzW50dTAgkPZ4AaABAg.9_jELbnP-FS9cV_pRjbJdo", "publishedAt": "2022-06-20T15:40:31Z", "author": "LrdKGB", "text": "@Golden Lin Show us the way", "likes": 0}, {"id": "Ugw3KzXpzW50dTAgkPZ4AaABAg.9_jELbnP-FS9cV_mxsBu82", "publishedAt": "2022-06-20T15:40:10Z", "author": "LrdKGB", "text": "def Can_construct(target_string,array_of_words):\r\n    grid = [False] * (len(target_string) + 1)\r\n    grid[0] = True\r\n    matching_grid = [target_string[:i] for i in range(len(target_string) + 1)]\r\n    if target_string == '':\r\n        return True\r\n    for i in range(len(grid)):\r\n        if grid[i]:\r\n            for word in array_of_words:\r\n                if target_string.startswith(matching_grid[i] + word):\r\n                    tracker = len(matching_grid[i] + word)\r\n                    grid[tracker] = True                               \r\n                   \r\n    return grid[len(target_string)]", "likes": 0}, {"id": "Ugw3KzXpzW50dTAgkPZ4AaABAg.9_jELbnP-FS9cVYcyV4oMl", "publishedAt": "2022-06-20T15:21:20Z", "author": "LrdKGB", "text": "@Kim Stuart Indeed. However it seems to render memoization unusable for the last case as it takes for ever to compute.  Did you find a way to bypass the ValueError: substring not found for Can_construct? Or do we have to result in using a Try/except? \ndef Can_construct(target_string,array_of_words):\r\n    \r\n    if target_string == '':\r\n        return True\r\n    \r\n    for word in array_of_words:\r\n        if target_string.index(word) == 0:\r\n            print(word)\r\n            suffix = target_string[len(word):]\r\n            if Can_construct(suffix,array_of_words) == True :\r\n                return True\r\n    \r\n    return False #return false once all option have been tested", "likes": 0}, {"id": "Ugw3KzXpzW50dTAgkPZ4AaABAg.9_jELbnP-FS9alaYkegJTc", "publishedAt": "2022-05-08T13:11:08Z", "author": "Kim Stuart", "text": "I did find a solution to this issue.  It seems python is first-class based, so as we create functions, they are treated as object and as such, bindings will carry over every time the same function is called because it is being interpreted essentially as the same object.  So when you have foo(1), foo(2), foo(3) all called consecutively, then in python, they are all seen as the same object.  So the solution to this in Python is to add variables in the function call, set to none. So that each time a new function call is executed, it will reset that variable.\n\nso by putting sumMemoization(7, [2, 3], result=None) and then the first like in the code will say if result==None: my_dict = dict(), this will reset my_dict to an empty dictionary the first time each function is being called, effectively resetting that value to empty so the results from the previous call do not carry over\n\nthis issue in python has heavily been discussed in a stackedoverflow forum I came across as follow\n\nhttps://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument", "likes": 1}, {"id": "Ugw3KzXpzW50dTAgkPZ4AaABAg.9_jELbnP-FS9_r1xf-Phyi", "publishedAt": "2022-04-15T19:24:09Z", "author": "A.", "text": "Can I do this ? \nbool canSum(int sum, int index) {\r\n\tif (sum == x)\r\n\t\treturn 1;\r\n\tif (sum > x)\r\n\t\treturn 0;\r\n\tbool tst = 0;\r\n\tfor (int i = index; i < n; i++)\r\n\t{\r\n\t\ttst = canSum(sum + arr[i], i);\r\n\t}\r\n\treturn tst;\r\n\r\n}\n\nLike starting the loop from the current index, not from zero all over again as this is more optimized?", "likes": 1}]}, {"topLevelComment": {"id": "UgwSe9ipwN4Ji71I3LF4AaABAg", "publishedAt": "2022-04-12T10:07:59Z", "author": "Manoj S", "text": "great tutorial, very understandable teaching", "likes": 0}}, {"topLevelComment": {"id": "UgxK2YT0-_xfxvUfDv54AaABAg", "publishedAt": "2022-04-12T04:43:22Z", "author": "Sounak Ranjan Das", "text": "Thanks! We need teachers like you.", "likes": 0}}, {"topLevelComment": {"id": "UgxKpyb5cbBD7J7wxtl4AaABAg", "publishedAt": "2022-04-12T02:25:58Z", "author": "Yan Mark", "text": "This is a wonderful tutorial. let me share a problem when I exercise in Leetcode. I always got overtime with memo using an object. After I replace the object with a Map, I got an AC. Just a little bit tedious by using map.get() and map.set(). you can make a text reminder in the video.", "likes": 0}}, {"topLevelComment": {"id": "UgzqjGGdN827NqBCAAp4AaABAg", "publishedAt": "2022-04-11T23:35:03Z", "author": "Derek Lee", "text": "Can anybody tell me what would be the python version of \"canSum\" with memoization?", "likes": 0}, "replies": [{"id": "UgzqjGGdN827NqBCAAp4AaABAg.9_hBUrKhdxk9iUiI2FUNFx", "publishedAt": "2022-11-16T10:43:35Z", "author": "SparrowC1", "text": "def cansum(target_sum, numbers, memo=None):\n\n    if memo is None:\n        memo ={}\n    if target_sum in memo:\n        return memo[target_sum]\n    if target_sum<0:\n        return False\n    if target_sum in numbers:\n        return True\n\n    for i in numbers:\n        if cansum(target_sum-i, numbers, memo) == True:\n            memo[target_sum] = True\n            return True\n    memo[target_sum] = False\n    return False", "likes": 0}]}, {"topLevelComment": {"id": "UgzSoPKZwr_KAccood14AaABAg", "publishedAt": "2022-04-11T15:35:26Z", "author": "Ayush Ranjan", "text": "can someone provide me the solution for grid travel in cpp??", "likes": 0}}, {"topLevelComment": {"id": "UgzlOFoOzHnDkDtc2a14AaABAg", "publishedAt": "2022-04-11T01:29:33Z", "author": "09TYPER", "text": "Would give this vid a million likes if I could!Thanks Alvin!", "likes": 0}}, {"topLevelComment": {"id": "Ugx9uicB7YT0LDaSuTB4AaABAg", "publishedAt": "2022-04-10T21:22:00Z", "author": "dontusehername", "text": "1:04:10 I think this forgets to consider size of memo (m*n) in space complexity ..", "likes": 0}}, {"topLevelComment": {"id": "Ugy5ijmt8eUWvjuJNl94AaABAg", "publishedAt": "2022-04-10T21:17:09Z", "author": "dontusehername", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugwx3vs-JOiRVkCXRrN4AaABAg", "publishedAt": "2022-04-10T20:20:07Z", "author": "dontusehername", "text": "20:51 I wouldn't \"simplify\" an O(2^N/2) to O(2^N) - that is an exponential difference and IMO incorrectly quantified. \nSimplifying big Os for constants is ok for linear constants/coefficients, not exponents.", "likes": 1}, "replies": [{"id": "Ugwx3vs-JOiRVkCXRrN4AaABAg.9_eGOAAEcvx9a3Dimk8_Ys", "publishedAt": "2022-04-20T22:17:06Z", "author": "Dharma Teja Nuli", "text": "@dontusehername I agree with the fact that it's not representative and the instructor should have been a bit more careful there. But that's the definition of Big-O. A lot of algos would indeed be O(n^n) by definition of Big-O. Technically correct but not very representative!", "likes": 0}, {"id": "Ugwx3vs-JOiRVkCXRrN4AaABAg.9_eGOAAEcvx9a3BlIKCof3", "publishedAt": "2022-04-20T21:59:58Z", "author": "dontusehername", "text": "@Dharma Teja Nuli I disagree, that\u2019s too open ended. By that logic, a lot of algos you could just say are O(n^n). Can\u2019t loosen scope to the point where it\u2019s not representative, graphing these things will clarify what I mean.", "likes": 0}, {"id": "Ugwx3vs-JOiRVkCXRrN4AaABAg.9_eGOAAEcvx9a35jx1ccxb", "publishedAt": "2022-04-20T21:07:21Z", "author": "Dharma Teja Nuli", "text": "@dontusehername Now that I think about it, technically O(2^n) is okay as Big-O is the upper bound. But 2^n isn't the tightest upper bound!\n\nIt would be like saying 5n^2 = O(n^3) which is technically correct but not the tightest upper bound.", "likes": 0}, {"id": "Ugwx3vs-JOiRVkCXRrN4AaABAg.9_eGOAAEcvx9a2ZeYP---2", "publishedAt": "2022-04-20T16:09:31Z", "author": "dontusehername", "text": "@Dharma Teja Nuli exactly, that\u2019s a better way of putting it", "likes": 1}, {"id": "Ugwx3vs-JOiRVkCXRrN4AaABAg.9_eGOAAEcvx9a1iL1XiK6W", "publishedAt": "2022-04-20T08:14:52Z", "author": "Dharma Teja Nuli", "text": "exactly what I was thinking. \nO(2^0.5n) will be equal to O(sqrt(2)^n)", "likes": 1}]}, {"topLevelComment": {"id": "UgwVglw1RGUPkyHob0l4AaABAg", "publishedAt": "2022-04-10T04:30:42Z", "author": "Rofi", "text": "Alvin, this is absolutely incredible. Highest quality content on the web for dynamic programming problems.", "likes": 0}}, {"topLevelComment": {"id": "UgyfrzdFeXqIUvIcn6x4AaABAg", "publishedAt": "2022-04-10T01:17:44Z", "author": "Christelle Dominique", "text": "Alvin is a beast!", "likes": 0}}, {"topLevelComment": {"id": "Ugypa3I3lcM8uBiycOZ4AaABAg", "publishedAt": "2022-04-09T21:00:25Z", "author": "sijo xavier", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwwWL0GU2l0y6QMpid4AaABAg", "publishedAt": "2022-04-08T19:35:24Z", "author": "Elvis Tsang", "text": "This is absolutely amazing! Even for people not intending to be a programmer", "likes": 0}}, {"topLevelComment": {"id": "UgxX3FEbzeZDNVPOvsx4AaABAg", "publishedAt": "2022-04-08T04:09:03Z", "author": "ARRUL VIGNESH T", "text": "my interview is going on  please answer this in c program\n\nDenominations\r\nProblem\r\nIt is year 2020 and after all the demonetizations, our country has N different positive integer denominations of coin for all transactions. The finance minister went bonkers when a citizen tried to pay his taxes with a giant sack of low-valued coins, and decreed that no more than C coins of any one denomination may be used in any one purchase. For instance, if C = 2 and the existing denominations are 1 and 5, it is possible to buy something of value 11 by using two 5s and one 1, or something of value 12 by using two 5s and two 1s, but it is impossible to buy something of value 9 or 17.\r\n\r\nYou cannot directly challenge the finance minister's decree, but you happen to be in charge of the mint, and you can issue new denominations of coin. Being a smart cookie, you want to make it possible for any item of positive value at most V to be purchased under the new rules. (Note that this may not necessarily have been possible before the FM's decree). Moreover, you want to introduce as few new denominations as possible, and your final combined set of pre-existing and new denominations should not have any repeats.\r\n\r\nInput\r\nThe first line consists of three space-separated values C, D and V\r\nThe second line consists of D distinct space-separated values representing the preexisting denominations, in ascending order\r\nOutput\r\nA single value representing the minimum number of new denominations required", "likes": 0}}, {"topLevelComment": {"id": "Ugxy8EFOeyo4KrSY3jt4AaABAg", "publishedAt": "2022-04-07T10:00:07Z", "author": "Aggrey Ochieng", "text": "Is it just me or attempting to memoize the all_construct breaks it?", "likes": 0}}, {"topLevelComment": {"id": "UgwfEPxtbhKwkTYQb-54AaABAg", "publishedAt": "2022-04-07T07:55:48Z", "author": "ronen davidi", "text": "it is not the same 2 power n and 2 power n/2 ! you need to fixed it!", "likes": 0}}, {"topLevelComment": {"id": "Ugytf1vC13LzGT0_lLx4AaABAg", "publishedAt": "2022-04-06T21:58:44Z", "author": "Geek3mr", "text": "56:15 my computer fan is actually going crazy now, you killed me laughing.", "likes": 0}}, {"topLevelComment": {"id": "UgwHuVFQlnXOJTFPi_F4AaABAg", "publishedAt": "2022-04-06T21:13:30Z", "author": "Desmond Adenola", "text": "i'm here again. but for tabulation", "likes": 0}}, {"topLevelComment": {"id": "Ugxyfxdok_Izn_ZCXNN4AaABAg", "publishedAt": "2022-04-06T11:37:47Z", "author": "Gaurav LNU1", "text": "amazing", "likes": 0}}, {"topLevelComment": {"id": "Ugzb6mKIDXJ7KAyXSmZ4AaABAg", "publishedAt": "2022-04-06T07:27:34Z", "author": "Minh Nguyen", "text": "About howSum, because we return the first valid result, I think we can use the same returned list, no need to copy the list for each recursive call and therefore, can have a better time complexity.", "likes": 0}}, {"topLevelComment": {"id": "UgwMVvtV0YAKRVcRlth4AaABAg", "publishedAt": "2022-04-05T23:35:44Z", "author": "Garrett Strealy", "text": "Thank you.", "likes": 0}}, {"topLevelComment": {"id": "UgyOdZpK2gZSOBKfoe54AaABAg", "publishedAt": "2022-04-05T10:39:00Z", "author": "Mo Nguyen", "text": "I was thinking that at 1:04:05, after using memo, space complexity would be added m*n, so finally it's O(m*n+m+n) hmmmmmm", "likes": 0}}, {"topLevelComment": {"id": "UgyPrIuuPAgxZodozyd4AaABAg", "publishedAt": "2022-04-05T06:05:59Z", "author": "\u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440 \u041a\u0443\u0437\u043d\u0435\u0446\u043e\u0432", "text": "Hmm, I've just thought about brute-force implementation of howSum (before memoization) and would argue that it is still O(n^m) rather than O(n^m * m).\nThe reasoning is that we traverse \"remainderResult\" array at most m times, since we only touch it when we are \"bubbling\" the solution back to the top of the tree, notice that we do not use that array when we are in branches that do not yield positive result. With that in mind we can estimate that time complexity is O(n^m + m*m) and since m^2 is lower growth factor we can drop it and get the result of O(n^m). \ud83e\udd14", "likes": 0}}, {"topLevelComment": {"id": "UgxTQD2LGofX-p7f7Wt4AaABAg", "publishedAt": "2022-04-04T09:56:28Z", "author": "Code Loners", "text": "at 20:55, you said that o(2^(n/2)) = o(2^n), but 2^(n/2) * 2^(n/2) = 2^n and we can only multiply the complexity function by some constants,  obviously 2^(n/2) is not a constant, is there a mistake?", "likes": 0}}, {"topLevelComment": {"id": "UgwxXkqaplmcSuaycTl4AaABAg", "publishedAt": "2022-04-04T09:00:55Z", "author": "boda taqi", "text": "what is this compiler which you use?", "likes": 0}}, {"topLevelComment": {"id": "Ugz1_Mmlhuu5iDlFgZN4AaABAg", "publishedAt": "2022-04-03T17:37:33Z", "author": "Bahromjon Begmuhammadov", "text": "I like this cource very much!", "likes": 0}}, {"topLevelComment": {"id": "UgzjsEt5cr8PcZFLlSB4AaABAg", "publishedAt": "2022-04-02T11:28:59Z", "author": "snarp king guy", "text": "I love the word \u201cmemoization\u201d because it sounds like a 3 year old trying to say memorization.", "likes": 0}}, {"topLevelComment": {"id": "UgyxTUWUhpJp-qICHxB4AaABAg", "publishedAt": "2022-04-01T23:54:04Z", "author": "Arunkumar Sundaram", "text": "At 1:04:06, won't the space complexity be O(m*n) because of the space required to store lookup hash table?", "likes": 0}}, {"topLevelComment": {"id": "UgysywOQ3kvsgf5lOOB4AaABAg", "publishedAt": "2022-04-01T05:43:30Z", "author": "2k20_SE_161_Vishal Roy", "text": "you really mind blowing , university's teachers should learn from him how to teach , not just to pass the exam", "likes": 0}}, {"topLevelComment": {"id": "Ugw9_4umBcMes_Z4q0h4AaABAg", "publishedAt": "2022-04-01T04:09:21Z", "author": "Rainfallen", "text": "Very intuitive.", "likes": 0}}, {"topLevelComment": {"id": "UgyL98CPmoRjncC4-dJ4AaABAg", "publishedAt": "2022-03-31T04:37:53Z", "author": "Mo Nguyen", "text": "I find it really easy to understand, it's clear as daylight :D", "likes": 0}}, {"topLevelComment": {"id": "UgzbUyBy5Txp9JBWJ5d4AaABAg", "publishedAt": "2022-03-31T01:57:40Z", "author": "HerveWeb", "text": "I can honestly say that this was the best course/teacher I've EVER watched. Unbelievable! Thanks alot!", "likes": 2}}, {"topLevelComment": {"id": "Ugxn4foEn3X4aRCoVJl4AaABAg", "publishedAt": "2022-03-31T01:54:17Z", "author": "Dinesh Solanki", "text": "I would've liked this in article format as well just to have a quick read in case I forget something in future which is the current instance. :P", "likes": 0}}, {"topLevelComment": {"id": "UgwEh16MUQrPD62ja2R4AaABAg", "publishedAt": "2022-03-30T11:24:07Z", "author": "Abdullah Al Noman", "text": "This guy just hit the gold standard of teaching. !!", "likes": 0}}, {"topLevelComment": {"id": "UgyT6YqZYJxBDsD4iMp4AaABAg", "publishedAt": "2022-03-29T07:18:18Z", "author": "kyzmitch2", "text": "for the howSum tabulation solution how it is possible to access table[i + num] where I could be 300 and num could be 14? Isn't it out of bounds for the table hash map?", "likes": 0}}, {"topLevelComment": {"id": "UgxbDnjKK70tG6HHs2R4AaABAg", "publishedAt": "2022-03-28T04:47:08Z", "author": "jeff lebowski", "text": "you should say its going up and left from the node where it started. it confused me for a second but i understood it", "likes": 0}}, {"topLevelComment": {"id": "UgzegQeLgbg37d6pPrh4AaABAg", "publishedAt": "2022-03-28T04:40:33Z", "author": "LifeExplorer", "text": "\ud83d\udcaf\ud83d\udcbb\u2728", "likes": 0}}, {"topLevelComment": {"id": "Ugzo1H7AgKFxz32SIn14AaABAg", "publishedAt": "2022-03-28T04:33:25Z", "author": "Ihsan Mujdeci", "text": "The cansum tabulation needed bound checks as well right?", "likes": 0}}, {"topLevelComment": {"id": "Ugz8kKHuy2bRoC0VsRB4AaABAg", "publishedAt": "2022-03-27T16:55:12Z", "author": "Martynas Venckus", "text": "At 56:00 in the gridTraveler problem, Alvin says that the order of arguments doesn't matter and we can encode that into our memo object. However, I think this was not done in the video, was it?", "likes": 0}}, {"topLevelComment": {"id": "UgyMCU0tdiIGZOb7cd94AaABAg", "publishedAt": "2022-03-27T07:51:22Z", "author": "Ben L", "text": "alvin is my favorite instructor on this channel... his animations and drawings and the clear  delivery of material is amazing. tysm", "likes": 0}}, {"topLevelComment": {"id": "Ugx5uhHhEttAYLkvZs54AaABAg", "publishedAt": "2022-03-27T04:11:16Z", "author": "nancy ma", "text": "for canSum, can you init memo with (1, True), since it's kinda a basecase?", "likes": 0}}, {"topLevelComment": {"id": "Ugy9DcPlLj0WvrJzBZZ4AaABAg", "publishedAt": "2022-03-26T21:53:53Z", "author": "Albino Cordeiro", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwEyeN-W37m74LZMnl4AaABAg", "publishedAt": "2022-03-26T18:23:39Z", "author": "Maria Clara Dantas", "text": "Valeu!", "likes": 0}}, {"topLevelComment": {"id": "UgwzbDSB1YxUg_hnk3Z4AaABAg", "publishedAt": "2022-03-26T17:57:11Z", "author": "c_b_a", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxSeLeqCFV1jVUBXz94AaABAg", "publishedAt": "2022-03-26T15:43:42Z", "author": "Josh Merrell", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugwwrjm4c0NhzidX-nB4AaABAg", "publishedAt": "2022-03-26T15:29:10Z", "author": "Abshir Ahmed", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgxVfvacd4ybBtS7_-F4AaABAg", "publishedAt": "2022-03-25T20:23:43Z", "author": "YB C", "text": "we need more complicated samples", "likes": 0}}, {"topLevelComment": {"id": "Ugx6eIOC__gcdJ6myFV4AaABAg", "publishedAt": "2022-03-25T00:40:20Z", "author": "Rajmanov", "text": "destroying memoization Fibonacci, is:  iterative fibonacci:\n\n//time complexity O(n) space complexity O(1)\nfun iterativeFib(number: Long): Long {\n    if (number <= 2) { return 1 }\n    var pre_1 = 1L\n    var pre_2 = 1L\n    var n = 2L\n    var result = 0L\n    while (n < number) {\n        result = pre_1 + pre_2\n        pre_2 = pre_1\n        pre_1 = result\n        n++\n    }\n    return result\n}", "likes": 2}}, {"topLevelComment": {"id": "UgzPnUJCpkRxAeEIQK94AaABAg", "publishedAt": "2022-03-24T20:25:29Z", "author": "Karan Panwar", "text": "22:15 I think <= should be replaced with >= as dib is having recursive tree with more depth than lib", "likes": 1}}, {"topLevelComment": {"id": "UgyBWAaBBftQVELXNlh4AaABAg", "publishedAt": "2022-03-24T11:45:20Z", "author": "alireza soheilmahmoudi", "text": "awesome thanks", "likes": 0}}, {"topLevelComment": {"id": "UgzXqAtpmZHOYwLS9Fh4AaABAg", "publishedAt": "2022-03-21T17:28:43Z", "author": "Kamlesh Gujariya", "text": "I love it...\nContent and explanation are really amazing and helping.. ..\nBest dynamic programming course", "likes": 0}}, {"topLevelComment": {"id": "UgwN6QaTppNXeg58p_N4AaABAg", "publishedAt": "2022-03-20T17:43:18Z", "author": "layssi", "text": "Thanks! WoW", "likes": 0}}, {"topLevelComment": {"id": "Ugw0kzl2kywELVVmN5V4AaABAg", "publishedAt": "2022-03-20T06:36:10Z", "author": "Hero who code", "text": "This blows my mind. Thank you for sharing this.", "likes": 0}}, {"topLevelComment": {"id": "UgzvTEzWmNPZqh6ERu94AaABAg", "publishedAt": "2022-03-19T21:11:21Z", "author": "aYt", "text": "Simply THE best dynamic programming course on youtube, wonderfully explained. \nThe course made understanding the difficult concepts a breeze.\nLoved the progression of problems, even the harder ones felt easy after understanding the basic strategy and the recipe. \nThank you freeCodeCamp and Alvin.", "likes": 576}, "replies": [{"id": "UgzvTEzWmNPZqh6ERu94AaABAg.9Zlhl8QqIBl9kBWBAFLVB2", "publishedAt": "2022-12-28T16:46:16Z", "author": "Dragon", "text": "@Logan Darling i googled 200 rupees is 2$. Im not saying if its low or high. Just saying.", "likes": 0}, {"id": "UgzvTEzWmNPZqh6ERu94AaABAg.9Zlhl8QqIBl9jewxHFeMqr", "publishedAt": "2022-12-15T15:54:43Z", "author": "Mmq", "text": "@Tom\u00e1\u0161 Karl\u00edk Lol why are you just assuming that he thinks it is weird?", "likes": 0}, {"id": "UgzvTEzWmNPZqh6ERu94AaABAg.9Zlhl8QqIBl9efOzVSn7jX", "publishedAt": "2022-08-13T13:31:27Z", "author": "AlkhilJohn", "text": "200 rupees in itself is incredibly underrated. These guys deserve big sponsors.", "likes": 0}, {"id": "UgzvTEzWmNPZqh6ERu94AaABAg.9Zlhl8QqIBl9eRK9Y9RE5F", "publishedAt": "2022-08-07T17:00:40Z", "author": "Account User", "text": "@Repent and believe in Jesus Christ h", "likes": 0}, {"id": "UgzvTEzWmNPZqh6ERu94AaABAg.9Zlhl8QqIBl9eONpjbv4-a", "publishedAt": "2022-08-06T13:35:04Z", "author": "Repent and believe in Jesus Christ", "text": "Repent to Jesus Christ \u201cWe demolish arguments and every pretension that sets itself up against the knowledge of God, and we take captive every thought to make it obedient to Christ.\u201d\n\u202d\u202d2 Corinthians\u202c \u202d10:5\u202c \u202dNIV\u202c\u202c\nh", "likes": 0}]}, {"topLevelComment": {"id": "UgxWIAnnf6yvSp_lldJ4AaABAg", "publishedAt": "2022-03-19T05:58:44Z", "author": "Luriskan", "text": "For anyone trying to write memorization with python, Make Sure you pass the memo object as a new empty dictionary when calling the functions on top level. You have to do this because for python, the default argument memo={} is initialized during function definition, successive calls of the function without pass in the memo object, will keep mutating that default parameter.", "likes": 1}}, {"topLevelComment": {"id": "Ugwfpe5RSxmb5PzYiT54AaABAg", "publishedAt": "2022-03-18T21:48:13Z", "author": "L Kd", "text": "Sounds a little smug though \u2026", "likes": 0}}, {"topLevelComment": {"id": "Ugy7g9U6u524xUmNlgZ4AaABAg", "publishedAt": "2022-03-18T16:36:28Z", "author": "Ben Hall", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxbfGINRpiAoOTKXYx4AaABAg", "publishedAt": "2022-03-18T14:31:54Z", "author": "Karthick S", "text": "isn't howSum() space complexity 'm' and not m^2?", "likes": 0}}, {"topLevelComment": {"id": "Ugy1ytoyHIPMINMDtwx4AaABAg", "publishedAt": "2022-03-18T06:41:33Z", "author": "king kai xyz", "text": "The visualization and break down of these concepts are so well done. Kudos!", "likes": 138}}, {"topLevelComment": {"id": "UgwgscG_vd_vUxOJ-Sh4AaABAg", "publishedAt": "2022-03-18T00:34:14Z", "author": "Edahi Guajardo", "text": "Absolute gold", "likes": 0}}, {"topLevelComment": {"id": "UgyFT-NqjGwcU2XZmyp4AaABAg", "publishedAt": "2022-03-17T17:53:12Z", "author": "simiyub", "text": "Amazing!! Thanks @ Alvin. Took me a while to code along but certainly made more sense than all other tutorials I've used on dynamic programming.", "likes": 0}}, {"topLevelComment": {"id": "UgzzSe4Kp3ekiwbGXPJ4AaABAg", "publishedAt": "2022-03-17T11:19:40Z", "author": "Susmit Vengurlekar", "text": ".                 T\n              H     H\n           A            A\n       N                   N\n    K                          K\n S                                 S", "likes": 0}}, {"topLevelComment": {"id": "UgynkbwkCnWmYf39Tf14AaABAg", "publishedAt": "2022-03-15T16:35:54Z", "author": "Rohit Shrimal", "text": "The answer for gridTraveler(18, 18) is 1961361076 and not what you have shown.", "likes": 0}}, {"topLevelComment": {"id": "UgwUlVudSlxs7HhNcAF4AaABAg", "publishedAt": "2022-03-15T03:25:29Z", "author": "Brian Humphreys", "text": "Hey Alvin!  One of the best algorithm videos I've seen.  Very clear and concise.  Just would like to note something interesting Iv'e figured out while playing around with variations of the sum memoizations.  Whenever you are implementing brute force for say... bestSum(), you do not need to iterate over the remainderCombination array with the spread operator which is an O(m) operation.  Since this array is calculated at each branch, you can actually use remainderCombination.push(num) which is O(1)!!  This means that instead of O(n^m * m), the brute force time complexity can actually be O(n^m)!  Interestingly enough, you cannot use the O(1) .push() method when memorizing because it will manipulate and append to the best arrays of all of it's children targets since they are all the same array in memory.  I understand you probably did not perform the brute force algorithm the O(n^m) way for simplicity and readability but just dropping this here for anyone who might find it interesting :) thanks for your work man!", "likes": 2}}, {"topLevelComment": {"id": "Ugy_VN_1IApn_pn1kC54AaABAg", "publishedAt": "2022-03-15T02:12:21Z", "author": "CHE6yp", "text": "54:00 won't the space complexity actually be O(max(n, m)+1) instead of O(m+n)? Since you only stack up one of the directions at a time?", "likes": 0}}, {"topLevelComment": {"id": "UgxgGw1n-VGTAf56Lzp4AaABAg", "publishedAt": "2022-03-14T21:37:47Z", "author": "Mahesh Karoshi", "text": "You are the man. I explained it very nicely.", "likes": 0}}, {"topLevelComment": {"id": "UgzMDAzCYvWxskXNlAZ4AaABAg", "publishedAt": "2022-03-14T17:27:40Z", "author": "Krutika Wankhede", "text": "i am not getting how to use this bestsum code in java as i am getting wrong output.\nCan you please help to find the mistake\n public static ArrayList<Integer> bestwayToFind(int target, int arr[], HashMap<Integer, ArrayList<Integer>> memo) {\r\n        if(memo.containsKey(target)){\r\n            return memo.get(target);\r\n        }\r\n        if (target == 0) {\r\n            return new ArrayList<>();\r\n        }\r\n        if (target <= 0) {\r\n            return null;\r\n        }\r\n\r\n        ArrayList shortestCombination = new ArrayList();\r\n\r\n        for (int num : arr) {\r\n            int remainder = target - num;\r\n            ArrayList remainderResult = bestwayToFind(remainder, arr, memo);\r\n            if (remainderResult != null) {\r\n                remainderResult.add(num);\r\n                if(shortestCombination.size() == 0 || remainderResult.size()< shortestCombination.size()) {\r\n                    shortestCombination = remainderResult;\r\n                }\r\n            }\r\n        }\r\n        memo.put(target,shortestCombination);\r\n        return shortestCombination;\r\n    }\r\n}", "likes": 0}}, {"topLevelComment": {"id": "UgwyDaS36q0uZSY6EY94AaABAg", "publishedAt": "2022-03-14T03:58:43Z", "author": "Bibek Magar", "text": "How about putting gridTraveler memoization key as\n-----------------------------------------------------------\nvar key = [m, n].sort().toString();\n-----------------------------------------------------\nNo duplication of storage.", "likes": 0}}, {"topLevelComment": {"id": "UgzLBZDCdOcehXyUcGB4AaABAg", "publishedAt": "2022-03-14T03:48:40Z", "author": "Bibek Magar", "text": "I am loving this video.. thank you for the awesome explanations......", "likes": 0}}, {"topLevelComment": {"id": "UgzeW2NAWhSy33StFKh4AaABAg", "publishedAt": "2022-03-14T02:52:28Z", "author": "Mr. Cool", "text": "I am not getting False for the third and fifth cases on the canSum() (Problem 3 at the tutorial starting at 01:09:56. **Why is that?**\n\n My Python3 code is below. This is after the memoization is performed:\n\n\n # Brute force:\r\ndef canSum(targetSum, numbers, memo={}):\r\n    if targetSum in memo:\r\n        return memo[targetSum]\r\n    # base case:\r\n    if targetSum == 0:\r\n        return True\r\n    if targetSum < 0:\r\n        return False\r\n\r\n    for num in numbers:\r\n        remainder = targetSum - num\r\n        if canSum(remainder, numbers, memo) == True:\r\n            memo[targetSum] = True\r\n            return True\r\n\r\n    memo[targetSum] = False\r\n    return False\r\n\r\n\r\nprint(canSum(7, [2, 3]))\r\nprint(canSum(7, [5, 3, 4, 7]))\r\nprint(canSum(3, [2, 4]))\r\nprint(canSum(8, [2, 3, 5]))\r\nprint(canSum(300, [7, 14]))", "likes": 0}}, {"topLevelComment": {"id": "UgxM5M92KSm7bAm8Lkp4AaABAg", "publishedAt": "2022-03-13T09:57:14Z", "author": "CalmYourMind", "text": "You may reuse elements as many times as you wish. \ud83d\ude02\ud83d\ude02... This statement makes every problem a basic or school level problem.. You don't know how to deal when you cannot reuse element.. What a bulshit tutorial ... Its like First make the problem  easier and then solve it and upload the video.\ud83e\udd23\ud83e\udd23\ud83e\udd23\ud83e\udd23\ud83e\udd23", "likes": 0}}, {"topLevelComment": {"id": "Ugx5ieVd1-_G7MiwpVp4AaABAg", "publishedAt": "2022-03-13T09:50:37Z", "author": "CalmYourMind", "text": "In this tutorial every problems has the condition of considering one element any number of time. Like to get 8 we can take 2 for 4 times .. But in interviews in most of the cases we have to consider one element only once. This can be difficult which made this tutorial not a complete one for any interview. Only selected questions can be solved with these concepts.", "likes": 1}, "replies": [{"id": "Ugx5ieVd1-_G7MiwpVp4AaABAg.9ZW2573CTwW9cGDX4_zrQS", "publishedAt": "2022-06-14T16:28:17Z", "author": "Raphael Mapp", "text": "Good thing it's not a course to pass interviews no r did Alvin day it was. It is a course to help understand the concepts of DP. If you do then you can easily adapt to solve interview problems", "likes": 0}]}, {"topLevelComment": {"id": "UgwLFvE2eh3wlDQJE8F4AaABAg", "publishedAt": "2022-03-13T09:36:12Z", "author": "Rasoul Abdulzahra", "text": "thank you so much this is the best", "likes": 0}}, {"topLevelComment": {"id": "Ugwk_pn3_Rb-_apkvYR4AaABAg", "publishedAt": "2022-03-13T04:08:20Z", "author": "wuhao zhang", "text": "i think the time complexity of ex 2, gridTraveler is 2 to min(n,m) rather than 2 to (m+n). is this right?", "likes": 0}}, {"topLevelComment": {"id": "Ugwgn6NG-B9qLN7OqMJ4AaABAg", "publishedAt": "2022-03-13T00:28:07Z", "author": "Eslam Genedy", "text": "could any one provide the link of these problems if they are available for any websites like(coder bytes , leetcode , codeforces , etc) ?", "likes": 0}}, {"topLevelComment": {"id": "UgyGgi3vszT79ySTIHZ4AaABAg", "publishedAt": "2022-03-12T17:41:56Z", "author": "Aditya Medhe", "text": "Take a bow, sir.", "likes": 0}}, {"topLevelComment": {"id": "UgxVDJyOfm5sg_oDkhl4AaABAg", "publishedAt": "2022-03-11T21:57:29Z", "author": "ABDULAZIZ MOHAMMED", "text": "at 20:50, can't we say that O( 2^(n/2) ) is O( sqrt(2^n) ), which is significantly faster than O(2^n)? Hope to hear from you.", "likes": 0}}, {"topLevelComment": {"id": "UgxEGHVognzrp-vFts14AaABAg", "publishedAt": "2022-03-11T18:09:49Z", "author": "Aizen S\u014dsuke", "text": "Hey Alvin, this 5 hour course was pretty amazing!\r\nIt explained every problem in great detail, and the solutions (from brute force to optimized) are very easy to understand, the way you laid them out.\r\n\r\nHowever, I have one more optimization you might have missed in the howSum problem.\r\nThe problem was using the spread operator (...) to copy the contents of the 1 level deeper recursive function return value (an array), only to append the current num to its end and return that array in the recursive stack below (one level above).\r\n\r\nAs you've explained the problem, using the spread operator (...) isn't magic.\r\nBehind the scenes, it uses iteration to copy the elements from one array to another. Meaning that if the length of the array to copy is n, it's going to take n amount of operations to copy it to another array.\r\n\r\nSince you're already saving the result from the previous 1 level deeper recursion in the remainderResult constant (null or an array), that array itself isn't being used for anything in the algorithm and therefore, it doesn't need to be kept in its original state for any purpose whatsoever. The very act of copying that array only to append just one number to the new array's end, is an unnecessary operation that adds more time to time complexity of the algorithm - which can be avoided.\r\n \r\nSo instead of copying the array, you can use the original array in the remainderResult constant and simply append the num to its end. array.push(num) is a method of O(1) time if you're appending just one value (which you are) and therefore avoiding the whole (* m) added time, coming from first copying the previous array into a new one.\r\n\r\n-------------------------------------------------------------------------------------------------------\r\n*Instead of this:*\r\n\r\nconst remainderResult = howSum(remainder, numbers, memo);\r\n\r\n// copy array first then append num to the end, then return the array to the calling code\r\nif (remainderResult !== null) return [ ...remainderResult, num ];\r\n\r\n-------------------------------------------------------------------------------------------------------\r\n*Do this:*\r\n\r\nconst remainderResult = howSum(remainder, numbers, memo);\r\n\r\nif (remainderResult !== null) {\r\n    // just append num to the end, return the array to the calling code\r\n    remainderResult.push(num);\r\n    return remainderResult;\r\n}\r\n\r\n-------------------------------------------------------------------------------------------------------\r\n\r\nTime complexities of both solutions (brute force and optimized) are going down because you're no longer copying the array anymore:\r\n\r\n// Brute force\r\n//time: O(n^m * m) --------> O(n^m)\r\n\r\n-------------------------------------------------------\r\n\r\n// Optimized\r\n//time: O(n * m * m) --------> O(n * m)", "likes": 0}}, {"topLevelComment": {"id": "Ugwie-TDsLfhxGCiCmd4AaABAg", "publishedAt": "2022-03-10T23:26:57Z", "author": "llekann", "text": "This was very helpful. Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwIShOrVbCbP19UIFd4AaABAg", "publishedAt": "2022-03-10T21:21:08Z", "author": "beepboopbot", "text": "1:40:35", "likes": 0}}, {"topLevelComment": {"id": "Ugz6O_qC8fMlpviabS54AaABAg", "publishedAt": "2022-03-10T07:57:03Z", "author": "Markus Beyer", "text": "Thank you, a really great video. Perfect structure, good pace to follow along and good audio quality (for me as a non-native speaker this is a very important point, there are so many videos out there with poor audio quality or people talking at top speeds)", "likes": 0}}, {"topLevelComment": {"id": "UgwRbnzgzfWrnrHhjoN4AaABAg", "publishedAt": "2022-03-09T18:56:05Z", "author": "Hruthik Ketepalli", "text": "The tutorial is very long but every minute is worth it. It really explains the concept. \n\nThank you for the video :)", "likes": 0}}, {"topLevelComment": {"id": "Ugw4p9j9PBzjXxyVM-h4AaABAg", "publishedAt": "2022-03-09T07:53:10Z", "author": "TempHemp", "text": "54:00 if the height of the tree is n+m why does the diagram show a depth of 4?", "likes": 0}}, {"topLevelComment": {"id": "UgzfALkUco09iSOyvoF4AaABAg", "publishedAt": "2022-03-08T15:25:07Z", "author": "tagakosmos", "text": "alvin create in c++ dsas and cover other dsa topics as well", "likes": 0}}, {"topLevelComment": {"id": "Ugysoo6HuEOt17Y8rvt4AaABAg", "publishedAt": "2022-03-08T15:18:55Z", "author": "Aleksei Litvinau", "text": "Memoised Python allConstruct valid solution would look like this\n\n    def all_construct(self, target: str, word_bank: List[str], ways_cube: Dict[str, List[List[str]]] = {}) -> List[List[str]]:\n\n        if target in ways_cube: return ways_cube[target]\n        if target == '': return [[]]\n\n        all_target_ways: List[List[str]] = []\n\n        for word in word_bank:\n            if word in target and target.index(word) == 0:\n                reminder = target[len(word):]\n                reminder_ways = self.all_construct(reminder, word_bank, ways_cube)\n                if reminder_ways:\n                    target_ways = map(lambda reminder_way: [word, *reminder_way], reminder_ways)\n                    all_target_ways.extend(target_ways)\n\n        ways_cube[target] = all_target_ways\n        return all_target_ways", "likes": 1}, "replies": [{"id": "Ugysoo6HuEOt17Y8rvt4AaABAg.9ZJkgJzBiVh9cVkNEsJ0vt", "publishedAt": "2022-06-20T17:12:39Z", "author": "LrdKGB", "text": "Awesome code. I was trying to bypass the ValueError: substring not found for Can_construct. I have a code but it doesn't work for count construct, how did you write yours", "likes": 0}]}, {"topLevelComment": {"id": "Ugyh8L7ZLu1n9rZ000d4AaABAg", "publishedAt": "2022-03-08T15:11:43Z", "author": "Leonardo Leal Oliveira", "text": "I got some time after the middle of the video (3:00:10h ) and I'm reaaaaally impressed with the quality of this content!\nVery clear, very good examples, goes with a very good velocity, like a live bacharel in computer science program with doctor teacher.\n\nEven having a CS degree, I've not learned DP in the program, not even in my 10y dev career.\nAnd this is for free on YT!\n\nPlus: I'm a C/C++ developer, and I've loved the JS applied to this questions, I've decided to practice and learnd this language :D\n\nVery much thank you! (and yes, I'll continue to watch the video to the end, but even if the rest is bad - which I don't believe it's possible - until the middle it's already deserved a comment)", "likes": 0}, "replies": [{"id": "Ugyh8L7ZLu1n9rZ000d4AaABAg.9ZJjrUtbcfG9lH3HVQyLyT", "publishedAt": "2023-01-24T17:00:33Z", "author": "Leonardo Leal Oliveira", "text": "@Segnite Hi! I've done the examples in JS, found that it is much easier than C++", "likes": 0}, {"id": "Ugyh8L7ZLu1n9rZ000d4AaABAg.9ZJjrUtbcfG9lGDzPyk0X5", "publishedAt": "2023-01-24T09:14:50Z", "author": "Segnite", "text": "Hi, How have you done [...remainderCombination,num] in c++? Have you used the optional library?", "likes": 0}]}, {"topLevelComment": {"id": "UgxLFKOAhKV7fRIJOCt4AaABAg", "publishedAt": "2022-03-08T06:08:11Z", "author": "Prasad Katti", "text": "Great piece of work Alvin. I have a quick clarification on \"bestSum\" space complexity. given the memo values are arrays, should not the space complexity be o(m^3). Because in my understanding, we also need to take into consideration the stack size of recursion calls.", "likes": 0}}, {"topLevelComment": {"id": "UgzKsYX-RoCAH_T3tj54AaABAg", "publishedAt": "2022-03-07T22:00:37Z", "author": "DiGiaCom Tech", "text": "Hmmm, in the second example given grids of [0,0], [1,0], & [0,1] ... or any combination of values where 0 is one the the values ... the answers would be none (NULL) as there is no grid to be on let alone adjacent square to travel to.  However, given a grid of [1,1] there are no adjacent squares to travel to so the answer is zero (0) vs. one (1) as you cannot travel anywhere.", "likes": 0}}, {"topLevelComment": {"id": "Ugw7WMwmwWs7kjLTZal4AaABAg", "publishedAt": "2022-03-07T19:20:19Z", "author": "ashmika ballamudi", "text": "Can someone please help do the allConstruct question in Python? Im getting confused how to implement the javascript map function like he did in Python..", "likes": 0}, "replies": [{"id": "Ugw7WMwmwWs7kjLTZal4AaABAg.9ZHbWWfRiZk9iUiR-Nn-78", "publishedAt": "2022-11-16T10:44:48Z", "author": "SparrowC1", "text": "def allConstruct(target, wordBank, memo = None):\n    if memo is None:\n        memo = {}\n    if target=='':\n        return [[]]\n    if target in memo:\n        return memo[target]\n    result =[]\n\n    for i in wordBank:\n        position = target.find(i)\n        if position == 0:\n            # we've got a match at start of target\n            suffix = target[len(i):]\n            suffixWays = allConstruct(suffix, wordBank, memo)\n            for way in suffixWays:\n                result.append([*way, i])\n    memo[target] = result\n    return result", "likes": 0}]}, {"topLevelComment": {"id": "Ugy7EWO0nBGfxx7XEOx4AaABAg", "publishedAt": "2022-03-06T20:01:09Z", "author": "Pikachu", "text": "30:56\nThis tutorial rocks. In python you can either use nested functions or use decorators to access whatever global dictionary you have. Depending on how is implemented, that dictionary can be within the scope of an outer function that just triggers everything. Cool stuff, not gonna lie. Here's the python implementation I meant:\n\n__MEMCACHE__: dict = {}\n\n\ndef mem_access(**kwargs):\n    m = kwargs['mem']\n    __MEMCACHE__[m] = {}\n\n    def memo(f):\n        def inner(n):\n            if n not in __MEMCACHE__[m]:\n                __MEMCACHE__[m][n] = f(n)\n            return __MEMCACHE__[m][n]\n        return inner\n    return memo\n\n\n@mem_access(mem='fib')\ndef fibbonaci(n: int) -> int:\n    if n <= 2:\n        return 1\n    else:\n        return fibbonaci(n - 1) + fibbonaci(n - 2)\n\n\n@mem_access(mem='facto')\ndef factorial(n: int) -> int:\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nThis allows me to use the standard recursive function, and just add a decorator that does the dynamic part.", "likes": 0}}, {"topLevelComment": {"id": "Ugz0MRuRDLtUbX7AgQx4AaABAg", "publishedAt": "2022-03-06T18:43:34Z", "author": "Concha DeCaracas", "text": "now i know why Asians Americans are mostly home owners and educated.", "likes": 0}}, {"topLevelComment": {"id": "UgylvJrp9Z9cuxpXpeh4AaABAg", "publishedAt": "2022-03-06T07:17:00Z", "author": "jeevan44", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwtDmSDPw6WsqAV37d4AaABAg", "publishedAt": "2022-03-05T15:55:04Z", "author": "Singapur'da Bir T\u00fcrk", "text": "1:01:00 if you write that if case like this; if (m == 1 || n == 1)\nthen you don't have to calculate the rest of it, this case would be faster", "likes": 0}}, {"topLevelComment": {"id": "UgwsiW-bQeg4eYJ8KOF4AaABAg", "publishedAt": "2022-03-05T11:39:29Z", "author": "Daniel Ifechukwu", "text": "Pure Gold", "likes": 0}}, {"topLevelComment": {"id": "UgxvwSIZL_SsoMalNpZ4AaABAg", "publishedAt": "2022-03-04T12:46:13Z", "author": "kishor Ranga", "text": "Amazing \ud83d\udc4fgreatly explained ..super useful\n\nI recommend to all level of programmers", "likes": 0}}, {"topLevelComment": {"id": "Ugw57XXSNA8QfDW-k8x4AaABAg", "publishedAt": "2022-03-04T12:36:27Z", "author": "Christoph B\u00fchler", "text": "Why don't you write the Fib function like this? Should be O(n) without memoization, right?\n\nfunction fib(a, b, n) {\r\n\tif (n === 0) return b;\r\n\treturn fib(b, a + b, --n)\r\n}\r\n\r\nconst nthFib = (n) => fib(1, 1, n - 2);", "likes": 0}}, {"topLevelComment": {"id": "UgwVsMptFkuQ0odfNrN4AaABAg", "publishedAt": "2022-03-04T11:07:27Z", "author": "majdoulina makbal", "text": "For the grid Traveler problem, is space complexity m*n or m+n ? Thank you for amazing content !", "likes": 0}}, {"topLevelComment": {"id": "UgxVZtmeC29LWDsu42V4AaABAg", "publishedAt": "2022-03-04T03:52:26Z", "author": "jbc", "text": "i don't like creating a table that does not have symmetry with the question or even creating an array if one side is zero so i refactored gridTravelerTabular\n gridTravelerTabular = (m, n) => {\n    if(n === 0 || m === 0) return 0\n    const table = Array(m)\n        .fill()\n        .map(() => Array(n).fill(0))\n\n    table[0][0] = 1\n      for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n        const current = table[i][j]\n        if(i+1 <m) table[i+1][j] += current\n        if(j+1 <n) table[i][j+1] += current\n        }\n    }\n    return table[m-1][n-1]\n}\n\nconsole.log(gridTravelerTabular(3, 2)) // 3\nconsole.log(gridTravelerTabular(3, 3)) // 6\nconsole.log(gridTravelerTabular(0, 3)) // 0\nconsole.log(gridTravelerTabular(18, 18)) // 2333606220\nconsole.log(gridTravelerTabular(1, 1)) // 1", "likes": 0}}, {"topLevelComment": {"id": "UgzRos_4jiazQVRFEtR4AaABAg", "publishedAt": "2022-03-03T11:03:28Z", "author": "RAHUL SINGH", "text": "This guy going to be invited to my grand Party when i'll crack Google interview.", "likes": 0}}, {"topLevelComment": {"id": "Ugw2Voq6H0BH6H0I_sh4AaABAg", "publishedAt": "2022-03-03T10:12:43Z", "author": "Jose Miguel Aguilera", "text": "2:10:30 wouldn\u00b4t the space complexity be m^3??\none m from navegating the tree, another for the maximum array.lenght and the other for the memo.lenght", "likes": 0}}, {"topLevelComment": {"id": "UgwOR2IcJNE4wki96BZ4AaABAg", "publishedAt": "2022-03-02T05:31:47Z", "author": "AHMED ADEL", "text": "After graduating with a CS degree and working for 2 years, I can finally explain to someone what DP is! \nPhenomenal and unbelievable course. Can't thank you enough for this high-quality content.", "likes": 12}, "replies": [{"id": "UgwOR2IcJNE4wki96BZ4AaABAg.9Z3FigmN3cr9_qWg-b-4kE", "publishedAt": "2022-04-15T14:33:23Z", "author": "YTG", "text": "R u doing job ?", "likes": 0}]}, {"topLevelComment": {"id": "UgzLGY6_uJwZcCLoiqV4AaABAg", "publishedAt": "2022-03-01T05:48:00Z", "author": "Komiljon Aliev", "text": "59:01 Can be optimized\nSince key = 3,4 and key = 4,3 gives the same result\nSo, on the line 7 you are checking for key = m+','+n\nbut what about key = n+','+m ?", "likes": 0}}, {"topLevelComment": {"id": "UgyvEKpODeP2CYqsuqx4AaABAg", "publishedAt": "2022-03-01T01:27:42Z", "author": "edward mac nab", "text": "In your fibonnacci example , wouldn't it be more straightforward to just calculate and store each successive fibonnacci number starting at one ,by addition and no recursion to produce the desired Nth number and would that not be O(n) time ? Better still have somebody create an immutable table that anyone can reference , that way the calculation uses O(1) time .", "likes": 0}}, {"topLevelComment": {"id": "Ugzux0CfmAom4W8xtMJ4AaABAg", "publishedAt": "2022-02-28T23:58:16Z", "author": "Helen", "text": "Amazing.", "likes": 0}}, {"topLevelComment": {"id": "Ugx3pYMTLgybww_4cLF4AaABAg", "publishedAt": "2022-02-28T18:01:24Z", "author": "Pranjal Srivastava", "text": "18:19", "likes": 0}}, {"topLevelComment": {"id": "Ugy7jBfJMLj6OYAlCDl4AaABAg", "publishedAt": "2022-02-28T16:59:33Z", "author": "TheProgrammerGuy", "text": "When you say \"laneer\", are you actually saying \"linear\"??", "likes": 0}}, {"topLevelComment": {"id": "UgxQG71CIF9RNq0ic6N4AaABAg", "publishedAt": "2022-02-28T14:24:20Z", "author": "Avishek Bose", "text": "Amazingly explained , even some complicated things got just calk walk for me now .", "likes": 0}}, {"topLevelComment": {"id": "Ugzhrr7bbBZ3Re2zzJd4AaABAg", "publishedAt": "2022-02-28T00:11:25Z", "author": "harry wang", "text": "For bestsum, surely a BFS would be better right? You could \"memoize\" any duplicate numbers", "likes": 0}}, {"topLevelComment": {"id": "Ugzp_MvN3fSkl5TLQuR4AaABAg", "publishedAt": "2022-02-27T14:44:09Z", "author": "Hu\u1ef3nh \u0110\u1ea1t", "text": "Legend :)", "likes": 0}}, {"topLevelComment": {"id": "UgwUUeYapDs-2NoOUq14AaABAg", "publishedAt": "2022-02-27T14:23:37Z", "author": "Aditya Kumar", "text": "Can someone explain why the \"allConstruct\" version has the complexity of O(n^m) even after memoization?", "likes": 0}}, {"topLevelComment": {"id": "Ugx4mhlLrBNdnclX7jF4AaABAg", "publishedAt": "2022-02-27T14:21:08Z", "author": "RelakksMakks", "text": "Awesome tutorial. I never studied that at school with that angle and such quality content.", "likes": 0}}, {"topLevelComment": {"id": "UgwJmACBODR6m7RCXcB4AaABAg", "publishedAt": "2022-02-27T10:51:39Z", "author": "Olivier Smith", "text": "i'm saving this master piece", "likes": 0}}, {"topLevelComment": {"id": "UgwBODuzo_goKsfoZjB4AaABAg", "publishedAt": "2022-02-26T23:49:12Z", "author": "Imran Khan", "text": "53:15 - How is the level n+m ..? Visually it looks 4(n+m-1) levels and not 5(n+m)..?", "likes": 0}}, {"topLevelComment": {"id": "Ugyi93_RD8yXkjOBJqJ4AaABAg", "publishedAt": "2022-02-26T22:59:06Z", "author": "Mircea Feder", "text": "This is the best tutorial I have ever taken. The best part is that it is slow-paced so you can actually have time to think what he says, also repetitive, so if you missed something the first time, you will get it the next time. Thanks & congrats for this masterpiece", "likes": 0}}, {"topLevelComment": {"id": "UgyumoGNIXyZblx-SOB4AaABAg", "publishedAt": "2022-02-26T13:50:49Z", "author": "Axel Shark Space Scientist", "text": "I solved the biggest problem, why there's something rather than nothing. I was more a universal problem solver. I had many different fields. I always wanted to invent something big. And I did it. But I think I'm the first one who did it because I was solving many different fields at once. Hardcore, I doubt anyone will ever top me.", "likes": 0}}, {"topLevelComment": {"id": "Ugy60fjqmW2QmRp1Glp4AaABAg", "publishedAt": "2022-02-26T03:24:06Z", "author": "Nasheer Mohammed", "text": "bestSum memorization approach i didnt understand the last memo[targetSum]=shortestComination return shortestComination ;  Here code will just get last targetSum becoz it isnt in the for loop to populate all the values can any anyexplain my perceptive is wrong or it it make sense?", "likes": 0}}, {"topLevelComment": {"id": "UgxP9nnoe5LM1x1RRtx4AaABAg", "publishedAt": "2022-02-25T15:26:02Z", "author": "Nadine Mousa", "text": "Pretty helpful! visualization is so good to make us understand such topics. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgzqSGpoMBdDyqJRlud4AaABAg", "publishedAt": "2022-02-25T03:47:38Z", "author": "pra sharma", "text": "it will fail in the case where target sum=7 and array is [0]", "likes": 0}}, {"topLevelComment": {"id": "Ugycuefj7LEes2Ry9iB4AaABAg", "publishedAt": "2022-02-24T18:11:47Z", "author": "Ifeanyi Okonkwo", "text": "I am here 1 week later to enjoy the first part of the tutorial before moving to Tabulation", "likes": 0}}, {"topLevelComment": {"id": "UgxRRGL6yuylsleZSkF4AaABAg", "publishedAt": "2022-02-23T04:32:43Z", "author": "John Leal", "text": "3:21:14 \"table\" is an array of length n +1 (line 2). The \"for loop\" is from i=0 to i=n (line 4). Then when i=n, the expression table[i + 2] (line 6) is out of boundaries because table only has n + 1 positions!!. Why is this code working?", "likes": 0}}, {"topLevelComment": {"id": "UgwDWM5GmDP3cWOAkRR4AaABAg", "publishedAt": "2022-02-23T03:58:23Z", "author": "John Leal", "text": "2:34:21 The deepth of the tree is m and each time you build a string of length m but you do it in the \"for loop\" n times (wordBank.length = n),  so the space must be (m*m*n)?", "likes": 0}}, {"topLevelComment": {"id": "Ugyzedm8Uzo1RPurebt4AaABAg", "publishedAt": "2022-02-23T02:02:51Z", "author": "\ucd5c\uac15\uc7ac", "text": "I love his teaching. He really knows what he knows and how he teaches", "likes": 0}}, {"topLevelComment": {"id": "UgxPnjRpdjacD-khjIx4AaABAg", "publishedAt": "2022-02-22T22:06:51Z", "author": "R BRojas", "text": "in python the memo needs to be initialized differently:\ndef someFunction(a, b, memo = None):\n     if memo==None:\n          memo={}\n(this seems to have worked for me, everything else more or less follows the javascript example)", "likes": 0}, "replies": [{"id": "UgxPnjRpdjacD-khjIx4AaABAg.9YlREo3IsWK9eWO_AJl036", "publishedAt": "2022-08-09T16:15:27Z", "author": "Thomas", "text": "Did you find an explanation on why memo is not local in the function? (in Python)", "likes": 0}]}, {"topLevelComment": {"id": "UgyXICIdHM_m9ypHOrF4AaABAg", "publishedAt": "2022-02-22T16:55:56Z", "author": "R BRojas", "text": "me @1:58:10 after spending an hour figuring out to iterate backwards on the sorted array: \ud83d\ude36", "likes": 0}}, {"topLevelComment": {"id": "UgyyvPGwZ6MHI4lpuux4AaABAg", "publishedAt": "2022-02-22T12:36:11Z", "author": "Centuri", "text": "You can further optimaze the gridTraveler problem with simply changing 2 base cases (1 and 1, 0 or 0) into just (1 or 1) since it will always be 1 possible travel when width or height is 1 and since we return the function when it's 1 width or 1 height the 0 in any dimension will never occur while using this algorithm.", "likes": 1}, "replies": [{"id": "UgyyvPGwZ6MHI4lpuux4AaABAg.9YkPwB6rvLV9Yxh3l-GHZe", "publishedAt": "2022-02-27T16:24:46Z", "author": "Harsh Sharma", "text": "what happen if our input is 0,0 ??", "likes": 0}]}, {"topLevelComment": {"id": "Ugxn0gYN2hXXDNat_B54AaABAg", "publishedAt": "2022-02-22T11:21:43Z", "author": "DrSandeep VM", "text": "Unbelievably simplifying the most complex concepts.  Hats off to you Sir \ud83d\udc4f", "likes": 0}}, {"topLevelComment": {"id": "UgzX0Osv3VGb9yOc8dZ4AaABAg", "publishedAt": "2022-02-22T09:42:16Z", "author": "R BRojas", "text": "I just did @1:01:20 in python, and didn't  realise I hadn't put memo in the recursive calls either, but it still worked! anyone know why? \ndef gridTraveler(row, col, memo={}):\n     key = str(row) + \",\" + str(col)\n     if key in memo:\n          return memo[key]\n     if row==0 or col==0:\n          return 0     \n     if row==1 and col==1:\n          return 1\n     memo[key] = gridTraveler(row-1, col,  memo) + gridTraveler(row, col-1, memo)\n     return memo[key]\n\n//I had: memo[key] = gridTraveler(row-1, col) + gridTraveler(row, col-1)", "likes": 0}}, {"topLevelComment": {"id": "UgzGL6A0h7_gVP7pasx4AaABAg", "publishedAt": "2022-02-22T03:23:49Z", "author": "Eduardo Arnoldo Quintana Chavez", "text": "\u00a1Gracias!", "likes": 0}}, {"topLevelComment": {"id": "UgzQGipCS85sJPtdHXl4AaABAg", "publishedAt": "2022-02-21T18:40:35Z", "author": "Nat Serrano", "text": "teacher God level", "likes": 0}}, {"topLevelComment": {"id": "UgxDALCiTH-PCXKir0d4AaABAg", "publishedAt": "2022-02-20T16:16:27Z", "author": "Jack Alope", "text": "Shouldn't bestSum resolve to howSum's complexity? You can reverse sort the array of int so that they all go in decreasing order. Then the tree will explore shortest possible paths first and longest paths last  This means that you can run howSum(reverseSortedArray) and be guaranteed the best possible sum according to the properties of best defined in the problem. Your solution is modifiable to include other definitions of best, but when we're only concerned with the combination that results in the fewest number of summed terms, then it is sufficient to simply run howSum(reverseSortedArray)", "likes": 0}}, {"topLevelComment": {"id": "Ugydv3FZI5xjf_5PbDt4AaABAg", "publishedAt": "2022-02-20T09:34:26Z", "author": "Ricky Gorzel", "text": "Couldn't you just use pascal's triangle for the gridTraveler problem? I think it's possible to solve this problem by going to row (n+m) and entry m in pascal's triangle, you can get the solution for the 2d case.", "likes": 0}}, {"topLevelComment": {"id": "UgzzJG8Ktcg5NrJ8C_h4AaABAg", "publishedAt": "2022-02-19T18:41:12Z", "author": "Arpit Arora", "text": "In your HowSum problem How do i Not take repeating values ie. once a value from the array is used it should not be taken again ,so 8 from your exam shouldnt be from 2+2+2+2 but only from 5+3", "likes": 0}}, {"topLevelComment": {"id": "UgyLlpI8I2tvUCdYtmV4AaABAg", "publishedAt": "2022-02-19T16:22:41Z", "author": "Etienne Beaulac", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugyv-8TjKFmDzEc7BoN4AaABAg", "publishedAt": "2022-02-18T23:32:18Z", "author": "mastersabo", "text": "hey, great one, but in the tabulation samples (say for HowSum) you need to take into consideration edge cases in which you did not (applied for other samples as well), for example, let's say one of the elements in the number element is larger than the target, or adding 2 elements exceed the target sum, while no number specifically is larger than targetsum.\n\nan example would probably be best,\nsay we want to call HowSum(7, [5,3,4,20])\nto avoid exceptions (in certain languages) we need to add a condition which looks something like\nif (table[i].Sum() + number <= targetSum)\n\nWDYT?", "likes": 0}}, {"topLevelComment": {"id": "Ugyq6L_tRj0QnNxG11F4AaABAg", "publishedAt": "2022-02-18T16:43:03Z", "author": "sha p", "text": "Thanks a lot bro... which editor is that you are using here ?", "likes": 0}}, {"topLevelComment": {"id": "Ugxy69VH3Iyl3OcvY3d4AaABAg", "publishedAt": "2022-02-18T16:28:13Z", "author": "Ifeanyi Okonkwo", "text": "I love the way he says Alright", "likes": 1}}, {"topLevelComment": {"id": "UgwqYO7t2m-W8SgOxW14AaABAg", "publishedAt": "2022-02-18T03:23:56Z", "author": "S", "text": "This is one of the best videos out there about dynamically programming, I initially had trouble with the recursive concept but this made so much more clearer!! Thank you so much!! This channel hands down, is absolute GOLD!", "likes": 0}}, {"topLevelComment": {"id": "UgweHwcUlINfFZLgMp54AaABAg", "publishedAt": "2022-02-17T17:00:30Z", "author": "Harsh Aggarwal", "text": "In the \"canSum\" problem, why are we using same element in recursion which we have used before. Kindly explain.", "likes": 1}}, {"topLevelComment": {"id": "Ugzgh_tXyl9yJ5OdEf54AaABAg", "publishedAt": "2022-02-17T16:33:45Z", "author": "Gaurav Roy", "text": "by far the best course on dp. Thanks a ton", "likes": 0}}, {"topLevelComment": {"id": "UgxHpGtouSFZFFbOuct4AaABAg", "publishedAt": "2022-02-16T19:57:02Z", "author": "Ethan Christian", "text": "How do I convert the memo object from javascript to java. Ive looked online but cant find any way to declare an empty object in the method header.", "likes": 1}}, {"topLevelComment": {"id": "UgxPGg0mQ5-_BixsM314AaABAg", "publishedAt": "2022-02-16T14:33:33Z", "author": "Ying Zhang", "text": "GridTraveller problem with memeorization: shouldn't the space complexity O(m*n) since all combinations of (m,n) need to be the keys in the dictionary?", "likes": 0}}, {"topLevelComment": {"id": "UgwtBDMkCD590VzLiGh4AaABAg", "publishedAt": "2022-02-16T10:32:26Z", "author": "Rajas Kulkarni", "text": "Thanks man! God bless you\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgzriRHHq5aR22qlP9l4AaABAg", "publishedAt": "2022-02-16T03:16:12Z", "author": "Zach S.", "text": "5 hours!", "likes": 0}}, {"topLevelComment": {"id": "Ugyq-jRPEtSR4o8p4pp4AaABAg", "publishedAt": "2022-02-16T03:09:28Z", "author": "denny age", "text": "This who still have confusion , go and watch striver dp series", "likes": 1}}, {"topLevelComment": {"id": "UgxJHkvaUSXpLOP_vYB4AaABAg", "publishedAt": "2022-02-15T23:32:29Z", "author": "AhMed Khaled", "text": "I learned much Divide and Conquer Than DP, awesome and Thank YOU.", "likes": 0}}, {"topLevelComment": {"id": "Ugw_PN8d3CgVVnxw9XR4AaABAg", "publishedAt": "2022-02-15T14:46:54Z", "author": "Andranik Markaryan", "text": "Best tutorial of dynamic programming.", "likes": 0}}, {"topLevelComment": {"id": "UgwkGzJGcoxtsW4o1_J4AaABAg", "publishedAt": "2022-02-15T13:27:52Z", "author": "Ankur Sharma", "text": "I think canSum and haveSum are both buggy!\nfor any sample input that contains a integer 1, the program will fail.\ne.g. canSum(7,[1,1])\ncanSum(3,[1])) so on and so forth! :)\n\nActually, for that matter, all the inputs where the destination has an exact multiple as an input array element will fail.\nFor the next recursive call the array should be changed to eliminate the subtractions that were already made.\nHere is a corrected C++ code. Did not clean it up, but it works.\n\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n\n\nbool hasSumImpl(int target, std::vector<int> numbers, std::unordered_map<int, bool>& mem){\n    if(target < 0)\n        return false;\n    if(target == 0)\n        return true;\n    auto it = mem.find(target);\n    if( it != mem.end())\n        return it->second;\n    \n    for(int i=0 ;i<numbers.size(); ++i){\n        int tempTarget = target;\n        auto tempNumbers = numbers;\n        if(tempNumbers[i] < 0)\n            continue;;\n        tempTarget = tempTarget-tempNumbers[i];\n        tempNumbers[i] = -1;\n        bool res = hasSumImpl(tempTarget, tempNumbers, mem);\n        if(res){\n            mem[target] = res;\n            return true;\n        }\n    }\n    return false;\n}\n\nbool hasSum(int target, std::vector<int> numbers){\n    std::unordered_map<int, bool> mem;\n    return hasSumImpl(target,numbers,mem);\n}\n\nint main(){\n    std::cout<<hasSum(5, {1,2,4})<<\"\\n\";\n    \n    std::cout<<hasSum(7, {1,2,3,4,5,6})<<\"\\n\";\n    std::cout<<hasSum(4, {1})<<\"\\n\";\n\n    std::cout<<hasSum(7, {1,2})<<\"\\n\";\n    std::cout<<hasSum(7, {1,3,6})<<\"\\n\";\n    return  0;\n}", "likes": 0}}, {"topLevelComment": {"id": "Ugw_BB1zDIgaIKChXJ94AaABAg", "publishedAt": "2022-02-15T07:08:19Z", "author": "Tasnim Meem", "text": "I am getting started with dynamic programming. I went through some basics and felt like I need to learn about recursion and backtracking first. So currently I am studying topics like generation of all sunsets, flood fill algorithm etc. Can anyone suggest me if I should take this course now or should I get more familiar with recursion, backtracking and then come back here?", "likes": 0}}, {"topLevelComment": {"id": "UgxEr-BJxROVQkRKnC94AaABAg", "publishedAt": "2022-02-15T02:47:53Z", "author": "J M", "text": "Do any of you actually write code like this at work like a recursive Fibonacci sequence or do o of n calculations?  I can appreciate this from an academic point of view but on all the teams I've worked on I just don't see this in real real world development please correct me if I'm wrong with your actual experience", "likes": 0}}, {"topLevelComment": {"id": "Ugwph8WpSWFD7nnm7yJ4AaABAg", "publishedAt": "2022-02-15T01:51:29Z", "author": "RENE RAMIREZ", "text": "This young boy is a Genius!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugw-oFrDNU-oitpfq4x4AaABAg", "publishedAt": "2022-02-14T21:42:52Z", "author": "Ying Zhang", "text": "Could someone help me understand why the time complexity of the CanSum problem with memorization is O(m*n)?", "likes": 0}, "replies": [{"id": "Ugw-oFrDNU-oitpfq4x4AaABAg.9YRn8CM31wF9YWB3TiQCaP", "publishedAt": "2022-02-16T14:37:38Z", "author": "Ying Zhang", "text": "i figured it out: because it needs to perform calculations for the m keys, with each key costing n operations (to check m-i for i in array)", "likes": 0}]}, {"topLevelComment": {"id": "UgyBka_5IYy7t33_UJB4AaABAg", "publishedAt": "2022-02-14T00:13:12Z", "author": "Bart Zumba", "text": "why rename algorithmic programming to dynamic. its algorithmic", "likes": 0}}, {"topLevelComment": {"id": "Ugwivv9xGTAlgZKL1bZ4AaABAg", "publishedAt": "2022-02-13T20:31:17Z", "author": "Manuel Jos\u00e9 Garc\u00eda Rodr\u00edguez", "text": "1:27:00 sholudn't it be, instead of ?", "likes": 0}}, {"topLevelComment": {"id": "UgzMxhC-Wy6Ark2Hczp4AaABAg", "publishedAt": "2022-02-13T19:59:15Z", "author": "ZYH", "text": "The quality of this video is top notch. The approach, and logics are explained so well. Thank you so much for this awesome content!", "likes": 3}}, {"topLevelComment": {"id": "UgzZ7_iPkNPXu_8BgOZ4AaABAg", "publishedAt": "2022-02-13T19:49:40Z", "author": "trainbless - dennissmd", "text": "This course is pure gold. SO many epiphany moments.", "likes": 0}}, {"topLevelComment": {"id": "Ugxuta8FgBWrC0SfjGF4AaABAg", "publishedAt": "2022-02-13T19:43:02Z", "author": "Moin Uddin Maruf", "text": "Alvin, you are a great teacher. This course is very much organized, I can relate the topic and examples clearly. Thank you very much.", "likes": 0}}, {"topLevelComment": {"id": "UgyEuGq7LI_zULC-1RF4AaABAg", "publishedAt": "2022-02-13T13:03:22Z", "author": "Mecks Onwenu", "text": "Since I finally got a Data Structure & Algorithm course that can keep me learning repeatedly for hours, I can safely say this is one of the best startup programming series on Data S. & A. Also, this comes with a full recommendation on my part to anyone interested in Software Programming. \n\nThank you, sir!", "likes": 8}}, {"topLevelComment": {"id": "Ugw5Feu2YVrNDCokaiZ4AaABAg", "publishedAt": "2022-02-13T11:35:17Z", "author": "\u0639\u0628\u062f\u0627\u0644\u0631\u062d\u0645\u0646 \u062c\u0627\u0646\u0645", "text": "GREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", "likes": 0}}, {"topLevelComment": {"id": "UgyThGQHLkmlqf3NXyt4AaABAg", "publishedAt": "2022-02-13T08:47:17Z", "author": "Stefan Stojadinovi\u0107", "text": "Why are arrays and true values memorized in canSum and howSum if they are just propagated to the root?\n\nAlso why are these operations taken into account in time complexity - howSum(n*m*m), why is it not something like (n*m+m*m) as array is propagated maximum M times and maximum length of it is m?", "likes": 1}}, {"topLevelComment": {"id": "Ugz046IS1EooBt2TChR4AaABAg", "publishedAt": "2022-02-13T05:06:09Z", "author": "Glenn", "text": "Finally completed this tutorial vid! Took about 2 weeks but the video was organized well and was fun to do! Dynamic Programming isn't that scary after all :p", "likes": 0}}, {"topLevelComment": {"id": "UgykG7lDbfptKJTvc0Z4AaABAg", "publishedAt": "2022-02-12T18:33:47Z", "author": "\u042e\u0440\u0438\u043a \u041b\u0430\u0439\u043a\u043e\u0432", "text": "Regarding canSum returning arguments list optimization, it's time complexity can't be multiplied by m because of list copying, as the list is being copied only m times within an algorithm run, because you instantly quit the tree if the function starts returning not null. So the optimized complexity should be like (n + m)*m not n*m^2", "likes": 0}}, {"topLevelComment": {"id": "UgzDaTH84GQIXmOvkrJ4AaABAg", "publishedAt": "2022-02-12T16:58:39Z", "author": "\u042e\u0440\u0438\u043a \u041b\u0430\u0439\u043a\u043e\u0432", "text": "In Fibonacci you get O(n^2) not O(n) after memoising as you added search in every call.", "likes": 0}}, {"topLevelComment": {"id": "UgwXIOfO-r0sXksKIGd4AaABAg", "publishedAt": "2022-02-12T15:49:57Z", "author": "Ronaldo", "text": "You're an excellent teacher!", "likes": 0}}, {"topLevelComment": {"id": "UgzRd8CLrJg84Lq2Ls54AaABAg", "publishedAt": "2022-02-12T09:32:21Z", "author": "Daniel Bengtsson", "text": "This will be an unpopular opinion. (you know it's going to be bad if I give a warning first). But I think this illustrates 3 big, fundamental problems:\n\n1. There is a tendancy among the programming community to set up hurdles for themselves in order to impress others in order so that they can jump those hurdles to impress others.\n2. The other is that if the only tool you have is a hammer, you tend to see every problem as a nail.\n3. A desire to use the latest technologies and techniques.\n\nThe first issue I have is the syntax. This is directed to beginners, and the top rated comment is that it took a week to do the tutorial. Keeping it as simple and readable as possible should be the focus. And yet there are 1 line if statements without brackets and ternary operators, etc in there.\n\nAlso related to simplicity, is that we all know there is a very obvious simple sollution to the first problem:\n\nfunction fib(position){\r\n\tvar prev1 = 1;\r\n\tvar prev2 = 0;\r\n\tvar fibNr = 0;\r\n\r\n\tfor(i = 0; i < position; i++){\r\n\t\tprev2 = prev1;\r\n\t\tprev1 = fibNr;\r\n\t\tfibNr = prev2 + prev1;\r\n\t}\r\n\treturn fibNr;\r\n}\n\nI understand that it was there to introduce and set things up. But if you look at the result from the fib code in the video alone it is slower, harder to read and takes up more memory. It is, for all intents and purposes a bad way to solve the problem.\n\nWhich is the hammer nail analogy. Programming is about problem solving, and part of that should be finding the best sollution, not forcing a peg into a square functional programming hole. This gets much worse  in the gridtraveler problem:\n\nThe way it's tackled here is a starting point of \"right, let's bruteforce it and try ALL the combinations\". Which isn't understanding the problem. Look at the information given.\n\nYou have a grid and can go down or right. You start at the top left and need to go to the bottom right.\n\nWhat does that actually mean?\n\nWell, for each column you need to take one step to the right. For every row you need to take 1 step down.\n\nIn a grid of 3 x 3, that is 2 steps down, 2 steps to the right. And then just various combinations. It will always be 4 steps to the goal.10 x 10 grid = 9 steps down + 9 steps to the right to end up on the desired tile. If you write that out the sollution should be obvious:\n\nRRRRRRRRRDDDDDDDDD (R = right, D = down)\n\nBruteforcing it to find the combinations that have 9 steps down and 9 steps, saving a fantastic amount of data in an array...is silly now that you see the problem half solved.\n\nAll you need to do is move the R & D's around to get all the various combinations. You could put them in an array if you really wanted to and move them around that way, but that is 1 array with a size of 18, not a ginormous one like the one generated in the video. Just loop it out until you've ended up with DDDDDDDDDRRRRRRRRR add something that increments in each loop and boom - done.\n\nAnd that's on what would be the equivilent of the videos unoptimized version. If you wanted to optimize this way of solving it you could calculate the amount of steps it takes to move an R or a D x steps, and find clever ways of doing it. And you could do it easily readable without shorthand and clearly defined functions and loops.\n\nAgain, much more efficiant to keep it simple, and easier to understand.\n\nUltimatly makes you a better programmer as you learn how to solve problems with many different approaches, and ways to solve problems instead of wasting resources to get an intermediate level sollution that sacrifices lots of performance and memory to solve simple math problems.\n\nAnd lets's face it. Programming paradigms will come and go. This code will look very dated 10 years from now, and will probably not make sense to that generation of programmers.\n\nBut...keeping to the basics? That'll still works. It'll still be around. Sure, you may look like a bit of a newbie, but if you don't care about prestige, and get over that, it is also brutally effeciant.", "likes": 0}}, {"topLevelComment": {"id": "UgzaAJmPCKDN4QinCqR4AaABAg", "publishedAt": "2022-02-12T00:14:45Z", "author": "Ali Lashgari", "text": "I dont think I ever have seen a youtube video with this quality. Thank you very much Alvin.", "likes": 0}}, {"topLevelComment": {"id": "UgwOjlD8CrH7Rs3WHR54AaABAg", "publishedAt": "2022-02-11T16:15:53Z", "author": "Ayush Khandelwal", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugwe7barybooncAoXpZ4AaABAg", "publishedAt": "2022-02-08T19:02:17Z", "author": "Mithun Mithun", "text": "17:56 (regarding the timr complexity), 2^n is the number of calls in a level and not the total calls... right?", "likes": 0}, "replies": [{"id": "Ugwe7barybooncAoXpZ4AaABAg.9YC2zjYVQ1p9YC3GIWZsm7", "publishedAt": "2022-02-08T19:04:40Z", "author": "Mithun Mithun", "text": "the time complexity is 2^n coz the actual number of calls is sum(2^n, 2^n-1, ...) but the order is still 2^n.", "likes": 0}]}, {"topLevelComment": {"id": "Ugy2jfcDsZJfwvIBBj94AaABAg", "publishedAt": "2022-02-07T22:16:11Z", "author": "Rob Malford", "text": "The best way to handle these challenges is to find another job where they don't let greasy ass Millennials come up with an utterly pointless interview process without any supervision of any kind.", "likes": 0}}, {"topLevelComment": {"id": "UgwVogmHHPkdRkk80m54AaABAg", "publishedAt": "2022-02-07T04:09:33Z", "author": "Dhinesh Rajendran", "text": "One of the best tutorials of DP. The way of teaching is fantastic!", "likes": 0}}, {"topLevelComment": {"id": "UgxGEdmtsYehNnMbxh94AaABAg", "publishedAt": "2022-02-06T06:26:49Z", "author": "Amit Budhiraja", "text": "I am not able to analyse the complexity of the algos but I  am able to understand the complete code and how we are optimising the solutions How to practice it  and how get get the complexity of canSum memoisation O(m*n) 1:27:23? Can someone tell", "likes": 1}}, {"topLevelComment": {"id": "UgzPQ5ZvLUfo-s8ksuV4AaABAg", "publishedAt": "2022-02-05T21:35:17Z", "author": "Santosh Vaza", "text": "Awesome course, thank you.\nCan someone give me vscode config used this tutorial, it looks very intuitive", "likes": 0}}, {"topLevelComment": {"id": "UgycKkG3FWs5zJy-SNt4AaABAg", "publishedAt": "2022-02-05T14:30:40Z", "author": "sohail basha", "text": "35:20 isn't the right part of the tree executes first and when left part was exciting it is getting value of fib(4) from already executed which is the right part", "likes": 0}}, {"topLevelComment": {"id": "Ugy4hN-yObjkJe3GUvV4AaABAg", "publishedAt": "2022-02-05T09:15:25Z", "author": "\u0418\u0433\u043e\u0440\u044c \u0421\u0443\u0445\u0430\u0440\u0435\u0432", "text": "About canSum memoization.\nThere is no need to memorize n for which canSum(n) == true because this information will not be used in further.", "likes": 0}}, {"topLevelComment": {"id": "Ugw9jZjmTj6z3PEQsVJ4AaABAg", "publishedAt": "2022-02-05T01:28:51Z", "author": "Patrick Gavin", "text": "If anyone is stuck on bestSum and using Python like I was. When adding shortestCombination to your dictionary you are actually just storing a reference to the combination list. This will give you serious errors. To fix you need to save combination into a new list using the list() method before appending your num. Just do like new_combination = list(combination) and then append to new_combination. And it'll work fine.", "likes": 0}}, {"topLevelComment": {"id": "UgzJywYIMgFjTjHV_a54AaABAg", "publishedAt": "2022-02-04T18:44:06Z", "author": "Antonio Hevia", "text": "did you really understand it? damn i can't T-T", "likes": 0}}, {"topLevelComment": {"id": "UgwTOTWMtVBFi73SVJF4AaABAg", "publishedAt": "2022-02-04T11:37:45Z", "author": "kake coisa", "text": "Can someone explain why in optimized CanSum problem the complexity is O(n*m)?", "likes": 0}}, {"topLevelComment": {"id": "Ugwjtabds8Q8gwFy3h94AaABAg", "publishedAt": "2022-02-03T15:36:58Z", "author": "Ashriel Brian", "text": "At 1:04:15, shouldn't the space complexity of the memoized grid traveller be O(m * n)? Since the memoization itself occupies space (m * n) which is greater than the size of the recursion stack (m + n). \n\nAlso, we could've exited any of the edges the moment m or n == 1, right? Since when m or n = 1, there's only a single way to get from start to end, i.e. if m == 1 or n == 1 return 1", "likes": 0}}, {"topLevelComment": {"id": "UgxVAqhKp4lEwAaZjmp4AaABAg", "publishedAt": "2022-02-03T15:25:23Z", "author": "Josh", "text": "i can\u2019t believe this is free. it\u2019s an amazing video", "likes": 0}}, {"topLevelComment": {"id": "UgxsXuH5OWqeGbSL2rB4AaABAg", "publishedAt": "2022-02-03T08:43:15Z", "author": "TheKhalamar", "text": "Anyone implementing Fibonacci using recursion, with or without memoization, deserves not to be hired.", "likes": 0}}, {"topLevelComment": {"id": "UgxUw0XhbeRxzWtc9qp4AaABAg", "publishedAt": "2022-02-03T03:25:37Z", "author": "Glenn", "text": "In the topic for gridTraveler memoization, you've missed the optimization of the cases where gridTraveler(m,n) = gridTraveler(n,m).. Also, in the if ( m == 1 && n == 1) condition, you could have done a '||' instead of a '&&' since if either m or n is 1, there's only 1 way or travelling the grid.. so 5,1 or 10, 1 will still have 1 route. By incorporating these two optimizations, you can save on a lot of recursive calls.", "likes": 5}, "replies": [{"id": "UgxUw0XhbeRxzWtc9qp4AaABAg.9XyVp0TWUlW9kopK-2sHSg", "publishedAt": "2023-01-13T08:31:51Z", "author": "Lekan Alowooja", "text": "@NM doing same thing and I found this", "likes": 0}, {"id": "UgxUw0XhbeRxzWtc9qp4AaABAg.9XyVp0TWUlW9iXr7hqDYcP", "publishedAt": "2022-11-17T15:58:32Z", "author": "NM", "text": "Lol, I just finished that question in the video and I was confused why he isn\u2019t doing it, so I started reading comments to see if I\u2019m wrong . Thank you.", "likes": 0}]}, {"topLevelComment": {"id": "UgyKnAOPZvxxM9Z0iDJ4AaABAg", "publishedAt": "2022-02-02T14:24:05Z", "author": "Aman Kumar Mahore", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "UgxOG0_6JOlTf6fNesd4AaABAg", "publishedAt": "2022-02-02T10:06:32Z", "author": "Sondre Pedersen", "text": "idk why, but i made the gridtraveling code, and it seems to work for every set of numbers except 18x18. For some reason i get a negative number in this case. Its even correct if i calculate the 17x18 grid and just double it to get the answer in the video. 19x19 works fine it seems", "likes": 0}}, {"topLevelComment": {"id": "UgxP0BDab4HF_qW-5el4AaABAg", "publishedAt": "2022-02-02T01:12:40Z", "author": "DARK LORD", "text": "1:56:10\n\n//    Why this code giving Wrong output.\n\npublic class MainClass \r\n{\r\n  public static void main(String[] args) \r\n   {             \r\n       int[] array = {1,2,5,25};\r\n\r\n       System.out.println(  BestSum ( array  , 100 ) );\r\n   }\n\r\n    public static Map<Integer, ArrayList<Integer>> map = new HashMap();\n\n    public static ArrayList < Integer > BestSum( int[] array , int target)\r\n    {\r\n        if(map.containsKey(target))return map.get(target);\r\n        if ( target  = =  0 )  return new ArrayList();\r\n        if ( target  <  0 )  return null;\n\n\r\n        ArrayList<Integer> shortList  =   null;\n\n\r\n        for (int num : array)\r\n        {\r\n            ArrayList<Integer> list = BestSum(  array  ,   target-num);\r\n            if(  list  !  =  null)\r\n            {\r\n                list.add(num);\r\n                if(  shortList   = =  null    ||    list.size()   <  shortList.size()   )\r\n                    shortList  =  list;  \r\n            }\r\n        }\n\n\r\n        map.put(  target   ,    shortList);\r\n        return shortList;\r\n    }\r\n}", "likes": 0}}, {"topLevelComment": {"id": "Ugz0ee1vsWfGoHX2xjd4AaABAg", "publishedAt": "2022-02-01T13:26:25Z", "author": "Miko", "text": "Hey, wonderful tutorial but there's one thing that keeps bugging me that I do not understand and I'd love to have it explained by someone and I've rewatched 54:20 moment way too many times haha. How is the height (number nodes starting from the root node to the leaf including both the root node and leaf node if I understand correctly) of that tree n+m if n+m = 3+2 = 5 not 4. Also 2^(n+m) = 2^(5) = 32 and there aren't 32 nodes. It just doesn't make sense to me as compared to the fibonnaci algorithm. But I'm probably missing something, thanks a lot!", "likes": 0}}, {"topLevelComment": {"id": "Ugxh6PV0mmU5nhttlFR4AaABAg", "publishedAt": "2022-02-01T12:20:19Z", "author": "twejiddong", "text": "For the tabulated version of howSum, can't you add a condition to avoid the copy if table[i + num] is not null ? Wouldn't that reduce the complexity from O(m^2*n) down to O(m*(m+n)) ?", "likes": 0}}, {"topLevelComment": {"id": "UgxYdjzIbkYtmw1dMXB4AaABAg", "publishedAt": "2022-02-01T07:28:09Z", "author": "parth kabra", "text": "31:21 an array could be used to store the values other than a \"hashmap\" which is better, also the array could be global so that can access the values again and again", "likes": 0}}, {"topLevelComment": {"id": "UgxeIxnEtyzOqMXdJFR4AaABAg", "publishedAt": "2022-01-31T01:35:34Z", "author": "Sebo S", "text": "60th fibonacci number is actually 12,586,269,025", "likes": 0}}, {"topLevelComment": {"id": "UgwYUku2t2h7YoZGKyh4AaABAg", "publishedAt": "2022-01-29T21:29:38Z", "author": "Adrian Thern", "text": "this is a godlike Tutorial. I recommend to everyone watching to pause after the problem is introduced and think of a way to solve it and then watch the explanation.  Adds some more depth to this amazing work!", "likes": 3}}, {"topLevelComment": {"id": "UgwDOhmPv8LAzaxqkBt4AaABAg", "publishedAt": "2022-01-29T20:46:18Z", "author": "Alex Ni", "text": "Correction at 53:08 The distance should be max(m, n) not m+n; therefore the space complexity is O(max(m, n)", "likes": 0}}, {"topLevelComment": {"id": "Ugx7g3BeGTZxf8gUEPh4AaABAg", "publishedAt": "2022-01-29T18:59:53Z", "author": "Senthil Kumar", "text": "Love it . Really it's a great explanation. Thanks all for you hard work !!!. \nquick question In fibonacci, if n== 0, does it need to return 0 or 1 , I see from your explanation if <=2 return 1. Kindly check and confirm", "likes": 0}}, {"topLevelComment": {"id": "UgymsxOZbmZ8Vrv22ot4AaABAg", "publishedAt": "2022-01-29T18:15:20Z", "author": "Pradeesh Bm", "text": "Thanks a lot for the beautiful content.", "likes": 0}}, {"topLevelComment": {"id": "UgyoMkWCkKJvO30lzgd4AaABAg", "publishedAt": "2022-01-29T17:47:07Z", "author": "Ishtiak Ahmed", "text": "Why I have not watched it early! This is sooo awesome. Thanks a lot for making and sharing this. May The Almighty give you best prize.", "likes": 0}}, {"topLevelComment": {"id": "UgxQ49sQP86dyPsJbgt4AaABAg", "publishedAt": "2022-01-29T13:38:44Z", "author": "infty", "text": "Thank you so much for making this! This is by far the best tutorial I've seen on this topic! Easy to follow and gives you the right mindset to solve those kind of problems.", "likes": 0}}, {"topLevelComment": {"id": "UgwOgRXOJ7OZGuJB-Bl4AaABAg", "publishedAt": "2022-01-29T12:55:25Z", "author": "SLG96", "text": "Can someone tell me what\u00b4s the difference in Python 3.x? I tried the canSum with memoization, writing down the same code in python language (at least I think so) and it gives only True as results.", "likes": 0}, "replies": [{"id": "UgwOgRXOJ7OZGuJB-Bl4AaABAg.9Xme3-mpK-h9iUiU2TKjM7", "publishedAt": "2022-11-16T10:45:13Z", "author": "SparrowC1", "text": "def cansum(target_sum, numbers, memo=None):\n\n    if memo is None:\n        memo ={}\n    if target_sum in memo:\n        return memo[target_sum]\n    if target_sum<0:\n        return False\n    if target_sum in numbers:\n        return True\n\n    for i in numbers:\n        if cansum(target_sum-i, numbers, memo) == True:\n            memo[target_sum] = True\n            return True\n    memo[target_sum] = False\n    return False", "likes": 0}]}, {"topLevelComment": {"id": "Ugz1qOQd1Q48vdpFTEB4AaABAg", "publishedAt": "2022-01-29T08:30:56Z", "author": "Ankur Maurya", "text": "where is threesum and foursum problem?", "likes": 0}}, {"topLevelComment": {"id": "Ugz3FWvswkqTZmqHdiN4AaABAg", "publishedAt": "2022-01-28T16:55:14Z", "author": "Sami Haroon", "text": "I have few job interviews aligned, to be honest I was shaking a bit as they are from top tech companies...\r\nBut then I took all the lectures from Alvin offered here on FCC, all the nerves are calmed now as I can now think about it in much boarder way and can solved it in different ways...\n\r\nI am mind-blown by simple how easily I've practiced all problems following him, he is making sure if he teaches a concept he will give enough examples to be able to crack almost any problem related to that concept... \r\nSheer brilliance and top-quality of content", "likes": 0}}, {"topLevelComment": {"id": "Ugy3mmpibv0-eE3LjAd4AaABAg", "publishedAt": "2022-01-27T16:50:05Z", "author": "MrSpermster", "text": "Pure Gold", "likes": 0}}, {"topLevelComment": {"id": "UgzoGt9BKrnv_61LkAZ4AaABAg", "publishedAt": "2022-01-26T13:36:00Z", "author": "Sharath Nagendran", "text": "I just cannot describe my job on finding this. You sir, are a GREAT teacher. May God bless you.", "likes": 0}}, {"topLevelComment": {"id": "UgzYNpdJP6SdDvVHn4V4AaABAg", "publishedAt": "2022-01-26T00:02:52Z", "author": "LowProfile", "text": "Very good tutorial about DP. Do you have any promo code for your course on structy?  Would love to keep learning on your course.", "likes": 0}}, {"topLevelComment": {"id": "UgwxJmoH9cC-n7cwOUR4AaABAg", "publishedAt": "2022-01-25T16:47:59Z", "author": "Vincent F", "text": "For the bestSum tabulation, I choosed simpliest way. I take exactly the same code as for the howSum, and simply add one condition after\nif i + num <= targetSum:\nso it becomes:\nif i + num <= targetSum and table[i+num] is None:\nThe logic is that if the table is already populated, it is BECAUSE the way already stored is shorter.\n\nThank you again for this great tuto, I learn so much !", "likes": 0}}, {"topLevelComment": {"id": "UgwCYzc6EyumW8quGOp4AaABAg", "publishedAt": "2022-01-24T23:22:20Z", "author": "THE TYRO", "text": "can anyone give me code of howSum problem in c++?", "likes": 0}}, {"topLevelComment": {"id": "UgyyyUM5iaugfFKbWIN4AaABAg", "publishedAt": "2022-01-24T09:41:42Z", "author": "jitesh sindhare", "text": "Great video.\njust wanted to ask. wouldn't @53:13 height of the tree will be (n + m) -1 .", "likes": 0}}, {"topLevelComment": {"id": "UgxbWpkj-_eSJ2RIdZx4AaABAg", "publishedAt": "2022-01-24T04:03:08Z", "author": "Gary Wu", "text": "Very well explained, easy to follow and understand. I would like to know what IDE you were using?", "likes": 0}}, {"topLevelComment": {"id": "UgxD2v79sa6pqqnCi3t4AaABAg", "publishedAt": "2022-01-23T17:26:23Z", "author": "Crusoe", "text": "3:21:33 how is that not index out of bound ? you make table[i+2] and table[i+1] and your i iterates to n, so if you have n=6 you trying to increase table[8] and table[7] when you only should have indexes from 0 to 6", "likes": 0}}, {"topLevelComment": {"id": "UgzMxxot7Eczbj2u4nx4AaABAg", "publishedAt": "2022-01-23T11:41:27Z", "author": "Amazing video", "text": "3:45 how canSum of 6 is true here???", "likes": 1}}, {"topLevelComment": {"id": "UgzqDe_QcPp6cnB7sU14AaABAg", "publishedAt": "2022-01-22T23:09:53Z", "author": "Sean Tilson", "text": "Going through these in python. For canConstruct, I can't get the basic recursion to break. That is, it doesn't slow down like at all. I am using startswith() and lstrip(). Is it possible these are more efficient?", "likes": 1}}, {"topLevelComment": {"id": "Ugzrq8hzIcoJCnZiUp94AaABAg", "publishedAt": "2022-01-22T20:00:15Z", "author": "Thiago Senador", "text": "Quick question at 2:33:07: shouldn't target.indexOf also contribute with m in the overall time complexity? The internal implementation of indexOf is also O(m), just like target.slice", "likes": 0}}, {"topLevelComment": {"id": "UgxMMjR_4oS-PYYS8o14AaABAg", "publishedAt": "2022-01-22T14:30:17Z", "author": "Tom Lee", "text": "This tutorial is awesome with decent voice.", "likes": 0}}, {"topLevelComment": {"id": "UgwecaslWJCADgUIo1h4AaABAg", "publishedAt": "2022-01-21T20:38:33Z", "author": "Mollusk_Musk", "text": "I really can not believe this is free content.", "likes": 0}}, {"topLevelComment": {"id": "Ugyg6znV9fosX-e6MTt4AaABAg", "publishedAt": "2022-01-21T19:08:37Z", "author": "yankeee922", "text": "This is gold", "likes": 0}}, {"topLevelComment": {"id": "UgwouPawekTy80z-Kmx4AaABAg", "publishedAt": "2022-01-21T15:38:50Z", "author": "\u304d\u306cKinu", "text": "In the canSum function, adding a modulus check is a massive improvement cuz if target % i != 0 then i is not going to generate the target anyways + it is better to know the reminder..\n10%3 = 1 then you can not generate 10 using 10 what do y'all think", "likes": 0}}, {"topLevelComment": {"id": "Ugwwn8HhpIud926bHIp4AaABAg", "publishedAt": "2022-01-21T15:18:02Z", "author": "Thiago Senador", "text": "Simply put: the best instructor ever. Congratulations Alvin! Your material is just pure gold!!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugx3_-0j94NsD9se7El4AaABAg", "publishedAt": "2022-01-20T17:45:03Z", "author": "Vincent F", "text": "Thank you so much for this ! The best worthwhile 5 hours of my life ! :)", "likes": 0}}, {"topLevelComment": {"id": "Ugw2OxvxRPPpwlzg-ot4AaABAg", "publishedAt": "2022-01-20T14:51:57Z", "author": "elvys cruz", "text": "The teaching style is great, Alvin provides insights and a methodology for solving practical coding problems..", "likes": 0}}, {"topLevelComment": {"id": "Ugw5QgEoEYnbIf4VKeF4AaABAg", "publishedAt": "2022-01-20T03:23:27Z", "author": "TheBaldr", "text": "I knew memoization seemed really familiar.  I had just seen a video about  @cache in python a couple days ago.", "likes": 0}}, {"topLevelComment": {"id": "Ugx1fP0BfeysOZU7oTt4AaABAg", "publishedAt": "2022-01-19T17:45:18Z", "author": "Claire Boitet", "text": "This is so helpful, thank you very much!!", "likes": 0}}, {"topLevelComment": {"id": "Ugx3X8rt8iqfVyBN0aV4AaABAg", "publishedAt": "2022-01-19T17:26:20Z", "author": "Questionable Coding", "text": "Great material!\nI wonder how broad is the application of the tabulation approach. Can it always be an alternative to a recursive approach?", "likes": 0}}, {"topLevelComment": {"id": "UgyC1XChMSO496czMCB4AaABAg", "publishedAt": "2022-01-19T08:18:26Z", "author": "Sprayer2708", "text": "You said in the grid traveler tree that swapping rows and colums would give the same result, but did you put that in your code?\nAlso, in the bestSum tabulation, won't any tupel that was first added to any index be the shortest since it reached the index first?", "likes": 1}}, {"topLevelComment": {"id": "Ugyz3fLRp5GV-rmj2894AaABAg", "publishedAt": "2022-01-19T08:06:33Z", "author": "Mintesnot Alemayehu", "text": "How a teacher you are!!! Thanks a lot", "likes": 0}}, {"topLevelComment": {"id": "Ugz7lbY9iMlzZOWf2jR4AaABAg", "publishedAt": "2022-01-19T06:15:21Z", "author": "Pratik Poojary", "text": "In the cansum problem can't we just return true if 1 is present in the array? as any target could be achieved if 1 is there in the array", "likes": 0}}, {"topLevelComment": {"id": "UgxUetdQ_pskeWr5N1J4AaABAg", "publishedAt": "2022-01-18T19:55:48Z", "author": "Ranit Chatterjee", "text": "For pythoneers :\nx=[1,2,3] \n[*x,5] returns [1,2,3,5]", "likes": 0}}, {"topLevelComment": {"id": "UgySeL3dheqfKRgwEXd4AaABAg", "publishedAt": "2022-01-18T17:42:56Z", "author": "Johan Liebert", "text": "How can I solve the sumWays (and the problems that variate from it), if the question asked me to use each element of the array at most once, (e.i. suppose you have k coins, and an array of n elements that each element has it's value,  and we might have 2 or more elements with the same value (price). \nin how many ways can we spend the k coins? \nI've seen this problem in a programming contest but couldn't solve it and couldn't find the solution anywhere since then.", "likes": 0}}, {"topLevelComment": {"id": "UgwCVIyblUqptiX6mJV4AaABAg", "publishedAt": "2022-01-18T17:32:05Z", "author": "Saumya Bharti", "text": "Here's the c++ code of fibonacii algorithm\n#include<bits/stdc++.h>\r\nusing namespace std;\nint fiboNumOptzUty(int n , int r[]){\r\n    if(r[n] != -1)\r\n        return r[n];\r\n\r\n    else {\r\n        r[n] = fiboNumOptzUty(n - 1 , r) + fiboNumOptzUty(n - 2 , r);\r\n        return r[n];\r\n    }\r\n}\r\nint fiboNumOptz(int n){   // Using Dynamic Programming   T.C -->    O(n)\r\n    int r[n + 1] = {0 , 1 , 1};\r\n\r\n    for(int i = 3; i <= n ; i++)\r\n        r[i] = -1;\r\n\r\n    return fiboNumOptzUty(n , r);\r\n    \r\n}\nint main(){\r\n cout<<fiboNumOptz(20);\n\r\nreturn 0;\r\n}", "likes": 0}}, {"topLevelComment": {"id": "UgwnotSSMGxHUnIF1wd4AaABAg", "publishedAt": "2022-01-18T00:28:59Z", "author": "Mobile Mobile", "text": "Came here after watching lecture from MIT about DP,  this video is super cool and it is inspiring to code DP problems. MIT's lecture was made by chalk on black board, boring and confusing. Man, you are better than MIT's professor !!!", "likes": 0}}, {"topLevelComment": {"id": "UgxlI_EpbezLlRHWgI14AaABAg", "publishedAt": "2022-01-17T18:52:25Z", "author": "Neil Bruce", "text": "Signed in to give my appreciation for all your hard work, and GREAT work, putting together this series. Easily the best teaching series on the subject I've seen. Only a few errors that are easily overlooked. Only issue I had was I was converting the problems into C++, but that's not a knock on the series, if anything, the fact that I was so easily able to convert your solutions to C++ is indicative of a thorough explanation of the problems rather than just coding examples. \n\nThanks! I wish you did more!", "likes": 8}, "replies": [{"id": "UgxlI_EpbezLlRHWgI14AaABAg.9XJONCJmFEp9epucvbull3", "publishedAt": "2022-08-17T15:29:08Z", "author": "Shambhav", "text": "Were you new to C++ or even programming in general, back then? Writing it in code is the easiest part, and on top of that, when you have a direct translation possible, it's even easier.", "likes": 0}]}, {"topLevelComment": {"id": "Ugx0NSlF4nRXRV_pp6t4AaABAg", "publishedAt": "2022-01-17T17:07:28Z", "author": "miss alita", "text": "this guy is a genius", "likes": 0}}, {"topLevelComment": {"id": "Ugy47vR9NvQ_tjnomD94AaABAg", "publishedAt": "2022-01-17T06:47:59Z", "author": "Tobal", "text": "In Spanish Wikipedia there is a pseudocode about Fibonacci numbers with O(log2(n)) order, it's based with mathematical demonstrations, without recursion or adding an artificial object. The only feature is maths. Here is a java code i've made, it's very easy to write it in other language:\npublic static int fibonacci(int n) {\n        int a, b, c, d, i, auxOne, auxTwo;\n\n        if (n <= 0) return 0;\n        i = n - 1;\n        auxOne = 0;\n        auxTwo = 1;\n        a = auxTwo;\n        b = auxOne;\n        c = auxOne;\n        d = auxTwo;\n        while (i > 0) {\n            if (i % 2 != 0) {\n                auxOne = d * b + c * a;\n                auxTwo = d * (b + a) + c * b;\n                a = auxOne;\n                b = auxTwo;\n            }\n            auxOne = c * c + d * d;\n            auxTwo = d * (2 * c + d);\n            c = auxOne;\n            d = auxTwo;\n            i /= 2;\n        }\n\n        return a + b;\n    }", "likes": 1}}, {"topLevelComment": {"id": "UgyZ07TMkO-XX_XFCTd4AaABAg", "publishedAt": "2022-01-17T03:03:38Z", "author": "shuai shuai", "text": "great video, love it!", "likes": 0}}, {"topLevelComment": {"id": "Ugzr9gKgaSCTeOtQUfh4AaABAg", "publishedAt": "2022-01-17T00:57:06Z", "author": "Kash Boy", "text": "I tried to implement the logic in Java/.. with numbers as ArrayList<Integer> and memo as HashMap<Integer, ArrayList<Integer>>... for BestSum(). the recursive logic is working fine but in memoized versions I am getting wrong value for last case.. it seems garbage ..something like [25, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 12, 5, 1, 2, 5, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 2, 5, 25, 1, 2,25]... In JS the same logic works...\nAt the end of my wits about this..", "likes": 0}}, {"topLevelComment": {"id": "UgyRN2B9EO8wY5z0CLx4AaABAg", "publishedAt": "2022-01-16T05:49:49Z", "author": "Edwin", "text": "Alvin you're the goat!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugy596335zdGJgoCWKp4AaABAg", "publishedAt": "2022-01-15T18:57:12Z", "author": "Osinakayah Ifeanyi", "text": "This is awesome", "likes": 0}}, {"topLevelComment": {"id": "UgwclChr0lUulmd0osJ4AaABAg", "publishedAt": "2022-01-15T09:21:39Z", "author": "Abhishek Aggarwal", "text": "For gridTraveller with memoization, shouldn't the space complexity be O(m*n) because our memo hash map will contain each cache for each cell of the grid?", "likes": 0}}, {"topLevelComment": {"id": "Ugyao1Mf_agZ8LM70E14AaABAg", "publishedAt": "2022-01-14T15:32:30Z", "author": "Ron ter Borg", "text": "At 48\n47:00, the most right node of the 3rd level should be (2,0).", "likes": 0}}, {"topLevelComment": {"id": "UgwDnZHRNvSyJ1z-Gy14AaABAg", "publishedAt": "2022-01-14T14:25:39Z", "author": "R H", "text": "Does javascript automatically handle index out of bound errors?\n\nIn the tabulation example @3:21:38 when i == n, wouldn't i+2 be out of bound?", "likes": 0}}, {"topLevelComment": {"id": "UgyUa82WfImh3jcrll94AaABAg", "publishedAt": "2022-01-14T10:54:04Z", "author": "R H", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "Ugx_BSvNugGCg6KQMNp4AaABAg", "publishedAt": "2022-01-14T03:46:35Z", "author": "Pablo Hernandez", "text": "1:45:44 I think the time complexity mentioned here is not correct, since it's based on thinking that the array copying operation will happen for every recursive call, which is not true. That operation will only happen once an array object has been returned, and since the only time you return an array object is when you've found a possible path, then you know every recursive call from that point onwards will be part of the early return, meaning it will return, at most, m times.\nSince the array copy operation is O(m) and it is done m times, this means that the additional running time cost of it would be O(m^2). If you plug that in the time complexity of the whole algorithm, you'll get O(n^m + m^2). You could leave it like that and argue that, for some values of m and n, the m^2 term will be higher than the n^m, but I'd simply drop the m^2, since those cases only happen for a few values, and it further simplifies the running time. \n\nThus, I think the correct running time should simply be O(n^m)", "likes": 0}}, {"topLevelComment": {"id": "UgzKbjpkMZ75lj3rsyB4AaABAg", "publishedAt": "2022-01-14T01:53:14Z", "author": "Amaury Permer", "text": "does const make memo accessible for every fib call that has no memo argument? i mean as far as I can see, memo is being created every fib call that has no memo and this wont work too well if I want the Fibonacci number 50, I tried to call fib.memo and its undefined, at the end I did it with a global array instead of an object.", "likes": 0}}, {"topLevelComment": {"id": "UgzCIoH45-FeJs4IxBV4AaABAg", "publishedAt": "2022-01-13T22:09:42Z", "author": "Uditi Chawla", "text": "Why do we measure time complexity by counting number of nodes at leaf level and not the total number of nodes in the tree since our recursive function has to travel to all the nodes?", "likes": 0}}, {"topLevelComment": {"id": "UgyTTAyjrMGhKWFPBtB4AaABAg", "publishedAt": "2022-01-13T21:18:58Z", "author": "varun aggarwal", "text": "thanx, you help me in understanding other big problems, I was scratching my head off.", "likes": 0}}, {"topLevelComment": {"id": "UgyQtVJNbt7sr2hvuJB4AaABAg", "publishedAt": "2022-01-13T17:09:28Z", "author": "Nikita Tolkachev", "text": "\u0421\u043f\u0430\u0441\u0438\u0431\u043e!", "likes": 0}}, {"topLevelComment": {"id": "UgxiqcmWRtVl7DbYjxl4AaABAg", "publishedAt": "2022-01-13T05:30:37Z", "author": "PeterParker", "text": "This man is the real deal. Protect him. Awesome course on DP", "likes": 0}}, {"topLevelComment": {"id": "Ugw35jRWHe2M3oDHhSN4AaABAg", "publishedAt": "2022-01-12T21:16:34Z", "author": "Nikita Tolkachev", "text": "QUESTION for this (https://youtu.be/oBt53YbR9Kk?t=11376) time space complexiy for allConstruct problem: can't figure out why memoized version has the same time complexity as without memoization. i thought that memoization has to reduce time complexity, because we skip parts of tree during traversal.", "likes": 0}}, {"topLevelComment": {"id": "UgyNSeDqY2tRrCHpNYt4AaABAg", "publishedAt": "2022-01-12T10:13:50Z", "author": "Surya's way of looking", "text": "Before starting this video, I am going to take a vow to complete this video by this week, Because many times I started watching a tutorial and left it in the half -- in the busy schedule at the university I was never able to complete any video that is longer than 3 hrs, But now in the sankranthi holidays I want to complete this video entirely...", "likes": 2}}, {"topLevelComment": {"id": "UgzqgVKwXawYO31FWop4AaABAg", "publishedAt": "2022-01-11T17:29:20Z", "author": "Omnifarious", "text": "1:21:00 - There is a quick way to get a false answer nearly immediately. Look at the gcd of all numbers less than the target. If that gcd is not a divisor of your target, then the answer is false. I suspect there may be a way to use algebra to come up with a fast answer to this problem that doesn't involve recursion or dynamic programming.", "likes": 1}}, {"topLevelComment": {"id": "UgzmFKrz2e9qDZD0DAV4AaABAg", "publishedAt": "2022-01-10T11:09:09Z", "author": "\u0410\u043d\u0434\u0440\u0435\u0439 \u0420\u0443\u0446\u043a\u043e\u0439", "text": "Huge memory overhead. Just don't use recursion. Use straightforward calculation for fib.", "likes": 0}}, {"topLevelComment": {"id": "UgygDWrQmEkpR4mIxMZ4AaABAg", "publishedAt": "2022-01-10T05:58:47Z", "author": "elwafi2001", "text": "Very good course", "likes": 0}}, {"topLevelComment": {"id": "Ugws-Bf4P87w2wXAjGB4AaABAg", "publishedAt": "2022-01-10T04:46:27Z", "author": "Roop G", "text": "Simply Beautiful", "likes": 0}}, {"topLevelComment": {"id": "UgzWsrM9YX2QgNo6GfV4AaABAg", "publishedAt": "2022-01-09T23:24:48Z", "author": "nikkhn", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugx82v3L2ySguW26xwF4AaABAg", "publishedAt": "2022-01-09T23:23:45Z", "author": "nikkhn", "text": "This is literally the best coding video tutorial I have ever seen. So slow, so methodical, so detailed. Thank you so, so much!", "likes": 0}}, {"topLevelComment": {"id": "Ugya7cXCmofX3DCUuoB4AaABAg", "publishedAt": "2022-01-09T22:41:29Z", "author": "iambadd", "text": "For fib tabulation, other languages than JS would not be happy if you're trying to edit the indices that are out of bounds, would a fix involve just a check if it's still within the array?", "likes": 0}}, {"topLevelComment": {"id": "UgzkCuG9Z25wLudi38l4AaABAg", "publishedAt": "2022-01-09T20:43:26Z", "author": "Ulrih Lebedev", "text": "What is a reason to return null or [] in the howSum function, instead of one of them, empty array for instance?\nFor c++ in this case we should use something like std::optional<std::vector<int>> for return type.", "likes": 0}}, {"topLevelComment": {"id": "Ugx6ni8XEgLQx6wVfst4AaABAg", "publishedAt": "2022-01-09T16:00:32Z", "author": "Guilherme Alves Silveira", "text": "Excellent course, the best i've found about dynamic programming.", "likes": 0}}, {"topLevelComment": {"id": "UgwS0R3HPdCZS6B85Qh4AaABAg", "publishedAt": "2022-01-09T15:56:34Z", "author": "Gaurav Sharma", "text": "Awesome .... Now I'm confident about DP", "likes": 0}}, {"topLevelComment": {"id": "UgwYL5Oa77LDRk71NNZ4AaABAg", "publishedAt": "2022-01-09T15:30:31Z", "author": "S.Prakash", "text": "Awesome tutorials...One doubt, how we can do memoization in python?...same like js or there is different way to initialize memo={ }?", "likes": 0}}, {"topLevelComment": {"id": "UgwNtQLC9fZpjh-c06V4AaABAg", "publishedAt": "2022-01-09T15:17:05Z", "author": "Ashish Joshi", "text": "Your ebook is super heavy.. not able to render it properly anywhere ( browser, phone, laptop, adobe ). please try to publish lighter version of it.Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgwhoycoAopPQz5Yfjp4AaABAg", "publishedAt": "2022-01-09T14:47:19Z", "author": "Javier Gonzalez Armas", "text": "Great video!!!", "likes": 0}}, {"topLevelComment": {"id": "UgyoTr3S6sOdoNaTPFx4AaABAg", "publishedAt": "2022-01-09T12:08:00Z", "author": "A 60 SYED AMER REHAN", "text": "Plz anyone help me with the above code in c++", "likes": 0}}, {"topLevelComment": {"id": "UgyCziQ0Xoh8aMG6Z8x4AaABAg", "publishedAt": "2022-01-09T08:52:55Z", "author": "Omnifarious", "text": "54:00 - The time complexity is exponential, but I think it might be only 2^max(m,n) because you prune the 0s.", "likes": 2}}, {"topLevelComment": {"id": "Ugw4WnC2CM4Xk7j1Rc94AaABAg", "publishedAt": "2022-01-09T03:05:41Z", "author": "Awais Nadeem", "text": "Thank you!", "likes": 0}}, {"topLevelComment": {"id": "Ugzq_7oo8mGA06FeXbN4AaABAg", "publishedAt": "2022-01-08T21:21:08Z", "author": "Muscle Hack", "text": "I think this is just as helpful for recusion as it is for dynamic programming", "likes": 0}}, {"topLevelComment": {"id": "Ugz1JYCiaKeYcHcCi8l4AaABAg", "publishedAt": "2022-01-08T16:29:13Z", "author": "Shir Ganot", "text": "At 1:46:35 , why the space complexity is not O(m+m!)=>o(m!)? the function is creating new array with a growing size -> 1,2,3,4...m for each iteration.", "likes": 0}}, {"topLevelComment": {"id": "UgxkMOSHRqGvGxoptH94AaABAg", "publishedAt": "2022-01-08T15:16:42Z", "author": "Peter Shepherd", "text": "53:06 I don't understand how the height is n + m.  In that example n + m (3+2) is equal to 5  but the height in the picture is 4. Can anyone explain?", "likes": 0}}, {"topLevelComment": {"id": "UgzFGFaAABs0KDFVkYR4AaABAg", "publishedAt": "2022-01-08T13:27:32Z", "author": "Avinna Shrestha", "text": "Tree is everything!!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugzv-HtOu9TWQZEDsSF4AaABAg", "publishedAt": "2022-01-08T12:48:19Z", "author": "P Z", "text": "Nit: In the canConstruct scenario, using startsWith should help reduce the time complexity compared to using target.indexOf method. PS: this tutorial is gold. First time being able to understand the memoization in DP. Looking forward to finishing the rest of the tutorial.", "likes": 3}, "replies": [{"id": "Ugzv-HtOu9TWQZEDsSF4AaABAg.9WwZYeMSzrs9WzkCSK6fQN", "publishedAt": "2022-01-09T18:27:52Z", "author": "xC4N0o", "text": "For Python users (as it took me a while to figure this out): startswith() returns a Bool, so dont forget to change the 0 in line 8 to True", "likes": 1}]}, {"topLevelComment": {"id": "UgxUt_3HTIe2TCVz47J4AaABAg", "publishedAt": "2022-01-07T23:14:51Z", "author": "Mr Tea", "text": "Excellent Course", "likes": 0}, "replies": [{"id": "UgxUt_3HTIe2TCVz47J4AaABAg.9Wv6SfYikht9Wv6Ul1-_sh", "publishedAt": "2022-01-07T23:15:08Z", "author": "Mr Tea", "text": "Excellent Course", "likes": 0}, {"id": "UgxUt_3HTIe2TCVz47J4AaABAg.9Wv6SfYikht9Wv6TljD5j_", "publishedAt": "2022-01-07T23:15:00Z", "author": "Mr Tea", "text": "Excellent Course", "likes": 0}]}, {"topLevelComment": {"id": "UgwHML_W1MamBg5Z9xR4AaABAg", "publishedAt": "2022-01-07T20:42:59Z", "author": "fboevere", "text": "I believe you can simplify the gridtraveller problem by returning 1 if either m or n == 1.. You don't have to go all the way down to 1,1.. Then the 0-case does not happen, given that the input parameters are >= 1)", "likes": 1}}, {"topLevelComment": {"id": "UgxT7SkrPPOdMjQ0usV4AaABAg", "publishedAt": "2022-01-07T14:21:23Z", "author": "Mohamad Cheaib", "text": "For the gridTraveler function, if we make an additional condition for the memo to get either the key or the reverse one, should it change the algorithm from the O(m*n) to O(n) for the time and  the space?\n-------------------\nCode to add:\n-------------------\nconst root = m + \",\" + n;\nconst reverseRoot = n + \",\" + m;\nif (root in memo) return memo[root];\nif (reverseRoot in memo) return memo[reverseRoot];", "likes": 1}}, {"topLevelComment": {"id": "UgwFlS4RWKG0KpB4tMB4AaABAg", "publishedAt": "2022-01-07T11:28:01Z", "author": "R\u00f3bert Nagy", "text": "q: in c++ the memo would be an std::set<int> ?", "likes": 0}, "replies": [{"id": "UgwFlS4RWKG0KpB4tMB4AaABAg.9WtqZ_6dgHc9WxOGU2Z4C7", "publishedAt": "2022-01-08T20:28:58Z", "author": "R\u00f3bert Nagy", "text": "@Kit oh okay thanks. so std::unordered_map maybe? I realised it can't be a set later, since it uses memo[targetsum] and you can't access member elements in a set like that in c++ lol", "likes": 0}, {"id": "UgwFlS4RWKG0KpB4tMB4AaABAg.9WtqZ_6dgHc9WxGJk7PiTf", "publishedAt": "2022-01-08T19:19:30Z", "author": "Kit", "text": "it should be some kind of hash map that maps the input (of the function) to output (True/False, etc)", "likes": 0}]}, {"topLevelComment": {"id": "Ugw1K7hZXWkg9YVrJZ94AaABAg", "publishedAt": "2022-01-07T06:54:41Z", "author": "Arnauld Van Muysewinkel", "text": "In the *Construct examples, what if we avoid the splice call, by adding an argument to the function (the index of the current position in the target string) ?\nWouldn't the time and space complexities by reduced by a factor m?", "likes": 0}}, {"topLevelComment": {"id": "UgxMUoSCH4mhy8yzU5d4AaABAg", "publishedAt": "2022-01-07T06:01:25Z", "author": "Anthony Muscio", "text": "When doing the 2D Grid traveler could it not be made faster at least for larger numbers by sorting the keys for example 2, 1 / 1, 2 first eg 1,2 and memoize only that?", "likes": 0}}, {"topLevelComment": {"id": "UgzcbPEo_EnThVufp8p4AaABAg", "publishedAt": "2022-01-07T04:36:59Z", "author": "Harshad Sharma", "text": "Alvin my man! Please make a tutorial about your sick PowerPoint skills and I promise to be your plus one for the top commenter's wedding.", "likes": 0}}, {"topLevelComment": {"id": "UgzGSsjxGTc86apQpa94AaABAg", "publishedAt": "2022-01-06T21:24:26Z", "author": "nihat sen", "text": "I really like your style of explaining things, awesome tutorial. I'm very tilted by the usage of IndexOf tho. Doesn't JS have startsWith? I know yeah premature optimization and all but that just looks like a wrong habit to me.", "likes": 0}}, {"topLevelComment": {"id": "UgxRm247vjCHNpmRetN4AaABAg", "publishedAt": "2022-01-06T21:18:05Z", "author": "Pupper Gump", "text": "I think that with the fib function, if you can do less operations in a for loop than you can with recursion, you should just use the for loop.", "likes": 0}}, {"topLevelComment": {"id": "UgzR_eaBKiKncPcqdzB4AaABAg", "publishedAt": "2022-01-06T19:58:35Z", "author": "Gamma_Draconis", "text": "Maybe this isn't relevant to the ideas this video is trying to convey, but it didn't even mention that fibonacci can be approached in such a way that the resulting method can have an O(1) space complexity. (keeping O(n) time complexity of course)\n\nIn C#, the code would look something like this:\n\npublic static int Fib(int n)\n{\n    if (n < 0) // Invalid input, throw an exception\n        throw new ArgumentOutOfRangeException(nameof(n));\n\n    int a = 0, b = 1;\n\n    for (int i = 0; i < n; ++i)\n    {\n        int tmp = a + b;\n\n        a = b;\n        b = tmp;\n    }\n\n    return a;\n}\n\nA tribute to other optimization nerds out there.", "likes": 0}}, {"topLevelComment": {"id": "UgxsEKiwKImaXGIYXXV4AaABAg", "publishedAt": "2022-01-06T14:11:24Z", "author": "Wide World", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgyvgYfaZMSFI8p99DN4AaABAg", "publishedAt": "2022-01-06T06:22:09Z", "author": "Radhika Manivannan", "text": "Who are you. Mind blowing explanation. Clear cut to the point, well orchestrated problems", "likes": 0}}, {"topLevelComment": {"id": "UgxwqAS3_h2mC5XsmbF4AaABAg", "publishedAt": "2022-01-05T19:26:40Z", "author": "Muscle Hack", "text": "Wow I feel like I should be paying for this. Amazing explanations the clearest explanation for DP I've ever watched and I've looked every where.", "likes": 0}}, {"topLevelComment": {"id": "UgxUHza8427nRWmx2FF4AaABAg", "publishedAt": "2022-01-04T22:51:10Z", "author": "Upvoted Reddit Entertainment", "text": "25:06 Looking for patterns\n30:00 solution", "likes": 0}}, {"topLevelComment": {"id": "UgygqfWYCM276dx0dJN4AaABAg", "publishedAt": "2022-01-04T21:16:00Z", "author": "Daniel Keller", "text": "Didn't watch the whole thing yet, and maybe the answer to my following question is just: \"Because this is about dynamic programming\", but can someone please explain to me, why the fib function wouldn't just be something along the lines of this (python code):\n\ndef fibCalc(n):\n\n     fib = [1,1]\n     for i in range(2,n):\n         fib.append(fib[i-1]+fib[i-2])\n\n     print(fib[n-1])", "likes": 1}, "replies": [{"id": "UgygqfWYCM276dx0dJN4AaABAg.9WnATYPY6vR9Wu5r9BHyA0", "publishedAt": "2022-01-07T13:50:21Z", "author": "Daniel Keller", "text": "okay, I guess this is tabulation and I should have just have kept watching... 3:11:00", "likes": 1}, {"id": "UgygqfWYCM276dx0dJN4AaABAg.9WnATYPY6vR9WnAXpVdPLG", "publishedAt": "2022-01-04T21:16:35Z", "author": "Daniel Keller", "text": "This would run in constant time, right?", "likes": 0}]}, {"topLevelComment": {"id": "Ugz_zqmbG15EMDy7NQV4AaABAg", "publishedAt": "2022-01-04T14:51:46Z", "author": "Dany", "text": "color theme: Monokai Pro (Filter Machine)", "likes": 1}}, {"topLevelComment": {"id": "UgyKzTRCC61W9qvOsmZ4AaABAg", "publishedAt": "2022-01-03T15:46:40Z", "author": "John Smith", "text": "You're a pleasure to follow.\nI'm currently into making audio plug-ins with another video... the pain... oh the pain!\nThe structure of a course is so important.\nhttps://www.youtube.com/watch?v=i_Iq4_Kd7Rc&t=1129s", "likes": 0}}, {"topLevelComment": {"id": "UgwzwKxIOTsgEpFFthl4AaABAg", "publishedAt": "2022-01-03T02:10:13Z", "author": "Affy 225", "text": "Amazing video! extremely intuitive teaching, thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgwR_sf6h42n2M-a3l54AaABAg", "publishedAt": "2022-01-03T01:36:52Z", "author": "Mohammad Azim", "text": "1:28:00 It makes zero sense to assignee mem a value before returning False at the end.", "likes": 0}}, {"topLevelComment": {"id": "UgzFAu7vPrT8OPXM9p94AaABAg", "publishedAt": "2022-01-02T21:40:29Z", "author": "Sungly", "text": "This is hands down the best crash course on dynamic programming. After struggling for so many hours on dp, I actually feel that I understand the logic and process for tackling dp problems now. Thank you for this amazing video!", "likes": 18}}, {"topLevelComment": {"id": "UgyahVGNqLYHRQhaB6J4AaABAg", "publishedAt": "2022-01-02T20:06:33Z", "author": "Mahesh Kumar", "text": "For the grid problem, we have to add another key to the memo object. In the video, only m,n is added but we can also add n,m to the memo object as the number of way for MN and NM are same.", "likes": 0}}, {"topLevelComment": {"id": "Ugy_AveoP23Aa9MOump4AaABAg", "publishedAt": "2022-01-02T17:18:37Z", "author": "jursamaj", "text": "Having watched the fibonacci section so far, a few of points:\n\n1.  \"Linear\" is pronounced 'lihn-ee-er, not lih-'near.  This is a common English word, not computer jargon.\n\n2.  If I understand correctly, you are only memoizing within each top-level call.  Each such call starts over.  But if your program is going to use a lot of fib numbers, you might as well cache them permanently.\n\n3.  Ultimately, you want to get away from recursion is at all possible.  In general, any recursive program can be re-arranged into an iterative one.  Fib is trivial to transform:\nfib(n):\n    a = b = 1\n    i = 2\n    while i++<n\n        (a,b) = (b,a+b)\n    return b\n\nThis form can also be memoized for efficiency if you're going to be calling it a lot.  In that case, you'd only build the new values from the highest prior call up to the new call.", "likes": 0}, "replies": [{"id": "Ugy_AveoP23Aa9MOump4AaABAg.9Whai7U6Dvl9WjIfDJEwMl", "publishedAt": "2022-01-03T09:10:41Z", "author": "jursamaj", "text": "bestSum can be reduced to a purely iterative function, using 2 parallel arrays of size 'target'.  It iterates over the target-sized arrays, and over the array of candidates for each of those, yielding O(n*m) time and O(n) space.  Again we see that the real lesson is *DON'T RECURSE.*  Recursion is an elegant way to state a problem, but it is never necessary, and alway results in too much time & space.\n\nI watched the canConstruct part, and it suffers the same problem.  So I skipped the countConstruct & allConstruct parts, as they no doubt suffer so as well.  *Finally,* 3 hours into a 5 hour lesson, Alvin starts teaching the iterative methods.  Even there, he makes the bizarre choice of adding forward to the next 2 positions, instead of adding the 2 prior positions.  This is bizarre for 2 reasons: the value in position 1 is already set, so it makes no sense to add anything to it (even if that thing is 0); and it introduces the array bounds problem.  Doing the look-back method avoids both of those issue, and removes the need to preset the table to all 0, since you never need to access any value before setting it anyway.\n\nOf course, my above method avoids even creating a table.  Likewise, my solution for gridTraveler avoids the table with a simple calculation.\n\nMy overall opinion of this lesson is 'not that good'.  It spends a lot of time getting really proficient at sub-optimal algorithms, instead of really thinking about the problem.", "likes": 0}, {"id": "Ugy_AveoP23Aa9MOump4AaABAg.9Whai7U6Dvl9WhfD6sKqka", "publishedAt": "2022-01-02T17:57:56Z", "author": "jursamaj", "text": "GridTraveler:\n\nThe real base cases are any (m,n) where m=1 or n=1.  All such single row or single column grids have only 1 path: going straight along that row/column.  If m=1, then you have n-1 right moves, else if n=1, then you have m-1 down moves.\n\nBut again, the best option is to get away from recursion.  In the beginning, when explaining the 2*3 grid, you pointed out that you are going to do 1 down move and 2 right moves, in any order.  Well, the total number of ways to partition those up is a well-known problem.  So much so that mathematicians gave it a special name and symbol: it's called N Choose K, or the binomial coefficient.\n\nFor gridTraveler(m,n), you have m-1 downs and n-1 rights.  You are looking for the number of partitions of m+n-2 choose m-1 (alternately, m+n-2 choose n-1, the result is the same).  The formula is (m+n-2)!/(m-1)!(n-1)!.  This makes the space & time complexity both close to O(1).\n\nNow, you can memoize the factorial calls, if that will save significant time.  But that will be fine-tuning, in comparison to the major benefit of getting away from recursion.", "likes": 0}]}, {"topLevelComment": {"id": "Ugx88UmhlKz6CIymSAN4AaABAg", "publishedAt": "2022-01-01T13:47:07Z", "author": "Mangaluli", "text": "for bestSum we can use the old howSum code and just sort the numbers list from high to low at the beginning of the function", "likes": 0}}, {"topLevelComment": {"id": "UgzEBs7e2ZFpyZM8q_J4AaABAg", "publishedAt": "2022-01-01T11:23:26Z", "author": "Mohamed Bourguiba", "text": "In the Grid Traveler problem, if we reduce the recursive tree and hit a node where one of the dimension is 1, isn't this already a base case why shouldn't we consider m=1 AND n=1 instead of m=1 OR n=1? In a (5,1) or (1,100) grid there is always one way to travel along the dimension where it is not 1, so logically we should return 1 without further branching", "likes": 3}, "replies": [{"id": "UgzEBs7e2ZFpyZM8q_J4AaABAg.9WeOGjWnMEo9e3jZR6StnX", "publishedAt": "2022-07-29T13:09:37Z", "author": "p00ri", "text": "@koundinya poluri Instead of memoizing (n,m), we could even just check key = n + ',' + m as well to keep space complexity low", "likes": 0}, {"id": "UgzEBs7e2ZFpyZM8q_J4AaABAg.9WeOGjWnMEo9dsWiQSNIM8", "publishedAt": "2022-07-24T19:17:46Z", "author": "koundinya poluri", "text": "Agreed. Also shouldnt we also memoize (n,m) after we calculated memo[m,n]? Wouldnt that speed up things as well?", "likes": 1}, {"id": "UgzEBs7e2ZFpyZM8q_J4AaABAg.9WeOGjWnMEo9Wht3PnKh-z", "publishedAt": "2022-01-02T19:58:57Z", "author": "Mahesh Kumar", "text": "Agree", "likes": 0}]}, {"topLevelComment": {"id": "Ugw7kg7Y-stAeUdkw-d4AaABAg", "publishedAt": "2022-01-01T08:48:20Z", "author": "Superman Sanan", "text": "For the grid traveler problem, if either of the arguments is 1 you can simply return 1", "likes": 2}, "replies": [{"id": "Ugw7kg7Y-stAeUdkw-d4AaABAg.9We6Wpe_gA-9WjNV_ztIEq", "publishedAt": "2022-01-03T09:52:55Z", "author": "Colin Brown", "text": "Yeah you can just write: if (n == 1 || m == 1) return 1;", "likes": 0}]}, {"topLevelComment": {"id": "UgwVXbbSd3Uq2w5m9BF4AaABAg", "publishedAt": "2021-12-31T12:21:17Z", "author": "Alakh Bhatt", "text": "What is the best way to think for a recursive solution?", "likes": 0}}, {"topLevelComment": {"id": "UgxMDQbIAQSzbwdk4xR4AaABAg", "publishedAt": "2021-12-31T09:52:38Z", "author": "AnimeWheel", "text": "Hey Alvin you are invited to my wedding.", "likes": 0}}, {"topLevelComment": {"id": "UgwPAXpfxRO5FMZoOzp4AaABAg", "publishedAt": "2021-12-30T23:42:49Z", "author": "Rizuken Nekuzir", "text": "For the code at 3:21:34\n\nWhy when you told the program to add values at an index out of bounds did the program not crash? I remember when you just went over it you said there would be a check to make sure you werent going out of bounds but I don't see it in your code. Is js just able to handle that better than the c languages?", "likes": 1}}, {"topLevelComment": {"id": "UgwD8MLrZCZtm3mrWkF4AaABAg", "publishedAt": "2021-12-30T21:27:58Z", "author": "Csaba Cz\u00edmer", "text": "Your presentation is excellent, must have been a lot of work.\nHowever, I am afraid that you lose the knowledgeable part of your audience at the first example. You solve a trivial thing in O(2^n) steps, which can be solved in O(n) steps if you know loops and not completely idiot.\nMoreover, with a bit of math it can be done in O(1) time: \nLet s be sqrt(5), then fib(n) = (((1 + s) / 2)^n - ((1 - s)/2)^n) / s \n(we learned it in the grammar school)", "likes": 0}}, {"topLevelComment": {"id": "Ugyng1EvIlOwCb2WMQZ4AaABAg", "publishedAt": "2021-12-30T18:43:57Z", "author": "OldGameAcc", "text": "sfx killed this for me (", "likes": 0}}, {"topLevelComment": {"id": "UgzuuDAXxg0D2OZ6Sed4AaABAg", "publishedAt": "2021-12-30T15:35:06Z", "author": "crazydescent", "text": "One hour in, this is so good. Every time I hear memoization it just feels like someone mispronounced memorization though, kinda triggering lol", "likes": 0}}, {"topLevelComment": {"id": "Ugxk4NyJsCutHL-Vu4x4AaABAg", "publishedAt": "2021-12-30T11:35:53Z", "author": "Darren Rose", "text": "Very good tutorial. Just to add if either m is 1 or n is 1 then the possible grid traveller routes would be 1", "likes": 0}}, {"topLevelComment": {"id": "Ugz6gXHCBGJQSuOAh3h4AaABAg", "publishedAt": "2021-12-29T15:36:21Z", "author": "Mykhailo Kovalyk", "text": "At https://youtu.be/oBt53YbR9Kk?t=3358 you mentioned that gridTraveler(a,b) = gridTraveler(b,a), but in code https://youtu.be/oBt53YbR9Kk?t=3662- there was no check for that i.e\nconst key = m + ',' + n; what about n+ m? Or did I miss something?", "likes": 1}}, {"topLevelComment": {"id": "UgwRbOkrWLFjsnT7-9x4AaABAg", "publishedAt": "2021-12-29T09:10:11Z", "author": "Davar", "text": "Simply brilliant. I very much enjoyed watching the whole video. The flow and the way the concepts were explained were fantastic.", "likes": 0}}, {"topLevelComment": {"id": "UgzVPKbewHUNLjt8GXF4AaABAg", "publishedAt": "2021-12-29T08:14:08Z", "author": "ba fucrypto", "text": "this content is gold , seriously top notch explanation about a complex object where visualization makes all the difference. pro tip 1.5 - 2 speed", "likes": 0}}, {"topLevelComment": {"id": "Ugy1ZeemnzTihsC5TFN4AaABAg", "publishedAt": "2021-12-28T10:47:05Z", "author": "lulusaikou", "text": "Thanks a lot Alvin! Looking forward more courses from you\u2764", "likes": 0}}, {"topLevelComment": {"id": "UgxZCd6HRDOOb7N1IhB4AaABAg", "publishedAt": "2021-12-27T22:45:53Z", "author": "Szilveszter S\u00e1f\u00e1r", "text": "Another thing to note. I actually like memoization better than tabulation, because it only calculates the values that are necessary. Just imagine that instead of canSum(7, [5, 3, 4]) you ask the question: canSum(7000000, [5000000, 3000000, 4000000]) - same but scaled up by a million. With memoization, it's going to do the same few steps to find the solution, but with tabulation it is actually going to fill in a table with 7 million elements!", "likes": 0}}, {"topLevelComment": {"id": "UgyJazvVrEwZfVCI4q14AaABAg", "publishedAt": "2021-12-27T22:30:43Z", "author": "Szilveszter S\u00e1f\u00e1r", "text": "Fantastic and very thorough! One thing I don't understand: when you switch to tabulation, why do you introduce a totally new way of calculating the result? For example, the Fibonacci definition says F(n) = F(n-1) + F(n-2), so why not use that while filling the table? Just start by setting the first two values 1, 1 (or 0, 1 if you start from index 0) and apply the definition for each index >= 2. There's no need to figure out a new way, like adding the current number to the next two numbers - that's two additions per cycle instead of one. Same for the grid traveler, just use G(x, y) = G(x-1, y) + G(x, y-1) and start by filling the first row/column with 1s. Oh, and you can skip the bounds checking as well.", "likes": 1}}, {"topLevelComment": {"id": "Ugx6fK5zgxaVY0euemV4AaABAg", "publishedAt": "2021-12-26T23:22:40Z", "author": "Green Crypto", "text": "In the grid traveler, you should point out that the calculation is symmetric, i.e. gridTraveler(m,n) = gridTraveler(n,m) and therefore you should store both m,n and n,m once one of them is calculated!", "likes": 3}, "replies": [{"id": "Ugx6fK5zgxaVY0euemV4AaABAg.9WRDoQMefqR9W_uqygCvLI", "publishedAt": "2021-12-30T17:40:40Z", "author": "Green Crypto", "text": "@crazydescent eh no, the key cannot be m+n because youd get collisions (as mentioned in the video) with eg 42,3 and 4,23", "likes": 0}, {"id": "Ugx6fK5zgxaVY0euemV4AaABAg.9WRDoQMefqR9W_gNg8hudk", "publishedAt": "2021-12-30T15:34:12Z", "author": "crazydescent", "text": "That was pointed out. Also, the key is m+n, there is no extra memo key for  n+m, so there is no duplication happening.", "likes": 0}]}, {"topLevelComment": {"id": "UgwAVMnp2dQowGD1g7p4AaABAg", "publishedAt": "2021-12-26T20:13:18Z", "author": "Hemant Dhiman", "text": "Man ur dynamic programming explanation is just awesome \ud83d\udd25", "likes": 0}}, {"topLevelComment": {"id": "UgwrTsQ-JIRctmNQQ8R4AaABAg", "publishedAt": "2021-12-26T16:27:28Z", "author": "Sarainia Angelsong", "text": "I've watched the 1st 15 mins of this, um how about this, instead of making the trees and all those small numbers why not set a Counter=1, Value1=1 and Value2=1, then Value3=Value1+Value2 then use that input and replace Value1, then next round change Value2 then Value1 then Value2 going back and forth, there would be no trees and no crazy amount of numbers to calculate, I see this as a pendulum visually the rocking between Value1 and Value2 visually like a Grandfather Clock will solve Fibonacci sequence given our initial 2 seed values that we know which is 1 and 1, If Counter=1 then change Value1, and Counter+=1, if Counter=2 then change Value2, and Counter-=1, where each step the Value3 which is the sum of the 1st 2 Values replaces that Value on that step, because the values always replace there is no trees needed and you can directly print 1 1 and the sum which will be (2) and then each step always printing out the next sum so 2 1 will be (3) next then 2 3 will be (5) next and as long as you print it out you won't lose numbers, and as a human all you have to remember is if you wanted to find out the 1000th number is, just instead type in 998, cuz of the initial 1 1 in the beginning and you will find the 1000th number easily. The only reason why this model I described works is because it's summing 2 values and replacing the correct one, but I don't think my approach would work for something that will require \"True\" recursion, as in something that the steps cannot be directed added and replaced. In fact the pendulum aka Grandfather Clock can really just solve a small subset of number sequences and usually the seed numbers have to be altered, sometimes the Middle position the point it passes from all the way Left to all the way Right can be a 3rd value to change along the way. Anyways what a piece of hardware to have sitting at home lols xD people would ask hey what is the time, and you will be sitting at the table eating saying... Oh that thing does not calculate time it calculates Fibonacci or whatever simple added sums sequences. Then they look at their smart phone and see the real time xD anyways back to watching the rest of the video now which is 5 hours minus 5 mins still xD lols.", "likes": 0}}, {"topLevelComment": {"id": "Ugy82Flzd-Z8UVFaZHJ4AaABAg", "publishedAt": "2021-12-26T07:08:39Z", "author": "aleem ahmed", "text": "in the gridtravelor problem arent you also supposed to store a key for n.m not just m,n?", "likes": 0}}, {"topLevelComment": {"id": "UgyFXi1Dw0K4GvIUhmB4AaABAg", "publishedAt": "2021-12-26T04:36:40Z", "author": "Observed", "text": "This is so good.", "likes": 0}}, {"topLevelComment": {"id": "UgysOx-9T_2iDIQtH-x4AaABAg", "publishedAt": "2021-12-25T21:12:57Z", "author": "Jr", "text": "pot was potent", "likes": 0}}, {"topLevelComment": {"id": "UgzSIQaPKN3ckzKEgON4AaABAg", "publishedAt": "2021-12-25T18:55:51Z", "author": "Kamal Rathod", "text": "In gridTravel problem, if there is a single row or column then the number of ways to reach 1,1 will be one. So instead we can have condition if(m ==1 || n==1).", "likes": 0}}, {"topLevelComment": {"id": "Ugz65H2PyyRams1iG8B4AaABAg", "publishedAt": "2021-12-25T16:29:02Z", "author": "Amitava Mitra", "text": "Absolutely amazing course from a maestro. Alvin, Sir, thanks! \nJust one question as of now. \ncanSum(7,[2,3]) should we not return false?", "likes": 0}, "replies": [{"id": "Ugz65H2PyyRams1iG8B4AaABAg.9WNufuP7SL69X0dE9KPGmG", "publishedAt": "2022-01-10T12:05:25Z", "author": "fboevere", "text": "Elements may be reused, so 2, 2, 3 is valid", "likes": 1}]}, {"topLevelComment": {"id": "UgwB5K-CubT6SQFdQBZ4AaABAg", "publishedAt": "2021-12-25T16:26:29Z", "author": "Mir Mohamed Ullah", "text": "Excellent way to explain how to calculate complexities (time & space) along with nice examples. I wish I have some use cases for tabulation and memoize techniques. Thanks Man! for the crystal clear video.", "likes": 0}}, {"topLevelComment": {"id": "Ugz8cRI07aid5kv14EF4AaABAg", "publishedAt": "2021-12-25T13:56:24Z", "author": "\u5085\u76ca\u5a34", "text": "so inspired by your tutorial !And  can i ask you how to make a dynamic demonstration like this? It would  help me soooo much if you give me some advice!", "likes": 0}}, {"topLevelComment": {"id": "UgxpNHtBu-bF7ugNizR4AaABAg", "publishedAt": "2021-12-25T06:05:26Z", "author": "Lagunarajan Thangarajah", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugzf_AfNz0J1ZgPoc4R4AaABAg", "publishedAt": "2021-12-24T03:54:38Z", "author": "munkith abid", "text": "How come the observation he made in the second problem, namely, gridTraveler, regarding the order of the inputs (m, n)doesn't matter wasn't implemented? Something like this:\n\nkey1 = m + ','  + n;\nkey2 = n + ',' + m;\nmemo[key1] =  memo[key2] = ......;", "likes": 0}}, {"topLevelComment": {"id": "UgyyaS-n7ycZxX0YO6R4AaABAg", "publishedAt": "2021-12-24T03:09:26Z", "author": "Kedi", "text": "I have so-far completed 2hrs - Who wants to give me a Google referral ?", "likes": 0}}, {"topLevelComment": {"id": "UgzCA4AG8VTZk6NAs2V4AaABAg", "publishedAt": "2021-12-24T01:41:26Z", "author": "ExpansiveGymnast10", "text": "This man just advanced society by 100 years with this class.", "likes": 0}}, {"topLevelComment": {"id": "UgwVx_LKY6DQ1PntPaR4AaABAg", "publishedAt": "2021-12-23T22:51:41Z", "author": "Avi Patel", "text": "Wouldn't the space complexity for the second problem (the one about unique paths) be O(n*m) since our hashmap would contain all the values", "likes": 0}}, {"topLevelComment": {"id": "UgzyolEcGn7ONwGbdWR4AaABAg", "publishedAt": "2021-12-23T14:53:32Z", "author": "Dextrose Official", "text": "Why don't we iterate instead of recursing in case of such solutions?", "likes": 0}}, {"topLevelComment": {"id": "UgzRqh1e70JCybIVR5F4AaABAg", "publishedAt": "2021-12-23T14:33:57Z", "author": "Frank Ezendam", "text": "Hi Alvin,\n\nWhat an exceptional teacher you are! The way you explain and structure the subjects is awesome! Learned a lot. Thank you very much.", "likes": 1}}, {"topLevelComment": {"id": "Ugz4vh9iw-hfZ3ipQ3h4AaABAg", "publishedAt": "2021-12-23T11:22:30Z", "author": "tech cheatsheet tutorial", "text": "the teacher teaching is amazing.", "likes": 0}}, {"topLevelComment": {"id": "UgzDG4S_5_uP9oXmNrF4AaABAg", "publishedAt": "2021-12-23T01:59:55Z", "author": "Chang James", "text": "I don't understand why 3:00:50 is a callback function. Can anyone address this a little bit? Thanks.", "likes": 1}}, {"topLevelComment": {"id": "UgyCqqup8k5WujX0eXB4AaABAg", "publishedAt": "2021-12-22T20:49:42Z", "author": "Raj Jada", "text": "There is a bug in the BestSum approach because When I give multiple inputs, it takes arguments even from the previous input ad returns that element. Here's my code:\n\nEnter target sum:460\r\n60 80 200 5\r\n[200, 200, 60]\r\nEnter target sum:495\r\n5 20 25 45 90 54\r\n[200, 200, 90, 5]\n\n\nI did not mention 200 in my last array elements in the above example. It returned the element from the previous output.", "likes": 0}}, {"topLevelComment": {"id": "UgwSHttXAJQKXvw4Yll4AaABAg", "publishedAt": "2021-12-20T20:34:29Z", "author": "Arshad Shaik", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgyxyrEJg8M0RMEd23l4AaABAg", "publishedAt": "2021-12-20T13:46:48Z", "author": "Ruben Sinu Kurian", "text": "i have a doubt in the first problem regarding memoization , is the space for the 'memo' object not counted while counting space complexity?", "likes": 0}}, {"topLevelComment": {"id": "UgwVxVvXJqI11bOTIdt4AaABAg", "publishedAt": "2021-12-20T09:42:34Z", "author": "Renuka deshpande", "text": "Pls help me out with this code", "likes": 0}}, {"topLevelComment": {"id": "UgwXNZi-3LOU0-sa17V4AaABAg", "publishedAt": "2021-12-20T09:42:16Z", "author": "Renuka deshpande", "text": "Consider the following situation - In a building there can be N number of floors, to reach on a particular floor we just have stair case. if floor number is even then there would be 10*2+no of floor steps in stair case, if floor number is odd then there would 10*2+10+1 steps. Only floor number 6 is such a floor which has 22 steps. If building has 12 floor, write a program which would help you to find out how many steps would be required to reach any floor.\n\nSample Input 1 :- 5                                 Sample Output 1 :- 139\n  Sample Input 2 :- 10                               Sample Output 2 :- 281", "likes": 0}}, {"topLevelComment": {"id": "Ugzd058jnVnhyLAZKwR4AaABAg", "publishedAt": "2021-12-18T21:47:41Z", "author": "Im Mythic", "text": "Bro i've watched a ton of your videos lately! You have shown me a whole new world! I love you mate! Merry Christmas \u2665", "likes": 0}}, {"topLevelComment": {"id": "Ugy9vQhesy0HoSRfIKd4AaABAg", "publishedAt": "2021-12-18T21:13:17Z", "author": "FamousCloud", "text": "Bless your heart kind sir. This is gold", "likes": 0}}, {"topLevelComment": {"id": "Ugxv07WhOa0lE3TPfu14AaABAg", "publishedAt": "2021-12-18T20:27:38Z", "author": "Mihaela Costea", "text": "what programming language is this video using?", "likes": 0}}, {"topLevelComment": {"id": "UgzXln2B5BvapGFyQAB4AaABAg", "publishedAt": "2021-12-18T12:00:48Z", "author": "Aniketh Deshpande", "text": "this tutorial is super cool!", "likes": 0}}, {"topLevelComment": {"id": "UgzRAhsgBlNWkL3GYWF4AaABAg", "publishedAt": "2021-12-18T11:17:19Z", "author": "Arif Luthfi", "text": "Golden! Thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgzNMbci8u9QTAnZkbp4AaABAg", "publishedAt": "2021-12-18T07:53:53Z", "author": "Ozzy Demir", "text": "1:28:18: I don't think we need to save the result true into the memo", "likes": 0}}, {"topLevelComment": {"id": "Ugzn_V-kqXleFn55p0B4AaABAg", "publishedAt": "2021-12-16T21:10:25Z", "author": "Overcomer Idemudia", "text": "Great lesson so far. However, canSum(300, [2, 4, 3]) returns true.", "likes": 0}}, {"topLevelComment": {"id": "Ugwvsb0lPCj-Nyj2JuV4AaABAg", "publishedAt": "2021-12-16T18:30:02Z", "author": "Jack", "text": "Yea, I don't understand Javascript yet, so  I will come back when I do.", "likes": 0}}, {"topLevelComment": {"id": "UgxEPXcJJDDm7shuXrh4AaABAg", "publishedAt": "2021-12-16T16:30:09Z", "author": "Shaurya Singh", "text": "The day I get my first salary, I'll donate it to free code camp! THis is pure gold", "likes": 0}}, {"topLevelComment": {"id": "UgwHd2VtKIPsQOwxzk14AaABAg", "publishedAt": "2021-12-16T08:47:49Z", "author": "Melissa Ng", "text": "Hi there, just to make sure that I get this right, memoisation is recursion but with us passing on an additional dict each time to ensure that we don't calculate the same \"subtree\" twice. Now in that case, if we need to do multiple calls of the function in our main program, wouldn't it be even faster if we declared a global dict instead of creating a new dict each time that the function is called, and passing it through reference?", "likes": 0}}, {"topLevelComment": {"id": "Ugw4EkajVIXdPlfHSLd4AaABAg", "publishedAt": "2021-12-16T08:31:57Z", "author": "Tytus Gierycz", "text": "I'm now at the last exercise and be the look of all material this is a way to learn algorithms. With pictures animations and explanations.", "likes": 0}}, {"topLevelComment": {"id": "UgweTYyEmT7RkTfL1Ft4AaABAg", "publishedAt": "2021-12-15T11:43:06Z", "author": "Rastislav Svoboda", "text": "technically for Fibonacci should be F0 = 0, F1 = 1; it is defined as 0, 1, 1, 2, 3, 5 ,... https://en.wikipedia.org/wiki/Fibonacci_number\nbut this tutorial is great!\nthanks for sharing", "likes": 0}, "replies": [{"id": "UgweTYyEmT7RkTfL1Ft4AaABAg.9Vye-w43VWP9WT23KJuDPg", "publishedAt": "2021-12-27T16:18:28Z", "author": "Rastislav Svoboda", "text": "later in fib tabulation you have it ok ;-)", "likes": 0}]}, {"topLevelComment": {"id": "UgyF-1ZLMm_S7D6U0jd4AaABAg", "publishedAt": "2021-12-15T10:50:42Z", "author": "idk", "text": "A Perfect Tutorial, explains about Dynamic programming in depth!!", "likes": 0}}, {"topLevelComment": {"id": "UgxoX3hPwQwY866zsGR4AaABAg", "publishedAt": "2021-12-15T03:14:07Z", "author": "Xi Chen", "text": "For the bestSum memoization, it is clearly an equivalent problem as Coin Change on Leetcode, but instead it is asking to return the shortest array size instead. Anyone know how to do that with the same exact memoization technique?", "likes": 0}}, {"topLevelComment": {"id": "UgzNECUUuDnjBMcc2hB4AaABAg", "publishedAt": "2021-12-15T01:39:47Z", "author": "Tarek Mamdouh", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "UgynZ9N0ZU_PmiSwsJp4AaABAg", "publishedAt": "2021-12-14T22:17:47Z", "author": "Will", "text": "Amazing video! Alvin's approach of building up the same problems is a great way to learn these 2 DP approaches. I'm glad I came across this and that it's free!", "likes": 0}}, {"topLevelComment": {"id": "UgxpGkggS9G7NOh0YWJ4AaABAg", "publishedAt": "2021-12-14T04:20:39Z", "author": "FAI", "text": "Is this with Java?", "likes": 0}}, {"topLevelComment": {"id": "UgzsfXhrcQUypWtsbt54AaABAg", "publishedAt": "2021-12-13T23:54:20Z", "author": "Marius Andrie\u0219", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "UgzmxtJomQG67frLNEx4AaABAg", "publishedAt": "2021-12-13T15:59:23Z", "author": "Shubham Yadav", "text": "why at 4:05:59 in test case  [5,3,4,7] where sum 7 is required, single [7] is not printed in the output?", "likes": 0}, "replies": [{"id": "UgzmxtJomQG67frLNEx4AaABAg.9VtxkKaLlUR9VyI9Ls3_zR", "publishedAt": "2021-12-15T08:23:24Z", "author": "Mahmoud Abaza", "text": "because it got removed at the loop when reaching 3 in the table, then reaching 4 removes the array that starts with 3 and replace it with [4,3], bestSum later solves it. at 4:08:37", "likes": 0}]}, {"topLevelComment": {"id": "Ugwc3Q9IClRBCtylzmt4AaABAg", "publishedAt": "2021-12-13T15:49:46Z", "author": "Shubham Yadav", "text": "in how sum tabulation at 4:03:24, if you get(2,5) for 7 and then (3,4) for 7 then how do you stop (4,3) combination to put in the final answer ?", "likes": 0}}, {"topLevelComment": {"id": "UgyFzS4Z3KkEzMj2j1Z4AaABAg", "publishedAt": "2021-12-13T14:51:22Z", "author": "Saeed Uchiha", "text": "What language is used for the examples in this tutorial?", "likes": 0}}, {"topLevelComment": {"id": "UgzSDDbtjNreFOOJq9V4AaABAg", "publishedAt": "2021-12-12T15:06:39Z", "author": "Himanshu Rawat", "text": "Previously I used to skip all DP questions because I found it difficult to understand and now after finishing your tutorial on DP I search questions related to DP. \nTanks a lot.", "likes": 1}}, {"topLevelComment": {"id": "UgwR2C2iJ9BbMkkM_ep4AaABAg", "publishedAt": "2021-12-12T14:24:45Z", "author": "Robert", "text": "how can i transform the canSum function into a function that counts the number of ways that i can add up to a certain sum? anyone knows?", "likes": 0}}, {"topLevelComment": {"id": "UgyIQwsoCVsWjEwo92x4AaABAg", "publishedAt": "2021-12-10T21:06:43Z", "author": "Steve Sanders", "text": "I understand this as best as I can with my current knowledge.  I know there is a deeper level here that I am missing because I literally just started learning to program, and I'm learning python.  What would be a good video(s) to watch to get me to where I can utilize this.  Bonus points if in a python context.   Look forward to the comments and coming back to this when I'm ready.", "likes": 0}}, {"topLevelComment": {"id": "UgyYUzEgqz0ftukN3-l4AaABAg", "publishedAt": "2021-12-10T19:28:31Z", "author": "Kith Stack", "text": "i just fired my professor. i think he's watchin the vid ryt now....hahah", "likes": 0}}, {"topLevelComment": {"id": "UgyFf05OmQkDegcYNHd4AaABAg", "publishedAt": "2021-12-10T07:25:07Z", "author": "Akarsh Paliwal", "text": "Hey any one knows how we can code howsum tabulation in cpp. Please help!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugz-vJzZrnystOqnvMl4AaABAg", "publishedAt": "2021-12-09T17:04:42Z", "author": "Lester Dale", "text": "Not quite sure how the numbers are push into an array in line 7 of the howSum solution, can someone explain a bit more", "likes": 0}}, {"topLevelComment": {"id": "UgwuJ-EAHfvm0gja7-54AaABAg", "publishedAt": "2021-12-07T22:13:29Z", "author": "Zainab Udaipur", "text": "This is very concise and we'll explained...I was freaked out by graph and dp and both the videos are awesome could not find a clearer version than this", "likes": 0}}, {"topLevelComment": {"id": "UgxU7UHpM8iulZ6rezB4AaABAg", "publishedAt": "2021-12-07T21:42:33Z", "author": "Andrew Kim", "text": "alvin is really good at explaining things clearly and friendly", "likes": 0}, "replies": [{"id": "UgxU7UHpM8iulZ6rezB4AaABAg.9Vf7FQpBXi79VfU4VBgIyC", "publishedAt": "2021-12-08T01:02:02Z", "author": "Andrew Kim", "text": "i'm still here...", "likes": 0}]}, {"topLevelComment": {"id": "UgwexRLJDwiMskUwBUN4AaABAg", "publishedAt": "2021-12-06T22:34:27Z", "author": "Johannes Becker", "text": "Im sure others have pointed this out already:\nAt 20:55 the claim is made that O(2^n) = O(2^(n/2)), but this is incorrect. If it were correct, there had to be a constant c such that c2^(n/2) >= 2^n (by definition of big-O notation), but no such constant can exist.", "likes": 0}}, {"topLevelComment": {"id": "UgwBoxg7gjefypPmoPd4AaABAg", "publishedAt": "2021-12-06T08:55:25Z", "author": "Tytus Gierycz", "text": "Recursion is so difficult to debug have to be careful of memo object mutation during branching in Java.", "likes": 0}}, {"topLevelComment": {"id": "Ugx7z2yH_WjFmHzlNpV4AaABAg", "publishedAt": "2021-12-06T01:36:53Z", "author": "Michi L.", "text": "bookmark: 2:12:48", "likes": 0}}, {"topLevelComment": {"id": "Ugx1UuJa8dX_IS2HBk14AaABAg", "publishedAt": "2021-12-05T16:21:56Z", "author": "kailash khadka", "text": "Thank you for this awesome tutorial.\n3:21:07  at line 6 why was there no \"array index out of range\"?", "likes": 0}}, {"topLevelComment": {"id": "UgxNM9NO0TKwFTsF2Mt4AaABAg", "publishedAt": "2021-12-05T03:41:54Z", "author": "rodrigo reyes", "text": "best topic but very hard lol", "likes": 0}}, {"topLevelComment": {"id": "UgySNJqfdWG1b6Jc8dh4AaABAg", "publishedAt": "2021-12-04T18:17:37Z", "author": "SaturnTeaTree", "text": "What is the obsession wit  fibonocci \ud83e\udd26\ud83c\udffe\u200d\u2640\ufe0f\ud83d\ude02", "likes": 0}}, {"topLevelComment": {"id": "UgxyouLj0NhVRo5qHwN4AaABAg", "publishedAt": "2021-12-03T12:10:35Z", "author": "Rusty", "text": "take a shot every time Alvin says \"cool\".\n\nJokes aside, amazing tutorial.", "likes": 0}}, {"topLevelComment": {"id": "UgxJHO45IlzUW0dzqUV4AaABAg", "publishedAt": "2021-12-03T06:39:38Z", "author": "Hrithik Raj", "text": "how to write custom key in memo is java ? can anybody help please ?", "likes": 0}}, {"topLevelComment": {"id": "UgyVj3lWy-2o8FWZyMN4AaABAg", "publishedAt": "2021-12-03T04:41:02Z", "author": "Heiko Manfrass", "text": "At around 4:17:00 wouldn't it be enough to just proceed to put a new array at any (table[i + num]) position if table[i] !== null and table[i + num] !== null? Because every time when a value of the array is written the first time it is the lowest number of elements in this array right? And you could just stop iterating when u wrote to the last element the first time because every 'try' to overwrite it will just be a longer array?", "likes": 0}}, {"topLevelComment": {"id": "UgzMNj3zP0kTPzXrsAl4AaABAg", "publishedAt": "2021-12-03T01:00:53Z", "author": "Jonathan Contreras", "text": "Here is the code in python for memoization:\n\ndef fib(n, memo = {}):\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo [n] = fib(n-1,memo) + fib(n-2,memo) \n    return memo[n]\n\nprint(fib(8))\n\ndef gridTraverler( m, n, memo ={}):\n    key = str(m) + \",\" + str(n)\n    if key in memo:\n        return memo[key]\n    if m == 1 & n == 1:\n        return 1\n    if m == 0 or n == 0:\n        return 0\n    memo[key] = gridTraverler(m-1,n, memo) + gridTraverler(m,n-1,memo)\n    return memo[key]\n\nprint(gridTraverler(2,3))\n\ndef canSum(tSum, numbers, memo = {}):\n    if tSum in memo:\n        return memo[tSum]\n    if tSum == 0:\n        return True \n    if tSum < 0:\n        return False\n    for num in numbers:\n        remainder = tSum - num\n        if canSum(remainder, numbers, memo) == True:\n            memo[tSum] = True\n            return True\n    memo[tSum] = False\n    return False\n\nprint(canSum(9,[1,2,3,4]))\n\ndef howSum(tSum, numbers, memo = {}):\n    if tSum in memo:\n        return memo[tSum]\n    if tSum == 0:\n        return []\n    if tSum < 0:\n        return None\n    for num in numbers:\n        remainder = tSum - num\n        result = howSum(remainder, numbers, memo)\n        if result != None:\n            result.append(num) \n            #print(result)\n            memo[tSum] = result\n            return memo[tSum]\n\n    memo[tSum] = None\n    return None\n\nprint(howSum(7,[2,3]))\n#print(howSum(8,[5,3,4,7]))\n#print(howSum(12,[2,4]))\n\ndef bestSum(tSum, numbers, memo = {}):\n    if tSum in memo:\n        return memo[tSum]\n    if tSum == 0:\n        return [] \n    if tSum < 0:\n        return None\n\n    short = None\n\n    for num in numbers:\n        remainder = tSum - num\n        result = bestSum(remainder, numbers,memo)\n        if result != None:\n            result.append(num)\n            if short == None or len(result) < len(short):\n                short = result\n    \n    memo[tSum] = short\n    return short\n\nprint(bestSum(7,[2,3,7]))\nprint(bestSum(8,[2,3,7,8]))\n \ndef canConstruct(tWord , words, memo = {}):\n    if tWord in memo:\n        memo[tWord]\n    if tWord == '':\n        return True\n    for word in words:\n        if word in tWord:\n            if str(tWord).index(word) == 0:\n                suffix = tWord[len(word):]\n                if canConstruct(suffix , words, memo) == True:\n                    memo[tWord] = True\n                    return True\n\n    memo[tWord] = False\n    return False\n\nprint(canConstruct(\"skateboard\",[\"sk\",\"ate\",\"board\"]))\n\ndef countConstruct(tWord, words, memo={}):\n    if tWord in memo:\n        return memo[tWord]\n    if tWord == '':\n        return 1\n    \n    num = 0\n    for word in words:\n        if word in tWord:\n            if str(tWord).index(word) == 0:\n                num += countConstruct(tWord[len(word):],words, memo)\n    memo[tWord] =  num\n    return num\n    \nprint(countConstruct(\"skateboard\",[\"sk\",\"ate\",\"board\",\"skateboard\"]))\n\ndef allConstruct(tWord, words, memo ={}):\n    if tWord in memo:\n        memo[tWord]\n    if tWord == '':\n        return [[]]\n    results = []\n    for word in words:\n        if word in tWord:\n            if str(tWord).index(word) == 0:\n                result = allConstruct(tWord[len(word):],words,memo)\n                result.insert(0,word)\n                target = result\n                results.append(target)\n    memo[tWord] = results\n    return results\n\nprint(allConstruct(\"purple\", [\"purp\",\"p\",\"ur\",\"le\",\"purpl\",\"e\"]))", "likes": 0}}, {"topLevelComment": {"id": "Ugzjvx-PGPBoHXD7ESV4AaABAg", "publishedAt": "2021-12-01T17:46:12Z", "author": "fahan_hack via Instagram", "text": "\u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Best Coder I've met he can solve and help out any issue within 24 hours \u2b06\ufe0f\u2b06\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "Ugy-tuda6dcGE1bH0wB4AaABAg", "publishedAt": "2021-11-30T22:31:04Z", "author": "Jonathan", "text": "49:07", "likes": 0}}, {"topLevelComment": {"id": "UgypncyTU2eNgFxpuFJ4AaABAg", "publishedAt": "2021-11-30T20:55:50Z", "author": "Frema Awuku", "text": "if this has helped you, send this man a tip! \u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgwQVLVgi6nS8Crlmet4AaABAg", "publishedAt": "2021-11-29T06:14:42Z", "author": "Mark Manning", "text": ": fib 0 1 rot 1+ 1 do tuck + loop nip ;  is the forth definition I came up with.  basically to do this in C you would use a two variables and add a to b, then add b to a, then add a to b...\none criticism of this video, please say imporTant in future, that T is important and you not pronouncing it bugs my OCD! lol", "likes": 0}}, {"topLevelComment": {"id": "Ugzx6BxXHc-yuQK8hr54AaABAg", "publishedAt": "2021-11-28T17:17:23Z", "author": "Patrick Lyons", "text": "I'm naming my firstborn child after this man.", "likes": 0}}, {"topLevelComment": {"id": "Ugxk0awMjf3zQefLNCJ4AaABAg", "publishedAt": "2021-11-28T02:29:26Z", "author": "Arun Raman", "text": "The gridTraveler problem can also be solved using combinatorics. Imagine you had an m x n grid. Any path from the start to the end comprises of some number of rightward movements and the rest are downward movements. Since you can only travel right or down (aka can't move backwards), the total number of steps you can possibly take is the sum of the rightward and downward steps which is (m - 1) + (n - 1). Out of these steps, there are m - 1 different places we can make our first downward turn. This corresponds to ((m - 1) + (n - 1)) choose (m - 1).", "likes": 2}}, {"topLevelComment": {"id": "UgwV877JbeImDSvTR8R4AaABAg", "publishedAt": "2021-11-27T16:01:12Z", "author": "Veno Jakomin", "text": "At tabulated grid traveller why is it necessary to create additional row and column filled with 0? They do not have any other purpose except better looking code right?", "likes": 0}}, {"topLevelComment": {"id": "UgzFLT0PjseI_-ARlmh4AaABAg", "publishedAt": "2021-11-27T05:53:29Z", "author": "Hazem Hatem", "text": "highly recommended \ud83d\udc4d\ud83d\udc4d, comment for the youtube algorithm.\u2764\ufe0f\u2764\ufe0f", "likes": 1}}, {"topLevelComment": {"id": "UgzdV_xORUUpoBNlWyB4AaABAg", "publishedAt": "2021-11-27T01:32:54Z", "author": "Max V", "text": "I actually understood it \ud83d\udc68\u200d\ud83c\udf93  Takes you by the hand \ud83d\udc76\nBest enjoyed \ud83d\ude43with  hot chocolate \u2615 or iced coffee \ud83e\udd64", "likes": 0}}, {"topLevelComment": {"id": "UgwDNM2OioDSYzMyBXV4AaABAg", "publishedAt": "2021-11-26T14:32:37Z", "author": "Axell Brendow", "text": "I appreciate the time effort put in this really good content, congratulations! I missed more harder problems but thanks anyway!", "likes": 0}}, {"topLevelComment": {"id": "Ugx2G6AYxkal25xtTQl4AaABAg", "publishedAt": "2021-11-25T20:07:41Z", "author": "1 step of e-noise", "text": "#thecode4trap", "likes": 0}}, {"topLevelComment": {"id": "UgwR4nNcL4KEooPPWGx4AaABAg", "publishedAt": "2021-11-24T16:21:25Z", "author": "Ravindra Kumar Meena", "text": "Wow!! How amazingly he explained the concept. That was great. I almost gave up on recursion and dynamic programming but after watching this video, it boosted confidence inside me. Thanks for the awesome tutorial!! \ud83e\udd1f", "likes": 0}}, {"topLevelComment": {"id": "Ugz5wF8Fk7OKjE9nu894AaABAg", "publishedAt": "2021-11-23T15:26:47Z", "author": "veipunii lana", "text": "anyone has java code for this question?\niam solving howSum question and iam stuck at ... operator?", "likes": 1}}, {"topLevelComment": {"id": "UgwmLCoPS9kmykqXTql4AaABAg", "publishedAt": "2021-11-23T10:22:12Z", "author": "Zhenguo Fu", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgyTGDzpL0ZvBIFTBE54AaABAg", "publishedAt": "2021-11-23T08:54:39Z", "author": "Dhritabrata Mitra", "text": "Can someone help me with this?\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nint path(int m, int n,int dist[1000][1000]){\n    \n    if(dist[m][n]!=-1){\n        return dist[m][n];\n    }\n    else if(m==1 && n==1){\n        return 1;\n    }\n    else if(m==0 || n==0){\n        return 0;\n    }\n    dist[m][n]=path(m-1,n,dist)+path(m,n-1,dist);\n    return dist[m][n];\n}\n\nint main() {\n\t// your code goes here\n\tint dist[1000][1000];\n\tmemset(dist, -1, sizeof(dist)*1000*1000);\n\t\n\tint s=path(3,3,dist);\n\treturn 0;\n}\n\n\nGetting SIGSEGV as error", "likes": 1}}, {"topLevelComment": {"id": "Ugwerpzozu62n9EMdpB4AaABAg", "publishedAt": "2021-11-22T15:50:10Z", "author": "Nguy\u1ec5n Ph\u1ee5 Th\u00e0nh \u0110\u1ea1t", "text": "DP is so hard !", "likes": 1}}, {"topLevelComment": {"id": "Ugwb8TVWwUY4bgT2GVp4AaABAg", "publishedAt": "2021-11-22T14:08:16Z", "author": "Benhard Sim", "text": "I am using c++ , and i keep getting incorrect answer at 3:33:20,  I need to make my array lot larger than m+1 and n+1. What I did is I make my table size to table[100][100]", "likes": 0}}, {"topLevelComment": {"id": "UgxQbZbRRvUcffkQ5014AaABAg", "publishedAt": "2021-11-22T04:02:50Z", "author": "Z", "text": "Does anyone else find tabulation much harder to grasp and come up with than memorization?", "likes": 0}}, {"topLevelComment": {"id": "UgwqU_CgGhHzi88ZGSl4AaABAg", "publishedAt": "2021-11-21T11:33:38Z", "author": "GoldenTengu", "text": "Thank you so much! I was doing all these as exercise and solving each problem before watching the solution. It taught me the optimization techniques, and taught me that even the optimized version can be slower than brute force on simpler cases, but shines on other tougher or tedious cases. In essence, testing and timing tests as a whole or with multiple cases.", "likes": 0}}, {"topLevelComment": {"id": "UgxJiGCcbNhd_o0EX814AaABAg", "publishedAt": "2021-11-21T10:11:42Z", "author": "0ffset92", "text": "Quality tutorial, quality content, the very best, thank you so much.", "likes": 0}}, {"topLevelComment": {"id": "UgyYU070E3eEkHLSwPd4AaABAg", "publishedAt": "2021-11-21T04:14:18Z", "author": "Juan Gomez", "text": "Python function default arguments one time initialization got me the second example right the first run.", "likes": 0}}, {"topLevelComment": {"id": "Ugz_c9kbFGUHSm7dYvx4AaABAg", "publishedAt": "2021-11-20T23:30:20Z", "author": "Balthazar Beutelwolf", "text": "the argument at 20:55 about the lib function is fishy. It is not incorrect that it is O(2^n) but that is so, because 2^n is a (non-tight) upper bound and later you use that as a lower bound to argue that fib is O(2^n) which is a bit fishy. In fact, O(2^(0.5*n)) is the same as O(sqrt(2)^n), so roughly O(1.415^n). The naively recursive version of fib is O(fib(n)) or O(phi^n), roughly O(1.61^n). More generally, you cannot eliminate constant factors from exponents in O-notation, because this changes the base. Technically, you can bump them up to get a non-tight upper bound, but you lose precision. Some people use the notation 2^O(n) for exponential functions, throwing them all into the same class, but O(2^n) and O(3^n) are not the same set of functions, so 2^O(n) is a coarser classification than O-notation normally provides.", "likes": 1}}, {"topLevelComment": {"id": "Ugx7pHUMCzLdxluSgPt4AaABAg", "publishedAt": "2021-11-20T12:54:06Z", "author": "LearningRabbit", "text": "One thing that I noted is when I move the memo check from the top to where my recursive call is made (inside the if statement) , my program runs fine for bigger inputs. It gives me stackoverflow if the statement is at the top of the function as shown in the tutorial. https://youtu.be/oBt53YbR9Kk\n\nBut hands down to the teacher, really explained everything amazingly well.", "likes": 0}}, {"topLevelComment": {"id": "UgxBRULSAAzHufmcOYx4AaABAg", "publishedAt": "2021-11-19T19:41:19Z", "author": "Gel D", "text": "Dude your talking to yourself\u2026 you making it even more complicated.  \ud83e\udd26\u200d\u2642\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgyLGsIInhbVaGkXscx4AaABAg", "publishedAt": "2021-11-19T06:41:00Z", "author": "UnknownHero", "text": "I didn\u2019t get why the last solution of allConstruct has the exp complexity? There is only a few nested loops and it should be a polynomial", "likes": 0}}, {"topLevelComment": {"id": "UgxHv3DVTcXmys9WgTl4AaABAg", "publishedAt": "2021-11-18T08:54:24Z", "author": "Mayank Patel", "text": "You are awesome \u2764\ufe0f teacher ... Thank You So much for your effort !!", "likes": 0}}, {"topLevelComment": {"id": "UgzE3E-UHBV3oEyXosl4AaABAg", "publishedAt": "2021-11-17T08:56:11Z", "author": "Arun Joseph", "text": "Have to say. This guy is a genius with teaching. I wish we had more people like him. Instead of throwing random definitions and pushing a student to understand the concept and thereby solve problems, he cleverly pulled us in with a standard problem got us in the same thinking process and then made us discover the concept and define it as  whatever convenient.\n\nApart from that I respect his dedication. Not just clearing concepts, he exactly knows where the students could possibly go wrong, where they will possibly go right, wherr they will get stuck and everything else.\n\nOnce again! HUGE RESPECT.", "likes": 2}}, {"topLevelComment": {"id": "UgzLaFG9v4Wja7fKKbN4AaABAg", "publishedAt": "2021-11-17T06:53:25Z", "author": "Bryan", "text": "You need to make more vids of this caliber...awesome!!", "likes": 0}}, {"topLevelComment": {"id": "Ugz1DgFwmBb2L56_BpN4AaABAg", "publishedAt": "2021-11-16T21:42:10Z", "author": "Ola Volina", "text": "Best teacher in the world. Lot\u2019s of beautiful functions  to you dear teacher. \ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83e\udd70\ud83e\udd70\ud83e\udd70\ud83d\ude18\ud83d\ude18\ud83d\ude0d\ud83e\udd70\ud83d\ude18\ud83d\udc8b", "likes": 0}}, {"topLevelComment": {"id": "UgwtCEttpP2QA4g7hJl4AaABAg", "publishedAt": "2021-11-15T18:10:09Z", "author": "Gabriel Chu", "text": "For the howSum problem (and other problems after this one): why is he adding an element to the result array via [...arr, num] ? Instead of just pushing num into the existing array?. The latter would be an O(1) operation on average if I'm not mistaken.", "likes": 0}}, {"topLevelComment": {"id": "Ugylz0arEDexRLtGord4AaABAg", "publishedAt": "2021-11-15T12:48:36Z", "author": "Shrihari Sambath", "text": "Hi ,can you help on this please? This test case ends up with first iteration of numbers , howSum(37,[1,2,5,10])", "likes": 0}}, {"topLevelComment": {"id": "UgwipPXl7tQahabLwvx4AaABAg", "publishedAt": "2021-11-14T05:54:02Z", "author": "Mrinanka Dhar", "text": "This guy knows what he's teaching.. thnx a lot for this video.", "likes": 0}}, {"topLevelComment": {"id": "UgwDW8AyrR2yFOrvozF4AaABAg", "publishedAt": "2021-11-12T12:50:00Z", "author": "Vivek Suman", "text": "In howSum(), memoization seems useful for only FALSE(null) results, since the function will end immediately after the first combination is found and will never look for combinations that already exist in memo. So instead of using array as value to memo, can't we use just bool values as values to our keys like he did in canSum() to memoize it?", "likes": 0}}, {"topLevelComment": {"id": "UgweNnWHPO_ahokroit4AaABAg", "publishedAt": "2021-11-12T12:29:20Z", "author": "CaptainShekhar", "text": "gr8", "likes": 1}}, {"topLevelComment": {"id": "UgwPHp9tJsZEdNNC_oV4AaABAg", "publishedAt": "2021-11-12T10:29:16Z", "author": "Kuba Ma\u0142ecki", "text": "in gridTraveler isn't it better to just return 1 if any of dimensions is 1? In (n,1) grid there's only one way to go no matter how long it is, and you skip all the return 0 base cases then.", "likes": 0}, "replies": [{"id": "UgwPHp9tJsZEdNNC_oV4AaABAg.9UdYKG4Oz1z9UeJVu71J9u", "publishedAt": "2021-11-12T17:39:01Z", "author": "Kuba Ma\u0142ecki", "text": "also, sorting numbers array descenting in howSum() will give us bestSum(), because program will start by subtracting the largest numbers, then the smallest.", "likes": 0}]}, {"topLevelComment": {"id": "UgwbH7zflfrCYC1ONdx4AaABAg", "publishedAt": "2021-11-11T10:10:54Z", "author": "Jayson Mulwa", "text": "BRO, YOU CAN HAVE MY WIFE.", "likes": 0}}, {"topLevelComment": {"id": "Ugyur0f3Te9uC8vMANx4AaABAg", "publishedAt": "2021-11-11T07:34:33Z", "author": "lychenus lyn", "text": "i love his voice and this is a pretty eye opening course", "likes": 0}}, {"topLevelComment": {"id": "UgwC6jWbdkqFEEDOo554AaABAg", "publishedAt": "2021-11-10T11:06:38Z", "author": "Frozen Blade", "text": "38:30", "likes": 0}}, {"topLevelComment": {"id": "UgzY4Q2BSoJUmjt92wR4AaABAg", "publishedAt": "2021-11-09T22:36:00Z", "author": "wow!", "text": "god bless", "likes": 0}}, {"topLevelComment": {"id": "UgyAKV9tIjiuhjtKdfp4AaABAg", "publishedAt": "2021-11-09T19:52:28Z", "author": "Aditya Dubey", "text": "Why there is no index out of bound when i + 1, i + 2 in fib tabulation? He is running i till n. @3:21:46", "likes": 0}}, {"topLevelComment": {"id": "UgwSPwBONENTkzE4MiB4AaABAg", "publishedAt": "2021-11-09T17:35:35Z", "author": "Rahul Nirmesh", "text": "At 1:21:16, why the line 17 is returning true?\nAm I missing something? \ud83d\ude15", "likes": 0}, "replies": [{"id": "UgwSPwBONENTkzE4MiB4AaABAg.9UX_j5-reVk9UiBb1_KlU3", "publishedAt": "2021-11-14T05:46:54Z", "author": "rentatter_45", "text": "7 can be generated  like : 7 = 2 + 2 + 3\nBecause wordBank = {2,3} and any element in WordBank can be used more than once", "likes": 0}]}, {"topLevelComment": {"id": "UgwYOhWgQQYIQTiD8X14AaABAg", "publishedAt": "2021-11-09T17:32:21Z", "author": "harsh singh", "text": "has anyone done the best sum [memoization]problem with c++ , i understood the problem completely but implementing it in c++ is proving to be a bit of a problem for me, can anyone send the code if they have done the problem in c++?", "likes": 2}, "replies": [{"id": "UgwYOhWgQQYIQTiD8X14AaABAg.9UX_MOuj0n09UjA5PmHPij", "publishedAt": "2021-11-14T14:52:57Z", "author": "harsh singh", "text": "@rentatter_45 thanks!!", "likes": 0}, {"id": "UgwYOhWgQQYIQTiD8X14AaABAg.9UX_MOuj0n09UiBiEVhc-0", "publishedAt": "2021-11-14T05:47:53Z", "author": "rentatter_45", "text": "// memoization for the bestSum problem\n\n#include <bits/stdc++.h>\n#define ll long long int\n#define pb push_back\nusing namespace std;\n\n vector <ll> bestSum(ll targetSum, vector <ll>& numbers,ll check, unordered_map <ll, vector <ll>>& memo) {\n     ll key = targetSum;\n     vector <ll> combinationSum = vector <ll>();\n     if(targetSum == 0) {\n         check = 1;\n         return vector <ll>(); //empty vector\n     }\n     if(targetSum < 0) {\n         check = 0;\n         return vector <ll>();  //empty vector \n     }\n\n     if(memo.find(key) != memo.end()) return memo[key]; //when the path already exists\n\n     else{\n        for(auto x:numbers) {\n            ll rem = targetSum - x;\n            vector <ll> result = bestSum(rem, numbers, check, memo);\n            if(check == 1) {\n                vector <ll> newresult = result;\n                newresult.pb(x);\n                if(combinationSum.size()==0 || newresult.size() < combinationSum.size()) {\n                    combinationSum = newresult;\n                }\n            }\n        }\n\n        memo[key] = combinationSum;\n        return combinationSum;\n     }\n\n } \n\n\n int main() {\n\n  unordered_map <ll, vector <ll> > mp1;\n  unordered_map <ll, vector <ll> > mp2;\n  unordered_map <ll, vector <ll> > mp3;\n  unordered_map <ll, vector <ll> > mp4;\n\n\n\n   vector <ll> nums1{5,3,4,7};\n   vector <ll> nums2{2,3,5};\n   vector <ll> nums3{1,4,5};\n   vector <ll> nums4{1,2,5,25};\n  \n   ll val=1;\n   vector <ll> v1 = bestSum(7,nums1,val,mp1);\n   vector <ll> v2 = bestSum(8,nums2,val,mp2);\n   vector <ll> v3 = bestSum(8,nums3,val,mp3);\n   vector <ll> v4 = bestSum(100,nums4,val,mp4); //takes a lot of time\n\n   for(auto x:v1) cout<<x<<\" \";\n   cout<<\"\\n\";\n   for(auto x:v2) cout<<x<<\" \";\n   cout<<\"\\n\";\n   for(auto x:v3) cout<<x<<\" \";\n   cout<<\"\\n\";\n   for(auto x:v4) cout<<x<<\" \";\n   cout<<\"\\n\";\n\n\n      return 0;\n  }", "likes": 1}]}, {"topLevelComment": {"id": "UgxqbzbbIDe-U3QiOuZ4AaABAg", "publishedAt": "2021-11-09T16:48:43Z", "author": "sampath kumar", "text": "I think it would be more better to add two more conditions in the grid travelor where the grid is just a straight line\nif (m == 1) return 1;\r\nif (n == 1) return 1;\n\nit save us like m or n recursions in this repective cases\n\nnice video though!", "likes": 0}}, {"topLevelComment": {"id": "UgxozYUXBBdlyCgnllF4AaABAg", "publishedAt": "2021-11-09T08:23:35Z", "author": "Jenkins J", "text": "@3:22:17 how he is not getting an IndexError in line 6?\nBecause when i=n, table[i+2] should go out of bound, right?", "likes": 0}}, {"topLevelComment": {"id": "Ugx-2q-Dv8yRW0KSzUR4AaABAg", "publishedAt": "2021-11-09T06:53:08Z", "author": "Gopi shiva Krishna", "text": "After finishing this video in 2 full days, I am able to come up with an approach now, and write solutions. No matter how much efforts I made to learn dp,  I was no where close to coming up with a neat approach. With these concepts and some more practice on the DP problems, I can sure be good as a hell pro problem solver in a month.", "likes": 10}}, {"topLevelComment": {"id": "UgysA5ugdOlz2KbLvRN4AaABAg", "publishedAt": "2021-11-08T09:11:46Z", "author": "Logan N", "text": "I have implemented the gridTraveler problem in c++ using hashMap, but it is still not working,\ncan Anyone please help\nThank You !\n\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint gridTraveler(int n, int m, map<pair<int, int>, int> &memo)\r\n{\r\n    if(memo.find({m, n}) != memo.end()) return memo[{n, m}];\r\n    if(n == 1 && m == 1) return 1;\r\n    if(n == 0 || m == 0) return 0;\r\n    memo[{n, m}] = gridTraveler(n-1, m, memo)+gridTraveler(n, m-1, memo);\r\n    return memo[{n, m}];\r\n}\nint main()\r\n{\r\n    map<pair<int, int>, int> memo;\r\n    cout << gridTraveler(18, 18, memo) << \"\\n\";\r\n    return 0;\r\n}", "likes": 2}, "replies": [{"id": "UgysA5ugdOlz2KbLvRN4AaABAg.9UU6H7qs9DI9Uj6CjjqNMj", "publishedAt": "2021-11-14T14:19:00Z", "author": "Logan N", "text": "@rentatter_45 It worked (ignoring integer overflow) ... Thanks :)", "likes": 0}, {"id": "UgysA5ugdOlz2KbLvRN4AaABAg.9UU6H7qs9DI9UiD_izs_Gr", "publishedAt": "2021-11-14T06:04:12Z", "author": "rentatter_45", "text": "You have an error in this line: \"if(memo.find({m, n}) != memo.end()) return memo[{n, m}];\"\nInstead of memo.find({m,n}), write memo.find({n,m}).", "likes": 1}]}, {"topLevelComment": {"id": "UgxHqs1yHy0S9VIdMvt4AaABAg", "publishedAt": "2021-11-07T19:14:36Z", "author": "trytoguess", "text": "One small thing that is not mentioned (or maybe I haven't noticed it) is the difference in the 2 types of the algorithms that lead to different mean case results. When we do memoization we use recursion which is equivalent to DFS (depth-first search) while tabulation is equivalent to BFS (breadth-first search). An interesting property of BFS in case of a bestSum exercise is that the first time we get the target sum it is the \"best\" way to get it.", "likes": 0}}, {"topLevelComment": {"id": "UgxJLWEajab-2rNLT0d4AaABAg", "publishedAt": "2021-11-06T19:19:14Z", "author": "Daniel Alvarado", "text": "I'm trying to use the Memoization to solve the Knapsack problem. Some help with the tree?", "likes": 0}}, {"topLevelComment": {"id": "UgzsGzdOgE9BmkszfCF4AaABAg", "publishedAt": "2021-11-06T16:41:06Z", "author": "lx", "text": "I use to read books and academic resources online to learn. but the learning process was slow, it took hours, days, weeks, months, a year and i was all big in theory without really reaching far from my skills. eventually, i gave up and am starting a new journey with youtube. i found i had a knack for learning stuff quickly without really caring how i learn it or how i do it, just as long as i can practice, quickly do things, and apply it :D!", "likes": 0}}, {"topLevelComment": {"id": "Ugw3K-VAIUiwfSxgMkp4AaABAg", "publishedAt": "2021-11-06T16:39:51Z", "author": "Research and Build", "text": "It looks like the real \"trick\" to DP is figuring out the tree. After that the code is easy. Also, what a pain in the rear end to make a 2d array in javascript! LOL", "likes": 14}}, {"topLevelComment": {"id": "UgwNFoK6c59IpgQLWSN4AaABAg", "publishedAt": "2021-11-06T10:29:24Z", "author": "Akash Panday", "text": "I'm having trouble converting the memoized canSum into C++. Can anyone provide me a C++ link of the same problem?", "likes": 0}, "replies": [{"id": "UgwNFoK6c59IpgQLWSN4AaABAg.9UP5ZzUofVo9UR8kELf8-_", "publishedAt": "2021-11-07T05:35:37Z", "author": "Vivek Suman", "text": "#include<bits/stdc++.h>\nusing namespace std;\n\nbool canSum(int t, vector<int> arr, unordered_map<int,bool> &memo)\n{\n\u00a0 \u00a0 if(t==0) return true;\n\u00a0 \u00a0 if(t<0) return false;\n\u00a0 \u00a0 if(memo.count(t) > 0) return memo[t]; //use cached val\n\u00a0 \u00a0 for(int i=0; i< arr.size(); i++)\n\u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 int subt = t - arr[i];\n\u00a0 \u00a0 \u00a0 \u00a0 if(canSum(subt, arr, memo)) \n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 memo[t] = true; //cache\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }\n\u00a0 \u00a0 memo[t] = false; //cache\n\u00a0 \u00a0 return false;\n}\n\nint main()\n{\n\u00a0 \u00a0 vector<int> arr = {7, 14};\n\u00a0 \u00a0 int target = 300;\n\u00a0 \u00a0 unordered_map<int,bool> memo;\n\u00a0 \u00a0 if(canSum(target, arr, memo)) cout << \"True\";\n\u00a0 \u00a0 else cout << \"False\";\n\u00a0 \u00a0 return 0;\n}", "likes": 0}]}, {"topLevelComment": {"id": "UgxnDSUg41rDi_uL8Oh4AaABAg", "publishedAt": "2021-11-05T03:11:43Z", "author": "Dinia Adil", "text": "Hi alvin thanks for the course ! I have a question about the grid Traveler problem !\nShouldn't the memoized version of the solution have a O(mxn) space complexity  rather than a O(m+n) ? \nDynamic programming always \"adds\" space complexity by memorizing intermediate results. In this case you'd have to memorize the combinations of m and n pairs so it should be O(mxn), right?", "likes": 8}, "replies": [{"id": "UgxnDSUg41rDi_uL8Oh4AaABAg.9ULjgSMxlw89WjRF02Bn_3", "publishedAt": "2022-01-03T10:25:36Z", "author": "Alireza", "text": "@killerdroid99 Incorrect. In memoized version, yes the max height of the tree remains the same BUT we maintain a table of values too. \nPlease note that the memo (cache) object holds key of format m + ',' + n. How many combination you can imagine with this format? Answer: m * n.\nThe size of the memo table is m * n which is greater than m + n. So the space complexity is of order O(n*m).", "likes": 4}, {"id": "UgxnDSUg41rDi_uL8Oh4AaABAg.9ULjgSMxlw89W3dmIiL0pp", "publishedAt": "2021-12-17T19:36:32Z", "author": "killerdroid99", "text": "your reasoning is on the right way but if u traverse the tree correctly, then you will find that it is actually the same tree but some parts are omitted because they are already calculated once, in this case the space-complexity remains same", "likes": 0}]}, {"topLevelComment": {"id": "Ugwc8Ydq7q1sc6bpwS54AaABAg", "publishedAt": "2021-11-04T21:52:19Z", "author": "Jos\u00e9 David Daza", "text": "14:20 why both functions have the same complexity? When the second one calls the function half times than the first.", "likes": 0}, "replies": [{"id": "Ugwc8Ydq7q1sc6bpwS54AaABAg.9ULA84iCYK29ULjyqnStza", "publishedAt": "2021-11-05T03:14:13Z", "author": "Dinia Adil", "text": "In complexity theory , it doesn't matter if you have a constant multiplicative factor in front. What matters is how big the number of steps gets at your input gets to infinity. For example O(n) (linear time ) is smaller than O(n^k) (polynomial time) which is smaller than O(2^n) (exponential time) . O(n) and O(2n) are both linear time execution.", "likes": 0}]}, {"topLevelComment": {"id": "Ugyx3x-_YpVocH_3z3N4AaABAg", "publishedAt": "2021-11-04T21:45:39Z", "author": "Alex Golovanov", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzRxQ8PE4_HOV68uRx4AaABAg", "publishedAt": "2021-11-04T21:38:22Z", "author": "Cloudvy 7", "text": "1:18:03 why does he expect true from 11th line of code, 2+3 != 7 or we can use nums several times like 2+2+3?", "likes": 0}}, {"topLevelComment": {"id": "UgxkgW13q5YRL-zCcgN4AaABAg", "publishedAt": "2021-11-04T04:55:58Z", "author": "Alex Marchenko", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugyol19hGvWnHM2HMgd4AaABAg", "publishedAt": "2021-11-04T04:47:58Z", "author": "Grayson Wen", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugwjicf6P-PycoD1TnR4AaABAg", "publishedAt": "2021-11-04T00:15:29Z", "author": "Science of Art", "text": "You explain so amazingly, it works like charm!", "likes": 0}}, {"topLevelComment": {"id": "UgwV14-uh-IelWo6VpB4AaABAg", "publishedAt": "2021-11-03T03:47:01Z", "author": "kamrul islam", "text": "Best Course I have taken ever. This guy is really really awesome...", "likes": 0}}, {"topLevelComment": {"id": "Ugy6eYUYSZmw08HQo5V4AaABAg", "publishedAt": "2021-11-02T04:03:47Z", "author": "Sriharika Mariyala", "text": "in howSum function, how can u prove from code that returning array dominates over returning null?????????", "likes": 0}, "replies": [{"id": "Ugy6eYUYSZmw08HQo5V4AaABAg.9UE6GDISGKG9UIjUUwAWOk", "publishedAt": "2021-11-03T23:12:13Z", "author": "Science of Art", "text": "In Memoization version If you have an array, it will return early, therefore you will not reach the end return None part. In Tabulation version thats even easier because you start array with all None values and when you return it return None if there is no solution that overrides that None.", "likes": 1}]}, {"topLevelComment": {"id": "UgyLH4Uc1pni7Is28Mp4AaABAg", "publishedAt": "2021-11-01T23:28:24Z", "author": "Mohnish Magesh", "text": "wow this guy is so good at teaching", "likes": 0}}, {"topLevelComment": {"id": "UgwewB5e6lnLjfKXh494AaABAg", "publishedAt": "2021-11-01T01:17:43Z", "author": "Thomas Brochard", "text": "No wonder Alvin works at Google! He probably taught the interviewer a few things LOL", "likes": 1}}, {"topLevelComment": {"id": "Ugykn2A1BhfHxFppCJ94AaABAg", "publishedAt": "2021-10-31T18:13:38Z", "author": "Naren Allam", "text": "He should do more videos I forgot the name, but I enjoyed his video training, I have been into the Corp training since 2007,  in the last 13. Years , I never appreciated anyone like him.", "likes": 0}}, {"topLevelComment": {"id": "UgxaDTcpOffYP-0I8ZB4AaABAg", "publishedAt": "2021-10-31T18:11:09Z", "author": "Naren Allam", "text": "Fantastic \ud83d\udc4c", "likes": 0}}, {"topLevelComment": {"id": "UgzW-WMh2bVfWxeaufd4AaABAg", "publishedAt": "2021-10-31T12:32:39Z", "author": "Jack Adrian Zappa", "text": "4:38:00 You keep on using `for(i = 0; i <= target.length; ++i)`  You were lucky that none of the words in the word array  matched pass the end.  Though then you would have been saved by the empty string not equaling `null`.  Also,  `i` should be just less than `target.length` anyway, otherwise you could start widening you array unintentionally.\n\nThese are just simple off by 1 errors, so not a big deal.  The main content was great way to brush up on my DP skills.  Thx.", "likes": 0}}, {"topLevelComment": {"id": "UgwF1w_7dpP1zmIb_vh4AaABAg", "publishedAt": "2021-10-31T01:11:43Z", "author": "danie", "text": "Hi,thanks for the video, could you please share a tool or an instrument you used to describe the idea with schemas, pictures, etc?", "likes": 0}}, {"topLevelComment": {"id": "UgxSDSn2Cv1uvJ10kVp4AaABAg", "publishedAt": "2021-10-30T17:21:57Z", "author": "JustHiJack", "text": "Fantastic course! Thanks for your effort!", "likes": 0}}, {"topLevelComment": {"id": "Ugw6YX6XM40aRxZ_oGd4AaABAg", "publishedAt": "2021-10-29T19:35:10Z", "author": "Yueming Pang", "text": "Hi, really fantastic tutorial here! But I have one question:\nIn the fib tabulation section: given array.length = n+1 (meaning the max index is \"n\"), when i<= n and we access array[i+2] shouldn't we get the out of bound error (even js doesn't have out of bound exception, but other languages do)? We deal with the out of bound in the following grid traversal problem but not in the fib one. Can anyone tell me why? Thanks!", "likes": 2}, "replies": [{"id": "Ugw6YX6XM40aRxZ_oGd4AaABAg.9U5TfLkQBV99_g3b3ikxYX", "publishedAt": "2022-04-11T13:06:54Z", "author": "kealist", "text": "You are right.   I think that was just lazy & inaccurate on his part for that problem.   It was a mistake that would have been an error in many other languages.  In this case, it is doing some extra calculation that isn't being used for anything.", "likes": 0}, {"id": "Ugw6YX6XM40aRxZ_oGd4AaABAg.9U5TfLkQBV99U5Y2Oyc0dj", "publishedAt": "2021-10-29T20:13:24Z", "author": "Yueming Pang", "text": "I think I found the reasoning here: for js if we assign a value to the index that is larger than the original max index, the array will automatically increase its size. Since we are only doing assignment here, its ok and won't affect our goal. Whereas, in the grid traversal we cannot add to the \"non-exist element\" and that's why we have to deal with out of bound exception.", "likes": 3}]}, {"topLevelComment": {"id": "UgwtmOr8EVb7xxs0cRN4AaABAg", "publishedAt": "2021-10-29T14:42:38Z", "author": "Prince K M", "text": "why anybody would even dislike this?mad people.", "likes": 0}, "replies": [{"id": "UgwtmOr8EVb7xxs0cRN4AaABAg.9U4xBoMGbyZ9U80simGlQl", "publishedAt": "2021-10-30T19:21:18Z", "author": "Denis Khakimov", "text": "The \"dislikes/likes\" ratio is incredibly small, anyway.", "likes": 1}]}, {"topLevelComment": {"id": "UgwG3Q0JGpCL3Gr9gc14AaABAg", "publishedAt": "2021-10-28T18:56:46Z", "author": "Miguel Hernandez", "text": "For the grid traveler memoization, you can also include the base case for the flipped key since the number of steps is the same for \"m, n\" and \"n, m\".", "likes": 0}}, {"topLevelComment": {"id": "UgxHgGOYIl9INHk3L194AaABAg", "publishedAt": "2021-10-27T15:26:49Z", "author": "Chandu R Nath", "text": "Doing Fibonacci in Python is simple,\nfrom functools import lru_cache\n@lru_cache(maxsize=1000)\ndef fibo(no):\n    If no <= 1:\n        return no\n    else:\n        return fibo(no-1)+fibo(no-2)\nprint(fibo(7))\n\nOnly 7 lines, but can be reduce further if I throw away pep python  standard", "likes": 0}}, {"topLevelComment": {"id": "Ugy9W17AkvpPvzGhpUx4AaABAg", "publishedAt": "2021-10-27T13:27:24Z", "author": "krishna singh", "text": "In howsum problem (4:06:08 duration) you created an array based on the target value and never checked whether the index is out of bound while updating the table i.e table[i+num] = [ ...table[i], num] your all the testcases were passed just because in the array their is no such value greater then your target value. \nIf we use this input howSum(7, [90,2,3]) it will through an error as the size of your table is 8. So I think it would be good if we check the index before updating. \nwhat say ?", "likes": 0}}, {"topLevelComment": {"id": "Ugw5uH71vo93CE33vP54AaABAg", "publishedAt": "2021-10-27T08:34:55Z", "author": "Aditya Singh", "text": "Hey, in the canSum problem, sorting the array wud have helped to optimize the solution even further, basically a lot of recursive call woudnt be needed.\nThe index will be passed in the function arguments, because in each recursive call..the target number will be reduced, so if the array is sorted, we can pass the current index..and in the next recursive call, the scanning of the array will be started from the passed index (array is sorted).", "likes": 0}}, {"topLevelComment": {"id": "UgyyJ5B0D9OJlfIQ95F4AaABAg", "publishedAt": "2021-10-26T18:41:15Z", "author": "Rayhaan Bhikha", "text": "This is just an amazing video. Thank you so much for uploading this", "likes": 0}}, {"topLevelComment": {"id": "UgxtBa9eOXkTt53qxBt4AaABAg", "publishedAt": "2021-10-26T15:52:50Z", "author": "dmstrat", "text": "GridTraveler Question:\r\nYou take the time to point out that the GridTraveler repeats on \r\ngridTraveler(m,n) == gridTraveler(n,m) during the analysis, but I don't feel you added anything on that point to the code.  It was fast without it, but wondered if it would be worth adding that reverse key lookup and respond on that value out of your memo, too. \r\n\r\nWhat are your thoughts?\r\n...\r\nconst key = m + ',' + n;\r\nconst rKey = n + ',' + m;\r\n\r\nif (key in memo) return memo[key];\r\nif (rKey in memo) return memo[rKey];\r\n...", "likes": 1}, "replies": [{"id": "UgxtBa9eOXkTt53qxBt4AaABAg.9TyLqHsK2Qy9ULiyBzXkyz", "publishedAt": "2021-11-05T03:05:24Z", "author": "Dinia Adil", "text": "this works if you want to be optimise your code . You could also check if any of m or n are equal to 1 rather than both in your base case . It should reduce the number of recursive calls but complexity wise it's still the same.", "likes": 0}]}, {"topLevelComment": {"id": "UgyDDg1a50iJHDJ5mmd4AaABAg", "publishedAt": "2021-10-26T13:52:41Z", "author": "Khalifa AAhmed", "text": "Thank you my man <3<3<3", "likes": 1}}, {"topLevelComment": {"id": "UgwHZz-k8cLl5uGg9aV4AaABAg", "publishedAt": "2021-10-26T09:05:10Z", "author": "Arsen Mkrtchyan", "text": "when you learn more in 5 hours, than in 5 years of university", "likes": 1}}, {"topLevelComment": {"id": "UgwlBlyxlR_X07wXrTl4AaABAg", "publishedAt": "2021-10-25T20:28:40Z", "author": "chemicheto", "text": "Memowaizing uwu", "likes": 1}}, {"topLevelComment": {"id": "UgxhWE7VGTa5k87KSNR4AaABAg", "publishedAt": "2021-10-25T18:20:33Z", "author": "Syed Saqlain Ahmed", "text": "Amazing explanation, great video, step by step way to understand DP. I recommend anyone who is getting started with DP, worth the time u invest", "likes": 0}}, {"topLevelComment": {"id": "Ugxtbk4vWrWWDpgoFP54AaABAg", "publishedAt": "2021-10-25T11:32:43Z", "author": "PureAbsolute", "text": "First, this is awesome.  But a couple of nitpicks with about 1:50 left in the course.  Which I will finish, because the course is embedding this clear crisp way of thinking into my brain:\n\n1) It seems that the presenter is fully aware of when to use a new array, vs when to use a modified array, but that isn't talked about.  The first example I said \"the spread operator is cool, but you could use push onto the old array.  But when he continued to the next example, it was obvious that we wanted the array for memoization.  Then I thought - so This is functional programming, where not mutating variables gives you access to memoization.  And then later when he creates the results array, it is done by modifying the array.  Which made sense; but it was a seamless transition without any explanation.\n\n2) In his tabular fibonacci example the iterator should have stopped at \"i < n\" and not \"i <= n\", *and* there needs to be either an additional element to the array or an if statement that doesn't update table[n+2] if n is at the end.  Or, feel free to go to stop at n, but have n+1and n+2 defined in table, meaning you need a table with n+3 elements (which includes the 0th array element used in the algorithm).  All of this works in his example, because javascript automagically created two elements at the end which have an undefined status at first.  Undefined plus a number = NaN.  And then for table[n + 1], NaN + a number results in NaN.  So no exxeptions here, but in java or c you would have had an out of bounds exception.  Raku starts a new element with the default  'any',  converts it to 0 when used in a math equation,  and produces the correct number, which allows you to start with a 2 element array (0 and 1) and dynamically create the rest.", "likes": 0}, "replies": [{"id": "Ugxtbk4vWrWWDpgoFP54AaABAg.9TvJHIA3AjZ9TvZ-zGLVM-", "publishedAt": "2021-10-25T13:50:10Z", "author": "PureAbsolute", "text": "Hah - for whatever reason, my two nitpicks are explained literally in the next example.  No code changes, but the dynamic nature of javascript's arrays are mentioned.   And making sure the arrays are copied did require a code tweak.  The latter is still something to watch out for, and the spread operator is a great help when making that new array.", "likes": 0}]}, {"topLevelComment": {"id": "Ugzi201Pd6U4ADAA6xR4AaABAg", "publishedAt": "2021-10-25T01:42:13Z", "author": "Boring GamerBoi", "text": "ooo this sound fun", "likes": 0}}, {"topLevelComment": {"id": "UgzGj-Phl-DcXX2YqMB4AaABAg", "publishedAt": "2021-10-24T23:41:08Z", "author": "Kunal Keshan", "text": "Cool!", "likes": 0}}, {"topLevelComment": {"id": "UgxjH3QaevbsngIchrN4AaABAg", "publishedAt": "2021-10-24T23:40:42Z", "author": "Kunal Keshan", "text": "Awesome!", "likes": 0}}, {"topLevelComment": {"id": "UgxZq_VW2gQjehs6wDN4AaABAg", "publishedAt": "2021-10-24T22:01:32Z", "author": "David Shaw", "text": "I've gone through a good number of Dynamic Programming examples. This is the BEST one. Very thorough and methodical steps. Top tier along with the C data structures video that goes over recursion.", "likes": 2}}, {"topLevelComment": {"id": "UgwGrPY7AWy2e1Fy7YR4AaABAg", "publishedAt": "2021-10-24T13:15:43Z", "author": "Nickolay Kondratyev", "text": "Thank you!!! This has been tremendous help in understanding the approach to these types of problems!", "likes": 0}}, {"topLevelComment": {"id": "UgyKpALqKid0ewDvDml4AaABAg", "publishedAt": "2021-10-24T13:00:29Z", "author": "Wang Sonny", "text": "\u8b1d\u8b1d\uff01", "likes": 3}}, {"topLevelComment": {"id": "UgyzFPeEvNYFuc5MOkZ4AaABAg", "publishedAt": "2021-10-24T09:34:54Z", "author": "Nickolay Kondratyev", "text": "Not grasping the part at grid traveler complexity being  O(2^(n+m)) (https://youtu.be/oBt53YbR9Kk?t=3236) since if we pass inputs such as (100,1) the complexity doesn't end up being O(2^100) at all.", "likes": 0}}, {"topLevelComment": {"id": "UgwCP3f33YkEb56EQHB4AaABAg", "publishedAt": "2021-10-24T08:34:31Z", "author": "Nickolay Kondratyev", "text": "Really good video thus far. \n\nThere is an edit needed at https://youtu.be/oBt53YbR9Kk?t=1319 \nWhere we state that O(dib) <= O(fib) <= O(lib) Should be: O(lib) <= O(fib) <= O(dib)\nNot like it matters much since all are O(2^n) but nonetheless not to confuse.", "likes": 0}}, {"topLevelComment": {"id": "UgxmPvsYhBt1ekILdh14AaABAg", "publishedAt": "2021-10-24T05:55:47Z", "author": "Night Fury", "text": "I can't thank you enough :)", "likes": 1}}, {"topLevelComment": {"id": "UgzHbz3Gj050x3ZJOoB4AaABAg", "publishedAt": "2021-10-22T21:34:51Z", "author": "Junaid Shaikh", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "Ugzd59xXIFJ16l0YHTB4AaABAg", "publishedAt": "2021-10-22T17:19:22Z", "author": "Jefin Agilbert", "text": "But, I doubt it works faster in python and cmd.", "likes": 0}}, {"topLevelComment": {"id": "Ugz6BR8P2SCkgRjKuRl4AaABAg", "publishedAt": "2021-10-22T16:23:41Z", "author": "Hidaya", "text": "I can't believe this is for free... Thank you so much", "likes": 1}}, {"topLevelComment": {"id": "UgxB8ElewadTdcbEyWt4AaABAg", "publishedAt": "2021-10-21T23:20:53Z", "author": "DNHRobot", "text": "For the dynamic grid solution, I didn't see the optimization regarding the order of the input (m,n). Would the time complexity be reduce to (m+n)?", "likes": 0}}, {"topLevelComment": {"id": "UgwJM5A1jDKMLmYkznJ4AaABAg", "publishedAt": "2021-10-21T22:16:10Z", "author": "Pe3ak Pe3et", "text": "him: optimized solution for canSum\nYouTube subtitles: i guess he cured cancer", "likes": 0}}, {"topLevelComment": {"id": "Ugz2hzPrCFEBE9a9ryB4AaABAg", "publishedAt": "2021-10-21T17:03:27Z", "author": "Weekend Warrior", "text": "Is there a Java version of this?\nI can see how the concepts can be universal, but the implementation is pretty different.", "likes": 0}}, {"topLevelComment": {"id": "Ugw9BAmyLJU5ovK_jpd4AaABAg", "publishedAt": "2021-10-21T16:55:30Z", "author": "Ashwin Raju", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzRqqGvZ5x4UZ3zuzt4AaABAg", "publishedAt": "2021-10-21T06:24:41Z", "author": "Raab Dahl", "text": "How did you do the drawings so smooth, its really amazing!", "likes": 0}}, {"topLevelComment": {"id": "UgyI6_aj9zW9H94eA6x4AaABAg", "publishedAt": "2021-10-21T02:16:42Z", "author": "Joe Young", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwOskV1nYe-y5kMpsF4AaABAg", "publishedAt": "2021-10-20T16:25:49Z", "author": "Oussama Abdelwahed", "text": "Hey i have a question , in min 55:51 , you say that gridTraveler(a,b) = gridTraveler(b,a) but in the memoization process you take in consideration only the case of comparing the ordered  function parameters m concatenated to n and not also the inverse (n concatenated to m),  can anyone clarify this please !!!", "likes": 0}}, {"topLevelComment": {"id": "Ugzuc2DSycsapun5HM14AaABAg", "publishedAt": "2021-10-20T11:29:28Z", "author": "Computer science and application education hub", "text": "Show image in python.           https://youtu.be/g4Dl2vdEkZ8", "likes": 0}}, {"topLevelComment": {"id": "Ugx23-xtvqrTklqM2gl4AaABAg", "publishedAt": "2021-10-20T00:34:52Z", "author": "Felipe Porto", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzJ7htiauIuxd4WqQl4AaABAg", "publishedAt": "2021-10-19T20:37:08Z", "author": "WhatMatterson", "text": "Speaking of gridTraveler problem. Wouldn't it be better to reduce function calls by changing the base case to\n\nif (m == 1 || n == 1)\n\nBecause if one of the dimensions is 1, we are going to get two calls: one that leads to a ZERO case, and the other one that will lead us to 1 in the end. Instead of having (4, 1) grid to call (3, 1) => (2, 1) => (1, 1), we will simply return 1", "likes": 0}}, {"topLevelComment": {"id": "UgyNUa_10DzUdXL1zcx4AaABAg", "publishedAt": "2021-10-19T17:36:10Z", "author": "Ray Horn", "text": "bestSum optimal solution requires nothing more than considering a List of Unique Subsets using values less than the target --> Still O(N). LOL.", "likes": 0}}, {"topLevelComment": {"id": "UgyznLulK77OaOgto0p4AaABAg", "publishedAt": "2021-10-19T15:39:15Z", "author": "Jacky Ng", "text": "I am using Python to solve canSum problem at 1:10:46. Memorisation doesn't really help to speed up the function because all you need is one \"True\" case to end the function, there is no point to memorising it, Right?", "likes": 0}}, {"topLevelComment": {"id": "UgykW29OOCdyNFScKJZ4AaABAg", "publishedAt": "2021-10-19T14:50:03Z", "author": "Ray Horn", "text": "CanSum is again a List of Lists with an optimal solution which is iterative and a List of Unique Subsets. Big O(N) without Recursion.", "likes": 0}, "replies": [{"id": "UgykW29OOCdyNFScKJZ4AaABAg.9TgD5KN7sNH9TgDIujDV1E", "publishedAt": "2021-10-19T14:51:54Z", "author": "Ray Horn", "text": "List of Unique Subsets where all members of a subset have values less than all the input numbers. Now, this is less than O(N).", "likes": 0}]}, {"topLevelComment": {"id": "UgxwuPxTnaVDFQUI9jV4AaABAg", "publishedAt": "2021-10-19T14:44:16Z", "author": "Ray Horn", "text": "Wow. Recursion is awesome for making Linear problems far more complex. And Memoization is awesome for making Complex problems more Linear.  You are an awesome teacher. LOL.", "likes": 0}}, {"topLevelComment": {"id": "UgwvopfaB2VA0pJrmdN4AaABAg", "publishedAt": "2021-10-19T14:20:59Z", "author": "Ray Horn", "text": "Grid Traveler optimal solution is always a straight line or the path that touches a straight line. Duh!", "likes": 0}, "replies": [{"id": "UgwvopfaB2VA0pJrmdN4AaABAg.9Tg9lVlmX6k9TgBFGNXl-H", "publishedAt": "2021-10-19T14:33:55Z", "author": "Ray Horn", "text": "Grid is a List of Lists so the solution is a List of Unique Sublists.  JavaScript cannot process lists so you cannot imagine the optimal Linear Solution that is always O(N).  This is the problem with Big O Notation because you \"think\" the Big O has to be one thing when it can always be O(N).", "likes": 0}]}, {"topLevelComment": {"id": "UgyT_1UB3cBmdGTetRp4AaABAg", "publishedAt": "2021-10-19T13:50:05Z", "author": "Ray Horn", "text": "Why can you not make the Fib function O(N)?  What's the deal?", "likes": 0}, "replies": [{"id": "UgyT_1UB3cBmdGTetRp4AaABAg.9Tg6E4dWX839Tg9EUkAfX7", "publishedAt": "2021-10-19T14:16:21Z", "author": "Ray Horn", "text": "Kudos on making a Linearly complex problem into an Exponentially complex problem which you skillfully turned back into a Linearly complex problem. Wow, I am so impressed. LOL.", "likes": 0}, {"id": "UgyT_1UB3cBmdGTetRp4AaABAg.9Tg6E4dWX839Tg7i7e6YFT", "publishedAt": "2021-10-19T14:03:03Z", "author": "Ray Horn", "text": "Too bad your language of choice is limiting your ability to see the optimal solution which is always iterative.  Python has Generators that are iterative and the Fib problem becomes trivial to express as an iterative solution.", "likes": 0}]}, {"topLevelComment": {"id": "UgxhY9ecl044Jhyfvxd4AaABAg", "publishedAt": "2021-10-19T13:42:56Z", "author": "Ray Horn", "text": "You had my attention until you taught recursion. You should be teaching iteration regardless of the perceived level of difficulty. Recursion is too easy but it is guaranteed to fail, soon or later due to stack restrictions.", "likes": 0}}, {"topLevelComment": {"id": "Ugw4LUlleR2vhhf1KZd4AaABAg", "publishedAt": "2021-10-19T05:45:47Z", "author": "Shivaraj Karki", "text": "Took more than a week to complete this....learnt a lot from this .. awesome one", "likes": 0}}, {"topLevelComment": {"id": "Ugzd4qIYtQEq8b1XebN4AaABAg", "publishedAt": "2021-10-19T03:41:30Z", "author": "Tanjiya Zahir Bhuiyan", "text": "Alhamdulillah, enjoyed the course a looooot. Recursive and Memoization excites me a lot. Tabulation is sort of hard. Will review again inshaallah. The logic are pretty clear now!", "likes": 1}}, {"topLevelComment": {"id": "UgxTQJHVNOQEBSZO9Hp4AaABAg", "publishedAt": "2021-10-18T05:23:13Z", "author": "duke daffy", "text": "//i did the bestSum fn in python but I am getting wrong answer for the last test case. \n\ndef bestSum(sum,arr,memo={}):\r\n  if(sum in memo):\r\n    return(memo[sum])\r\n  if(sum==0):\r\n    return ([])\r\n  if (sum<0):\r\n    return (None)\r\n  res = None\r\n  for num in arr:\r\n    diff = sum-num\r\n    diff_res = bestSum(diff,arr,memo)\r\n    \r\n    if(diff_res != None):\r\n      diff_res.append(num)\r\n      \r\n      \r\n      if((res ==  None) or (len(diff_res) < len(res))):\r\n        res = diff_res\r\n  memo[sum]=res    \r\n  return res\n\n//can anyone help me out?", "likes": 0}}, {"topLevelComment": {"id": "UgwKl7pp_bzgpwdE23h4AaABAg", "publishedAt": "2021-10-17T10:36:03Z", "author": "Joshua Benson", "text": "This course just proves that when you go through each minute detail of a problem in a calm and precise manner, while also hinting at the obvious even, a student is much more likely to pick up on the subject. Judging by all the other comments, slower people like myself are starting to get the concept. \ud83e\udd23\n\nFantastic coure, thank you very much for uploading this piece.", "likes": 135}, "replies": [{"id": "UgwKl7pp_bzgpwdE23h4AaABAg.9TabRIhosdL9cbCOnmHJUV", "publishedAt": "2022-06-23T05:21:42Z", "author": "INGA probatorem", "text": "o(1) for storage.", "likes": 0}, {"id": "UgwKl7pp_bzgpwdE23h4AaABAg.9TabRIhosdL9cbCGFCgItD", "publishedAt": "2022-06-23T05:20:32Z", "author": "INGA probatorem", "text": "The author did not include in the compute complexity the access of the memoized data. For the fibonacci, the algorithm can be optimized to o(1) instead of o(n).", "likes": 1}, {"id": "UgwKl7pp_bzgpwdE23h4AaABAg.9TabRIhosdL9WsJPXNI-Zc", "publishedAt": "2022-01-06T21:10:18Z", "author": "Pupper Gump", "text": "I don't think it's about slow or quick, it's just that schools don't teach us how to think. They just cram crap down our throats and expect use to puke up rainbows.", "likes": 1}]}, {"topLevelComment": {"id": "UgyidU89lvYkBRLI9e14AaABAg", "publishedAt": "2021-10-17T06:50:39Z", "author": "Curtis Bridge", "text": "dude i just graduated app academy and Alvin is the best he did a bunch of videos for a/A", "likes": 0}}, {"topLevelComment": {"id": "UgxBxT0vOHtJxwW5-wN4AaABAg", "publishedAt": "2021-10-16T23:59:22Z", "author": "Hilton", "text": "This video for me was mind blowing... During the 'howSum' algorithm, I notice on my pc, that the first version (no-memo) was fast for small numbers and the 'memoized' version was not fast enough. Took my time to choose random numbers until I found out that with numbers from 307  and up the memoized version was running smoothly. Thanks for sharing this lecture with all of us !!! Peace \u30fd(\u00b4\u25bd`)/", "likes": 0}}, {"topLevelComment": {"id": "UgzHz5SmpD75PZifChJ4AaABAg", "publishedAt": "2021-10-16T11:36:08Z", "author": "FKA Sample", "text": "How does combination.length < shortestCombination.length actually work accurately? If we found a branch with a length of 2 to solve, the moment we switch branches, and find a new working base (empty array) and add our first number to it, it's now always the shortest array, despite whatever it may BECOME on its way back up to the root.  It could replace a length 2 fully solved-to-root shortestCombination solution with a length 6 solution just because the first combination.length check is always 1 and less than shortestCombination, right?", "likes": 0}}, {"topLevelComment": {"id": "UgxTIjKcflAGx_bNaiJ4AaABAg", "publishedAt": "2021-10-16T07:30:44Z", "author": "xrailgun", "text": "gridTraveller tabulation (3:23:00-3:34:00 ish) doesn't seem to work in Python? The tabulated form takes way longer than the base non-memo form, even inputs (4, 3) cannot be feasibly calculated? Is there a python code sample somewhere?", "likes": 0}}, {"topLevelComment": {"id": "Ugwe42fZPJn3t2o5Y794AaABAg", "publishedAt": "2021-10-16T03:48:44Z", "author": "anikin3562", "text": "If anyone is getting a bug with the bestSum function using python, try changing \"shortest_combination = remainder_combination\" to \"shortest_combination = remainder_combination.copy()\". Memory allocation seems to work a little differently in Javascript, but in Python shortest_combination and remainder_combination are both pointing to the same list in memory, causing this error.\n\nEdit: Also, since there still appears to be bugs when using different inputs, change\"remainder_combination.append(num)\" to a copy before appending num e.g. r_c = remainder_combination.copy(), r_c.append(num), and compare this list against shortest_combination as opposed to the original.", "likes": 22}, "replies": [{"id": "Ugwe42fZPJn3t2o5Y794AaABAg.9TYJ16PDND09ag-uvHFRp-", "publishedAt": "2022-05-06T09:06:03Z", "author": "franklyn ihesiulo", "text": "@Vironic Please I am able to get my c# code to work for the bestSum problem, can you assist me with your code if you don't mind. I'll be very grateful", "likes": 0}, {"id": "Ugwe42fZPJn3t2o5Y794AaABAg.9TYJ16PDND09_qWb3TM2C3", "publishedAt": "2022-04-15T14:32:42Z", "author": "YTG", "text": "This happens When u initialize two variables with same list containing objects. Solution is python has something deepcopy, shallowcopy concepts...", "likes": 0}, {"id": "Ugwe42fZPJn3t2o5Y794AaABAg.9TYJ16PDND09_nd-SQtTGi", "publishedAt": "2022-04-14T11:39:37Z", "author": "shailja prabhakar", "text": "@anikin3562 Hi, can you please share the code in python, I am still struggling with the bestSum and howSum memoization.", "likes": 0}, {"id": "Ugwe42fZPJn3t2o5Y794AaABAg.9TYJ16PDND09_iXcVSkQNT", "publishedAt": "2022-04-12T12:07:43Z", "author": "shailja prabhakar", "text": "@Goloso Thank you so much, for sharing this unpacking method of python", "likes": 0}, {"id": "Ugwe42fZPJn3t2o5Y794AaABAg.9TYJ16PDND09_Lw7fF3UqK", "publishedAt": "2022-04-03T08:08:47Z", "author": "Aggrey Ochieng", "text": "got stuck why both java & python did not seem to give correct answer. This was a life saver. Thanks!", "likes": 0}]}, {"topLevelComment": {"id": "UgyT4PrLTmlIrAovjB94AaABAg", "publishedAt": "2021-10-16T00:28:30Z", "author": "yousha sajjad", "text": "thankyou so much.. I just finished it", "likes": 0}}, {"topLevelComment": {"id": "Ugw7SUtrG1zT_yKIJLh4AaABAg", "publishedAt": "2021-10-15T19:32:18Z", "author": "Your Himalayan Dude", "text": "4:10:00", "likes": 0}}, {"topLevelComment": {"id": "UgzsiYi-46B-WC222X54AaABAg", "publishedAt": "2021-10-15T19:31:43Z", "author": "Your Himalayan Dude", "text": "4:07", "likes": 0}}, {"topLevelComment": {"id": "UgwwGx4YLWfPz5b4OFx4AaABAg", "publishedAt": "2021-10-15T13:44:34Z", "author": "FKA Sample", "text": "The gridTraveler tree to understand the \"number of solutions\" is SO UNINTUITIVE.  Where 1,2 returns 1, and 1,3 returns one.  No one reading your recursive code could quickly and easily picture the tree structure and then make sense of how the function operates and why it makes sense.  It seems, for that reason, the worst possible structure of coding to solve the question.  It's like you have to already have the answer to the question to get to the solution; it acts more like a clever riddle, which always aim to be unintuitive until solved.", "likes": 0}}, {"topLevelComment": {"id": "Ugy6uNVqwNTV4B7u3SJ4AaABAg", "publishedAt": "2021-10-15T10:24:39Z", "author": "Elaheh Ordoni", "text": "I wish I could \"like\" it more than once!", "likes": 0}}, {"topLevelComment": {"id": "Ugxz1LhKE71OINDzqO14AaABAg", "publishedAt": "2021-10-15T06:40:29Z", "author": "Kwamina Essuah Mensah", "text": "You should change your name to a programming god mate. Thanks so much for this.", "likes": 0}}, {"topLevelComment": {"id": "UgxZ3QGv-Dv-blFBpdZ4AaABAg", "publishedAt": "2021-10-15T04:39:13Z", "author": "Jin Frank", "text": "After a million heavy accent videos\u2026I\u2019m willing to pay this dude\u2026", "likes": 0}}, {"topLevelComment": {"id": "UgzGoZzZVcMBahgL6wZ4AaABAg", "publishedAt": "2021-10-15T03:08:36Z", "author": "JL", "text": "Took algorithm senior spring, could not for the life of me understand recursion. This just cleared up my 3 year long road block", "likes": 0}}, {"topLevelComment": {"id": "UgzxQMW4u1-PgkJzMl14AaABAg", "publishedAt": "2021-10-15T00:59:04Z", "author": "Shawn Long", "text": "Dude love your video! Off topic question though: How are you printing colored ints inside of the arrays you print in your terminal?", "likes": 0}}, {"topLevelComment": {"id": "UgzqhgNHPARDxZjAc2J4AaABAg", "publishedAt": "2021-10-14T07:34:17Z", "author": "Kwamina Essuah Mensah", "text": "Yo,  I only aspire to reach this level of understanding coding problems. You my friend are a god.", "likes": 0}}, {"topLevelComment": {"id": "UgzDrhh5vj4bqq-e_GB4AaABAg", "publishedAt": "2021-10-14T04:10:36Z", "author": "Tyler Phillips", "text": "For the bestSum function (1:52:07) you can sort the array from largest to smallest and return the first result. It will always be the shortest path.", "likes": 1}, "replies": [{"id": "UgzDrhh5vj4bqq-e_GB4AaABAg.9TTBwUp5F709X3mCEcjN8g", "publishedAt": "2022-01-11T17:21:31Z", "author": "Surendra Rathore", "text": "He explained the reason in the video that don't fall for it. Picking the largest is not always the best.\nFor ex - for sum 9 in (6,5,4,1) best is [5,4] but with sorting you will end up having [6,1,1,1]", "likes": 0}, {"id": "UgzDrhh5vj4bqq-e_GB4AaABAg.9TTBwUp5F709TWJwNVo9g1", "publishedAt": "2021-10-15T09:18:12Z", "author": "Devbom", "text": "Exactly what I was thinking. You could just re-use the previous 'howSum' function by calling 'howSum' with a sorted 'numbers' array.", "likes": 0}]}, {"topLevelComment": {"id": "UgxjAzF-XjPV0bZdfVh4AaABAg", "publishedAt": "2021-10-13T18:27:22Z", "author": "Joshua", "text": "I thought the time complexity is based on # of edges instead of # of ways from the root node to the most child node ..", "likes": 0}}, {"topLevelComment": {"id": "UgyaYKgJdpCr-WP867h4AaABAg", "publishedAt": "2021-10-13T16:01:28Z", "author": "Arun Shankar S", "text": "This is why university education has become redundant. It is much better to learn stuff from the internet than from a classroom.", "likes": 0}}, {"topLevelComment": {"id": "Ugx7R15bRtzFKNINYeZ4AaABAg", "publishedAt": "2021-10-13T15:26:47Z", "author": "Dheeraj Kumar", "text": "This is the best tutorial on Dynamic programming I ever seen.", "likes": 1}}, {"topLevelComment": {"id": "UgyQnDcGgVTkTztmIYB4AaABAg", "publishedAt": "2021-10-13T15:20:34Z", "author": "Xerone", "text": "1:00:00 i think you forgot to implement the f(a,b) = f(b,a) optimization in this solution. It seems possible by simply storing the result with a flipped key in memo[n,m] as well as the default memo[m,n] combination.", "likes": 0}}, {"topLevelComment": {"id": "Ugz4SwJxihg1pfxE3zV4AaABAg", "publishedAt": "2021-10-13T08:55:41Z", "author": "Daniel Crego", "text": "1:24:30 \"canSum memoization\"\nThe solution that's O(n^m) is great for the example but you can improve it way more before applying memoization.\nFor example, you can try to map the n-tree to a binary tree (2-tree). This solution is O(2^(n+m)). But how?\nYou can define the recursion as canSum(tgt, nums) := canSum(tgt-nums[0], nums) or canSum(tgt, nums[1:]) and define the base cases as:\n1) true if tgt == 0\n2) false if tgt <= 0\n3) false if nums.length <= 0", "likes": 0}, "replies": [{"id": "Ugz4SwJxihg1pfxE3zV4AaABAg.9TR7lbll2Pp9TR8_IkE1f2", "publishedAt": "2021-10-13T09:02:44Z", "author": "Daniel Crego", "text": "Finally, in order to apply memoization you can use an array index parameter instead of mutating the array", "likes": 0}, {"id": "Ugz4SwJxihg1pfxE3zV4AaABAg.9TR7lbll2Pp9TR8IqBNcbu", "publishedAt": "2021-10-13T09:00:21Z", "author": "Daniel Crego", "text": "And you can improve the avg case scenario even more by:\n* Sorting nums in descending order\n* And traversing the graph with depth-first search\n1st child being canSum(tgt-nums[0], nums)", "likes": 0}]}, {"topLevelComment": {"id": "UgyB7pHp9pJxVb-YJsB4AaABAg", "publishedAt": "2021-10-13T08:06:51Z", "author": "Russian Roulette", "text": "But companies who actually give these sorts of exams which will not be used on a day-to-day basis are delusional. Companies have systems with UI and DB, and you won't even calculate fibonnacci sh*t and factorial, I've seen recursion twice in like 10 applications running in the company, so if a company gives the type of technical exams like these, I would be happy not to get the job!", "likes": 0}}, {"topLevelComment": {"id": "Ugy4HljprY5eXaijvNJ4AaABAg", "publishedAt": "2021-10-13T05:00:00Z", "author": "Blaise Quay", "text": "People be talking about brute forcing a problem, like bro, I already know how to do that because I've been brute forcing my way through the entire computer science field \ud83d\ude2d", "likes": 0}}, {"topLevelComment": {"id": "UgxA307sEz0eYDEQcYN4AaABAg", "publishedAt": "2021-10-12T21:12:35Z", "author": "yonathan michael", "text": "Amazing video .... I think that should be an && (and) operator at 4:20:27", "likes": 0}, "replies": [{"id": "UgxA307sEz0eYDEQcYN4AaABAg.9TPsJ00dfoo9TPsV0HP3NX", "publishedAt": "2021-10-12T21:14:13Z", "author": "yonathan michael", "text": "nvm you right....my brain is fried after watching this whole thing in one day......you're Goated ...thank you", "likes": 0}]}, {"topLevelComment": {"id": "UgwhJN9DT7OAQVU9TRZ4AaABAg", "publishedAt": "2021-10-12T19:55:41Z", "author": "Michael", "text": "good job!", "likes": 0}}, {"topLevelComment": {"id": "UgzqmOW-rU3NgFb7DEh4AaABAg", "publishedAt": "2021-10-12T15:34:06Z", "author": "Daniel Crego", "text": "18:18 O(2^n) is right, but it isn't so obvious.\nLet's see dib(5), for each level (0 to 4) we've O(2^level). This is O(2^0),O(2^1),O(2^2),O(2^3) and O(2^4). But we can't keep just the last level O(2^4) which would be O(2^(n-1)). Instead, we've to sum it all getting to O(2^n-1) or just O(2^n).", "likes": 0}}, {"topLevelComment": {"id": "UgyqK2ZN7HvskX0C9jh4AaABAg", "publishedAt": "2021-10-12T14:55:50Z", "author": "Sam Weninger", "text": "In many of the memo cases, for instance in \"canConstruct(...)\", you store cases where the target evaluates to true (i.e. the \"target\" can be constructed by strings in \"wordBank\") but isn't this unnecessary since in this case you return true, and the function will stop evaluating any further substrings?", "likes": 0}}, {"topLevelComment": {"id": "UgwGUdZKwcuNfW44YYx4AaABAg", "publishedAt": "2021-10-12T06:48:23Z", "author": "E. Oh", "text": "1:00:21 \nI substituted the line\nkey = m + ',' + n\nto \nkey = frozenset([m,n])\nfor python.\nIs this fine or does it have a better way?", "likes": 0}, "replies": [{"id": "UgwGUdZKwcuNfW44YYx4AaABAg.9TOKPLj7HeB9TZNPcN6Z2C", "publishedAt": "2021-10-16T13:46:16Z", "author": "ArtificiaL ", "text": "You could even skip that line by passing in (x, y) as the key.\nmemo[(x, y)] = ......... + .........", "likes": 0}, {"id": "UgwGUdZKwcuNfW44YYx4AaABAg.9TOKPLj7HeB9TYEQYWHSzG", "publishedAt": "2021-10-16T03:08:31Z", "author": "Jack Trimboli", "text": "I mean you also could just cast m and n to strings using str(x) and do it exactly as he did in the video", "likes": 0}]}, {"topLevelComment": {"id": "UgzEYqQ-3LwxGwC_BFp4AaABAg", "publishedAt": "2021-10-11T08:22:11Z", "author": "Joseph Githithu", "text": "Stuff is helpful lots. Thanks.\ud83e\udd17", "likes": 0}}, {"topLevelComment": {"id": "UgzB9_IN0TkNqzdrzXd4AaABAg", "publishedAt": "2021-10-11T05:04:25Z", "author": "Les IsMore", "text": "Within canSum(), on line 10, where you have memo[targetSum], I was thinking memo[remainder]. I'm having a hard time wrapping my brain around the difference.", "likes": 0}}, {"topLevelComment": {"id": "UgzztNuy_ud61axhD8V4AaABAg", "publishedAt": "2021-10-11T05:02:05Z", "author": "Les IsMore", "text": "Within canSum(), on line 8, is there a reason to declare remainder with 'const' rather than 'let'?", "likes": 0}}, {"topLevelComment": {"id": "Ugz5etOE95cqcsXkZ-d4AaABAg", "publishedAt": "2021-10-11T02:53:19Z", "author": "Peng Yu", "text": "Great video! We could use \"return memo[x] = y\" as well.", "likes": 0}}, {"topLevelComment": {"id": "UgyoQOmQs5VY7occnKd4AaABAg", "publishedAt": "2021-10-11T01:50:57Z", "author": "Tanson Thomas", "text": "In how sum, the memoised object is not growing it will be only contain a null value because when we get an array list we know that is the solution. So time and space complexity will be just like the canSum memoised solution.", "likes": 0}}, {"topLevelComment": {"id": "UgwMNbCviVRSQS6uZ9p4AaABAg", "publishedAt": "2021-10-10T17:37:36Z", "author": "David \u00c1lvarez Lombardi", "text": "Using a mutable default argument can be dangerous depending on the language, especially in python. In python the memo object is only created once -- when the function is defined -- rather than every time the function is called. For this reason, if your fuction is not deterministic with respect to the arguments, but you would still like to use memoisation, multiple calls to the function would very quickly get you a bug. For this reason I prefer to define an inner function that accepts the memo argument and initialise the memo outside of the inner function.", "likes": 0}, "replies": [{"id": "UgwMNbCviVRSQS6uZ9p4AaABAg.9TKL6aetyrn9eQi5uRvOCm", "publishedAt": "2022-08-07T11:19:23Z", "author": "Preet Mehta", "text": "Hey, I faced a similar bug...eating me for days now...thanks for the solution !!", "likes": 0}]}, {"topLevelComment": {"id": "UgzPNJwLrzanJQozRUF4AaABAg", "publishedAt": "2021-10-10T11:15:23Z", "author": "Dhairya Savaner", "text": "import java.util.*;\r\nclass Demo\r\n{\r\n\tstatic LinkedHashMap<Long,Long> map=new LinkedHashMap<Long,Long>();\r\n\tstatic long fib(long n)\r\n\t{\r\n\t\tif(n<=2) return 1;\r\n\t\tif(map.containsKey(n))return map.get(n);\r\n\t\tmap.put(n,fib(n-2)+fib(n-1));\t\t\r\n\t\treturn fib(n-2)+fib(n-1);\r\n\t}\r\n\tpublic static void main(String args[])\r\n\t{\r\n\t\tlong n=60;\r\n\t\tSystem.out.println(fib(n));\r\n\t\t\r\n\t}\r\n}\n\n\nThe fibonacci problem in Java. This is so amazing.", "likes": 0}}, {"topLevelComment": {"id": "UgwsrmJeZbXMPCnGghB4AaABAg", "publishedAt": "2021-10-10T11:05:33Z", "author": "andreyka26_programmer", "text": "3:10:30 - sorry, we got n^m because at each step(no matter whether it is from the memo or just calculated) we still need to do all of the stuff to push the result into array which takes us linear time as well?\nOn top of that, could someone please explain, why the space is O(M)? We preserve at least M in our memo obj, at least M * N in the result?", "likes": 0}}, {"topLevelComment": {"id": "UgzmORzQeIqnhQLec0J4AaABAg", "publishedAt": "2021-10-10T05:18:47Z", "author": "ROUNAK KUMAR GUPTA", "text": "Add  blocker..\ud83d\ude0e\ud83d\ude0e\ud83d\ude0e", "likes": 0}}, {"topLevelComment": {"id": "UgxAW5licRIli7kUwZh4AaABAg", "publishedAt": "2021-10-09T14:29:52Z", "author": "Niall Murphy", "text": "For grid traveller, he forgot to set the key both ways. Like memo[m + \",\" + n] and memo[n +\",\" + m]. He alluded to it beforehand but didn't code it.\n\nI tested it adding the the second way and it's a good bit faster. A grid of 500,500 goes from 275ms to 228ms on my laptop.\n\nconst gridTraveller = (m, n, memo = {}) => {\n\u00a0 \u00a0const key1 = `${m},${n}`;\n\u00a0 \u00a0const key2 = `${n},${m}`;\n\u00a0 \u00a0if (key1 in memo) return memo[key1];\n\n\u00a0 \u00a0if (m === 1 & n === 1) return 1;\n\u00a0 \u00a0if (m < 1 || n < 1) return 0;\n\n\u00a0 \u00a0const result = gridTraveller(m - 1, n, memo) + gridTraveller(m, n -1, memo);\n\u00a0 \u00a0memo[key1] = result;\n\u00a0 \u00a0memo[key2] = result;\n\u00a0 \u00a0return result;\n}\n\nGreat course so far. Learning a lot.", "likes": 0}}, {"topLevelComment": {"id": "UgyU5s0z-AjIPBayzv14AaABAg", "publishedAt": "2021-10-08T19:04:51Z", "author": "Gowtham Kunduru", "text": "RIP to those who disliked this video. Kudos to the Coderbyte team", "likes": 0}}, {"topLevelComment": {"id": "Ugyem5deRUEp4EtOBtN4AaABAg", "publishedAt": "2021-10-08T12:44:07Z", "author": "Thibaut Hanson", "text": "for the 3 \"sum\" types of problems, isn't it solvable with division & modulo math? Am I missing something?\nI get that it's an example like any other but it could be nice to tell the audience. (sorry if I missed it ^^' )", "likes": 0}}, {"topLevelComment": {"id": "Ugw3MYoMNxTzR-7chFx4AaABAg", "publishedAt": "2021-10-08T06:47:34Z", "author": "zoltantrades", "text": "20:00", "likes": 0}}, {"topLevelComment": {"id": "Ugy4-KDPCOoQZ7L9RON4AaABAg", "publishedAt": "2021-10-07T23:01:21Z", "author": "Thomas Person", "text": "Just STOP.\n\nPD: You're the demon.", "likes": 0}}, {"topLevelComment": {"id": "UgyyKsZs8r-chLqhV1h4AaABAg", "publishedAt": "2021-10-07T22:56:44Z", "author": "Ayoub Alem", "text": "Like if you agree to make  the comment on the TOP.\nat 1:26:06 the canSum function will not work if the array contains a 0 because it will substract the zero from the n infinitely,\nso you should check inside the loop if the num == 0: continue.\nNote: He assumed first that all the integers are non negative ones.", "likes": 0}}, {"topLevelComment": {"id": "UgzVFJRqcp8zgO1wtaV4AaABAg", "publishedAt": "2021-10-07T18:17:19Z", "author": "Joshua Weiss", "text": "33:06 if you were programming this in say c, wouldn't you need to be passing the memo as a pointer? how does the value of the array transfer up the function or am I just thinking about this wrong? seems like the memo is returning after the right side would be able to use it and is not transferred from the left side of the tree to the right no? Or is the array passed already a pointer?", "likes": 0}}, {"topLevelComment": {"id": "UgyGdXUONimcPE3qJ2p4AaABAg", "publishedAt": "2021-10-07T15:04:50Z", "author": "theophylline", "text": "At 2:19:08 why can't you remove the suffix?", "likes": 0}}, {"topLevelComment": {"id": "UgwQh0-QpNEhwDhl7Vt4AaABAg", "publishedAt": "2021-10-07T04:50:23Z", "author": "Joshua Van Deren", "text": "The only thing I would do differently for gridTraveler is making sure that your key is order agnostic. As you mentioned in your video, gridTraveler(2,3) should return the same value as gridTraveler(3,2). Therefore, you should cache both under the same key.", "likes": 2}, "replies": [{"id": "UgwQh0-QpNEhwDhl7Vt4AaABAg.9TBEvhNDBNt9ckguJoVeCv", "publishedAt": "2022-06-26T21:50:11Z", "author": "chichi90504", "text": "I'd also change the first base case check from an and to an or because there is only one path through a 1,x>0 size grid", "likes": 0}]}, {"topLevelComment": {"id": "UgzwXZWW1T7AwsdwMx14AaABAg", "publishedAt": "2021-10-07T04:30:18Z", "author": "Thierry Beaulieu", "text": "This is the best video I've seen in my life. I normally spend 2 hours a day on Youtube per day. I've done that for the past 6 years. In 6 years, that's the best video I've ever seen.", "likes": 2}}, {"topLevelComment": {"id": "UgztEHogQNXZtvz_BdR4AaABAg", "publishedAt": "2021-10-07T03:15:28Z", "author": "Daniel W. R. Hart", "text": "1:44:40 Instead of destructuring remainderResult, he could have just done this to make this part O(1): \nremainderResult.push(num);\nreturn remainderResult;\n\n2:24:05 Wouldn't it be a bit faster to use target.startsWith(word) instead, since it doesn't necessarily have to scan the whole string?", "likes": 4}}, {"topLevelComment": {"id": "UgwWm-6cndGa-OhbMa94AaABAg", "publishedAt": "2021-10-06T19:33:47Z", "author": "bode", "text": "I like how we can here his macbook's ventilator blowing like an aircraft engine when he decides to compute the 50th number of the fibonacci sequence at 6:20\nThanks for the quality content =)", "likes": 0}}, {"topLevelComment": {"id": "UgzZO5gUXo4tsLShVI14AaABAg", "publishedAt": "2021-10-06T18:28:43Z", "author": "ThePheanor", "text": "This guy teaches!", "likes": 0}}, {"topLevelComment": {"id": "Ugx3Lne_1O3NLHatO4Z4AaABAg", "publishedAt": "2021-10-06T17:13:22Z", "author": "roberto kalinovskyy", "text": "i think, that the first howsum with tabulation gives the sortest result, i didnt do the howsum tab 2, because in my code it works the same way (python)", "likes": 0}}, {"topLevelComment": {"id": "Ugz90O-ebMXbQh7fLzd4AaABAg", "publishedAt": "2021-10-06T15:28:45Z", "author": "sam sunny", "text": "this is Goooooooooooooooooooooooooold !!!!!!!!!", "likes": 0}}, {"topLevelComment": {"id": "UgzyLBiCeQwkyKbcB6l4AaABAg", "publishedAt": "2021-10-06T15:15:42Z", "author": "Abhishek Tiwari", "text": "Seriously this was the best tutorial on Dynamic Programming IMHO.", "likes": 2}}, {"topLevelComment": {"id": "UgwK4In1lC116v2M-1N4AaABAg", "publishedAt": "2021-10-06T12:16:01Z", "author": "RP", "text": "Damn I don't understand why multiplying or dividing by n is the same as O(n) Like, surely 2n if you put it in a graph will rise sooner than n. and 0.5n will be more mellow.", "likes": 0}, "replies": [{"id": "UgwK4In1lC116v2M-1N4AaABAg.9T9T7qpKE_M9T9z6H4Z0m-", "publishedAt": "2021-10-06T17:04:10Z", "author": "LUKFUN TV", "text": "This will help, if u r new to programming\n\nhttps://youtu.be/HfIH3czXc-8", "likes": 0}]}, {"topLevelComment": {"id": "Ugx_431r4z7oSbEdR_94AaABAg", "publishedAt": "2021-10-06T08:37:22Z", "author": "Meghna Sharma", "text": "2:38:34 we didnt consider memo object memory in space complexity?", "likes": 0}}, {"topLevelComment": {"id": "UgxGT8agkxHHQuBMIRt4AaABAg", "publishedAt": "2021-10-05T19:59:22Z", "author": "Jeffrey Gauntt", "text": "the first minute of video says .... \"construct the string 'POTENTPOT' \"   ... wow this guys smokes some potent stuff!!!  :)", "likes": 0}}, {"topLevelComment": {"id": "UgwZtzSkIVI8D9ZuGop4AaABAg", "publishedAt": "2021-10-04T13:12:09Z", "author": "BlackrocaYT", "text": "25:10 problem of overlapping problems is known as dynamic programming.", "likes": 0}}, {"topLevelComment": {"id": "Ugxp1J0zINg4FJC2pD94AaABAg", "publishedAt": "2021-10-03T19:29:41Z", "author": "SensingRose", "text": "Hi question.. For whom is this tutorial most useful? Are there prerequisites prior to diving into this tutorial?  i am a total beginner, self teaching myself IT coming from Healthcare industry, learning Python as my first language. Is this too advanced for me?", "likes": 0}}, {"topLevelComment": {"id": "Ugwj8f77NuQMC5KxL4t4AaABAg", "publishedAt": "2021-10-02T22:52:35Z", "author": "ClockFixer", "text": "40:00 In fact, combinatorics saves a lot of trouble. nCr (n choose k) requires one line of code. \n\nLet 'm' be the height and 'n' the width.\n\nThen, we notice that if we treat each move as an arrow - in a 3x3 grid there'll be only 2 columns allowing for 'arrow right' and only 2 rows allowing for 'arrow down' - so we now have a number of strings (sequences like 'right' 'right' 'down' down' or 'down' right' down' 'right') of 'right' and 'down' which is (m - 1) + (n - 1) = (3 - 1) + (3 -1) = 4. \n\nSo we have 4! = 24 permutations (as usual we don't want to double count so we do the next step).\n\nNow these 24 permutations will just swap these arrows around purposelessly, i.e. (without loss of generality) a combination of  'right' and 'right' would yield 2 in this case (when, in fact, there is just one. It's like counting AB and BA except the letters are AA, so it counts AA and AA as if they were two distinct combinations).\n\nHow do we not double count? \n\nWell, there are only 'down' and 'right' - so simply by dividing our (m + n - 2)! by (m - 1)! (permutations of 'down') * (n - 1)! (permutations of 'right')\n\nthat is, all redundant permutations of 'down' (2 rows) and all redundant permutations of 'right' (2 columns) are addressed.\n\nSo the answer is \n(3 + 3 - 2)! \n-------------------------- = 4! / 2! * 2! = 24 / 2 * 2 = 6\n(m - 1)! * (n - 1)!", "likes": 5}, "replies": [{"id": "Ugwj8f77NuQMC5KxL4t4AaABAg.9T0Ine7TZqW9VmMQ6rbxeh", "publishedAt": "2021-12-10T17:09:45Z", "author": "ClockFixer", "text": "@Christopher Mitchell indeed", "likes": 0}, {"id": "Ugwj8f77NuQMC5KxL4t4AaABAg.9T0Ine7TZqW9VhaPCqW21b", "publishedAt": "2021-12-08T20:44:30Z", "author": "Christopher Mitchell", "text": "Very simple, indeed. Only slugs would not understand.\n/s", "likes": 0}]}, {"topLevelComment": {"id": "Ugzoe9_bk1-PixvZMKt4AaABAg", "publishedAt": "2021-10-02T22:39:21Z", "author": "Lily Yang", "text": "Wow - i finally understand how to approach grid travelling problems!!! Thank you so much FCC and Coderbyte!! It's very hard to achieve step 1 in the memoization recipe \ud83d\ude22", "likes": 1}}, {"topLevelComment": {"id": "UgyQwFqZNgb8obIE7pF4AaABAg", "publishedAt": "2021-10-02T17:04:43Z", "author": "Terry Miller", "text": "You are a coding instructing master. There are millions of people who code, but only a few coding instructing masters. Great stuff. You deserved every one of those subs and likes.", "likes": 4}}, {"topLevelComment": {"id": "UgzjRfiHP_IAL2ye9hl4AaABAg", "publishedAt": "2021-10-02T01:46:32Z", "author": "Visual Calcs", "text": "This code is looking pretty good.", "likes": 1}}, {"topLevelComment": {"id": "Ugx-MUN6Aa8cRZeceSh4AaABAg", "publishedAt": "2021-10-01T14:08:19Z", "author": "Manoj RAJ S R", "text": "I'm doing it in python, I had the first two problem right, but on the third problem(canSum), it's print true for everything. The program gave correct output on the recursive method, but when I try to memoizise it, it's giving true for everything. Has anyone faced this issue? Can someone help me pls?", "likes": 2}, "replies": [{"id": "Ugx-MUN6Aa8cRZeceSh4AaABAg.9Sxn-utooAP9cVnISH7Xqu", "publishedAt": "2022-06-20T17:38:12Z", "author": "LrdKGB", "text": "Basically python stores the first memoized value and returns it every time you print out the result. Comment out the calls with result true or name the variables Targetsum0, 1 , 2, numbers0, 1 2 then call them separately and you will see it returns false", "likes": 0}, {"id": "Ugx-MUN6Aa8cRZeceSh4AaABAg.9Sxn-utooAP9TgQ4ClseO7", "publishedAt": "2021-10-19T16:43:29Z", "author": "ArtificiaL ", "text": "@Manoj RAJ S R If you have found some more efficient way to do this, then pls share it here!", "likes": 0}, {"id": "Ugx-MUN6Aa8cRZeceSh4AaABAg.9Sxn-utooAP9TgPrKPvbOJ", "publishedAt": "2021-10-19T16:41:35Z", "author": "ArtificiaL ", "text": "@Manoj RAJ S R \ndef bestSum(targetSum, numbers, memo = {}):\r\n    # Base cases\r\n    if targetSum in memo: return memo[targetSum]\r\n    if targetSum == 0: return []\r\n    if targetSum < 0: return None\r\n\r\n    shortestSum = None\r\n\r\n    for num in numbers:\r\n        remainder = targetSum - num\r\n        remainderResult = bestSum(remainder, numbers)\r\n\r\n        if remainderResult is not None:\r\n            remainderResult = remainderResult + [num]\r\n            if shortestSum is None or (len(remainderResult) < len(shortestSum)):\r\n                shortestSum = list(remainderResult)\r\n\r\n    if type(shortestSum) == list: memo[targetSum] = list(shortestSum)\r\n    else: memo[targetSum] = shortestSum\r\n    return shortestSum", "likes": 0}, {"id": "Ugx-MUN6Aa8cRZeceSh4AaABAg.9Sxn-utooAP9TZaclI0bSR", "publishedAt": "2021-10-16T15:50:32Z", "author": "Manoj RAJ S R", "text": "@ArtificiaL  I got this. Thanks anyway. But now I have problem with bestsum. I tried everything but not working. So please share the answer for bestsum also if possible.", "likes": 1}, {"id": "Ugx-MUN6Aa8cRZeceSh4AaABAg.9Sxn-utooAP9TZWQWwvBxS", "publishedAt": "2021-10-16T15:05:02Z", "author": "ArtificiaL ", "text": "*Here's my solution for that if you didn't find the solution yet.*\n\n    targetSum = 300\r\n    numbers = [7, 14]\r\n    memo = {}\n    \n\r\n\r\n    def canSum(targetSum, numbers):\r\n\r\n\t    if targetSum in memo: return False\r\n\t    if targetSum == 0: return True\r\n\t    if targetSum < 0: return False\r\n\t\t\r\n\t    for num in numbers:\r\n\t\t    remainder = targetSum - num\r\n\t\t    if canSum(targetSum - num, numbers) == True: return True\r\n\t\t    memo[remainder] = False\r\n\t\t\r\n\t    return False\r\n\t\r\n    print(canSum(targetSum, numbers))", "likes": 0}]}, {"topLevelComment": {"id": "Ugx3Em0NfHhzB6Nf5Tx4AaABAg", "publishedAt": "2021-10-01T13:33:13Z", "author": "Noel Rojas", "text": "Love the video and the explanations, but call me crazy if you want.... canSum(7, [2, 3]) should return false, not true. 2 + 3 is not 7.", "likes": 0}, "replies": [{"id": "Ugx3Em0NfHhzB6Nf5Tx4AaABAg.9SxizswkzEG9TA35xgWOw_", "publishedAt": "2021-10-06T17:47:49Z", "author": "Namrata Pawale", "text": "@Noel Rojas its computed as [2,2,3] because you can reuse the elements in the numbers array.", "likes": 0}, {"id": "Ugx3Em0NfHhzB6Nf5Tx4AaABAg.9SxizswkzEG9SxkDZ0eRIx", "publishedAt": "2021-10-01T13:43:58Z", "author": "Noel Rojas", "text": "if canSum(7, [2, 4]) is false, canSum(7, [2, 3]) must be false since the sum of the elements in the array [2, 3] is lower than the sum in the array [2, 4]", "likes": 0}]}, {"topLevelComment": {"id": "UgwtHQb4S7P98j7aPOx4AaABAg", "publishedAt": "2021-10-01T05:14:57Z", "author": "Louis Thomas", "text": "I remember this guy from app academy he's the best", "likes": 0}}, {"topLevelComment": {"id": "UgzZWCsGKF5S7ifA88V4AaABAg", "publishedAt": "2021-09-30T17:57:08Z", "author": "ELMO AD", "text": "golden course I've just solved a problem similar to one of these you've talked about \nand then I realized the meaning of this course", "likes": 0}}, {"topLevelComment": {"id": "Ugwj4kc_iyDi9qsN_-54AaABAg", "publishedAt": "2021-09-30T16:51:42Z", "author": "Manideep Reddy", "text": "Maann.. where were you all my life. Just saying that this is a good tutorial is utterly not enough.", "likes": 0}}, {"topLevelComment": {"id": "UgxnA_0gd9Y9qXH8qqF4AaABAg", "publishedAt": "2021-09-30T15:36:11Z", "author": "Will C Chen", "text": "Love this video so informative", "likes": 0}}, {"topLevelComment": {"id": "Ugyxt1IBOBtGwy28hhV4AaABAg", "publishedAt": "2021-09-30T08:35:01Z", "author": "Do Xuan Hoang", "text": "Computer Science students would appreciated this very much. Thanks for intelligible explanations !", "likes": 4}}, {"topLevelComment": {"id": "UgxmHk4B3FwPouUrWvx4AaABAg", "publishedAt": "2021-09-30T04:18:49Z", "author": "Magesh", "text": "@2:33:14 the additional complexity from performing string.indexOf() can be added at each stage ie it is O(m*n) worst but O(m+n) average so overall can be termed as O(n^m * m * (m*n)) which includes slicing and indexof", "likes": 1}}, {"topLevelComment": {"id": "Ugyu9cvB-GaeKe5M1e14AaABAg", "publishedAt": "2021-09-30T03:16:20Z", "author": "Balamurugan Radhakrishnan", "text": "Best video to learn Dynamic programming.  The progression of problems to understand DP is well structured. Can I know what platform was used to create the content slides ?", "likes": 0}}, {"topLevelComment": {"id": "UgypBqq-lDzd-UNREsl4AaABAg", "publishedAt": "2021-09-29T21:04:32Z", "author": "Vasavi Vlogs", "text": "where can we access the code which is provided in the video. Please respond", "likes": 0}}, {"topLevelComment": {"id": "UgwI__q3IlOr6KiqpJ54AaABAg", "publishedAt": "2021-09-29T13:26:49Z", "author": "maya\u674e", "text": "great video", "likes": 0}}, {"topLevelComment": {"id": "UgznLx4SuFOJisryHtV4AaABAg", "publishedAt": "2021-09-29T13:03:12Z", "author": "Victa P", "text": "This is like watching #ProZD explaining Dynamic Programming. Its done so well its entertaining and enlightening", "likes": 0}}, {"topLevelComment": {"id": "UgyLV4TujYSbn_gvJ1Z4AaABAg", "publishedAt": "2021-09-29T05:36:45Z", "author": "Kushal Kumar", "text": "nth Fibonacci number can be found out directly using general formula which involves Golden ratio and GridTraveller problem can be solved using Combinations as (m+n-2)C(m-1) or (m+n-2)C(n-1) where m and n are arguments of the function.", "likes": 0}}, {"topLevelComment": {"id": "UgyNOCDRdx9YgSjTRcB4AaABAg", "publishedAt": "2021-09-29T03:15:45Z", "author": "Tony Lee", "text": "Fantastic DP tutorial! Can not miss it if you learn DP.", "likes": 1}}, {"topLevelComment": {"id": "Ugwt8HsK7heNs1ZuBgF4AaABAg", "publishedAt": "2021-09-29T01:55:07Z", "author": "1nspir3d", "text": "Well done Alvin, I appreciate your work that you did and for sharing your knowledge with us. Also in the gridTraveler function instead of checking if both m and n are equal to 1 (m === 1 && n === 1) we can check if either m or n is equal to 1 (m === 1 || n === 1). I made some test and in the second case the function runs a bit faster, for example I made 4 test for both variants with 100 x 100 grid and for the first variant average time was 10.07375 seconds and 9.684 for the second one. Anyway, you made a great video and I learned some new stuff from you, thank you so much!", "likes": 3}}, {"topLevelComment": {"id": "Ugw8vnmXN9MPcGwK4Wp4AaABAg", "publishedAt": "2021-09-28T15:02:08Z", "author": "SivaRanjaniDev", "text": "Have one doubt...\nAt time 18:09 , time complexity has to be n*(2 power n) right?\nWe have to multiply height n and width of the tree (2 power n) , which in turn yields n*(2 power n) .\nPlease correct me if I am wrong", "likes": 0}}, {"topLevelComment": {"id": "UgymXClep8-qKxbJ4Ep4AaABAg", "publishedAt": "2021-09-27T18:48:59Z", "author": "Cult of Improvement", "text": "Is the memoization method of the gridtraveler also considering that gridTraveler(m, n) = gridTraveler(n, m) ??", "likes": 0}}, {"topLevelComment": {"id": "UgxO8brqV1OlUpRnWTx4AaABAg", "publishedAt": "2021-09-27T12:37:34Z", "author": "Sylus", "text": "38:52 (Bookmark)", "likes": 0}}, {"topLevelComment": {"id": "UgyxyBS03-TrH0PgV8F4AaABAg", "publishedAt": "2021-09-27T10:36:46Z", "author": "Ashutosh Sk", "text": "public static ArrayList<Integer> bestSum(int targetSum, int[] numbers, HashMap<Integer, ArrayList<Integer>> memo) {\r\n        if (memo.containsKey(targetSum)) return memo.get(targetSum);\r\n        if (targetSum == 0) return new ArrayList<>();\r\n        if (targetSum < 0) return null;\r\n\r\n        ArrayList<Integer> shortestCombination = null;\r\n\r\n        for (int num : numbers) {\r\n            int remainder = targetSum - num;\r\n            var remainderResult = bestSum(remainder, numbers, memo);\r\n            if (remainderResult != null) {\r\n                remainderResult.add(num);\r\n                var combination = remainderResult;\r\n                if (shortestCombination == null || combination.size() < shortestCombination.size()) {\r\n                    shortestCombination = combination;\r\n                }\r\n            }\r\n        }\r\n        memo.put(targetSum, shortestCombination);\r\n        return shortestCombination;\r\n    }\n\n\n\ncan anyone help we with problem in this snippet?", "likes": 1}, "replies": [{"id": "UgyxyBS03-TrH0PgV8F4AaABAg.9Sn6c2XVW649SpZ-_f8Kke", "publishedAt": "2021-09-28T09:23:16Z", "author": "BURADA PRAVEEN", "text": "hey thank u and could you please put the code for how sum little bit confusing so please", "likes": 0}]}, {"topLevelComment": {"id": "Ugw_CAYGBDHmoYJ5JdZ4AaABAg", "publishedAt": "2021-09-27T09:55:18Z", "author": "Mateusz Galar", "text": "I think for this grid travel problem, we are not checking for (n,m) keys in memo. Previously it was said that (2,1) is same as (1,2).", "likes": 0}}, {"topLevelComment": {"id": "UgxCwbzsyJRWTLwofgZ4AaABAg", "publishedAt": "2021-09-26T18:27:42Z", "author": "priyank dubey", "text": "51:19", "likes": 0}}, {"topLevelComment": {"id": "Ugwwr202Rnew5--E_2d4AaABAg", "publishedAt": "2021-09-26T16:23:17Z", "author": "Razor Jhon", "text": "bro the first fib algorithm , console.log(6) returns 8 ? how i tested it out with javascript and it returned 9 not 8", "likes": 0}, "replies": [{"id": "Ugwwr202Rnew5--E_2d4AaABAg.9Sl9U8gF-ss9SpZAJHQ_s6", "publishedAt": "2021-09-28T09:24:44Z", "author": "BURADA PRAVEEN", "text": "n==0 return 0;\nn==1 || n==2 return 1;\nplease check with this snippet", "likes": 0}]}, {"topLevelComment": {"id": "UgzyVzdLpG1iY2d1WXB4AaABAg", "publishedAt": "2021-09-26T15:18:09Z", "author": "Jaideep Bolla", "text": "This was a nice tutorial. Can you pls share the python version of code samples?", "likes": 1}}, {"topLevelComment": {"id": "Ugwoj0Ci85fPxEALpsF4AaABAg", "publishedAt": "2021-09-26T12:36:13Z", "author": "Maria Kirkova 2021", "text": "pls stop ..\nmy head explodes  !!", "likes": 0}}, {"topLevelComment": {"id": "UgzZ8IlFb8nqsDK455d4AaABAg", "publishedAt": "2021-09-26T11:23:53Z", "author": "\u306e\u30fc\u3089\u3093", "text": "Thank you for your great explanation. But please do not use javascript specific syntax in the Algorithm Video.", "likes": 0}}, {"topLevelComment": {"id": "UgwUZB9fBoZo7ePVB294AaABAg", "publishedAt": "2021-09-26T09:07:22Z", "author": "Make It Easy", "text": "the guy is using js for cp..ha ha", "likes": 0}}, {"topLevelComment": {"id": "UgzKh8NOTWtYiIivOdR4AaABAg", "publishedAt": "2021-09-26T07:35:16Z", "author": "Anurag Pandey", "text": "How can I like this video one million times?", "likes": 1}}, {"topLevelComment": {"id": "UgwGtkkrZuRP_2lF6FB4AaABAg", "publishedAt": "2021-09-26T07:23:38Z", "author": "Rajendra P", "text": "Learn by doing 101", "likes": 0}}, {"topLevelComment": {"id": "Ugy8009G1LxWPw4sQ2N4AaABAg", "publishedAt": "2021-09-26T07:20:50Z", "author": "Rajendra P", "text": "Learn by doing", "likes": 0}}, {"topLevelComment": {"id": "UgwlBeAsD0dDPCZMx394AaABAg", "publishedAt": "2021-09-26T04:05:40Z", "author": "Hai Nguyen", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgwwSphbZFr7zdDNt_R4AaABAg", "publishedAt": "2021-09-25T18:49:36Z", "author": "megajonathan96", "text": "I couldn't find a way to do the allConstruct function in python. What did python users do for this one?", "likes": 1}, "replies": [{"id": "UgwwSphbZFr7zdDNt_R4AaABAg.9SiqQrQFrQy9cVoMb1JiRx", "publishedAt": "2022-06-20T17:47:30Z", "author": "LrdKGB", "text": "Awesome @Nikita Tolkachev how about count construct", "likes": 0}, {"id": "UgwwSphbZFr7zdDNt_R4AaABAg.9SiqQrQFrQy9X6fSgRqwbH", "publishedAt": "2022-01-12T20:20:19Z", "author": "Nikita Tolkachev", "text": "def allConstruct(target, words):\n    if target == \"\":\n        return [[]]\n    result = []\n    for word in words:\n        prefix = target[:len(word)]\n        if prefix == word:\n            suffix = target[len(word):]\n            construct = allConstruct(suffix, words)\n            for value in construct:\n                value.insert(0, word)\n            result += construct\n    return result", "likes": 2}]}, {"topLevelComment": {"id": "Ugzs-DYZUIePF1aphvp4AaABAg", "publishedAt": "2021-09-25T18:01:02Z", "author": "kreglfromworld", "text": "so dynamic programming is just constant memoization along the way, or that, paired with nested function calling inside the function?", "likes": 0}}, {"topLevelComment": {"id": "UgzuCkh3vdOa4nuaLdh4AaABAg", "publishedAt": "2021-09-25T11:57:16Z", "author": "asher lorentzen", "text": "Im 30 minutes in but don\u2019t even know how to code", "likes": 0}}, {"topLevelComment": {"id": "UgzZsQmsNQxzbp66AWZ4AaABAg", "publishedAt": "2021-09-25T11:27:33Z", "author": "Rahul Gawale", "text": "1:49:01 Why not push the element at the end of an array instead of copying everything into a new Array? Would not that lead bring a constant time for adding the element in an array?", "likes": 0}}, {"topLevelComment": {"id": "Ugyu5y8JBbmgfNptp2h4AaABAg", "publishedAt": "2021-09-25T08:17:59Z", "author": "Ken Z", "text": "fantastic course \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgzzTNqsiT83PEM3T3t4AaABAg", "publishedAt": "2021-09-25T03:36:59Z", "author": "Hai Nguyen", "text": "Thank you Master. I hope you live forever to keep teaching generations", "likes": 2}}, {"topLevelComment": {"id": "UgykI5NMEYg6E9yWZQ14AaABAg", "publishedAt": "2021-09-24T23:47:54Z", "author": "Draco", "text": "Here's a general memoize HOF (higher-order function) that you can use instead of hardcoding it into each function:\n\nfunction memoize(callback) {\r  const cache = { }\r  \r  return (...args) => {\r    const hash = args.toString()\r\r    if (typeof cache[ hash ] != 'undefined') {\r      return cache[hash]\r    }\r\r    else {\r      cache[hash] = callback(...args)\r      return cache[hash]\r    }\r  }\r}\n\nYou'll want to format the code haha. It does the exact same thing but the cache or 'memo' is stored in the closure of the parent execution environment (outer function, when you invoke it).", "likes": 2}}, {"topLevelComment": {"id": "UgyJ2oKOJeXq850Lgql4AaABAg", "publishedAt": "2021-09-24T05:11:16Z", "author": "Himanshu", "text": "I am glad that I clocked the vid...", "likes": 0}}, {"topLevelComment": {"id": "UgwfszGrHiEKkC1GSZN4AaABAg", "publishedAt": "2021-09-23T12:50:47Z", "author": "dapeng wang", "text": "to get bestsum   \ncan we sort numbers to optimize", "likes": 0}}, {"topLevelComment": {"id": "Ugw6AwCvJv10MhvLhUd4AaABAg", "publishedAt": "2021-09-23T11:26:10Z", "author": "Rob Rosario", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzvyHT1w_kiL6rcLG54AaABAg", "publishedAt": "2021-09-23T09:09:53Z", "author": "Rahul Deep Attri", "text": "hey why countConstruct is polynomial vs allConstruct is exponential even after memoization ?", "likes": 0}}, {"topLevelComment": {"id": "UgzilkDPS7yAamblAo14AaABAg", "publishedAt": "2021-09-22T18:56:36Z", "author": "Gowtham Varma Buddharaju", "text": "The best dynamic programming course I have ever seen. Visualization helps a lot in understanding clearly.", "likes": 0}}, {"topLevelComment": {"id": "UgwpoR49y97WB7VSBrl4AaABAg", "publishedAt": "2021-09-22T15:00:55Z", "author": "Casiyonga", "text": "Hi. Can u explain why remainder is declared as a const if it will be redeclared ?\nconst remainder = targetSum - num;    // this is in the loop !", "likes": 0}}, {"topLevelComment": {"id": "Ugz4PFywrf3sfUfxq2p4AaABAg", "publishedAt": "2021-09-22T03:35:42Z", "author": "Vinayak Tyagi", "text": "Can you please make a video on Greedy Algorithm ?", "likes": 0}}, {"topLevelComment": {"id": "UgyIxNdxRS8IMVBuS0V4AaABAg", "publishedAt": "2021-09-22T01:22:55Z", "author": "Kiddie Tube", "text": "Really interesting class. Only one is that, for Tabulation of Fibonacci, we can initialize fib[0] and fib[1] then we can use that for further calculation like fib[i]=fib[i-1]+fib[i-2]; Otherwise out of bound exception occurs right?", "likes": 6}, "replies": [{"id": "UgyIxNdxRS8IMVBuS0V4AaABAg.9S_FG42DcCj9dNvvrNBDB6", "publishedAt": "2022-07-12T12:51:06Z", "author": "That's Alex!", "text": "@Ajal Christe duuude i was looking for this one xD thanks", "likes": 0}, {"id": "UgyIxNdxRS8IMVBuS0V4AaABAg.9S_FG42DcCj9ayO0Wh8mHx", "publishedAt": "2022-05-13T12:22:59Z", "author": "Ajal Christe", "text": "Came looking for this. For some reason JS doesn't throw an out of bounds error when adding to two elements after n, but if you console log the table, you can see it gets populated with NaN. Obviously getting a ton of value from this amazing course and grateful for all the explanation. Just pointing this out so it helps others if they are confused in this step.", "likes": 1}]}, {"topLevelComment": {"id": "UgykAIoAhLJgioYzhat4AaABAg", "publishedAt": "2021-09-21T11:14:02Z", "author": "Ariel Fuxman", "text": "1:04:12\nWhy space complexity is O(n + m) and not O(n * m) ?", "likes": 1}}, {"topLevelComment": {"id": "UgzgWqWyzGcGOv2U6yB4AaABAg", "publishedAt": "2021-09-21T10:33:57Z", "author": "imtiaz zarif", "text": "3sum problem when", "likes": 0}}, {"topLevelComment": {"id": "UgxX7i-58lwhgpURKyV4AaABAg", "publishedAt": "2021-09-21T02:37:00Z", "author": "Provocative Propensity", "text": "Id watch ads for you", "likes": 0}}, {"topLevelComment": {"id": "UgwXqS46LphIaTl4ZBJ4AaABAg", "publishedAt": "2021-09-20T15:21:45Z", "author": "MFR SIAM", "text": "js is fun and all and this is a great video and all , i really wised it was using c++.", "likes": 0}}, {"topLevelComment": {"id": "UgwMu5mVdFAT8u78meZ4AaABAg", "publishedAt": "2021-09-20T13:37:18Z", "author": "Joe Sharick", "text": "That moment at 34:00 when the sorcery starts to explode your brain. Amazing.", "likes": 0}}, {"topLevelComment": {"id": "Ugyp5qtsntVjAJDydmp4AaABAg", "publishedAt": "2021-09-20T06:25:45Z", "author": "Ajay Ratnam", "text": "literally no one, have explained dp like this,every one ended up with fib or factorial", "likes": 0}}, {"topLevelComment": {"id": "UgwnVYh1_4CDAvqw32h4AaABAg", "publishedAt": "2021-09-19T22:17:49Z", "author": "Allen Rubin", "text": "42:42 I struggled until y said u can only move right or downward. Maybe put problem statement somewhere on the screen next time?", "likes": 0}}, {"topLevelComment": {"id": "Ugw5Rky5Zve34FBC6vF4AaABAg", "publishedAt": "2021-09-19T14:15:17Z", "author": "Hakiros54", "text": "1:27:55 do you realy need to store true values?\nI mean, if you get an true your function will just buble it all the way up and end so storing only falses should be enough.", "likes": 0}}, {"topLevelComment": {"id": "Ugwl6p_cOREHA0IAgGp4AaABAg", "publishedAt": "2021-09-17T20:18:03Z", "author": "Ryan McCarthey", "text": "Awesome. A little bit challenging to code all the concepts in Go! But this is what I was looking for in the past 15 years. Thumbs up and respect! I'm sure the only reason that a few guys disliked this video was that they couldn't understand it.", "likes": 1}}, {"topLevelComment": {"id": "Ugyf2GSh9jwiYJk_WM94AaABAg", "publishedAt": "2021-09-17T14:51:18Z", "author": "Rishita Raha", "text": "I am so happy after finding this course that I might just cry \ud83e\udd27", "likes": 0}}, {"topLevelComment": {"id": "Ugy2LPYBkZOdIBMK6314AaABAg", "publishedAt": "2021-09-17T05:40:55Z", "author": "CodeSchool", "text": "Sir, I tried to convert your js code for some of the problems but they don't give the expected output. Can you please help me to find the bugs?", "likes": 0}, "replies": [{"id": "Ugy2LPYBkZOdIBMK6314AaABAg.9SNpoNeShfW9SNqBLMQYYL", "publishedAt": "2021-09-17T05:44:11Z", "author": "CodeSchool", "text": "def bestSum(targetSum , nums):\r\n    def innerFunc(targetSum , nums , memo):\r\n        if targetSum in memo:\r\n            return memo[targetSum]\r\n        if 0 == targetSum:\r\n            return []\r\n        if 0 > targetSum:\r\n            return None\r\n\r\n        shortestComb = None\r\n\r\n        for num in nums:\r\n            rem = targetSum - num\r\n            remComb = innerFunc(rem , nums , memo)\r\n\r\n            if None != remComb:\r\n                remComb.append(num)\r\n\r\n                if None == shortestComb or len(remComb) < len(shortestComb):\r\n                    shortestComb = remComb\r\n\r\n        memo[targetSum] = shortestComb\r\n\r\n        return shortestComb\r\n\r\n    memo = dict()\r\n    return innerFunc(targetSum , nums , memo)\n\n\nprint(bestSum(100,[25,3,4,6]))", "likes": 0}]}, {"topLevelComment": {"id": "UgyjGybfNrUFJcORVs94AaABAg", "publishedAt": "2021-09-16T13:17:58Z", "author": "Dima Lukashevich", "text": "First time hearing about this topic and this is just pure gold!", "likes": 0}}, {"topLevelComment": {"id": "UgwVaSQHQx_dXE_TiGl4AaABAg", "publishedAt": "2021-09-16T05:55:37Z", "author": "Ashwyn Horton", "text": "I envy the elegance in how he breaks the problem down to pretty much nothing.", "likes": 1}}, {"topLevelComment": {"id": "UgyLiMDZhPgxknY8NyZ4AaABAg", "publishedAt": "2021-09-15T22:31:09Z", "author": "Michael Evans", "text": "-", "likes": 0}, "replies": [{"id": "UgyLiMDZhPgxknY8NyZ4AaABAg.9SKUplfz_Pq9SSiFlaYk36", "publishedAt": "2021-09-19T03:11:05Z", "author": "Michael Evans", "text": "@Roger Tunnell Thanks for the response. I'm not sure why, but when I included memo[target] = True in the if block and had memo[target] = False outside the for loop, the function was consistently returning True for every test case. Back to the drawing board I suppose.", "likes": 0}, {"id": "UgyLiMDZhPgxknY8NyZ4AaABAg.9SKUplfz_Pq9SSfYMmSSYD", "publishedAt": "2021-09-19T02:47:25Z", "author": "Roger Tunnell", "text": "This is wrong. Imagine you start with a large target. Somewhere down the tree you have target = 7 and numbers = [9, 4, 3, 2]. The remainder for the first loop would be -2 and can_sum is False. You would memoize a target of 7 as returning False. On the next iteration of the loop you consider number 4 and can_sum is True and returns True up the stack. In a different branch you later encounter another target = 7. This time can_sum will return False from the memo. Obviously this is incorrect since 4 + 3 = 7. You would still end up with the correct result overall because the first branch would end up True overriding any erroneously False branches. The issue is if you re-use this logic on a different problem like all_sums where you have to return the full array of numbers that sum to the target 7. Only one branch would return an array, when the correct answer would be [ [4, 3], [3, 2, 2] ]. \n\nIf you changed it to memo[remainder] = False inside the loop that at least give correct results consistently, but then you're doing the \"look before you leap\" antipattern. Just use memo[target] = True if the conditional is true, then return True, else memo[target] = False outside the loop before the return False", "likes": 0}]}, {"topLevelComment": {"id": "Ugw6mYcIEyT8HW_1tLx4AaABAg", "publishedAt": "2021-09-15T17:20:38Z", "author": "Midastouchpr", "text": "Is it better than uni courses?", "likes": 0}}, {"topLevelComment": {"id": "Ugwf5tLJx5DirG7rOPh4AaABAg", "publishedAt": "2021-09-15T08:43:58Z", "author": "Marcus Rost", "text": "But how are we supposed to approach the problems where you can't just reuse the values as much as you want?", "likes": 0}}, {"topLevelComment": {"id": "Ugxwc7HksttC6piGgmN4AaABAg", "publishedAt": "2021-09-13T15:11:04Z", "author": "Meet Amin", "text": "This is awesome\u2764\u2764", "likes": 0}}, {"topLevelComment": {"id": "UgxyJbkpsST1cK5BSFF4AaABAg", "publishedAt": "2021-09-13T03:03:48Z", "author": "krisnrg", "text": "Phenomenal teacher, I\u2019ve got an hour left and even though I\u2019ve fumbled my way through similar problems I feel I understand everything much better. This is now my go to recommended video for recursion and dynamic coding", "likes": 230}, "replies": [{"id": "UgxyJbkpsST1cK5BSFF4AaABAg.9SDFe7YNdqd9TUeY21CjMZ", "publishedAt": "2021-10-14T17:48:30Z", "author": "Your Himalayan Dude", "text": "@Shivam Dhir not specifically but discussed in some questions", "likes": 2}, {"id": "UgxyJbkpsST1cK5BSFF4AaABAg.9SDFe7YNdqd9TOduE4ahwH", "publishedAt": "2021-10-12T09:47:29Z", "author": "Shivam Dhir", "text": "does he teach backtracking in the video ? Haven't started watching it.", "likes": 2}]}, {"topLevelComment": {"id": "UgwBkmWyPAyErQEcy_54AaABAg", "publishedAt": "2021-09-12T22:11:03Z", "author": "Desmond Adenola", "text": "please do one on backtracking", "likes": 0}}, {"topLevelComment": {"id": "UgwcrHa3H-rd22WV_cZ4AaABAg", "publishedAt": "2021-09-12T19:44:33Z", "author": "Sri Harsha Chilakapati", "text": "For the howSum and bestSum problems, the additional product of m in the complexity can be avoided by mutating the array instead of creating a new one and copying it over. Just use combination.push(num) and it will be O(1) since appending an element at the end of an array is O(1). So time complexity can be O(m*n) and O(m) which is even better. Other than that, great video.", "likes": 10}, "replies": [{"id": "UgwcrHa3H-rd22WV_cZ4AaABAg.9SCTNwRL0yP9g0WIoR4zY_", "publishedAt": "2022-09-16T00:10:05Z", "author": "Eric Wu", "text": "@Liang Yu Think about how many different ways there are to call canSum. With an amount of m, canSum could be called recursively with any number from 1 to m, so there are m different ways. Similarly, for each node from 1 to m, there are n edges to branch from. In total, there exists at most m * n nodes to traverse through. The difference between n^m and m * n is due to the memo object saving us from doing repeated work.", "likes": 0}, {"id": "UgwcrHa3H-rd22WV_cZ4AaABAg.9SCTNwRL0yP9fcJ9MgM1YV", "publishedAt": "2022-09-06T05:14:11Z", "author": "Liang Yu", "text": "Hey, could you explain why the time complexity of canSum with a memo is O(m*n)? I can understand the brute force way is O(n^m) but I'm confused with the improved one.", "likes": 0}]}, {"topLevelComment": {"id": "Ugxj-QamVqBcGMHEwI14AaABAg", "publishedAt": "2021-09-12T18:08:10Z", "author": "sijo xavier", "text": "Awesome content!", "likes": 0}}, {"topLevelComment": {"id": "UgxCrqrOIw8tvDv9SY54AaABAg", "publishedAt": "2021-09-12T07:50:22Z", "author": "Hariharan GR", "text": "I have a doubt. In can Sum problem after you do the memoization in the for loop should the object assignment statement be memo[remainder]=true?\nGreat video by the way.", "likes": 0}}, {"topLevelComment": {"id": "UgwqoekVZhZT3mtXlFV4AaABAg", "publishedAt": "2021-09-11T16:18:53Z", "author": "entcune", "text": "I just don't understand who are these people who have audacity to dislike such a gem.", "likes": 3}}, {"topLevelComment": {"id": "Ugws6gfhghoFkGFymC54AaABAg", "publishedAt": "2021-09-11T15:06:23Z", "author": "Shubham Garg", "text": "I have seen many videos and by far hands down this is the BEST video on dynamic programming. Thankyou!\n\nReasons:\n- Tree structures he used to show recursive functions \n- His voice \n- Pace of the video and how content is structured", "likes": 1}}, {"topLevelComment": {"id": "Ugzhry7Iyf4TUUiYCXd4AaABAg", "publishedAt": "2021-09-11T00:36:10Z", "author": "Volodymyr Moruhin", "text": "Why do people go to psychologists if they can watch dynamic programming for 5 hours in a row. After this video, all their life problems can be solved either recursively or using tabulation.", "likes": 0}}, {"topLevelComment": {"id": "Ugzkx_UD_Z1yKk3s_m54AaABAg", "publishedAt": "2021-09-10T18:11:55Z", "author": "Habibuddin Ahmadi", "text": "Wonderful course!", "likes": 0}}, {"topLevelComment": {"id": "Ugw4ZXdlYUhBakK3lEd4AaABAg", "publishedAt": "2021-09-10T16:57:29Z", "author": "Ranajit Hore", "text": "DP is such a topic that is explained in most of the colleges in a hard way due to the lack of tree diagrams. You are the SAVIOUR. The best explanation of Dynamic Programming I've ever seen. Now I've a different mindset to tackle such problems. Thank you.", "likes": 0}}, {"topLevelComment": {"id": "UgzeIA41DbcH6drEuo14AaABAg", "publishedAt": "2021-09-10T16:44:25Z", "author": "Mukesh Jadhav", "text": "I had a quick question. at timestamp 1:48:24, in the early return step, is it really required to store the result in memo? Because anyways we're going to early return from the whole tree right? If yes then I think it applies to our previous canSum problem too...", "likes": 0}}, {"topLevelComment": {"id": "UgzM6uK0wYr7OlvMR3N4AaABAg", "publishedAt": "2021-09-10T16:02:31Z", "author": "Alpha Man", "text": "Keep doing such stuff, really increased my confidence level", "likes": 0}}, {"topLevelComment": {"id": "UgwtLc7wqf5F7C_j8LJ4AaABAg", "publishedAt": "2021-09-10T13:44:12Z", "author": "Eslam Ahmed", "text": "Great explanation so far \nan optimization for grid traveler;;er could be setting the key as follow  \n    key = str(min(row, col))+','+str(max(row, col))\n\nand any grid with length or  width of 1 has only one way so the condition would be \n    if row == 1 or col == 1:\n        return 1;\n\ninstead of \n    if row == 1 and col == 1:\n        return 1;", "likes": 1}}, {"topLevelComment": {"id": "UgzXdEjMS2Nl7i_5a-d4AaABAg", "publishedAt": "2021-09-10T05:53:10Z", "author": "Rogue Art", "text": "Where can I pay you? The quality of this course is exceptionally high and I don't feel that it's fair for you that I'm getting this for free.", "likes": 0}}, {"topLevelComment": {"id": "UgxiqDx5ypgwT2TrAiB4AaABAg", "publishedAt": "2021-09-09T22:56:40Z", "author": "Shahrin Nakkhatra", "text": "But what if I just initialize the memo inside the definition of my function instead of using it as a default argument? That works fine too", "likes": 0}}, {"topLevelComment": {"id": "UgzuoGpXyJGi5eWK_L14AaABAg", "publishedAt": "2021-09-09T21:16:15Z", "author": "Tushar Aggarwal", "text": "OMG these lectures are amazing.\nThere is something about how this is explained and the voice very motivating and increases focus.", "likes": 4}}, {"topLevelComment": {"id": "UgzfYhNUaBm9wlzzaXV4AaABAg", "publishedAt": "2021-09-09T11:41:02Z", "author": "Hojjat Esmaeilzadeh", "text": "Thanks for this amazing course", "likes": 0}}, {"topLevelComment": {"id": "UgyDnRKpuw5fPo9iPvF4AaABAg", "publishedAt": "2021-09-09T02:36:00Z", "author": "Julien Wong", "text": "Question on fib example - would the time/space complexity of the memolized solution be dependent on the efficiency/complexity of the hash find function?", "likes": 0}}, {"topLevelComment": {"id": "Ugx_4Zrvja6dbjBpoMt4AaABAg", "publishedAt": "2021-09-08T16:52:58Z", "author": "Neha Prakash", "text": "Best!! Best!! Best course on DP I've come across..\nThank you for such insightful teachings and for explaining this extraordinarily. Kudos to you Alvin Zablan and Coderbyte!\nThis 5 hours was amazing!", "likes": 0}, "replies": [{"id": "Ugx_4Zrvja6dbjBpoMt4AaABAg.9S1rZmYY0MF9V7eXXLp8rT", "publishedAt": "2021-11-24T12:28:41Z", "author": "veipunii lana", "text": "which pograming language are you uisng for coding? \r\nIf you are using java can i ask you some questions?", "likes": 0}]}, {"topLevelComment": {"id": "UgzJ1o6GDqlDVHixtnd4AaABAg", "publishedAt": "2021-09-08T07:56:06Z", "author": "Chaotic Good", "text": "20:38\nPretty sure O(2^(n/2)) is not the same complexity as O(2^n). Any arbitrary a in c^(a*n) produces a unique complexity. Here's a proof.\nLet's assume they are the same complexity.\n2^(a * n) = O(2^n)\n2^(a * n) <= c * 2^n\nln2 * a * n <= lnc + ln2 * n\na * n <= lnc / ln2 + n\n(a - 1) * n <= lnc / ln2\nln2 * (a - 1) * n <= lnc\n2^((a - 1) * n) <= c\n\nThis only holds for a <= 1. Therefore, complexity changes with a. a = 1.5 produces the case mentioned above. a = 1 is constant time: O(1).\n\nYes, O(2^n) can represent an upper bound, but you can say the same about O(n^2) being an upper bound for n. It's not super accurate.", "likes": 0}}, {"topLevelComment": {"id": "Ugx8vPpjuVbtSLDrdvR4AaABAg", "publishedAt": "2021-09-07T22:32:36Z", "author": "Jeje Nain", "text": "you still have to memorize a table of all \"registered\" value, which is quite expensive regarding memory. that's the basic rule of programmation, if you want to go faster you need to save data in RAM. It's interesting to see the reasoning tho. It's possible to implement fibonacci to use only two static variables but I don't think it would apply for all other examples (I use to program in C so I know in python memory is not a consideration but it should always be for optimised application)", "likes": 0}}, {"topLevelComment": {"id": "Ugx0GaqOPcW8ZqNS4zt4AaABAg", "publishedAt": "2021-09-07T18:24:07Z", "author": "C# Programmer", "text": "Wow, I am learning c# for 7 months and dont get this, i guess i am doing something wrong then huh", "likes": 0}}, {"topLevelComment": {"id": "UgzBE-sQhSt8dAYJu-l4AaABAg", "publishedAt": "2021-09-07T15:38:49Z", "author": "jump", "text": "Thank you", "likes": 0}}, {"topLevelComment": {"id": "Ugx-nlNO3XX5cMScnLl4AaABAg", "publishedAt": "2021-09-07T05:25:14Z", "author": "Kaung Htet Hein", "text": "i dont understand the syntax in 1:27:10 line no.3 and what exactly it is doing. can anyone help me explain?", "likes": 0}, "replies": [{"id": "Ugx-nlNO3XX5cMScnLl4AaABAg.9Rz33mqz0yU9TU05dn14ns", "publishedAt": "2021-10-14T11:46:22Z", "author": "Arun Shankar S", "text": "He is checking if the targetSum is in the memo already. If it is, just fetch it from there. No need to compute it again.", "likes": 1}]}, {"topLevelComment": {"id": "UgwV8v2GVR0shwBN6kN4AaABAg", "publishedAt": "2021-09-07T02:37:31Z", "author": "Matteo Schoucair", "text": "anyone can code the last 2 lines of the last allConstruct in python?\nWould be appreciated :)", "likes": 0}}, {"topLevelComment": {"id": "Ugwy6e3da7KSRwUROH54AaABAg", "publishedAt": "2021-09-06T17:59:19Z", "author": "winston martin Bendana", "text": "1:04:04 I was confused about the resulting space complexity of the memoized gridTraveler since we're making a m*n grid to store the results right? As such isn't the space complexity of the memoized version m*n too? Thanks for the video, great content.", "likes": 2}, "replies": [{"id": "Ugwy6e3da7KSRwUROH54AaABAg.9RxpZzBNLt99YZKfinGpd_", "publishedAt": "2022-02-17T19:59:22Z", "author": "Blackpaper", "text": "yes you are right", "likes": 0}]}, {"topLevelComment": {"id": "UgysF5r7tVMjxCYt4AF4AaABAg", "publishedAt": "2021-09-06T14:18:48Z", "author": "John R.", "text": "This is top, top quality. Interesting topic, expertly explained, wonderfully presented and done with so much effort. Brilliant. Thanks very much", "likes": 1}}, {"topLevelComment": {"id": "UgwIwgXqeXuPudZ5kDx4AaABAg", "publishedAt": "2021-09-06T12:35:27Z", "author": "M", "text": "why you speak thia fucking speed shet!! \ud83d\ude02", "likes": 0}}, {"topLevelComment": {"id": "UgzvuAKXMNXKvfV35Ip4AaABAg", "publishedAt": "2021-09-06T06:28:36Z", "author": "Shivagowri Reddy", "text": "did anyone try all this codes in python?? if yes can u plzz share", "likes": 0}}, {"topLevelComment": {"id": "UgyXXxjaAczNJdkgl8V4AaABAg", "publishedAt": "2021-09-05T22:50:09Z", "author": "sandesh shrestha", "text": "Thanks", "likes": 1}}, {"topLevelComment": {"id": "Ugwh8pT-MUb0j_LKZ2t4AaABAg", "publishedAt": "2021-09-05T21:36:53Z", "author": "Ckr", "text": "Would have loved it if it was in java!", "likes": 0}}, {"topLevelComment": {"id": "Ugx948F2BJ5NghetPcl4AaABAg", "publishedAt": "2021-09-05T16:14:48Z", "author": "mangadrawing.123", "text": "i gonna ask something really stupid. but how a tree pattern problem apply in reality?! cause for me when im learning, if i dont know if that thing could apply to anything . i will probably not remember it", "likes": 0}}, {"topLevelComment": {"id": "UgylceV7CFZJR7TObnt4AaABAg", "publishedAt": "2021-09-05T14:08:45Z", "author": "Elaheh Ordoni", "text": "Thanks!", "likes": 1}, "replies": [{"id": "UgylceV7CFZJR7TObnt4AaABAg.9RuqOQHj4X49U1nkSPCvpX", "publishedAt": "2021-10-28T09:22:24Z", "author": "Emrul Zawad", "text": "Thanks", "likes": 1}]}, {"topLevelComment": {"id": "UgyS7-QzYrNiWLnShqZ4AaABAg", "publishedAt": "2021-09-05T11:34:09Z", "author": "Vineeth Sai", "text": "2:47:30 is same Word Break II in leetcode. Very famous for FB interviews.", "likes": 1}}, {"topLevelComment": {"id": "UgwRlDRi5o-zzhezoBR4AaABAg", "publishedAt": "2021-09-05T10:41:35Z", "author": "Pavan Kruthik", "text": "This is a blessing...Need more of these alvin", "likes": 0}}, {"topLevelComment": {"id": "UgyeMd4jLVkAzhTT_op4AaABAg", "publishedAt": "2021-09-05T09:40:50Z", "author": "B20140 Vaibhav", "text": "Completed !!!!!!!!! : )", "likes": 0}}, {"topLevelComment": {"id": "UgzmxFxYIMKXUTwl23x4AaABAg", "publishedAt": "2021-09-05T00:06:26Z", "author": "Sree Sharp", "text": "the memoization problems, when I wrote in C#,  the Program will not traverse through all combinations, it will return the first path where the target =0 right ? say  ,  bestSum( [1,2,3], 6) will return the first shortes right side of tree which reach the target 0, in my case it is 1,1,1,3 , What I am doing wrong.", "likes": 0}}, {"topLevelComment": {"id": "UgxR6T4OtD1CDH_FH1l4AaABAg", "publishedAt": "2021-09-04T22:30:26Z", "author": "J", "text": "After hunting through tens of different youtubers, finally found the guy with the right pace and deep enough insights. Cheers \ud83c\udf7b", "likes": 0}}, {"topLevelComment": {"id": "UgxMWw3PGUnfDDlPdbp4AaABAg", "publishedAt": "2021-09-04T14:20:36Z", "author": "Anupam Pandey", "text": "Thanks Alvin, below are few of my questions -\n@1:17:14- but if target sum is 0, if we are not picking any element from the array, is it following the instruction in problem that we should pick some elements from array\n@1:24:44- how are the number of nodes getting multiplied by exactly n here when tree is not completely full?\n@1:45:48- did not understand how n^m gets multiplied with m for the time complexity, why we will copy m length array everytime", "likes": 0}}, {"topLevelComment": {"id": "Ugx_SExzjUHwissLnWB4AaABAg", "publishedAt": "2021-09-04T09:39:13Z", "author": "Bobby Utulu", "text": "Great content. Kudos!!!\nIs there a reason why you are not pushing to the array in constant time? The spread operator is definitely not as performant.", "likes": 0}}, {"topLevelComment": {"id": "Ugwx7OY-BC4caYM5H-t4AaABAg", "publishedAt": "2021-09-04T07:25:08Z", "author": "Kartik Sharma", "text": "28:37", "likes": 0}}, {"topLevelComment": {"id": "Ugz8Ztp_vJSjs26DBpR4AaABAg", "publishedAt": "2021-09-03T22:17:47Z", "author": "Denis Gordiy", "text": "Great clear video, thank you. There is some mistake on the 47:40: the last right leaf in the tree must be equals 2,0 instead of 0,0", "likes": 1}, "replies": [{"id": "Ugz8Ztp_vJSjs26DBpR4AaABAg.9RqZlNkJrTM9dTaLsP-WF5", "publishedAt": "2022-07-14T17:37:59Z", "author": "sovereign berserk", "text": "yeah saw that too - it is correct in a later illustration though.", "likes": 0}]}, {"topLevelComment": {"id": "UgzWerv6bRuzGNMl0jF4AaABAg", "publishedAt": "2021-09-03T20:01:12Z", "author": "Ramon Aquino", "text": "5:39 How did he do that?", "likes": 0}}, {"topLevelComment": {"id": "UgxBRgTjSat8D-eoSmt4AaABAg", "publishedAt": "2021-09-02T23:58:26Z", "author": "Gosha", "text": "POTENT POT???", "likes": 0}}, {"topLevelComment": {"id": "UgzTgUU0pSIAlU3s_P14AaABAg", "publishedAt": "2021-09-02T21:40:35Z", "author": "KEELAY THOMPSON", "text": "thompsondev2020 had to leave a comment...PERFECTO", "likes": 0}}, {"topLevelComment": {"id": "UgxiDbjCaROmOBq-HEJ4AaABAg", "publishedAt": "2021-09-02T20:09:55Z", "author": "Rishak Gupta", "text": "You are a real bro.... bro.", "likes": 0}}, {"topLevelComment": {"id": "UgxZ4KTzLP3IoeZL8j94AaABAg", "publishedAt": "2021-09-02T17:23:21Z", "author": "super0spore0fan", "text": "The second problem, while interesting as an exercise, is not worthy of being made an algorithm for, just calculate (m+n-2)!/(m-1)!(n-1)! and you have the solution. The reason this works is that you always have to walk (m-1) times in the m direction and (n-1) times in the n direction, so every solution has (m-1)+(n-1)=m+n-2 total moves. the total amount of permutations of these moves is (m+n-2)!, however, not every permutation will generate a unique solution, hence the division of that by the total permutations of the moves in the m and n direction respectively. This is why mathematics is essential for programming, people :)", "likes": 0}, "replies": [{"id": "UgxZ4KTzLP3IoeZL8j94AaABAg.9RnTH3GbYax9TU0Cedo1Fj", "publishedAt": "2021-10-14T11:47:19Z", "author": "Arun Shankar S", "text": "You're right. I think he used the example to help people understand dynamic programmign.", "likes": 0}]}, {"topLevelComment": {"id": "UgwoFjK9Z4Dj18_wSUF4AaABAg", "publishedAt": "2021-09-02T04:34:20Z", "author": "Xu XinXu", "text": "if you actually spend your time and watch the full video, you will not regret it !", "likes": 0}}, {"topLevelComment": {"id": "UgwPwLyXW-fDopEjX5V4AaABAg", "publishedAt": "2021-09-02T02:40:22Z", "author": "John Leal", "text": "1:04:12 The number of paths of [2,3] is the same as [3,2], so the function can be optimized a little more by sorting the keys:  if m<=n then key = m + ',' + n else key = n+','+m .", "likes": 105}, "replies": [{"id": "UgwPwLyXW-fDopEjX5V4AaABAg.9RltDqXcXWf9dqvx6OcKVz", "publishedAt": "2022-07-24T04:28:29Z", "author": "Prerna", "text": "@Kumaran P could someone provide the java code for this problem", "likes": 0}, {"id": "UgwPwLyXW-fDopEjX5V4AaABAg.9RltDqXcXWf9dMzd7-lyj-", "publishedAt": "2022-07-12T04:04:15Z", "author": "NerdyPi", "text": "I'm also bothered that he didn't add\nif m = 1, return n\nif n = 1, return m\nthen ordered the 0 cases first.", "likes": 0}, {"id": "UgwPwLyXW-fDopEjX5V4AaABAg.9RltDqXcXWf9cCH052wIuE", "publishedAt": "2022-06-13T03:41:46Z", "author": "Ayush Agarwal 4-Year B.Tech. Electronics Engineering", "text": "same I was thinkihng , he mentioned it but did not add it to his code", "likes": 0}, {"id": "UgwPwLyXW-fDopEjX5V4AaABAg.9RltDqXcXWf9apuHTiuKmH", "publishedAt": "2022-05-10T05:20:30Z", "author": "ARJUN S", "text": "@Kumaran P  if (key  === (m,n) || key  === (n,m)) if(n>m) return(n,m) else return (m,n). I think he purposefully omitted it to decrease complexity.", "likes": 0}, {"id": "UgwPwLyXW-fDopEjX5V4AaABAg.9RltDqXcXWf9aSW5yZnu9y", "publishedAt": "2022-04-30T17:58:42Z", "author": "Anthony Armour", "text": "Found the comment I was looking for lol", "likes": 0}]}, {"topLevelComment": {"id": "UgwOcfw1_9as50brO0x4AaABAg", "publishedAt": "2021-09-01T20:56:49Z", "author": "Ptolemy Soter", "text": "recursiveness in Fibonacci is limited by stack iterations, and a loop of a memo  of the last two numbers is a more efficient way to write the code. You need a balance of heap and stack memory limits", "likes": 2}, "replies": [{"id": "UgwOcfw1_9as50brO0x4AaABAg.9RlGuc2TWMc9TizuFfIJcW", "publishedAt": "2021-10-20T16:43:47Z", "author": "Mihir Hundiwala", "text": "Yes i agree but i am confused whether there will be any advantage or not with respect to number of comparisons, if we are making multiple calls in the same program.", "likes": 0}]}, {"topLevelComment": {"id": "UgwRJyBWhuqNgGa8M354AaABAg", "publishedAt": "2021-09-01T19:09:38Z", "author": "Nayomal Lakshitha", "text": "Wow this is great specially for someone who want to change the field of learning", "likes": 0}}, {"topLevelComment": {"id": "UgzwAgVXoPhDtK6ejAl4AaABAg", "publishedAt": "2021-09-01T17:09:26Z", "author": "La Secta", "text": "Great video! this guy is amazing explaining!", "likes": 0}}, {"topLevelComment": {"id": "UgzXnOe0mwZni8cYYPZ4AaABAg", "publishedAt": "2021-09-01T05:16:27Z", "author": "Dark lord", "text": "Thank u for making this precious course for free", "likes": 0}}, {"topLevelComment": {"id": "UgyJdm3j91jOMw4oCDh4AaABAg", "publishedAt": "2021-08-31T21:14:50Z", "author": "Jabriel Jones", "text": "This was great. I don't like tabulation though. It didn't click as easily as memoization.\n\nCan I exclusively use memoization to solve DP problems, or will there be problems where tabulation is optimally better?", "likes": 0}}, {"topLevelComment": {"id": "Ugxuq_8NUMHlmlhvDZV4AaABAg", "publishedAt": "2021-08-31T20:04:56Z", "author": "Satheesh Raja", "text": "Can anyone who understood this concept well, help me understand this please. I am working with Cansum problem.\r\n\r\nIn this Cansum (memoization) I understand Alvin is breaking bigger problem to smaller problem.\r\n\r\nBreaking bigger targetsum (7) into multiple smaller target sum.\r\n\r\nQuestion is: what triggers to make the decision that we have to subtract \u201cbigger targetSum\u201d with number in arrays to create smaller targetSum.\r\n\r\nTrying to understand the core of how to break bigger into smaller problem.\r\n\r\nIn the problem, instead of addition of two, if its stated as multiplication , how would we break this into Smaller problems. Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugwz-N5fUtxI1ddNqaN4AaABAg", "publishedAt": "2021-08-31T16:51:33Z", "author": "J D", "text": "Things start looking difficult after bestSum comes in...", "likes": 0}}, {"topLevelComment": {"id": "UgyTv6U4lXFvW5S3RAp4AaABAg", "publishedAt": "2021-08-31T16:50:24Z", "author": "Mathesh", "text": "Great Tutorial But will the Fibonacci Solution work for 1000 as input bcoz it is not working for me in python", "likes": 0}}, {"topLevelComment": {"id": "UgxfpgUJtFlaH13wIXl4AaABAg", "publishedAt": "2021-08-31T15:59:00Z", "author": "milan singh", "text": "Where can I follow him?", "likes": 0}}, {"topLevelComment": {"id": "Ugx1Tm8KKvALjWx7RoJ4AaABAg", "publishedAt": "2021-08-31T14:46:17Z", "author": "Bhargav Pandya", "text": "Man, Alvin, I watched your Graph Algorithms course first and I absolutely loved it! I saw people there, recommending this legendary course and I just knew I had to come here! Every single second watching this video was completely worth it!\n\nThere is no way I can praise your explanation enough Alvin! There just is not! \n\nAfter this going through this video, I went from literally have no clue whatsoever about what dynamic programming even means, to completely falling in love with this subject. I would surely indulge myself into this subject, and I believe that this video right here is simply the best entry point for any developer out there who is willing to learn this subject. \n\nThanks Alvin. I am really very grateful!!", "likes": 23}, "replies": [{"id": "Ugx1Tm8KKvALjWx7RoJ4AaABAg.9Ri1hprIYwy9d-jSgy59UI", "publishedAt": "2022-07-03T03:20:21Z", "author": "Freddy Armando Chinchilla", "text": "@YTG https://www.youtube.com/watch?v=tWVWeAqZ0WU", "likes": 0}, {"id": "Ugx1Tm8KKvALjWx7RoJ4AaABAg.9Ri1hprIYwy9_qWI7nkz2Y", "publishedAt": "2022-04-15T14:29:59Z", "author": "YTG", "text": "Link", "likes": 0}]}, {"topLevelComment": {"id": "UgwihDfnBU5NPXaASvh4AaABAg", "publishedAt": "2021-08-31T11:12:38Z", "author": "Malediction99", "text": "This guy has the most relaxing voice of any lecturer I've heard.", "likes": 134}, "replies": [{"id": "UgwihDfnBU5NPXaASvh4AaABAg.9RheG6rD_Ro9_dXDAdZX5x", "publishedAt": "2022-04-10T13:27:55Z", "author": "feafel", "text": "So true!", "likes": 0}]}, {"topLevelComment": {"id": "UgwY7iFafqKbjPBrzzB4AaABAg", "publishedAt": "2021-08-31T06:12:27Z", "author": "Gayatri Atale", "text": "Awesome tutorial! I just had one question, why not calculate current values based on the previous ones, rather than calculating further values based on current ones? Just curious.", "likes": 1}}, {"topLevelComment": {"id": "Ugx0Ef0rq68N6__1c414AaABAg", "publishedAt": "2021-08-31T06:05:25Z", "author": "DeArtTerminator", "text": "you are a legend!!", "likes": 0}}, {"topLevelComment": {"id": "Ugw-ex2hn3QGcHh5iQF4AaABAg", "publishedAt": "2021-08-31T03:12:28Z", "author": "Rodrigo Oliveira", "text": "Killer tutorial, pretty useful technicques! But in a way I couldn't understand how a O(2n) can be \"simplified\" as O(n)... how so?", "likes": 0}, "replies": [{"id": "Ugw-ex2hn3QGcHh5iQF4AaABAg.9RgnJHYSclT9Rmxh-m_yn2", "publishedAt": "2021-09-02T12:38:40Z", "author": "Rodrigo Oliveira", "text": "@stevenpcc oh, I see. Thank you very much!", "likes": 1}, {"id": "Ugw-ex2hn3QGcHh5iQF4AaABAg.9RgnJHYSclT9RlF9uXAmCS", "publishedAt": "2021-09-01T20:41:34Z", "author": "stevenpcc", "text": "Big O only cares about the complexity, not the actual amount of iterations. Both O(2n) and O(n) have linear complexity so we can just express them both as O(n).", "likes": 1}]}, {"topLevelComment": {"id": "UgxADgEDLmHn6xXBDl14AaABAg", "publishedAt": "2021-08-30T20:59:25Z", "author": "THEE OUAPOLAL", "text": "I can't take \"that being said,\" BEING SAID *TWICE* in the first 50 seconds!!  If you feel you have to be verbose and waste words, at least be grammatically correct and say, \"having said that\"!! Sorry, can't watch your vid!!", "likes": 0}}, {"topLevelComment": {"id": "UgxkNknMZeiIQpcZG3p4AaABAg", "publishedAt": "2021-08-30T20:09:17Z", "author": "SKG KEN SQUAD", "text": "Thanks!", "likes": 2}}, {"topLevelComment": {"id": "UgxGsuv4vnIjT6v-DYd4AaABAg", "publishedAt": "2021-08-30T11:50:08Z", "author": "yehudit eshel", "text": "I think the grid traveller could have been more efficient - \nthe first base case could have been if (m==1 || n==1), because in any nx1 or 1xn grid there is only one possible path.", "likes": 0}}, {"topLevelComment": {"id": "UgzvVufGUry67sEYjAx4AaABAg", "publishedAt": "2021-08-29T23:40:12Z", "author": "Marcel Bernic", "text": "Thank you, this is high quality content.", "likes": 0}}, {"topLevelComment": {"id": "UgytjyO4i-JhtsWRT054AaABAg", "publishedAt": "2021-08-29T14:57:33Z", "author": "Alenygam", "text": "You're the best.", "likes": 0}}, {"topLevelComment": {"id": "Ugzd6silz_lhzD-J_1R4AaABAg", "publishedAt": "2021-08-29T10:26:53Z", "author": "Prabhat Singh", "text": "i an trying to do this but when there is 1 in my list then it always return true because \nfirst node = 7,  list = [1,3] okay next there will be two nodes left_node = 7-1 = 6 and  right_node = 7-3 = 4 and so on but the left node will become zero and then it return True and if any one of the node return true than final answer is True but this is wrong please help me in this segment and love youre work keep it up guys", "likes": 1}}, {"topLevelComment": {"id": "UgyCkg1qxjoEwOVuWuJ4AaABAg", "publishedAt": "2021-08-29T08:45:36Z", "author": "chilly21", "text": "This isn't the most optimized time complexity for howSum. Instead of copying and re-iterating the array, use array.push() and then pass it into memo.result.", "likes": 0}}, {"topLevelComment": {"id": "UgxLTdZtDjiLiR-JJ_N4AaABAg", "publishedAt": "2021-08-28T22:50:24Z", "author": "Putins Cat", "text": "fib can be done by looping from 0 to n, and saving the previous 2 numbers along the way.  This will break down as n gets really big, but not recursive.\nprivate static long fib(int num){\n        if(num == 0) { return 0;}\n        if(num == 1) {return 1;}\n        long primary = 1, secondary = 0;\n        for(int i= 2; i<=num; ++i) { long current = primary + secondary; secondary = primary; primary = current; }\n        return primary;\n    }", "likes": 0}}, {"topLevelComment": {"id": "UgxSWsEI6ntStXeALdt4AaABAg", "publishedAt": "2021-08-28T20:29:39Z", "author": "philip philip", "text": "I keep getting the value of 9 rather than 8 I am 5:52mins in, can anyone help?", "likes": 0}}, {"topLevelComment": {"id": "UgyhfU6Xfj1d4EO4dAJ4AaABAg", "publishedAt": "2021-08-28T12:59:32Z", "author": "Prudhvi", "text": "one of the best courses ever!!!! Loved It", "likes": 0}}, {"topLevelComment": {"id": "Ugzh-uugldg6dO3iNQl4AaABAg", "publishedAt": "2021-08-28T12:04:32Z", "author": "nhactrutinh", "text": "A really impressive teacher, who can speak tireless all 6 hours! Please introduce some applications of DP in real world in second video.", "likes": 0}, "replies": [{"id": "Ugzh-uugldg6dO3iNQl4AaABAg.9Ra0obIHjFQ9RbOmBFFx5u", "publishedAt": "2021-08-29T00:53:10Z", "author": "Putins Cat", "text": "You don't think this was edited at all?", "likes": 0}]}, {"topLevelComment": {"id": "UgwjtRWnMZUIcLK793B4AaABAg", "publishedAt": "2021-08-28T08:00:03Z", "author": "Fr0zenFireV", "text": "Great tut! I have this one question so far:\nIn memoization the countConstruct has O(m^2) space complexity, how does the allConstruct have only O(m)?", "likes": 3}}, {"topLevelComment": {"id": "Ugx8m4FpTCNM4gOGzEB4AaABAg", "publishedAt": "2021-08-28T05:13:58Z", "author": "da dave dude", "text": "If you have a 3100x3100 grid, there areways to go from the top left to the bottom right by only going down or right :)", "likes": 0}}, {"topLevelComment": {"id": "UgwpJnCoXpEb6aEWPy14AaABAg", "publishedAt": "2021-08-28T04:46:01Z", "author": "nhactrutinh", "text": "for the fib, I think we can just need 2 variables for previous result and before previous result. So we do not need an entire array?", "likes": 0}, "replies": [{"id": "UgwpJnCoXpEb6aEWPy14AaABAg.9R_EclptpeB9Rbd7VpK9ws", "publishedAt": "2021-08-29T03:07:17Z", "author": "Putins Cat", "text": "Yes, and you can start at 0, no recursion.", "likes": 0}]}, {"topLevelComment": {"id": "UgyOlyEaIquPuTDJNtF4AaABAg", "publishedAt": "2021-08-27T20:37:39Z", "author": "Ajitesh Singh", "text": "I think the space complexity is wrong in the number of path problems with memoization. It should be O(m*n)", "likes": 0}}, {"topLevelComment": {"id": "Ugyrvv8cWFLZ7oZEJEV4AaABAg", "publishedAt": "2021-08-27T10:44:08Z", "author": "nhactrutinh", "text": "Same: Please check: gridTraveler(18, 18) seems have value bigger much much than on screen. Maybe it is truncated", "likes": 0}}, {"topLevelComment": {"id": "UgyIrfDJTqewOWpXCox4AaABAg", "publishedAt": "2021-08-27T10:00:55Z", "author": "digitalconsciousness", "text": "Not sure that the gridTraveler is a great example for either memoization or tabulation. There is a faster way to do it in less space. This is why it is a good idea to study math as well as programming. These fractional patterns are easily recognized by math majors.\n\n\r\n//Answer: Consider 2x2, 2x3, 2x4, 2x5, & 2x6 boxes. Their paths are 2, 3, 4, 5, & 6.\r\n// Notice that 3 is the previous solution (2) multiplied by (1 + 1/2).\r\n// 4 is the previous solution (3) multiplied by (1 + 1/3).\r\n// This carries on indefinitely with the denominator increasing each time.\n\n\r\n\r\n//****************\r\n// This pattern is observed by seeing what number each solution must be multiplied\r\n// by to get the next solution and observing that this multiplier follows a pattern\r\n// of fractions that can be based upon the given box dimensions.\r\n//****************\n\n\r\n\r\n//Now consider 3x2, 3x3, 3x4, 3x5 etc. The solutions are 3, 6, 10, 15.\r\n//Since we increased the width of box by 1, increase the numerator by 1 this time.\r\n//So 3 * (1 + 2/2) then 3 * (1 + 2/3) then 3 * (1 + 2/4) etc\n\n\r\n\r\nNumOfPaths(1, 1); // 1 path.\r\nNumOfPaths(5, 5); // 70 paths.\r\nNumOfPaths(10, 10); // 48620 paths.\r\nNumOfPaths(33, 33); // 1832624140942590200 paths.\r\nNumOfPaths(77, 77); // 3.68861487637974e+44 paths.\r\nNumOfPaths(100, 100); // 2.27508830794229e+58 paths.\n\n\r\n\r\n\r\nfunction NumOfPaths(_w, _h){\r\n\tvar numerator = _w - 1;\r\n\tvar denominator = 2;\r\n\tvar result = _w;\r\n\tif (_h == 1){\r\n\t\tresult = 1;\n\t}\r\n\r\n\tfor(var i = 2; i < _h; i++){\r\n\t\tresult = Math.round(result * (1 + (numerator/denominator)));\r\n\t\tdenominator++;\n\t}\r\n\r\n\ttrace(\"for \" + _w + \"x\" + _h + \" grid: \" + result + \" paths.\");\r\n}", "likes": 0}, "replies": [{"id": "UgyIrfDJTqewOWpXCox4AaABAg.9RYDsEmvh6K9RbcZSiSDU0", "publishedAt": "2021-08-29T03:02:22Z", "author": "Putins Cat", "text": "Or just take a course in Algorithms.  I know many develoipers that think some new cool thing is the answer to all problems.", "likes": 0}]}, {"topLevelComment": {"id": "Ugz4_0cJHDJkwYLgGXV4AaABAg", "publishedAt": "2021-08-27T09:55:07Z", "author": "nhactrutinh", "text": "Please check: fib(50) seems have value bigger than on screen. Maybe it is truncated", "likes": 0}}, {"topLevelComment": {"id": "UgyySTlU6z3qh_rRbjZ4AaABAg", "publishedAt": "2021-08-27T08:22:34Z", "author": "H\u01b0ng L\u00e2m", "text": "in the allConstruct problem, it took me like 5 or 10 minutes just to display all the possible ways to make aaaaaaaaaaaaaaaaaaaaaaaaa from 1 to 6 a", "likes": 0}}, {"topLevelComment": {"id": "UgxSyufV9k-w3ASqjbd4AaABAg", "publishedAt": "2021-08-27T04:04:51Z", "author": "Shuvro das", "text": "Here are all the codes in c++...\n\nhttps://github.com/Shuvro-d/Dynamic.Programming", "likes": 1}}, {"topLevelComment": {"id": "Ugx_kPS4jFBqzFg1a614AaABAg", "publishedAt": "2021-08-26T02:23:26Z", "author": "Kate Bias", "text": "bruh why are you writing this in javascript....", "likes": 0}, "replies": [{"id": "Ugx_kPS4jFBqzFg1a614AaABAg.9RUpieav0v79RZ_W4QXCUY", "publishedAt": "2021-08-27T22:37:58Z", "author": "Kate Bias", "text": "also, the fib recursive function would return 1 if n == 0, which is probably not acceptable behavior", "likes": 0}]}, {"topLevelComment": {"id": "UgwKnNZjFTWEfk_Xz3R4AaABAg", "publishedAt": "2021-08-26T01:45:53Z", "author": "justin m", "text": "Great video, you made the concept really easy to approach and fun!", "likes": 0}}, {"topLevelComment": {"id": "UgwCNCCY8qe5OSpL58R4AaABAg", "publishedAt": "2021-08-25T19:51:29Z", "author": "Khai", "text": "does anyone take notes for these? debating if i should or not", "likes": 1}, "replies": [{"id": "UgwCNCCY8qe5OSpL58R4AaABAg.9RU7s-lAhjR9SIvOZRPGd-", "publishedAt": "2021-09-15T07:53:29Z", "author": "Sz", "text": "you should take notes in a .md file", "likes": 0}]}, {"topLevelComment": {"id": "Ugxg9b2PE73rEyBZP2x4AaABAg", "publishedAt": "2021-08-25T15:16:34Z", "author": "Mostafa Yehia", "text": "Written gold syntactically \ud83e\udde1", "likes": 0}}, {"topLevelComment": {"id": "UgxEy5d6OZgRwVxVbVJ4AaABAg", "publishedAt": "2021-08-25T09:32:53Z", "author": "Pascal", "text": "Didn't really get dynamaic programming during the semester, 15 minutes of this video were enough for me to fully understand it. Thank you.", "likes": 0}}, {"topLevelComment": {"id": "Ugwh1rGBDRFdAixyKhJ4AaABAg", "publishedAt": "2021-08-25T08:05:25Z", "author": "Wrestling Science", "text": "\"So all 4 of our examples should return false\" \n*only 3 return false*\n*Pretends to be surprised*\"Ooof it looks like our last example isnt efficient\"\n\nMe seeing you pretend to be surprised for the 5th time:", "likes": 0}}, {"topLevelComment": {"id": "Ugy6Q_yejCfrOVmkSph4AaABAg", "publishedAt": "2021-08-25T07:42:35Z", "author": "Wrestling Science", "text": "a great teacher once told me \"eeeeeeeeeeeeeeeeeeeeeeeeeef\"", "likes": 0}}, {"topLevelComment": {"id": "Ugxb50WXaJMe1VHUFch4AaABAg", "publishedAt": "2021-08-25T05:36:52Z", "author": "Lokendra singh", "text": "step by step process from basics made it so easier to grasp. Defineely the best video I'vs seen on DP.", "likes": 1}}, {"topLevelComment": {"id": "UgxJLoVUdJiK9ZJfkxR4AaABAg", "publishedAt": "2021-08-24T18:48:59Z", "author": "simsim", "text": "I literally searched and then looked into every dynamic programming tutorial online. I can say that this one's the best. If you are not able to understand it .. draw the tree on a notebook and then visualise.", "likes": 1}}, {"topLevelComment": {"id": "UgxbU3qPdu6sionH00R4AaABAg", "publishedAt": "2021-08-24T10:53:43Z", "author": "Gyanaranjan Panda", "text": "It would have been better if there were links to problems discussed. Some one could have tried and gone along with learning", "likes": 0}}, {"topLevelComment": {"id": "UgztGAlJYEaAksRwHFR4AaABAg", "publishedAt": "2021-08-24T08:04:38Z", "author": "Chris K", "text": "For the 2D array calculate how many ways to reach right bottom with only move right or down, I was a bit confused about the base case, why (1,1) has 1 way to reach?What I learned from teacher is that setting both row 0 and col 0 value = 1, that is dp[0][j] = dp[i][0] = 1, that is easy for me to understand", "likes": 0}}, {"topLevelComment": {"id": "UgxuCkZHtIvs7jZKWMR4AaABAg", "publishedAt": "2021-08-24T06:35:56Z", "author": "Edd Palencia Vanegas", "text": "Thanks", "likes": 1}}, {"topLevelComment": {"id": "UgzGrRolw1SIU7CrndJ4AaABAg", "publishedAt": "2021-08-24T06:02:26Z", "author": "Mark L", "text": "thanks Alvin!", "likes": 0}}, {"topLevelComment": {"id": "Ugzv9npFJZZ91erVkmR4AaABAg", "publishedAt": "2021-08-24T04:29:15Z", "author": "Wrestling Science", "text": "what program do you use for animations?", "likes": 1}}, {"topLevelComment": {"id": "UgwQJcR4utEwkupWPP14AaABAg", "publishedAt": "2021-08-23T22:21:29Z", "author": "AWriterWandering", "text": "For the best sum problem, Instead of immediately creating a new combination array, why use the comparison  (remainderCombination + 1 < shortestCombination) and then only create an appended array if this returns true?", "likes": 0}}, {"topLevelComment": {"id": "UgwrQ8s2h2D-65MPVO54AaABAg", "publishedAt": "2021-08-23T20:03:23Z", "author": "mnchester", "text": "excellent video", "likes": 0}}, {"topLevelComment": {"id": "Ugz2bKWGl5dn5oMABql4AaABAg", "publishedAt": "2021-08-23T19:32:33Z", "author": "Durgesh Yadav", "text": "Absolutely fantastic content. Many Thanks buddy. Also, what if i use BFS for the best sum problem. It is still optimized.. right ?", "likes": 0}}, {"topLevelComment": {"id": "Ugw4g-bfVUIXVkP1RwJ4AaABAg", "publishedAt": "2021-08-23T16:33:50Z", "author": "newpheeraphat", "text": "Which color theme did you use?", "likes": 0}}, {"topLevelComment": {"id": "UgyBHgdRZv0Q6WUB7e54AaABAg", "publishedAt": "2021-08-23T15:26:14Z", "author": "LOW-KEY", "text": "can anyone pls tell me how to implement memoization in \"JAVA\" with multiple keys.", "likes": 2}}, {"topLevelComment": {"id": "UgzCH8nFPk-Lwox7OVB4AaABAg", "publishedAt": "2021-08-23T10:07:03Z", "author": "Jeromy Classyca", "text": "AlgoExpert Ads Suckss !!!!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugxk-w3UQb6vV02d6rp4AaABAg", "publishedAt": "2021-08-22T23:21:46Z", "author": "Rizuken Nekuzir", "text": "I think I'll try using what I learned here to play with the 3x+1 problem\n\nhttps://youtu.be/094y1Z2wpJg", "likes": 0}}, {"topLevelComment": {"id": "Ugz-74q_R8qzQ_uyQs54AaABAg", "publishedAt": "2021-08-22T17:39:11Z", "author": "Guillermo Murua", "text": "Hey great video! Here's a ay not to return memo[n] twice:\n\nfunction fib(n, memo = {}) {\r\n  if (n <= 2) return 1;\r\n  if(!(n in memo)) {\r\n    memo[n] = fib(n-1,memo) + fib(n-2, memo);\r\n  } \r\n  return memo[n];\r\n}", "likes": 0}}, {"topLevelComment": {"id": "Ugwkva93Ref91bkfAw94AaABAg", "publishedAt": "2021-08-22T14:24:22Z", "author": "Mehran Jeelani", "text": "such quality content for free.......dislikers probably paid to algoexpert", "likes": 0}}, {"topLevelComment": {"id": "Ugxmqu6ZSIXFwQ2EJ4V4AaABAg", "publishedAt": "2021-08-22T13:07:00Z", "author": "Alan", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "Ugyxg5_pf-Hfvf5coot4AaABAg", "publishedAt": "2021-08-22T10:29:12Z", "author": "Keerthi", "text": "This guy is amazing, thanks brother :)", "likes": 0}}, {"topLevelComment": {"id": "Ugzf6EyYxUrkR0LMfWN4AaABAg", "publishedAt": "2021-08-22T07:11:44Z", "author": "Mona Tagelsir", "text": "I need this guy\u2019s email please!!! It\u2019s urgent", "likes": 0}}, {"topLevelComment": {"id": "UgxnRIox_adYXpS8kt54AaABAg", "publishedAt": "2021-08-22T03:53:59Z", "author": "STAR VIP Tv", "text": "LOL \ud83d\udcbe\ud83e\uddc0\ud83d\udc00", "likes": 0}}, {"topLevelComment": {"id": "UgxLhqAi841omI28TDV4AaABAg", "publishedAt": "2021-08-21T22:28:08Z", "author": "Taaha Multani", "text": "For the Fibonacci one.\nAfter memoisation, we have time and space complexity as O(n). But what about the memo? (Or the dictionary as i would call it). Wouldn't it require O(n) space as well to store key-value pairs?", "likes": 0}}, {"topLevelComment": {"id": "UgyWlcTMUAbEnRy6haZ4AaABAg", "publishedAt": "2021-08-21T17:21:59Z", "author": "Alex K", "text": "4:13:27\nIn bestSum tabulation can't we return right at the moment the 8th element is not null, since any other options are guaranteed to be longer or equal in length to the one that is there? This might be a huge performance gain on larger lists.", "likes": 0}}, {"topLevelComment": {"id": "Ugw94L60vSc5smuj0hp4AaABAg", "publishedAt": "2021-08-21T16:41:56Z", "author": "Raymond Torres", "text": "1:01:41 couldnt you further improve the grid traveler by also adding the reverse of the key on line 10 as well? I found it strange you pointed this out then forgot to implement it.\n\nfor example: if i calculate [3][2], i already know the answer for [2][3] as well, and I should store that in the memo object.", "likes": 0}}, {"topLevelComment": {"id": "UgyClorQ3XdfYj__bZV4AaABAg", "publishedAt": "2021-08-21T16:26:20Z", "author": "Supercharged ", "text": "Howsum(7,[5,3,4,3]) your logic will fail if I pass this array for 7...it will  not return 3,4 and 4,3 ...Instead it will override 7th index array....I know 3,4 and 4,3 both are same but consider every array object is unique ..And has some importance", "likes": 0}}, {"topLevelComment": {"id": "Ugz94tLGM_1jfN0k2Sp4AaABAg", "publishedAt": "2021-08-21T10:34:34Z", "author": "Desmond Adenola", "text": "just 38 min and I can feel my life change.", "likes": 2}, "replies": [{"id": "Ugz94tLGM_1jfN0k2Sp4AaABAg.9RIpxUnsbDu9_V3NVrl8In", "publishedAt": "2022-04-06T21:14:01Z", "author": "Desmond Adenola", "text": "well i'm back", "likes": 0}, {"id": "Ugz94tLGM_1jfN0k2Sp4AaABAg.9RIpxUnsbDu9SCj0lxyPaO", "publishedAt": "2021-09-12T22:09:56Z", "author": "Desmond Adenola", "text": "Finished it, but I'll be back", "likes": 0}, {"id": "Ugz94tLGM_1jfN0k2Sp4AaABAg.9RIpxUnsbDu9RJNI-7BTBN", "publishedAt": "2021-08-21T15:34:36Z", "author": "Cac\u00e1 Alves Feitosa", "text": "same here HAHA", "likes": 1}]}, {"topLevelComment": {"id": "UgzsSdjklFuZCTl1M2l4AaABAg", "publishedAt": "2021-08-21T10:03:32Z", "author": "Shivansh Goswami", "text": "thank you", "likes": 0}}, {"topLevelComment": {"id": "UgxfwymIQ-ir2RzGOLR4AaABAg", "publishedAt": "2021-08-21T07:07:27Z", "author": "Water Ghost", "text": "You had me until you said your code will be in javascript.", "likes": 0}}, {"topLevelComment": {"id": "UgwKa_EQSqxj1dp0v0R4AaABAg", "publishedAt": "2021-08-21T06:24:01Z", "author": "Gevorg Galstyan", "text": "Best explanation of dynamic programming one may ever come across. Many thanks to Alvin (best teacher ever) for his effort.", "likes": 0}}, {"topLevelComment": {"id": "Ugx6ErOfUyiRLwl7hLl4AaABAg", "publishedAt": "2021-08-20T21:01:22Z", "author": "Damian Wysoki\u0144ski", "text": "2:17:25 I made this mistake when creating algorithm on my own :D", "likes": 0}}, {"topLevelComment": {"id": "UgwqLQYXXHUx1tK62dp4AaABAg", "publishedAt": "2021-08-20T15:17:31Z", "author": "chilly21", "text": "for CanSum, still dont understand why it's o(n+m)", "likes": 0}}, {"topLevelComment": {"id": "Ugx7mgSgNr-oRDT4MAZ4AaABAg", "publishedAt": "2021-08-20T15:05:49Z", "author": "mms1127", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugz_eS0jRa3di4VaRa94AaABAg", "publishedAt": "2021-08-20T14:50:16Z", "author": "Koli Kunji", "text": "For the second problem u can still reduce the time by storing \"n,m\" key and the return value.Becoz n,m and m,n have same value", "likes": 0}}, {"topLevelComment": {"id": "Ugy9_qXGeo0EiR98lER4AaABAg", "publishedAt": "2021-08-19T17:38:28Z", "author": "Murtaza Bohra", "text": "Hi, thanks for the video, it's helped me a lot! However, in the canSum memoization problem, you store the targetSum in your memo object at line 10 (at 1:27:37) when the result is True. I believe this is a mistake. A True return from any of the recursive calls will return all the way to the top, immediately ending the code. Your goal is to find work that has already been carried out before, and the only way to end up here is when you are repeating work where the result was False. I think the targetSum should only be added to the memo when a recursive call returns a False. Am I missing something?", "likes": 2}, "replies": [{"id": "Ugy9_qXGeo0EiR98lER4AaABAg.9RERsTRPcAA9Y1Yr5zFuA4", "publishedAt": "2022-02-04T17:09:04Z", "author": "Ashriel Brian", "text": "While you're right that the goal of memoizing is to find answers to any work already done, for the purposes of this problem, we *do* want any True statements to bubble all the way back up and end the function execution early, since all we want to know is if the numbers in the array canSum up to the target - there's no need to continue.", "likes": 0}, {"id": "Ugy9_qXGeo0EiR98lER4AaABAg.9RERsTRPcAA9VTvdLBYxmP", "publishedAt": "2021-12-03T04:01:28Z", "author": "Taylor", "text": "@Shashidhar Reddy  I had to modify my code (Python) as follows to pass all the test cases.  I think Murtaza explained it best, only want to memoize the calls returning false:\n\nclass Recursor:\n  def can_sum(target_sum, nums_list, memo={}):\n        if target_sum in memo:\n            return memo[target_sum]\n        elif target_sum == 0:\n            return True\n        elif target_sum < 0:\n            return False\n        for num in nums_list:\n            delta = target_sum - num\n            if Recursor.can_sum(delta, nums_list, memo):\n                return True\n            memo[target_sum] = False\n        return memo[target_sum]", "likes": 0}, {"id": "Ugy9_qXGeo0EiR98lER4AaABAg.9RERsTRPcAA9ScWl9l01Wi", "publishedAt": "2021-09-23T07:53:34Z", "author": "Shashidhar Reddy", "text": "I am searching for this time stamp only...If I add TargetSum values which are true in memo, then I am getting the final result as True for canSum(300, [7,14])... Could you please explain me why? \nThanks in advance...\ud83c\udf89", "likes": 0}]}, {"topLevelComment": {"id": "UgyxztRBgh7c7kxe2b94AaABAg", "publishedAt": "2021-08-19T11:52:37Z", "author": "Jayesh Marathe", "text": "At 2:07:16 he said each recursive call has to have its own shortestCombination array\nSo how is shortestCombination array of different different recursive calls are compared to each other\nWon't they be lost after particular recursive call?", "likes": 0}}, {"topLevelComment": {"id": "Ugxaqsx6c78zWwco_GJ4AaABAg", "publishedAt": "2021-08-19T02:48:27Z", "author": "chilly21", "text": "Time complexity is not N+M, but it is whichever is biggest.", "likes": 0}}, {"topLevelComment": {"id": "Ugy3mJEp6R_mOROKgul4AaABAg", "publishedAt": "2021-08-19T02:27:09Z", "author": "Thinh Phan", "text": "1:00:10", "likes": 0}}, {"topLevelComment": {"id": "UgyPTbE_u1ZuARvJmYV4AaABAg", "publishedAt": "2021-08-18T16:02:36Z", "author": "John Van Schultz", "text": "This is one of the best videos on both recursion and dynamic programming I've ever seen. Thank you for making this available and sharing this knowledge with the programming community.", "likes": 15}}, {"topLevelComment": {"id": "Ugx3x_KDAw3y8z0RWOB4AaABAg", "publishedAt": "2021-08-18T06:45:10Z", "author": "senthil murugan", "text": "I'm new to DP this logic stuck into infinite recursion can anyone resolve this one?? it's java language \npublic static boolean sum(long target,long[] arr)\n    {\n        if(target==0)\n        return true;\n        if(target<0)\n        return false;\n        for(int i=0;i<arr.length;i++)\n        {\n            long remainder=target-arr[i];\n            if(sum(remainder,arr)==true)\n            return true;\n        }\n        return false;\n    }\n\tpublic static void main(String[] args) {\n\t    long[]arr={0,1};\n\t\tSystem.out.println(sum(2,arr));\n\t}", "likes": 0}, "replies": [{"id": "Ugx3x_KDAw3y8z0RWOB4AaABAg.9RAhJk9V5CA9RAj7T3ye8P", "publishedAt": "2021-08-18T07:00:58Z", "author": "senthil murugan", "text": "I've resolved this error by skipping the zero is this the only way to resolve??\npublic class Main\n{\n    public static boolean sum(long target,long[] arr)\n    {\n        if(target==0)\n        return true;\n        if(target<0)\n        return false;\n        for(int i=0;i<arr.length;i++)\n        {\n            if(arr[i]==0)\n            continue;\n            long remainder=target-arr[i];\n            if(sum(remainder,arr)==true)\n            return true;\n        }\n        return false;\n    }\n\tpublic static void main(String[] args) {\n\t    long[]arr={0,1};\n\t\tSystem.out.println(sum(2,arr));\n\t}\n}", "likes": 0}]}, {"topLevelComment": {"id": "UgyLCoSEZ2TcEq87o8h4AaABAg", "publishedAt": "2021-08-18T03:06:07Z", "author": "vivek sai", "text": "During the initialization of the array for bestSum, howSum using tabulation, we can initialize index 0, and indexes of all the numbers in the numArray as an array with single element containing themselves respectively. Now the iteration of table can start from the smallest element of numArray instead of zero because a targetSum which is lesser than the least element of the numArray cannot be formed anyhow. It will reduce the number of iterations over null values less than the smallest value of the numArray.", "likes": 0}}, {"topLevelComment": {"id": "Ugyp8U7vsANmxoRazBZ4AaABAg", "publishedAt": "2021-08-17T23:37:32Z", "author": "Placement ExP", "text": "What language is he coding in ?", "likes": 0}, "replies": [{"id": "Ugyp8U7vsANmxoRazBZ4AaABAg.9R9wNf9f68J9RBWZsglgRF", "publishedAt": "2021-08-18T14:21:45Z", "author": "Manoj Sai Bellamkonda", "text": "Java script", "likes": 0}]}, {"topLevelComment": {"id": "UgyFWTtFaQ92MbjVAkd4AaABAg", "publishedAt": "2021-08-17T21:51:41Z", "author": "Gerald Filimonov", "text": "This is an excellent video/tutorial. Extremely clear explanations and the progressive nature of the content is exactly how things should be taught. Start with a simple foundation and add complexity layer by layer. \n\nI do have to say its funny how the terms dynamic programming and memoization came to be. When I learned programming 30+ years ago, we just called it programming and it was just a cache.\n\nI learned 3D BSP trees by writing a Quake 1 map parser/compiler and the computed BSP tree was used for rendering (Quake 1 is a FPS game released in 1996 by ID Software). The BSP tree concept was/is simple, but how it was applied to enable back to front rendering in a 3D world took me a bit to get my head around. After that you move on to quadtrees and octrees. I've been toying with the idea of doing some videos on 3D BSP trees but with modern advances in 3D graphics acceleration I'm not sure it's all that relevant anymore.", "likes": 0}}, {"topLevelComment": {"id": "UgxVyNCPLiaSw2FN2654AaABAg", "publishedAt": "2021-08-17T20:48:54Z", "author": "Moonwar Al Wardiful", "text": "I am searching for Grid Traveller solution in c++.  can anyone give the solution?", "likes": 0}}, {"topLevelComment": {"id": "UgyCRuXo6p10_Z-sq8Z4AaABAg", "publishedAt": "2021-08-17T11:12:49Z", "author": "Devoted Indian", "text": "The BestSum solution gives the correct length but incorrect elements for some number combination. Like for 100 target with numbers[2,3,4,5] , it gives the shortest array to be of size 20 but the elements do not add up to be 100, its because we only compare array length and hence when we have two solutions of same length , ex for 8  (4,4),(5,3) both are minimum solutions, so what we choose will reflect in the shortest array answer. Scratching my head how to go past this :D. Never have i ever come across such awesome teaching of dynamic programming.", "likes": 0}, "replies": [{"id": "UgyCRuXo6p10_Z-sq8Z4AaABAg.9R8b96oXZ4Q9R96kTRBrZS", "publishedAt": "2021-08-17T15:57:40Z", "author": "Devoted Indian", "text": "Sorry my bad, i was coding in python and go and the lists and slices were getting populated in successive iterations creating confusions. I am sorry , and the fact i have 5+ years of experience in web development \ud83d\ude16. I was going to delete the comment but keeping it as a reminder to recheck the code :D.", "likes": 0}]}, {"topLevelComment": {"id": "Ugy0tJGVuLbIxi8pabN4AaABAg", "publishedAt": "2021-08-17T10:33:29Z", "author": "Prakarsh Gupta", "text": "You don't find a good tutorial on youtube easily, but needless to say this is the best tutorial for Dynamic Programming. Moreover, his accent is pretty understandable too. He explains it so well, with the board and his code. Good Work! @Coderbyte I hope your channel grows exponentially and that I get to watch more such tutorials in the FUTURE!", "likes": 1}, "replies": [{"id": "Ugy0tJGVuLbIxi8pabN4AaABAg.9R8Xe1cOTkw9R8XvmOd-GF", "publishedAt": "2021-08-17T10:35:54Z", "author": "Prakarsh Gupta", "text": "Also thanks to freeCodeCamp for all publishing all those tutorials on your channel. This is the 1 channel I know will only have quality content and that too for free, which is really a bliss", "likes": 0}]}, {"topLevelComment": {"id": "UgwzelDc3a1ZPS5OB394AaABAg", "publishedAt": "2021-08-17T09:00:27Z", "author": "CST1992", "text": "1:32:09 we can also look at this as kind of \"borrowing and returning\" the zero.\nFor example, let's consider the example of howSum(8, [2, 3, 5]). Suppose we return the first solution of [3, 5], we can also say if we had a howSum(8, [0, 2, 3, 5]) we could have returned [0, 3, 5] and it'd still be a valid answer. But since we don't actually have the zero in the input set, we have to \"return\" it(cut it out of the final output). Conversely, if we have an unsolvable case of say, howSum(20, [7, 14]) then even if we \"borrow\" the zero then it makes no difference; the solution is still going to be null.\nSo, when we have an input like howSum(0, [1, 2, 3]) we could again \"borrow\" the zero to have howSum(0, [0, 1, 2, 3]) with  solution of  [0] but since we have to \"return\" the zero the actual solution is going to be just []. This way we can justify the step of assuming the empty array to be a valid answer for a sum of 0.\n\nNote that \"borrowing and returning\" any other number(which is not an additive identity) won't work. E.g. we can't \"borrow and return\" 6 for the case of howSum(20, [7, 14]).", "likes": 0}}, {"topLevelComment": {"id": "UgwQY4jxs0dytEoX_614AaABAg", "publishedAt": "2021-08-17T03:23:54Z", "author": "Sourabh Somdeve", "text": "In howSum memorization I only want to generate the targetSum from the value which is actually inside the list means not repeating any value...how can we do it ?", "likes": 0}}, {"topLevelComment": {"id": "Ugykuj9pG9-VAHbuU5B4AaABAg", "publishedAt": "2021-08-16T16:14:54Z", "author": "CST1992", "text": "46:56 the last one should be (2,0) because all we're really doing is subtracting 1 from the first and second value. So we get the two children of that node as (1,1) and (2,0).", "likes": 0}}, {"topLevelComment": {"id": "UgyAEuB31OGGhCEJKXB4AaABAg", "publishedAt": "2021-08-16T14:31:39Z", "author": "Tri-An Nguyen", "text": "How to draw tree structure for Longest Palindromic Substring?", "likes": 0}}, {"topLevelComment": {"id": "Ugxc9HspyFkBBKxGCal4AaABAg", "publishedAt": "2021-08-15T22:29:15Z", "author": "Ashish Nayak", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxIdX0vXgMe_PIiktF4AaABAg", "publishedAt": "2021-08-15T21:11:03Z", "author": "aswanth jabba", "text": "I am not really sure how this guy made it seem so easy", "likes": 0}}, {"topLevelComment": {"id": "UgyV0sgHN5Kx4lUxl5B4AaABAg", "publishedAt": "2021-08-15T20:06:09Z", "author": "Arc Singh", "text": "Dp is really clear like glass in instructors head.", "likes": 0}}, {"topLevelComment": {"id": "Ugw0V12GlWn6O7uOqpl4AaABAg", "publishedAt": "2021-08-15T17:14:45Z", "author": "TheIceyNiga109 0", "text": "you are a legend", "likes": 0}}, {"topLevelComment": {"id": "Ugy_KkM3bUA52FzHPCd4AaABAg", "publishedAt": "2021-08-15T15:08:31Z", "author": "Rodion", "text": "Hi, thank you for the lecture. Is the comment section here on Youtube a good place for a discussion/ questions? If not, then i will re-post it wherever it is more suited: \nAt 1:46:20  the complexity is measured as m^n * m. As far as I understand though, the array is copied only for the branch that actually resolves the problem and for the rest of the branches there is no copying. I assumed that the complexity is m^n + m (plus).\n Is there something i am missing?", "likes": 2}, "replies": [{"id": "Ugy_KkM3bUA52FzHPCd4AaABAg.9R3sXfmiwzt9TqQkCChR8y", "publishedAt": "2021-10-23T14:01:46Z", "author": "Anshul Sachdev", "text": "He is talking about the time complexity and not the space complexity. For each call, the time consumed by the spread operator is m(length of the array). That is why the m is multiplied to the m^n.", "likes": 0}, {"id": "Ugy_KkM3bUA52FzHPCd4AaABAg.9R3sXfmiwzt9RdwvIxpSMJ", "publishedAt": "2021-08-30T00:38:43Z", "author": "mark okafor", "text": "I was thinking same", "likes": 1}]}, {"topLevelComment": {"id": "UgxftHr4PkCjJUc5YzF4AaABAg", "publishedAt": "2021-08-15T09:50:20Z", "author": "gnana sekaran", "text": "https://youtu.be/oBt53YbR9Kk?t=3268 is it time complexity supposed to be O(Max(m,n))?", "likes": 0}}, {"topLevelComment": {"id": "UgzUAaFgzpR9MiZzpDJ4AaABAg", "publishedAt": "2021-08-15T08:55:02Z", "author": "gnana sekaran", "text": "just wanted to say, fibonacci series starts from 0 not 1.", "likes": 0}}, {"topLevelComment": {"id": "UgxGrlBo5LaffXSEPIx4AaABAg", "publishedAt": "2021-08-15T07:45:29Z", "author": "Syed Fahad", "text": "Now I love dynamic programming \ud83e\udd70\ud83e\udd70", "likes": 0}}, {"topLevelComment": {"id": "Ugzk1_xPz5utn4678CZ4AaABAg", "publishedAt": "2021-08-15T07:13:13Z", "author": "VG 's", "text": "Does someone know basic coding", "likes": 0}}, {"topLevelComment": {"id": "Ugw9AtrqHKXguA5zB5p4AaABAg", "publishedAt": "2021-08-15T07:13:00Z", "author": "VG 's", "text": "Hey can you please help me", "likes": 0}}, {"topLevelComment": {"id": "UgyijYdL6JlyzSgc7RN4AaABAg", "publishedAt": "2021-08-15T06:01:55Z", "author": "sagar trimukhe", "text": "Thank you.", "likes": 0}}, {"topLevelComment": {"id": "UgwzgBbL3snMP3y9vFt4AaABAg", "publishedAt": "2021-08-15T03:28:00Z", "author": "Miguel Hernandez", "text": "For the bestSum problem, wouldn't a breadth-first search be better? You could terminate early once you found the first solution. For the algorithm, just use a queue and push and shift a length 2 array with the first element the remainder and the second element an array of edges thus far.", "likes": 0}}, {"topLevelComment": {"id": "UgwzdcZw9iRVW_7CToF4AaABAg", "publishedAt": "2021-08-15T03:09:21Z", "author": "Chandrasekar Jayaraman", "text": "Hey, i think cansum has code issue. cansum(8,[2,7,9]) is returning true.  this should return false.", "likes": 0}}, {"topLevelComment": {"id": "UgyTqnXd6MJ0oilqxJx4AaABAg", "publishedAt": "2021-08-15T00:23:24Z", "author": "cb88", "text": "For most of the problems, do you need to memoize the true cases? It seems like (in canSum / canConstruct for instance), once you get a true value, you just end the loop.", "likes": 0}}, {"topLevelComment": {"id": "UgzUQgm-gAl1S1TOvkd4AaABAg", "publishedAt": "2021-08-14T20:27:36Z", "author": "Chandan Bhattad", "text": "This content is gold!", "likes": 0}}, {"topLevelComment": {"id": "UgxZ5uqMZoKevCxmiwJ4AaABAg", "publishedAt": "2021-08-14T20:16:46Z", "author": "Chandan Bhattad", "text": "How does one create such tree animations? Is there any tool for this?", "likes": 0}}, {"topLevelComment": {"id": "Ugw-BE6kO590279YtZB4AaABAg", "publishedAt": "2021-08-14T16:57:35Z", "author": "Ajay", "text": "In grid traveler, while checking if a key is in the memo, we only checked the (m,n) case and not the (n,m) case. Does that thing gets taken care of its own?", "likes": 0}, "replies": [{"id": "Ugw-BE6kO590279YtZB4AaABAg.9R1VDiWDsG49R2vZwycjgb", "publishedAt": "2021-08-15T06:15:47Z", "author": "Mohith S", "text": "I had the same doubt. He explained that it could be done but didn't implement it in the code", "likes": 0}]}, {"topLevelComment": {"id": "UgzyjRRzsAXk3e20u6Z4AaABAg", "publishedAt": "2021-08-14T15:06:32Z", "author": "Laith", "text": "The Fib Tablulation code does work on javascript but it is not completely correct, in other programming languages like java, go, c++, kotlin, dart..etc this will throw an out of bound exception, the reason for this is that the \n\nfor( i=0; i<=n; i++) {\n    table[i + 1] += table[i]\n    table[i + 2] += table[i]\n}\n\nthe array we initialize is with size n + 1 while this loop hits n + 1 and n + 2 index, assume n is 5\n\narray size is n + 1 = 6 so indices from 0 to 5\n\nthe last iteration of this loop is i = 5 which mean i + 1 = 6 and i + 2 = 7 which will cause the exception. since we need the value of N only this mean we care about n -1 and n - 2 which is 5 - 1 = 4 and 5 - 2 = 3 to reach this point in this for loop we to stop at n - 1 and either set an if statement before i + 2 or increase the array size by another 1 which make it n + 2", "likes": 0}}, {"topLevelComment": {"id": "UgzMU8v0GPNGmzIrTbp4AaABAg", "publishedAt": "2021-08-14T12:19:43Z", "author": "CoDiNg WithAnonymous", "text": "Best dp explanation", "likes": 0}}, {"topLevelComment": {"id": "UgyA84MPc5cbiXdsrOl4AaABAg", "publishedAt": "2021-08-13T22:20:43Z", "author": "Chinmay Mhatre", "text": "Why dynamic programming is so harddddddddddddddd \ud83d\ude10\ud83d\ude10", "likes": 0}}, {"topLevelComment": {"id": "UgwTRevm0Jny1tjdezR4AaABAg", "publishedAt": "2021-08-13T19:32:09Z", "author": "Hotshotter3000", "text": "2:04:30 Can you for the 'num of numbers' in python as well?", "likes": 0}}, {"topLevelComment": {"id": "UgwROhwXaGr5Uy4Kp614AaABAg", "publishedAt": "2021-08-12T19:32:16Z", "author": "Hotshotter3000", "text": "Codewars often challenges you with funky coding challenges. This course will help me ace most of them.", "likes": 0}}, {"topLevelComment": {"id": "UgwQApqPU5leA4GD4054AaABAg", "publishedAt": "2021-08-12T17:39:24Z", "author": "ANJALI BATHLA", "text": "For memoized gridTraveler( 1:04:05 ), shouldn't the space complexity be O(mn+m+n) or O(mn)? The max number of keys stored can be m*n and max m+n calls in the call stack?", "likes": 0}}, {"topLevelComment": {"id": "UgzUwVcZDKkBXZxe_wl4AaABAg", "publishedAt": "2021-08-12T15:42:28Z", "author": "Eduard Sluzhevsky", "text": "Great subject, great delivery", "likes": 0}}, {"topLevelComment": {"id": "UgwLj02eXsByr_zBcSF4AaABAg", "publishedAt": "2021-08-12T06:25:20Z", "author": "Adrian Rossino", "text": "I love freeCodeCamp, I have experience as a software developer and this is the first time I see this explained so well, in fact, every time I memoized something  I did it by \"experience\" not by knowledge,  so sometimes I could've done it better, I now better understand how to dp stuff, thank you so much!", "likes": 1}}, {"topLevelComment": {"id": "UgwbCfWeR3pHApJvTPR4AaABAg", "publishedAt": "2021-08-12T05:47:19Z", "author": "Munanga Munsaka", "text": "Hi all, would this be the Java equivalent? Seems to run as slow as the non memoized code for me.\n\nstatic boolean canSum(int targetSum, int [] arr){\r\n        boolean [] memo = new boolean[targetSum+1];\r\n        return canSumhelper(targetSum, arr, memo);\r\n    }\n\n\r\n\r static boolean canSumhelper(int targetSum, int [] arr, boolean [] memo){\n\n        if(targetSum < 0 || targetSum == 1){\r\n            return false;\r\n        }else if(targetSum == 0){\r\n            return true;\r\n        }\r\n        if(memo[targetSum]){\r\n            return memo[targetSum];\r\n        }\r\n\r\n        for(int i = 0; i < arr.length; i++){\r\n            if(canSumhelper(targetSum-arr[i],arr, memo)){\r\n                memo[targetSum] = true;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        memo[targetSum] = false;\r\n        return false;\r\n\r\n    }\r\n\nThanks!", "likes": 0}}, {"topLevelComment": {"id": "UgzpGxboQUpuxwHfY0d4AaABAg", "publishedAt": "2021-08-11T01:42:51Z", "author": "Daniel Kim", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "Ugx5v_dUBNDQduFGLqd4AaABAg", "publishedAt": "2021-08-10T06:24:51Z", "author": "Jitendra Pandey", "text": "who disliked this video? and why?", "likes": 1}}, {"topLevelComment": {"id": "Ugyrs5t3rBTV-0jo64R4AaABAg", "publishedAt": "2021-08-10T02:58:47Z", "author": "Srilekha Lava", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "Ugzyq2DbFSEF6s1Cg5F4AaABAg", "publishedAt": "2021-08-09T22:01:49Z", "author": "Arios Taba", "text": "49:20 gridTraveler \n    if(x==1 && y==1) return 1;\n  // can be replaced with\r\n    if(x==1 || y==1) return 1;", "likes": 0}}, {"topLevelComment": {"id": "UgwqNg7Y2goBaYkLfQF4AaABAg", "publishedAt": "2021-08-09T18:30:47Z", "author": "Jan Joska", "text": "Top!", "likes": 0}}, {"topLevelComment": {"id": "UgygIHucbcyhVBoysXJ4AaABAg", "publishedAt": "2021-08-09T17:36:53Z", "author": "Vikram Ganesh", "text": "Just a note: \nIf you are using c++, you cannot pass in a map as a parameter, as this will not work. You have to declare the map globally to properly implement memoization", "likes": 0}}, {"topLevelComment": {"id": "UgzspsdUDkUfia0CzFV4AaABAg", "publishedAt": "2021-08-09T12:57:13Z", "author": "Kamal Kumar", "text": "Thanks for this awesome tutorial.", "likes": 0}}, {"topLevelComment": {"id": "UgwVmFo2UcOEBECiBrd4AaABAg", "publishedAt": "2021-08-08T21:03:39Z", "author": "your moon", "text": "This is really a great class! I hope I find it earlier. I am wondering what tool was being used in generating the animation?", "likes": 1}}, {"topLevelComment": {"id": "Ugy0JC6JNz3ot6vDyMV4AaABAg", "publishedAt": "2021-08-08T06:37:28Z", "author": "Binish A.R.", "text": "Amazing content, very well explained.", "likes": 0}}, {"topLevelComment": {"id": "UgxMYwFy1Cnx0RgZk_J4AaABAg", "publishedAt": "2021-08-08T06:35:36Z", "author": "Binish A.R.", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"id": "UgyWsZs_6GTp1Y-F8_t4AaABAg", "publishedAt": "2021-08-07T21:24:38Z", "author": "nathaniel nizard", "text": "In all of this example the guy just used a poorly implemented reducer to speed up algorithms at the cost of more memory consuption...\n\nThe subjet is not treated well and exposing methods with default attributes that are used in the code is absolutely a no go as well. I'm baffled this got 1M+ vues... Seems like looking like you know what you are talking about, showing pretty diagrams and making a 5h long video is enough to get some street cred nowadays.\n\nFor every language there are best practices to use when dealing with memoization, and when it is not doable through the algorithm you can always fall back to using a caching, because at the end the day when you memoize something, it is cached, on top of that most of the time when deploying a program you want to go for the worst case scenario memory wise, so having stuffs permanently cached makes often more sense and is more practical than caching them only during a function execution.", "likes": 0}, "replies": [{"id": "UgyWsZs_6GTp1Y-F8_t4AaABAg.9QkxDTXN1pK9R5ZwjqlBHh", "publishedAt": "2021-08-16T06:55:47Z", "author": "nathaniel nizard", "text": "@Mohith S This is why I explained why it is bad for begginers.", "likes": 0}, {"id": "UgyWsZs_6GTp1Y-F8_t4AaABAg.9QkxDTXN1pK9R5VN-gILZ_", "publishedAt": "2021-08-16T06:15:49Z", "author": "Mohith S", "text": "This course is meant to point beginners in the right direction. It is by no means a comprehensive dynamic programming course that will make everyone who watches it an expert", "likes": 0}]}, {"topLevelComment": {"id": "UgwsFzf5GQFIkOR2WVx4AaABAg", "publishedAt": "2021-08-07T19:24:24Z", "author": "Aryan Gupta", "text": "canSum using maths\ndef canSum(target,arr):\n       if 1 in arr:\n            return True\n      else:\n             for num in arr:\n                    rem=target%num\n                    if rem==0 or rem in arr:\n                             return True\n            return False", "likes": 1}, "replies": [{"id": "UgwsFzf5GQFIkOR2WVx4AaABAg.9QkjSsRdBJw9RzZPeUtkxT", "publishedAt": "2021-09-07T10:07:50Z", "author": "Aryan Gupta", "text": "@Grey Lemon Yes!...thanks for figuring out man..appreciated", "likes": 0}, {"id": "UgwsFzf5GQFIkOR2WVx4AaABAg.9QkjSsRdBJw9Qpm4zSB0rF", "publishedAt": "2021-08-09T18:23:33Z", "author": "Grey Lemon", "text": "Hey man, just want to help you. I believe this is an incorrect solution. \nTry target: 21, arr: [5, 6, 10]. The sum of the array is 21, but this function will return false.\nYou only check for the remainder for a given num and check it in the list. You do not check for other possible numbers, those which are not a remainder of num.\nAssuming this is a correct solution, you do not need to make a special case for 1. The else / second case will handle it.\nThe time complexity of 'in' for list is O(n=size of list). Because of your second case, a loop with 'in' inside,  the time complexity is O(n^2).", "likes": 0}]}, {"topLevelComment": {"id": "UgxTKCOuwrl2oSv3JIN4AaABAg", "publishedAt": "2021-08-07T16:19:43Z", "author": "Eyal Pery", "text": "Some C++ code snippets:\n\ncanSum:\n\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <stdbool.h>\nusing namespace std;\n\nbool canSum(int target, vector<int> &nums, unordered_map<int, bool> &memo)\n{\n    if (target == 0) { return memo[target]; }\n    if (target < 0 || memo.count(target)) { return false; }\n    \n    for (auto num : nums) {\n        if (canSum(target - num, nums, memo)) {\n            memo[target] = true;\n            return true;\n        }\n    }\n    \n    memo[target] = false;\n    return false;\n}\n\nint main()\n{\n    unordered_map<int, bool> memo;\n    vector<int> nums = {5,14};\n    cout << (canSum(300, nums, memo)? \"true\" : \"false\") << endl;\n    return 0;\n}", "likes": 0}, "replies": [{"id": "UgxTKCOuwrl2oSv3JIN4AaABAg.9QkPKBtFHv49QpnbFMTrnI", "publishedAt": "2021-08-09T18:36:50Z", "author": "Eyal Pery", "text": "canConstruct:\n\n#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <stdbool.h>\nusing namespace std;\n\nbool canConstruct(string target, vector<string> &bank, unordered_map<string, bool> &memo)\n{\n    if (memo.count(target)) { return memo[target]; }\n    if (target.empty()) { return true; }\n    \n    for (auto &word : bank) {\n        if (target.compare(0, word.length(), word) == 0) {\n            if (canConstruct(target.substr(word.length(), target.length()), bank, memo)) {\n                memo[target] = true;\n                return true;\n            }\n        }\n    }\n    \n    memo[target] = false;\n    return false;\n}\n\nint main() {\n    unordered_map<string, bool> memo;\n    \n    vector<string> bank = {\"put\",\"ccc\",\"com\", \"er\", \"xyz\", \"eeeeee\"};\n    cout << (canConstruct(\"computer\", bank, memo) ? \"true\" : \"false\") << endl;\n\n\treturn 0;\n}", "likes": 0}, {"id": "UgxTKCOuwrl2oSv3JIN4AaABAg.9QkPKBtFHv49Qk_0646XUm", "publishedAt": "2021-08-07T17:53:05Z", "author": "Eyal Pery", "text": "howSum in C++:\nunsigned int sum(int target, vector<int> &nums, vector<int> &res, unordered_map<int,bool> mem)\n{\n    if (target == 0) {\n        return true; \n    }\n    if (target < 0) {\n        return false;\n    }\n    if (mem.count(target)) {\n        return mem[target];\n    }\n    \n    for (auto const &num : nums) {\n        if (sum(target-num, nums, res, mem)) {\n            mem[target] = true;\n            res.push_back(num);\n            return true;\n        }\n    }\n\n    mem[target] = false;    \n    return false;\n};\n\nunsigned int howSum(int target, vector<int> &nums, vector<int> &res) \n{\n    unordered_map<int,bool> mem;\n    return sum(target, nums, res, mem);\n};\n\nint main() {\n    vector<int> vec {2,3,10,11};\n    vector<int> res;\n    howSum(7, vec, res);\n    \n    for (const auto& e : res) {\n        cout << e << \", \";\n    }\n\t\n\treturn 0;\n}", "likes": 0}]}, {"topLevelComment": {"id": "Ugz2iSrfjmV60zBgptV4AaABAg", "publishedAt": "2021-08-07T16:02:48Z", "author": "Kevinlui Builder", "text": "The whole video is awesome step-by-step content. But i think for the gridTraveller(3,3) using tabulation, we shouldn't need the extra row and col (4x4) space that seems for bootstrapping  in the video? The follow passed leetcode submission. Can someone cross-check please ? or am i missing something.\n\n    public int uniquePaths(int m, int n) {\n        int[][] grid = new int[m][n];\n        for (int[] row : grid) Arrays.fill(row, 1);\n        \n        for (int i=1; i<m; i++)\n            for (int j=1; j<n; j++)\n                grid[i][j] = grid[i-1][j] + grid[i][j-1];\n        \n        return grid[m-1][n-1];\n    }", "likes": 1}}, {"topLevelComment": {"id": "Ugwcm5QeJFSPDDYAqu14AaABAg", "publishedAt": "2021-08-07T10:22:18Z", "author": "Artem Korolev", "text": "First of all thx for the great content! I have a question about gridTravel, maybe anybody will clarify that for me.\ngridTravel(1, 3) returning 1 move to finish the grid, but it should be 2, right? [X, X, X] -> R,R to finish", "likes": 0}}, {"topLevelComment": {"id": "UgxQ-m4Gm2ANIYyOcil4AaABAg", "publishedAt": "2021-08-06T23:17:06Z", "author": "Skye Richardson", "text": "Why do we use the spread notation for how sum instead of just appending num to remainderResult and returning that?", "likes": 0}}, {"topLevelComment": {"id": "UgyRfpNPOFtvKHAEZn94AaABAg", "publishedAt": "2021-08-06T21:32:01Z", "author": "Juliano Maia", "text": "For the canConstruct, I think the complexity is O(n^m * m2), cause the target.indexOf(word) == 0 also needs to iterate the target string, and in the worst case (word is not a substring of target) would do M comparisons.", "likes": 0}}, {"topLevelComment": {"id": "Ugx_ksadB3Atyvh8NtN4AaABAg", "publishedAt": "2021-08-06T17:52:38Z", "author": "sathish rajendran", "text": "how fib tabulation implementation won't fall under indexoutofbound error", "likes": 0}}, {"topLevelComment": {"id": "UgzG1Iut57rW86QVRT14AaABAg", "publishedAt": "2021-08-06T07:23:40Z", "author": "Rajath A V", "text": "In the grid traveler problem, why isn't the space complexity of the memoized solution = O(n + m + n*m) ? We'll have (n+m) depth for the tree, and (m*n) size of the memo array. Also in an intuitive sense, we'll have normally a trade off between time and space. If we assume that m is much greater than n,  O(n + m + n*m) gets simplified to O(m*n). I can't understand how it remains O(m+n).", "likes": 1}, "replies": [{"id": "UgzG1Iut57rW86QVRT14AaABAg.9QgsBANvPfh9R5Vz_wWbym", "publishedAt": "2021-08-16T06:21:13Z", "author": "Mohith S", "text": "The space complexity of a recursive solution is usually the maximum depth of the recursive tree. Look up how space complexity is computed for recursive functions. It is not an absolute quantity", "likes": 0}]}, {"topLevelComment": {"id": "UgzkzD1OM0R2Cj_y4Pl4AaABAg", "publishedAt": "2021-08-05T08:16:57Z", "author": "18IT114 VISHNU VARDHAN S", "text": "mind-blowing, extraordinary way of teaching best ever tutorial for DP. \nThank you sooooo much", "likes": 0}}, {"topLevelComment": {"id": "UgyMdtjUP2y2NFMmAMN4AaABAg", "publishedAt": "2021-08-05T02:08:44Z", "author": "\u9ec3\u5a01\u51f1", "text": "Well, my C++ code passed the canConstruct with my eee...f having 127 \"e\"s(but it's faster than brute force by 9 ms)", "likes": 0}}, {"topLevelComment": {"id": "Ugx4juglSrNSPmSxm5x4AaABAg", "publishedAt": "2021-08-04T15:28:15Z", "author": "Jonathan Sequeira", "text": "I wanna know who disliked this video like seriously \ud83d\ude12", "likes": 0}}, {"topLevelComment": {"id": "UgwThFCYPoYIQGWldPt4AaABAg", "publishedAt": "2021-08-04T11:50:30Z", "author": "Jamison Williams", "text": "god bless this man. everything makes so much sense. I had to give up on writing everything in c++ about half way through and switch to Python though lmao. Those complicated return values were way too much for my C++ skills", "likes": 0}, "replies": [{"id": "UgwThFCYPoYIQGWldPt4AaABAg.9QcC7nLeaaF9RLsoDRS0VN", "publishedAt": "2021-08-22T14:57:14Z", "author": "Damian Wysoki\u0144ski", "text": "do you have a working solution for all_construct task?\nIf so, share please", "likes": 0}]}, {"topLevelComment": {"id": "UgxpD6yU6ko4UFvAW2t4AaABAg", "publishedAt": "2021-08-04T09:47:27Z", "author": "devan deva", "text": "I love the way he teaches and his love for coding can be seen in his face, whenever he smiles after hitting the code. Thanks man", "likes": 10}}, {"topLevelComment": {"id": "Ugzsf9SoFYI3-afHJqJ4AaABAg", "publishedAt": "2021-08-03T21:14:33Z", "author": "DIEZ919191", "text": "really clear explanation!!! thanks!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugz4Jfe7-sXmhQOeCqB4AaABAg", "publishedAt": "2021-08-03T20:52:39Z", "author": "chrisxdragon", "text": "Man, I cannot possibly describe how awesome you are and how crystal clear,  easy, interesting and fun the entire tutorial is. PURE GOLD.", "likes": 1}}, {"topLevelComment": {"id": "Ugycs_sPJAMDhGB1aap4AaABAg", "publishedAt": "2021-08-03T03:14:55Z", "author": "Hakim Hauston", "text": "05:38 how does he type to multiple line at the same time on visual studio code?? that is not vim right?!", "likes": 0}}, {"topLevelComment": {"id": "UgzWy79zLZ3MZjG3TgF4AaABAg", "publishedAt": "2021-08-02T15:52:02Z", "author": "Shoshone", "text": "At 0:48 I was asked this exact question in an interview and couldn't even attempt it...I think this course is what I'm looking for.", "likes": 0}}, {"topLevelComment": {"id": "UgzwYILOt08Ef6Smkhh4AaABAg", "publishedAt": "2021-08-02T08:30:37Z", "author": "Murali Darvadi", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxCACXtiptKUMzHo8l4AaABAg", "publishedAt": "2021-08-01T22:02:16Z", "author": "Ismail Kharrobi", "text": "thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugx1WWbFnnKysD6h7aB4AaABAg", "publishedAt": "2021-08-01T21:46:05Z", "author": "Juliano Maia", "text": "Isn't the memoized canSum problem's space complexity O(n + m) instead, since the memo is taking max M boolean values in memory, plus the size of the numbers array?", "likes": 0}}, {"topLevelComment": {"id": "UgxDlsVZp7TpQmArPkp4AaABAg", "publishedAt": "2021-08-01T20:35:50Z", "author": "Sensei", "text": "whoa was not expecting javascript, good thing i had a bit of an idea about it.", "likes": 0}}, {"topLevelComment": {"id": "UgwWTkZbgl609Re9eqh4AaABAg", "publishedAt": "2021-08-01T20:27:14Z", "author": "ThePlayer1962", "text": "In gridtraveler why not doing \nIf (n==1 || m==1)", "likes": 0}}, {"topLevelComment": {"id": "UgwT5pdoXOAyDYGWIEZ4AaABAg", "publishedAt": "2021-08-01T14:31:51Z", "author": "Chaminda Amarasinghe", "text": "we can have optimized base case if m or n = 1: return 1", "likes": 0}}, {"topLevelComment": {"id": "Ugx0-XEyABZE-WPuox94AaABAg", "publishedAt": "2021-08-01T06:11:08Z", "author": "RaysPlay", "text": "starts great, gonna watch the whole video!", "likes": 0}}, {"topLevelComment": {"id": "Ugw6GCFXImsiFv66YRJ4AaABAg", "publishedAt": "2021-07-31T17:34:23Z", "author": "Pushan Paul", "text": "2d array for sum problem would give you O(m*n) time complexity rather than 1d array which gives O(m*m*n), though the space complexity will increase. I would like to suggest 2d array for solving such problem in case of competitive programming.", "likes": 0}}, {"topLevelComment": {"id": "UgwCtpjpxp6ebYbzrC94AaABAg", "publishedAt": "2021-07-31T11:45:39Z", "author": "Simon Sutcliffe", "text": "Best video I\u2019ve watched in years\u2026\u2026. Also the longest.", "likes": 0}}, {"topLevelComment": {"id": "UgwAzlwpg8geFZvglWZ4AaABAg", "publishedAt": "2021-07-31T08:09:30Z", "author": "Jonathan Wilson", "text": "For the grid traveller, it didn't check the reverse arguments.", "likes": 0}}, {"topLevelComment": {"id": "UgziCeaTgGTFEW1VJHJ4AaABAg", "publishedAt": "2021-07-31T07:19:51Z", "author": "deepak singh", "text": "Amazing, really helped me to understand the DP. Huge respect and Thanks a lot.", "likes": 0}}, {"topLevelComment": {"id": "Ugy03J97iZnO9FTaSxR4AaABAg", "publishedAt": "2021-07-31T04:52:30Z", "author": "shayak ghosh", "text": "Why doesnt universities hire this kind of professors who can really inspire and demonstrate a concept, much better than a PHD holder in CS,  who has tremendous amount of knowledge but can't pass that on.", "likes": 0}}, {"topLevelComment": {"id": "UgyG_Ebcc9bSYPFf6_t4AaABAg", "publishedAt": "2021-07-30T22:18:23Z", "author": "yilmaz bingol", "text": "This video got a million views. All we have to do is subscribing coderbyte channel instead of writing plain thanks. I am surprised his channel has less than 9k people", "likes": 0}}, {"topLevelComment": {"id": "Ugx8szop7Nv-4o3fAIN4AaABAg", "publishedAt": "2021-07-30T18:59:37Z", "author": "Sumit S", "text": "47:29 i think this is a more precise base case. Need not go to zero.\nif (row == 1 or col == 1)\r\n                return 1;", "likes": 0}}, {"topLevelComment": {"id": "UgwulE2HcOLrwPKyvax4AaABAg", "publishedAt": "2021-07-30T18:31:14Z", "author": "Robert O'Connor", "text": "Why not just do if(canSum(remainder, numbers)) rather than comparing to a boolean since an if statement conditional is already a boolean?", "likes": 0}}, {"topLevelComment": {"id": "UgxyAKp2idnHyF672NF4AaABAg", "publishedAt": "2021-07-30T18:01:18Z", "author": "Hadeel Tantawy", "text": "That was definitely awesome! They guy just takes you from point A to point B in the smoothest way, no leaps. Thank you for this amazing tutorial, it's definitely worth the 5 hours!", "likes": 3}}, {"topLevelComment": {"id": "UgxL56sVwvmNUD9nnBJ4AaABAg", "publishedAt": "2021-07-30T17:03:06Z", "author": "ansis maleckis", "text": "I am only watching this because I want to rank-up on Codewars", "likes": 0}}, {"topLevelComment": {"id": "Ugx07aR17LaYAGh-5VF4AaABAg", "publishedAt": "2021-07-30T07:37:56Z", "author": "Naveen singla", "text": "This is gold", "likes": 0}}, {"topLevelComment": {"id": "UgxdTilEuEjPLxikJBh4AaABAg", "publishedAt": "2021-07-30T01:43:17Z", "author": "Mario Migliacio", "text": "Wonderful video. Excellent talking volume and speech! Greatly appreciate all the topics you cover.", "likes": 0}}, {"topLevelComment": {"id": "Ugz73hCh627lMzUWKRZ4AaABAg", "publishedAt": "2021-07-29T21:07:32Z", "author": "Prithvi Kewalramani", "text": "This man literally taught me more dynamic programming than paid university courses", "likes": 512}, "replies": [{"id": "Ugz73hCh627lMzUWKRZ4AaABAg.9QOk6L3nW_z9dUlRD-2QRu", "publishedAt": "2022-07-15T04:34:05Z", "author": "Razr Gu", "text": "@Yunfei Chen 70-80k dollars  a year if you have to pay full price", "likes": 1}, {"id": "Ugz73hCh627lMzUWKRZ4AaABAg.9QOk6L3nW_z9bcaj54JvK-", "publishedAt": "2022-05-29T21:50:55Z", "author": "Yunfei Chen", "text": "@Zack Jandali I thought only good universities like Harvard and MIT are over priced because they are private? Public ones are cheap?", "likes": 0}, {"id": "Ugz73hCh627lMzUWKRZ4AaABAg.9QOk6L3nW_z9_qWCuSGyc3", "publishedAt": "2022-04-15T14:29:16Z", "author": "YTG", "text": "Ok", "likes": 2}, {"id": "Ugz73hCh627lMzUWKRZ4AaABAg.9QOk6L3nW_z9_GgqmfYL6H", "publishedAt": "2022-04-01T07:19:04Z", "author": "Greg LeJacques", "text": "@Valkon *disneyland for ambitious drunks.", "likes": 2}, {"id": "Ugz73hCh627lMzUWKRZ4AaABAg.9QOk6L3nW_z9_GgLczIcdh", "publishedAt": "2022-04-01T07:14:41Z", "author": "Valkon", "text": "University is like a table of contents.", "likes": 5}]}, {"topLevelComment": {"id": "UgzS1fmjn5jqoyq7VjN4AaABAg", "publishedAt": "2021-07-29T10:01:30Z", "author": "Tony Kerr", "text": "Calculate collective iq via peer count..", "likes": 0}}, {"topLevelComment": {"id": "UgyWXErUDBSjYqiHEJ94AaABAg", "publishedAt": "2021-07-29T07:45:37Z", "author": "Nirban Ghosh", "text": "What are you all's ages?", "likes": 0}}, {"topLevelComment": {"id": "UgxY5EC1H7nHAM6AfGZ4AaABAg", "publishedAt": "2021-07-28T21:13:28Z", "author": "Gnaneshwar Mandava", "text": "is it me or does he sound like Jim from the office?  anyway this guy is amazing", "likes": 0}}, {"topLevelComment": {"id": "Ugwtdv85KaOBcyNpGu94AaABAg", "publishedAt": "2021-07-28T19:09:20Z", "author": "Harsh Chaudhary", "text": "why do we use memoization when tabulation is clearly much more efficient", "likes": 0}}, {"topLevelComment": {"id": "UgxWYqPfy4L3zIK7Ffx4AaABAg", "publishedAt": "2021-07-28T17:26:44Z", "author": "Tanveer Ahamed", "text": "The way you explain is really very easy to understand. Thank you so much and looking forward for many more videos like this.", "likes": 0}}, {"topLevelComment": {"id": "UgxJV1PXbJuZSJHpa9V4AaABAg", "publishedAt": "2021-07-28T12:23:11Z", "author": "Benjamin Li", "text": "1:28:16 \"This is going to be a nice optimized solution for cancer\" LMAO (this is in the subtitles)", "likes": 2}}, {"topLevelComment": {"id": "Ugw9OLroqxZHAnwWnRx4AaABAg", "publishedAt": "2021-07-27T08:00:47Z", "author": "Rohan Gaikwad", "text": "4 years of engineering by paying fess but still I didn't learn that much from college than from the freecodecamp...\nThank you for that...\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "Ugy_oYuMeSOYEUyAVqB4AaABAg", "publishedAt": "2021-07-26T18:22:11Z", "author": "Ravisha Sharma", "text": "Absolute GOLD.", "likes": 0}}, {"topLevelComment": {"id": "Ugw13XDbUDJLdiHvzeN4AaABAg", "publishedAt": "2021-07-26T10:13:51Z", "author": "AMIT KUMAR", "text": "#include <bits/stdc++.h>\r\n#include<iostream>\r\n#define ll long long int\r\n\r\n\n\n// target sum using memoisation\n\n\r\nusing namespace std;\r\n\r\nll memo[10000];\r\n\r\nbool cansum(ll targetsum,ll n, ll a[])\r\n{\r\n    if(memo[targetsum]==1)\r\n        return true;\r\n    if(memo[targetsum]==-1)\r\n        return false;\r\n    if(targetsum==0)\r\n        return true;\r\n    if(targetsum<0)\r\n        return false;\r\n    for(ll i=0;i<n;++i)\r\n    {\r\n        ll rem = targetsum - a[i];\r\n        if(cansum(rem,n,a)==true)\r\n        {\r\n            memo[targetsum] = 1;\r\n            return true;\r\n        }\r\n    }\r\n    memo[targetsum] = -1;\r\n    return false;\r\n}\r\n\r\nint main()\r\n{\r\n    while(1)\r\n    {\r\n        ll targetsum,n;\r\n        cin>>targetsum>>n;\r\n        ll a[n];\r\n        for(ll i=0;i<n;++i)\r\n        {\r\n            cin>>a[i];\r\n        }\r\n        bool ans = cansum(targetsum,n,a);\r\n        if(ans==true)\r\n            cout<<\"yes\"<<endl;\r\n        else\r\n            cout<<\"no\"<<endl;\r\n    }\r\n    return 0;\r\n}\nSOMEONE PLZ CHECK WHY MY SOLN IS NOT GIVING CORRECT OUTPUT FOR TARGET SUM PROBLEM??", "likes": 1}}, {"topLevelComment": {"id": "UgwNfgd5rTQ3tsiDf3p4AaABAg", "publishedAt": "2021-07-25T18:27:32Z", "author": "Abhishek Chapaitkar", "text": "Is this video better that Aditya Verma's DP playlist ?", "likes": 1}}, {"topLevelComment": {"id": "UgzMTIyt8fzr-AmYasR4AaABAg", "publishedAt": "2021-07-25T16:47:45Z", "author": "The_random_noob", "text": "C++ solution for string problems with tabulation! (I did my best to have it in the way similar to alvin did in js)\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\n\nbool canConstruct(string target, vector<string> wordBank) {\r\n    vector<bool> table(target.length()+1, false);\r\n    table[0]=true;\r\n\r\n    for(int i=0;i<=target.length();i++) {\r\n        if(table[i]==true) {\r\n            for(auto j: wordBank) {\r\n                if(target.substr(i,j.length())==j) {\r\n                    table[i+j.length()]=true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return table[target.length()];\r\n}\n\n\r\n\r\nint countConstruct(string target, vector<string> wordBank) {\r\n    vector<int> table(target.length()+1, 0);\r\n    table[0]=1;\r\n\r\n    for(int i=0;i<=target.length();i++) {\r\n        for(auto j:wordBank) {\r\n            if(target.substr(i,j.length())==j) {\r\n                table[i+j.length()]+=table[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    return table[target.length()];\r\n}\n\n\r\n\r\nvector<vector<string>> allConstruct(string target, vector<string> wordBank) {\r\n    vector<vector<vector<string>>> table;\r\n\r\n    for(int i=0;i<=target.length();i++) {\r\n        vector<vector<string>> A={};\r\n        table.push_back(A);\r\n    }\r\n    vector<string> A={};\r\n    table[0].push_back(A);\r\n\r\n    for(int i=0;i<=target.length();i++) {\r\n        for(auto j: wordBank) {\r\n            if(target.substr(i,j.length())==j) {\r\n                for(auto combination: table[i]) {\r\n                    vector<string> A=combination;\r\n                    A.push_back(j);\r\n                    table[i+j.length()].push_back(A);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return table[target.length()];\r\n}\n\n\r\n\r\nint main() {\r\n    string target=\"abcdef\";\r\n    vector<string> wordBank={\"ab\",\"abc\",\"cd\",\"def\",\"abcd\",\"ef\",\"c\"};\r\n\r\n    vector<vector<string>> res=allConstruct(target,wordBank);\n\r\n\r\n    for(auto i: res) {\r\n        for(auto j: i) {\r\n            cout<<j<<\" \";\r\n        }\r\n        cout<<endl;\r\n    }\r\n}", "likes": 5}, "replies": [{"id": "UgzMTIyt8fzr-AmYasR4AaABAg.9QDzC5qIDL19ZsW2GNHI2c", "publishedAt": "2022-03-22T12:34:54Z", "author": "Sarfraz Nawaz", "text": "Can u give python version of allConstruct recursive please", "likes": 0}]}, {"topLevelComment": {"id": "Ugw6erIWg0b5V2T5QOV4AaABAg", "publishedAt": "2021-07-25T00:55:26Z", "author": "tgiflying", "text": "The tabulation method for fibonacci is a bit unsatisfactory. It would be aligned with the mathematical definition of fibonacci numbers if you just looped from 2 to n and set fib[i] = fib[i-1] + fib[i-2]. Adding the ith number to the next two works but it is not the way it is mathematically defined.", "likes": 0}}, {"topLevelComment": {"id": "UgzQwOqjKuikXY0F2td4AaABAg", "publishedAt": "2021-07-24T20:55:34Z", "author": "HeAverage", "text": "Stop saying right please omggg", "likes": 0}}, {"topLevelComment": {"id": "Ugz9uPOgPb_V3G-74-J4AaABAg", "publishedAt": "2021-07-24T20:16:41Z", "author": "tgiflying", "text": "canSum, howSum, bestSum... I was almost expecting some dim sum next", "likes": 0}}, {"topLevelComment": {"id": "UgwaC3JgFBqwMXWGwOx4AaABAg", "publishedAt": "2021-07-24T11:20:09Z", "author": "HeAverage", "text": "If I had a dollar for every time you said \u2018right\u2019 \ud83d\ude25", "likes": 0}}, {"topLevelComment": {"id": "Ugx3WFABqVLSIwvhZHB4AaABAg", "publishedAt": "2021-07-23T16:58:20Z", "author": "DeVon DeCenzo", "text": "Hey Alvin do you have your own Youtube or something where you teach other stuff? I really like the way you teach.", "likes": 0}, "replies": [{"id": "Ugx3WFABqVLSIwvhZHB4AaABAg.9Q8qowEWXHI9QBEVL5FRkE", "publishedAt": "2021-07-24T15:12:27Z", "author": "Alvin the Programmer", "text": "Hey DeVon! Alvin here. Indeed I do have a personal channel  (https://www.youtube.com/c/AlvinTheProgrammer).", "likes": 0}]}, {"topLevelComment": {"id": "Ugwav7Scb1sbh2QFNIF4AaABAg", "publishedAt": "2021-07-23T04:50:30Z", "author": "Raghav", "text": "is their any specific reason for using let and const instead of var?", "likes": 0}, "replies": [{"id": "Ugwav7Scb1sbh2QFNIF4AaABAg.9Q7YX8udVgH9QD1i7T7131", "publishedAt": "2021-07-25T07:59:13Z", "author": "Raghav", "text": "@Alvin the Programmer Thank you", "likes": 0}, {"id": "Ugwav7Scb1sbh2QFNIF4AaABAg.9Q7YX8udVgH9QBEmWFn02x", "publishedAt": "2021-07-24T15:14:56Z", "author": "Alvin the Programmer", "text": "Hey Raghav. As a JavaScript best practice we typically prefer qualifying variables with let and const instead of var. The main functional difference is that a let/const name cannot be redeclared and has block level scope. Var can be redeclared and has function level scope. Hope that clarifies. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgwMGwq0lgJTT3eqdBt4AaABAg", "publishedAt": "2021-07-23T00:41:42Z", "author": "\u06a9\u062f \u0632\u062f\u0646 \u0628\u0627 \u0641\u0631\u0628\u062f", "text": "Greatest term ever \u201cmemoize the heck out of the code\u201d lol", "likes": 1}}, {"topLevelComment": {"id": "Ugx6Yg-LLuWYwXt7Idl4AaABAg", "publishedAt": "2021-07-23T00:40:30Z", "author": "Freeze", "text": "2:24:35 String.startWith(String) return boolean", "likes": 0}}, {"topLevelComment": {"id": "UgzVuAH8wnxPEKkPveh4AaABAg", "publishedAt": "2021-07-22T22:36:28Z", "author": "arpit kumarr", "text": "shouldn't the time complexity for how sum be O((n^m) + m) because we only ever return the array for one branch of the tree? The algorithm has an early return so even in the worst case why do we multiply m by the total number of recursive calls?", "likes": 0}}, {"topLevelComment": {"id": "UgxNnw5T4X7LgfM4S9p4AaABAg", "publishedAt": "2021-07-22T15:47:17Z", "author": "Lord Sir. Prince Khan", "text": "Best optimization:\n\nUse Fibonacci series formula", "likes": 0}}, {"topLevelComment": {"id": "Ugy5N2lLAf_Ha20hm9Z4AaABAg", "publishedAt": "2021-07-22T13:02:50Z", "author": "AMIT KUMAR", "text": "In grid traveller problem, answer would be simply (m+n-2)!/((m-1)!(n-1)!).", "likes": 2}, "replies": [{"id": "Ugy5N2lLAf_Ha20hm9Z4AaABAg.9Q5r4EjDCtE9QFqhu1Et7P", "publishedAt": "2021-07-26T10:12:03Z", "author": "AMIT KUMAR", "text": "@black c  exactly, it is # of ways of arranging (m-1) \"H\" and (n-1) \"V\".", "likes": 1}]}, {"topLevelComment": {"id": "Ugz8UMA3FdisdwL4Yld4AaABAg", "publishedAt": "2021-07-22T01:43:04Z", "author": "Dragan Ostojic", "text": "Why is he not checking bounds in tabulated canSum when assigning true to index i+num ???", "likes": 0}}, {"topLevelComment": {"id": "UgwhLtwnchaMY0ESxIp4AaABAg", "publishedAt": "2021-07-21T15:31:06Z", "author": "Dragan Ostojic", "text": "There is an array overflow in tab fibonacci. i in loop should be i < n, because we go up to i === n-1. We also need to check that i+2 <=  n before we add i-th element  i+2 element", "likes": 0}}, {"topLevelComment": {"id": "UgybKOFkLcM3ssT3xap4AaABAg", "publishedAt": "2021-07-21T15:01:30Z", "author": "YUQING WANG", "text": "https://youtu.be/oBt53YbR9Kk?t=1091: The time complexity here should be O(2^(n-1)) and we eliminate the minus one term thus get O(2^n) right?", "likes": 0}}, {"topLevelComment": {"id": "UgxV-wOEdwUFk3N6SWl4AaABAg", "publishedAt": "2021-07-21T10:07:35Z", "author": "HAITOUF ABDELOUAHED", "text": "MY man you're GOLDEN . I'm an industrial and mechanics engineer and i loved this video . Keep up the great work.", "likes": 0}}, {"topLevelComment": {"id": "Ugw8g7r9ysZRDTuqESt4AaABAg", "publishedAt": "2021-07-21T08:46:59Z", "author": "GODSWILL MBAOCHA", "text": "Wonderful video on dynamic programming. Kudos.  However, in the howSum problem (1:45:50), the remainderResult array is only copied when a valid result is found.  As such, why is the time complexity O(n^m*m)? i supposed it should just be O(n^m)", "likes": 0}}, {"topLevelComment": {"id": "UgxHOTqzlelEUSUmnUd4AaABAg", "publishedAt": "2021-07-21T02:39:38Z", "author": "Rodrigo Paris", "text": "I just finished the fib memoization section and my mind is blowing up! Anybody else?", "likes": 0}}, {"topLevelComment": {"id": "UgwW0Rj5AxBDSfcADzl4AaABAg", "publishedAt": "2021-07-20T19:03:21Z", "author": "Pranjal Chakraborty", "text": "For those who are facing problems implementing bestSum in Java and using List to keep track of the best combination, make sure you are not reusing list references. Specifically, always return a new list with copied values.", "likes": 1}}, {"topLevelComment": {"id": "UgzBr1qzJH7PlcZvzwR4AaABAg", "publishedAt": "2021-07-20T14:30:57Z", "author": "ADITYA KESHARI", "text": "sir can't we do it like  \nhere's the c++ code\n#include<bits/stdc++.h>\nusing namespace std;\nint howsum(int targetsum, vector<int> arr , vector<int> &store){\n\tstatic vector<int> memo(1e4,-1);\n\t// cout<<\"targetsum : \"<<targetsum<<endl;\n\tif(targetsum == 0){ return 1;}\n\tif(targetsum < 0){return 0;}\n\tif(memo[targetsum] != -1){return memo[targetsum];}\n\n\tfor(auto i : arr){\n\t\t// cout<<\"i : \"<<i<<endl;\n\t\tif(howsum(targetsum - i , arr,store)){\n\t\t\t// cout<<i<<endl;\n\t\t\tstore.push_back(i);\n\t\t\tmemo[targetsum] = 1;\n\t\t\treturn 1;\n\t\t}\n\t}\n\treturn 0;\n}\nvector<int> howsummain(int targetsum,vector<int> array){\n\tvector<int> store;\n\tif(targetsum,array,store){\n\t\treturn store;\n\t}\n\treturn vector<int>();  //denotes empty array\n}\n\n//so the time complexity for the memoized solution is  : \n//time :O(m*n)\n//space O(m)\n\nThanks for the video..", "likes": 1}}, {"topLevelComment": {"id": "UgwaZ_zdAEVYwMMHs2p4AaABAg", "publishedAt": "2021-07-20T05:11:51Z", "author": "Gang Cheng", "text": "This is definitely a master piece to explain the complicated dynamic programming related algorithms. Using a tree diagram to visualize the problems is innovative and much easier to understand. Thank you!", "likes": 1}}, {"topLevelComment": {"id": "Ugyx0cAs2KZOGR-PxVF4AaABAg", "publishedAt": "2021-07-20T03:57:04Z", "author": "Gaurav yadav", "text": "People who are disliking this are never going to get happy in their life, no matter whatever they get.", "likes": 20}, "replies": [{"id": "Ugyx0cAs2KZOGR-PxVF4AaABAg.9Q-j16Rz2ny9T6yfCgyWHy", "publishedAt": "2021-10-05T13:02:37Z", "author": "Shivam Pathak", "text": "Facts", "likes": 0}]}, {"topLevelComment": {"id": "Ugwf1AuyT73CMqF_ps54AaABAg", "publishedAt": "2021-07-20T00:46:29Z", "author": "Navneet Mishra", "text": "Thankyou so much. Video is very helpful in understanding the process.", "likes": 1}}, {"topLevelComment": {"id": "UgzrUFCILeGwTonALbl4AaABAg", "publishedAt": "2021-07-19T05:41:17Z", "author": "Nastja S1", "text": "geilie!", "likes": 0}}, {"topLevelComment": {"id": "Ugw7LDxyGkaDk3JpacJ4AaABAg", "publishedAt": "2021-07-19T05:15:47Z", "author": "Venkatesh Naidu", "text": "Why is the time complexity of allConstruct (with memorization) the same as allConstruct (without memorization)? Why doesn't the stored solution of sub-problems help in reducing time?", "likes": 0}}, {"topLevelComment": {"id": "UgzdbU74YTdi_j6TVD14AaABAg", "publishedAt": "2021-07-19T04:30:42Z", "author": "Kevin Chou", "text": "Bork!", "likes": 0}}, {"topLevelComment": {"id": "UgzsXJ5cDCFJdQKC8OR4AaABAg", "publishedAt": "2021-07-18T21:27:27Z", "author": "Golden Lin", "text": "def canConstruct(string, word_bank):\r\n    grid = [False] * (len(string) + 1)\r\n    grid[0] = True\r\n    matching_grid = [string[:i] for i in range(len(string) + 1)]\r\n    for i in range(len(grid)):\r\n        if grid[i]:\r\n            for word in word_bank:\r\n                if string.startswith(matching_grid[i] + word):\r\n                    tracker = len(matching_grid[i] + word)\r\n                    grid[tracker] = True\r\n    return grid[len(string)]\r\nprint(canConstruct(\"abcdef\", [\"ab\", \"abc\", \"cd\", \"def\", \"abcd\"]))", "likes": 1}, "replies": [{"id": "UgzsXJ5cDCFJdQKC8OR4AaABAg.9PxSd_q1Ev09cVaTVM0MTC", "publishedAt": "2022-06-20T15:46:07Z", "author": "LrdKGB", "text": "Question for Python users on the canSum() memoization function:\r\n\r\nit seems there is a problem when the memo evaluated from one main level call will get passed into the subsequent main level calls.  So when evaluating\r\n\r\nprint(canSumMemoization(7, [2, 3]))  # true\r\nprint(canSumMemoization(7, [5, 3, 4, 7]))  # true\r\nprint(canSumMemoization(7, [2, 4]))  # false\r\nprint(canSumMemoization(8, [2, 3, 5]))  # true\r\nprint(canSumMemoization(300, [7, 14]))  # false\r\n\r\nin main, after print(canSumMemoization(7, [2, 3])) is completed, that same memo object used gets passed into print(canSumMemoization(7, [5, 3, 4, 7])) and all the rest of the subsequent main level calls.  I noticed this when I kept getting all 5 test cases evaluating to true and when debugging, they all started off already having a completely full memo object, which was the same memo object used in the first canSumMemoization() call.  Anybody know a workaround to this?  As of now, I have to run each test case one by one, uncommenting and commenting test cases as I iterate through my test cases.  \r\n\r\nThank you for all of your help and this video is absolutely life changing.  I legitimately use that word because of how important a solid understanding of recursion and DP is for interviews. This question was raised in a comments above. Do you know how to solve it?", "likes": 0}, {"id": "UgzsXJ5cDCFJdQKC8OR4AaABAg.9PxSd_q1Ev09cVaG6AEdOF", "publishedAt": "2022-06-20T15:44:17Z", "author": "LrdKGB", "text": "Nice work, I was looking for a way to bypass the value error for .index(work). You should do a remake of this video for python users.", "likes": 0}]}, {"topLevelComment": {"id": "UgxoqNanOKoOXbD6Rt94AaABAg", "publishedAt": "2021-07-18T20:09:33Z", "author": "ayhan y\u00fcnt", "text": "Can someone please explain how did we handle the gridTraveler(m,n) = gridTraveler(n,m) case in 01:01:42\nI think he forgot to add this memoization.", "likes": 1}, "replies": [{"id": "UgxoqNanOKoOXbD6Rt94AaABAg.9PxJj6vZkQu9PygpVCj6n6", "publishedAt": "2021-07-19T08:59:23Z", "author": "Shivam Burnwal", "text": "It is not needed but definitely will improve complexity if used.", "likes": 0}]}, {"topLevelComment": {"id": "Ugxic7fBTafj5cu9-LZ4AaABAg", "publishedAt": "2021-07-18T17:06:15Z", "author": "Ankita's Solo Moves", "text": "can anyone help me to write these codes in java", "likes": 0}, "replies": [{"id": "Ugxic7fBTafj5cu9-LZ4AaABAg.9PwzkaRl4sX9QJPDWzkdzx", "publishedAt": "2021-07-27T19:20:04Z", "author": "AnimeBuff", "text": "@Govind Thakare Checkout this Repository, this can be handy", "likes": 0}, {"id": "Ugxic7fBTafj5cu9-LZ4AaABAg.9PwzkaRl4sX9Q0MmBOU36c", "publishedAt": "2021-07-20T09:53:09Z", "author": "Govind Thakare", "text": "i m looking for someone who can help me in c++", "likes": 1}]}, {"topLevelComment": {"id": "Ugwf8TGjS0eKfFlRgQR4AaABAg", "publishedAt": "2021-07-18T08:25:34Z", "author": "The Red Baron", "text": "hmm", "likes": 0}}, {"topLevelComment": {"id": "UgyToP97UGVjpw_tqDh4AaABAg", "publishedAt": "2021-07-18T06:34:35Z", "author": "Jesse Wallace", "text": "I have been struggling on how to approach recursive problems for so long. Thank you Alvin, I not only know how to do recursion now, but I know how to attack other parts of the interview process. Thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgzTaypksGal5a3ZPZR4AaABAg", "publishedAt": "2021-07-18T04:04:00Z", "author": "kumar suman", "text": "This is gold!!!", "likes": 0}}, {"topLevelComment": {"id": "UgwMrbKJMxTFWltOHMJ4AaABAg", "publishedAt": "2021-07-18T02:44:45Z", "author": "Golden Lin", "text": "Best Python 3 (gridTraveler) code for clarity and simplicity\n\ndef gridTraveler(m, n):\r\n    grid = [[0 for i in range(m+1)] for i in range(n + 1)]\r\n    grid[1][1] = 1\r\n    for i in range(1, len(grid)):\r\n        for j in range(1, len(grid)):\r\n            if i == 1 and j == 1:\r\n                pass\r\n            else:\r\n                grid[i][j] = grid[i][j-1] + grid[i-1][j]\r\n    return grid[m][n]\r\nprint(gridTraveler(3,3))", "likes": 0}}, {"topLevelComment": {"id": "Ugw8kOnNfRf_TyCF9r14AaABAg", "publishedAt": "2021-07-17T22:03:18Z", "author": "Brendan A", "text": "Thank you for sharing such an awesome tutorial!", "likes": 0}}, {"topLevelComment": {"id": "UgyoQsDRgHvsccaBjP14AaABAg", "publishedAt": "2021-07-17T17:09:15Z", "author": "Heli Patel", "text": "Best explanation ever!!", "likes": 0}}, {"topLevelComment": {"id": "UgyWGzHhJU5DrxrsLYF4AaABAg", "publishedAt": "2021-07-17T04:38:50Z", "author": "Paralyzed", "text": "In 1:27:37 it should be memo[remainder] shouldn't it?", "likes": 0}}, {"topLevelComment": {"id": "UgyrIrtMU-209VIQqFZ4AaABAg", "publishedAt": "2021-07-17T04:29:31Z", "author": "gowtham c", "text": "Fantastic course. Awesome instructor. \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgwLo3mkEsSrIZQrkCR4AaABAg", "publishedAt": "2021-07-16T13:24:28Z", "author": "CoolBoy2710", "text": "30:00 Saving my progress,", "likes": 0}}, {"topLevelComment": {"id": "UgwK7VylQCFc3SJdfHh4AaABAg", "publishedAt": "2021-07-16T06:06:51Z", "author": "Hyperprojects", "text": "Why am I so engrossed into this", "likes": 0}}, {"topLevelComment": {"id": "UgxDUNouk-c6t4zCtj54AaABAg", "publishedAt": "2021-07-16T02:46:39Z", "author": "Mario Manalu", "text": "How can we add a memo object as one of our parameters when usually for coding interviews our function has pre-determined number of parameters?", "likes": 0}, "replies": [{"id": "UgxDUNouk-c6t4zCtj54AaABAg.9PqImrrYR4J9PryN0vXI82", "publishedAt": "2021-07-16T18:17:58Z", "author": "Slava Bogatov", "text": "Hey, just opened the video and haven't watched it yet, but from the top of my head - will creating another method/function with an extra parameter work for you (overloading)? and then you call it from your initial method/function?", "likes": 1}]}, {"topLevelComment": {"id": "UgxLR905tsFJcl0N3Gd4AaABAg", "publishedAt": "2021-07-15T20:44:28Z", "author": "Luu Monika", "text": "7:55", "likes": 0}}, {"topLevelComment": {"id": "Ugx19hk0VPokXKB92dJ4AaABAg", "publishedAt": "2021-07-15T19:42:34Z", "author": "srki22", "text": "There is a small mistake in your explanation about Fibonacci complexity. Exponentials with different bases are not of the same order. For example, 2\u207f and 3\u207f are not of the same order. In the same manner, 2\u207f is not the same as 2\u207f/\u00b2 which is equal to (\u221a2)\u207f.\nOf course, your explanation still holds to show that the time complexity is exponential.", "likes": 0}, "replies": [{"id": "Ugx19hk0VPokXKB92dJ4AaABAg.9PpYFpEmJxC9PpZQ-9msrb", "publishedAt": "2021-07-15T19:52:42Z", "author": "srki22", "text": "The tighest upper bound for recursive algorithm for Fibonacci sequence is O(((1+\u221a5) / 2)\u207f).", "likes": 0}]}, {"topLevelComment": {"id": "UgzvH8BDa4fA_pNMwTZ4AaABAg", "publishedAt": "2021-07-15T13:56:47Z", "author": "Neptune's Beard", "text": "03:21:15 - how did you not get an out-of-bounds error for the last value of i at table[ i+2 ] ?\nEDIT:-\nFound the reason at 03:51:20\nIts a Javascript behavior", "likes": 7}}, {"topLevelComment": {"id": "Ugw7A59CxM8jjWTW7iJ4AaABAg", "publishedAt": "2021-07-15T12:54:13Z", "author": "nocathedral", "text": "Hey, in the grid traveller problem is there any reason you wouldn't use an array as the memo key? I paused the video before the memoization and did it this way. Also this made sense to me as you could assign the result to both memo[[n, m]] and memo [[m, n]].", "likes": 0}, "replies": [{"id": "Ugw7A59CxM8jjWTW7iJ4AaABAg.9PooWyzHCLl9Q-DC9svN7_", "publishedAt": "2021-07-19T23:10:13Z", "author": "Dennis", "text": "You are going to declare your array as fixed size no?", "likes": 0}]}, {"topLevelComment": {"id": "UgweTmK3S8KbuDGoZhB4AaABAg", "publishedAt": "2021-07-15T07:53:24Z", "author": "Remi van Trijp", "text": "Congratulations on making such a clear tutorial! I will definitely point my students to this if they need to get up to speed about dynamic programming", "likes": 13}}, {"topLevelComment": {"id": "Ugxg7CrLx6BHifg3Ce54AaABAg", "publishedAt": "2021-07-14T19:17:32Z", "author": "Shreyash Sonawane", "text": "at 20:52 how can time complexity be changed from 2^(n/2) to 2^n? i know constants are removed however, isn't the rate of growth different for those two? Also at 22:04, shouldn't it be o(dib)>=o(fib)>=o(lib)? i may be wrong here, however i'll be much grateful if you clear my doubt. thanks!", "likes": 0}}, {"topLevelComment": {"id": "Ugw5Z5p-YmGHM4_KqXR4AaABAg", "publishedAt": "2021-07-14T16:48:22Z", "author": "Hector G", "text": "In naming my first born child (regardless of gender) after him.", "likes": 0}}, {"topLevelComment": {"id": "Ugwaw6hZmQxse9qVCRh4AaABAg", "publishedAt": "2021-07-14T10:50:23Z", "author": "pawan singh", "text": "4:41:01 For the countConstruct Tabulation variation when he says \"check if any words in the word bank starting with  'p' \" he actually means  words in the word bank that start with 'p' and are also substring of the targetString. If a word in wordBank starts with the letter we want but isn't a substring of target string we don't count it.\nFor example: if targetString = purple and wordBank = { purp, p, ur, le, purpl, purf}\nin the first iteration of loop when we check words starting with p we only count for purp , p and purpl not for purf because purf isn't a substring of purple", "likes": 0}}, {"topLevelComment": {"id": "UgyOKpIOUjXjGXO7wnl4AaABAg", "publishedAt": "2021-07-14T10:11:53Z", "author": "charlie boyer", "text": "Hi guys, I have a simple question for an algorithm specialist", "likes": 0}}, {"topLevelComment": {"id": "UgxQdBH6EeGTZidNqql4AaABAg", "publishedAt": "2021-07-14T03:54:09Z", "author": "Digital Arts and Learn", "text": "in the gridTraveler memoization, if you plug in 199 and 100, you will get;\n\ntwo hundred twenty-six trevigintillion, one hundred fifty-six duovigintillion, four hundred twenty-four unvigintillion, \ntwo hundred ninety-one vigintillion, six hundred thirty-three novemdecillion, one hundred ninety-four octodecillion, one hundred eighty-six septendecillion, six hundred sixty-two sexdecillion, eighty quindecillion, ninety-five quattuordecillion, ninety-three tredecillion, five hundred seventy duodecillion, twenty-five undecillion, \nnine hundred seventeen decillion, nine hundred thirty-eight nonillion, eight hundred  octillion, seventy-nine septillion, two hundred twenty-six sextillion, six hundred thirty-nine quintillion, five hundred sixty-five quadrillion, five hundred ninety-three trillion, seven hundred sixty-five billion, four hundred fifty-five million, three hundred thirty-one thousand, three hundred twenty-eight\n\nor\n\n226156424291633194186662080095093570025917938800079226639565593765455331328", "likes": 1}}, {"topLevelComment": {"id": "Ugxkhd9ZsDK_NcUWFRh4AaABAg", "publishedAt": "2021-07-14T02:09:20Z", "author": "namelesslamp", "text": "Definitely one of the best tutorials I have seen in my entire life. Thanks for such quality content for free, keep it up guys", "likes": 0}}, {"topLevelComment": {"id": "UgyZAXLWEr_jNXbk8994AaABAg", "publishedAt": "2021-07-13T11:59:20Z", "author": "Abhi", "text": "At 53:07 , shouldn't the number of levels be (n-1)+(m-1)+1= n+m-1\n[cause then it'd be 3 paths[(n-1)+(m-1)]  plus 1 = 4 nodes] ?", "likes": 0}}, {"topLevelComment": {"id": "UgyUb9nrpcmHun8V22h4AaABAg", "publishedAt": "2021-07-13T10:39:34Z", "author": "Danish Sami", "text": "Anybody has vba code version pls?", "likes": 0}}, {"topLevelComment": {"id": "UgyJI3vHylBSDY5Iua54AaABAg", "publishedAt": "2021-07-12T08:56:03Z", "author": "Ashutosh Bajpai", "text": "Links to the problems -\ncanConstruct: https://leetcode.com/problems/word-break/\ncountConstruct: https://cses.fi/problemset/task/1731/\nallConstruct: https://leetcode.com/problems/word-break-ii/", "likes": 9}, "replies": [{"id": "UgyJI3vHylBSDY5Iua54AaABAg.9PgesyOLavK9Ph-IHvdy6G", "publishedAt": "2021-07-12T12:03:09Z", "author": "xNightmare", "text": "thx", "likes": 1}]}, {"topLevelComment": {"id": "UgykAJPgME03g1gdgCJ4AaABAg", "publishedAt": "2021-07-11T02:43:30Z", "author": "David James", "text": "I tried this in an interpreted computer language with VERY limited recursion depth and it wouldn't go past about Fib(30), even with memoization... so I then initialized the first 20 Fibonacci numbers in an array manually, then it worked (cuz it reduced the level of recursion).  I got the same results as you in about 1/100th of a second.", "likes": 0}}, {"topLevelComment": {"id": "UgxYWpjvZdsE0hpbxfh4AaABAg", "publishedAt": "2021-07-11T02:20:42Z", "author": "David James", "text": "Why is it called dynamic programming when it is really non overlapping subproblem elimination (nose).  Dynamic to me seems more like code that adjusts to changing input such as a file compressor that encodes characters differently depending on the frequency it sees them, which changes as it reads more input.  Another bad name is memoization.  Why not just call it subproblem calculation storage?  Multiple bad naming conventions.  Also, in a general purpose programming language, this type of memoization for fib would be implemented as a simple 1 dimensional array, initialized to some value like -1, and used to return a subtree value if it is not -1 (meaning some meaningful value was stored there).", "likes": 1}, "replies": [{"id": "UgxYWpjvZdsE0hpbxfh4AaABAg.9PdNqRE_04n9PgiKOEL_oc", "publishedAt": "2021-07-12T09:26:09Z", "author": "David James", "text": "@Ashutosh Bajpai Wrong term and the table or memo would NOT change after every iteration if we are looking up a value already computed and stored.  I just don't like the terms they use as I don't see how that is dynamic when it is a static algorithm to store subresults.  A dynamic algorithm to me should be more of an AI type algorithm that learns/changes based on experience.  Kinda like some cars have to \"relearn\" how to idle properly after the battery was disconnected.  Simply storing intermediate results of recursion doesn't seem very \"dynamic\" to me, rather, it is just preventing the recursion from recalculating the same subproblems more than once.  They could actually implement something in the language to do this automatically, instead of forcing the programmer to implement it, although setting up a single dimensional array and storing values in it (such as Fib[5] for Fibonacci number # 5), is quite straightforward.", "likes": 0}, {"id": "UgxYWpjvZdsE0hpbxfh4AaABAg.9PdNqRE_04n9PgfB60n_X1", "publishedAt": "2021-07-12T08:58:40Z", "author": "Ashutosh Bajpai", "text": "I think Dynamism here refers to change in values in the table or memo after every iteration", "likes": 0}]}, {"topLevelComment": {"id": "UgxHxCpqOIQeMiD9Cg54AaABAg", "publishedAt": "2021-07-09T08:41:00Z", "author": "Peter Yu", "text": "The example for canSum is a bit misleading for me. Whenever we get a decomposition (a solution), we directly return True all the way to the top-level call, since the logic is basically: if canSum(target-num) = True, return True. So there is no point in storing the true target values. We ONLY need to store the false ones, which are the target values that can't be decomposed, so later calls don't need to try these again.\nThen, in python, we can just store the failed target values in a set. I don't know javascript, but it seems to me he is using something like a dictionary.", "likes": 0}}, {"topLevelComment": {"id": "UgzBG89QH9Dpspllgt94AaABAg", "publishedAt": "2021-07-09T05:04:03Z", "author": "Tushar Mishra", "text": "This video is pure gold!!", "likes": 1}}, {"topLevelComment": {"id": "UgyQA_46uIO19y3CuBR4AaABAg", "publishedAt": "2021-07-09T04:50:55Z", "author": "Felipe Diogo", "text": "is it worthy for the gridtraveler to check the reverse key as well - since 1,2 is equal to 2,1:\nIE:\n// double memo\nconst gridTraveler2 = (n, m, memo = {}) => {\n    const key = `${n},${m}`;\n    const reverseKey = `${m},${n}`;\n    if (n === 0 || m === 0) return 0;\n    if (n === 1 && m === 1) return 1;\n    if (key in memo) {\n        return memo[key];\n    } else if (reverseKey in memo) {\n        return memo[reverseKey];\n    }\n    const down = gridTraveler2(n - 1, m, memo);\n    const right = gridTraveler2(n, m - 1, memo);\n    memo[key] = down + right;\n    memo[reverseKey] = down + right;\n    return memo[key];\n}", "likes": 0}}, {"topLevelComment": {"id": "UgzPssyRcOpy_Y2caBd4AaABAg", "publishedAt": "2021-07-08T22:57:24Z", "author": "Simo Qz", "text": "i tried to write exactly the same in pyhton, but it does'nt work, what is wrong with the script? \ndef gridTraveler(m,n,memo={}):\r\n\r\n    key = m , n\r\n    if key in memo: return memo[key]\r\n    if m == 1 and n ==1: return 1\r\n    if m == 0 and n == 0: return 0\r\n\r\n    memo[key] = gridTraveler(m-1,n, memo) + gridTraveler(m, n-1, memo)\r\n    return memo[key]\r\n\r\n\r\n#print(gridTraveler(1,1))\r\n#print(gridTraveler(2, 3))\r\n#print(gridTraveler(3, 2))\r\nprint(gridTraveler(3, 3))\r\n#print(gridTraveler(18, 18))\n\nafter running the code i have this output:\nTraceback (most recent call last):\r\n  File \"gridtraveler.py\", line 15, in <module>\r\n    print(gridTraveler(3, 3))\r\n  File \"/gridtraveler.py\", line 8, in gridTraveler\r\n    memo[key] = gridTraveler(m-1,n, memo) + gridTraveler(m, n-1, memo)\r\n  File gridtraveler.py\", line 8, in gridTraveler\r\n    memo[key] = gridTraveler(m-1,n, memo) + gridTraveler(m, n-1, memo)\r\n  File gridtraveler.py\", line 8, in gridTraveler\r\n    memo[key] = gridTraveler(m-1,n, memo) + gridTraveler(m, n-1, memo)\r\n  [Previous line repeated 995 more times]\r\n  gridtraveler.py\", line 5, in gridTraveler\r\n    if m == 1 and n ==1: return 1\r\nRecursionError: maximum recursion depth exceeded in comparison", "likes": 1}}, {"topLevelComment": {"id": "UgyDL_VAQRWkmogAOGp4AaABAg", "publishedAt": "2021-07-08T14:01:05Z", "author": "Zones", "text": "Yeah I still don\u2019t get it", "likes": 0}}, {"topLevelComment": {"id": "UgxIG3OENet0fq3Dg-t4AaABAg", "publishedAt": "2021-07-08T12:41:53Z", "author": "VivekAnand", "text": "26:21 \nsaving for myself", "likes": 0}}, {"topLevelComment": {"id": "UgyPGwlwFvFiZvvyPnR4AaABAg", "publishedAt": "2021-07-08T08:08:25Z", "author": "Shrey Naygandhi", "text": "This is really awesome.", "likes": 0}}, {"topLevelComment": {"id": "Ugw6k3dUAf1tGjHJtt14AaABAg", "publishedAt": "2021-07-07T17:46:42Z", "author": "Gavin", "text": "I think it bears mentioning that there is a sort of trivial solution to the gridTraveler problem that forgoes the need for dynamic programming at all. \n\nIn an n*m grid you will always need to make (n-1) moves in the down direction and (m-1) moves in the right direction. Hence, we can think of every path through the grid being some permutation of (n-1)+(m-1) = n+m-2 down and right moves. If we think of each of these down/right moves as being a symbol, it follows that there (n+m-2)! ways to permute these symbols. However, as not every symbol is unique, we will have some duplicate permutations. Indeed, say we are choosing a permutation from a collection of symbols [D, D, R] - then the permutation we obtain by first choosing the first D, then the second D, then finally the R will be the same as the permutation we obtain by first choosing the second D, then the first D, then finally the R. Thus, we need to consider the number of ways in which we can permute the D and R symbols amongst a chosen permutation. As there are (n-1) and (m-1) of them respectively, there will be (n-1)! and (m-1)! ways to permute them respectively. Therefore, we need only divide the total number of permutations by the ways to permute the duplicate symbols and we arrive at the final solution of (n+m-2)!/((n-1)!(m-1)!) paths through the n*m grid.", "likes": 8}, "replies": [{"id": "Ugw6k3dUAf1tGjHJtt14AaABAg.9PVjd7KGX8n9TWMrXUWwxj", "publishedAt": "2021-10-15T09:43:45Z", "author": "Devbom", "text": "@Daniel Melo I agree this is a much more elegant solution, however, implemented correctly the dynamic programming version of grid traveler is much faster (in Python 3.8). Probably since calculating factorials in Python is less efficient than a lot of simple function calls (recursion)?\nActual time comparison:\n143 ns \u00b1 0.13 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\r\n3.14 \u00b5s \u00b1 5.51 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\nThis was done for a grid of size n=50, m=50.", "likes": 0}, {"id": "Ugw6k3dUAf1tGjHJtt14AaABAg.9PVjd7KGX8n9RC2ZZA7pf1", "publishedAt": "2021-08-18T19:18:48Z", "author": "Andrew Smith", "text": "@Gavin Oh sorry, I missed that.", "likes": 0}, {"id": "Ugw6k3dUAf1tGjHJtt14AaABAg.9PVjd7KGX8n9RC1UjeJnlG", "publishedAt": "2021-08-18T19:09:25Z", "author": "Gavin", "text": "@Andrew Smith Who are you replying to exactly? Did you perhaps not expand my full comment with the \"Read more\" button? That's exactly what I wrote.", "likes": 0}, {"id": "Ugw6k3dUAf1tGjHJtt14AaABAg.9PVjd7KGX8n9RBubm9aZUC", "publishedAt": "2021-08-18T18:00:36Z", "author": "Andrew Smith", "text": "Except (m+n-2)! is wrong!\n\nYou actually need the number of combinations of m-1 right moves and n-1 down moves, i.e (m+n-2)! / ((m-1)! * (n-1)!)", "likes": 0}, {"id": "Ugw6k3dUAf1tGjHJtt14AaABAg.9PVjd7KGX8n9PhOD3iZzod", "publishedAt": "2021-07-12T15:40:53Z", "author": "Daniel Melo", "text": "Exactly, if you use math, memoization is an overkill in a lot of cases.\n# Python 3.8\nfrom math import comb\n\ndef gridTraveler(n, m):\n    path = n + m - 2\n    return comb(path, n-1)\n\nThis gives you O(n + m - 2) time complexity\n\nNow, for canSum and howSum you could use the module operator % to eliminate a lot of the iterations.", "likes": 2}]}, {"topLevelComment": {"id": "Ugz8_kZ5HaqxMdquFe14AaABAg", "publishedAt": "2021-07-07T17:40:18Z", "author": "Sanjay Ghosh", "text": "This is amazing. I didn't know that DP can be easy.", "likes": 0}}, {"topLevelComment": {"id": "UgyktGdAS4u3CaVzovt4AaABAg", "publishedAt": "2021-07-07T16:14:34Z", "author": "Scott Cooper", "text": "For grid traveler, either dimension equal to 1 is a base case, as there\u2019s only one way to travel through such a grid.", "likes": 0}}, {"topLevelComment": {"id": "UgxOLdiYLKUcenqf3ql4AaABAg", "publishedAt": "2021-07-06T22:07:44Z", "author": "Poldoroski i", "text": "For the first time in my life, I really want to donate something to a channel, so MUCH effort, the explanations were SO GOOD, very visual. Easy to reproduce in a new exercise. \nIs there any Patreon or something like that?\nAWESOME CONTENT.", "likes": 0}, "replies": [{"id": "UgxOLdiYLKUcenqf3ql4AaABAg.9PTci94YoJS9PYC1eR0_lf", "publishedAt": "2021-07-08T16:42:04Z", "author": "Alvin the Programmer", "text": "Glad to hear you enjoyed the course! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgzyPw2X7m-5-kb4VZF4AaABAg", "publishedAt": "2021-07-06T18:57:46Z", "author": "sapna vats", "text": "def best_sum(target_sum, array, memo={}):\n    if target_sum in memo:\n        return memo[target_sum]\n    if target_sum==0:\n        return []\n    if target_sum <0:\n        return None\n    shortest_path=None\n    for ele in array:\n        diff = target_sum - ele\n        result=best_sum(diff,array,memo)\n        if result!=None:\n            result.append(ele)\n            if shortest_path==None or len(result)<len(shortest_path):\n                shortest_path=result\n                \n    memo[target_sum]=shortest_path\n    return shortest_path\n\nprint(best_sum(8,[1,4,5]))\n\nHere is my code in python for best sum. It gives correct result without memo. With memo the aswers are wrong. What is the issue?", "likes": 0}, "replies": [{"id": "UgzyPw2X7m-5-kb4VZF4AaABAg.9PTHyr_6PgB9PTK2D2zovG", "publishedAt": "2021-07-06T19:15:50Z", "author": "sapna vats", "text": "when i replace the append() function with simple + then the code runs fine. What is happening?", "likes": 0}]}, {"topLevelComment": {"id": "UgzojvDjWuevMzUcWmR4AaABAg", "publishedAt": "2021-07-06T18:14:24Z", "author": "Daron Assadourian", "text": "Thank you for the video, for the grid search , could we also say that a key of m,n maps to the same value as a key of n,m? as in if i have 2,3 which give me 3 paths which is the same as 3,2 that also has 3 steps? could we basically sort the two values m and n and store it that way so like we store 2,3:3 and then when we come to the case that we have 3,2 , we sort the 2 numbers and we obtain 2,3 and then we check the memo? correct me if im wrong but this kind of cuts it down by half i think. Some feedback would be appreciated :)", "likes": 0}}, {"topLevelComment": {"id": "Ugy7I23TXPQYOd_uX4p4AaABAg", "publishedAt": "2021-07-06T14:18:29Z", "author": "Shubham Tank", "text": "This is The Best Video on youtube to learn dynamic programming.", "likes": 0}}, {"topLevelComment": {"id": "Ugwnxmo21Us_gIMQ6WF4AaABAg", "publishedAt": "2021-07-06T06:14:05Z", "author": "d4devotion", "text": "I cant say anything of this, this is really a master piece tutorial on DP.", "likes": 2}}, {"topLevelComment": {"id": "Ugz70OLnifftN7Y98pd4AaABAg", "publishedAt": "2021-07-05T12:58:38Z", "author": "Xiaohao Lin", "text": "This guy will be invited to my wedding too", "likes": 0}}, {"topLevelComment": {"id": "UgzAs4dASUsTRMfT3bl4AaABAg", "publishedAt": "2021-07-05T01:56:59Z", "author": "Andrei Vinersan", "text": "First, great video! \nJust wanted to point out that (Around 2:32:42) canConstruct time complexity ignores the indexOf check which I suppose it can be an * m?\nIf not the case, am I missing something?", "likes": 0}}, {"topLevelComment": {"id": "UgyYmV1mAnhsjEWY3Ah4AaABAg", "publishedAt": "2021-07-04T23:13:38Z", "author": "Au Oblivion", "text": "wait im confused at 17:42, wouldn't the time complexity be 2^n-1 because the first row starts off with 1? because in this case 2^n would be 32 instead of 16 since there's 5 rows", "likes": 0}, "replies": [{"id": "UgyYmV1mAnhsjEWY3Ah4AaABAg.9POaf2XovoZ9PUilTtQ7py", "publishedAt": "2021-07-07T08:19:51Z", "author": "Prakash", "text": "yes it will be. but generally in real life we take n as very big number not like 5,6 or any small ,in that case n-1 ~n .so he has taken 2^n. for ex take n=1million it will be same as n-1.", "likes": 1}]}, {"topLevelComment": {"id": "UgyfXTFw0S93Be9dx894AaABAg", "publishedAt": "2021-07-04T13:31:44Z", "author": "Xayionify", "text": "Why is the time complexity 2^(n+m) instead of 2^(max(n,m)) in the grid traveller problem?", "likes": 1}, "replies": [{"id": "UgyfXTFw0S93Be9dx894AaABAg.9PNZ43ALJYB9PQ5NGPwhDM", "publishedAt": "2021-07-05T13:09:55Z", "author": "Xayionify", "text": "@Hari Krishnan nice, thanks", "likes": 3}, {"id": "UgyfXTFw0S93Be9dx894AaABAg.9PNZ43ALJYB9PO2_Y9G6U1", "publishedAt": "2021-07-04T18:07:02Z", "author": "Denis Krishtal", "text": "Because complexity depends on both m and n. When you calculate max(n,m), you exclude the second argument. \nIf the time complexity ~ 2^(max(n,m)), then calcTime(n, m) = calcTime(n, m-1) = calcTime(n, m-2) = ... = calcTime(n, 1), when n > m", "likes": 1}, {"id": "UgyfXTFw0S93Be9dx894AaABAg.9PNZ43ALJYB9PO1iJtafz5", "publishedAt": "2021-07-04T17:59:30Z", "author": "Hari Krishnan", "text": "You need to consider the following two facts:\n\n1) the base case is when m is 1 AND n is 1\n\n2) at each iteration, we reduce either m OR n by one. NOT both.\n\nNow, notice that if we are allowed to reduce only one argument at a time, to get to (1,1), we would take (m-1) steps to reduce the first argument to 1, and (n-1) steps to reduce the second argument to 1. In total we take (m-1) + (n-1) = (m+n-2) steps.Thus the height of the tree is m+n - 2.\n\nAssuming you are comfortable with big O notation, the height of the recursive tree is of order O(m+n). Following the same argument as in the Fibonacci function, given the height is of order O(m+n), the time complexity is of order O(2^(m+n)).\n\nHope that was clear!", "likes": 1}]}, {"topLevelComment": {"id": "Ugx71Dws7ip1DbaJ3sd4AaABAg", "publishedAt": "2021-07-03T18:36:47Z", "author": "Gokul Sreekumar", "text": "Clarity, Structure and Pure Genius.", "likes": 0}}, {"topLevelComment": {"id": "UgyJW4sAcP_MJKwXkbB4AaABAg", "publishedAt": "2021-07-03T16:44:20Z", "author": "abhishek balawan", "text": "Alvin, I have become your fan \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "Ugz0YuvGxUtlOHcxd5B4AaABAg", "publishedAt": "2021-07-02T16:06:38Z", "author": "MD AL MAHAMUD", "text": "10 Most Stable Linux Distros In 2021\n1| ArchLinux. for: Programmers and Developers.\n2| Debian.     for: Beginners\n3| Fedora.     for: Software Developers, Students.\n4| Linux Mint. for: Professionals, Developers, Students.\n5| Manjaro.   for: Beginners\n6| openSUS. for: hybrid Linux distribution\n7| Tails OS    for: Portable OS\n9| Ubuntu     for: Open source\n*************\nPCLinuxOS  for: User-Friendly \nSabayon OS for: Gentoo-based Italian Linux\nGentoo OS for: modular, portable, easy to maintain, and flexible\nPuppy Linux  for: specific distro", "likes": 0}}, {"topLevelComment": {"id": "UgxTfMC8xr_o6UQ4VcN4AaABAg", "publishedAt": "2021-07-02T15:16:58Z", "author": "Anapeksha Mukherjee", "text": "Can someone tell me what is wrong with my code? It is printing nothing....\nint found;\nvector<vector<string>> targetways;\nvector<vector<string>> suffixways;\nvector<vector<string>> allConstruct(string target, vector<string> arr, int n){\n    if(target.size()==0){\n        suffixways.clear();\n        return suffixways;\n    }\n\n    vector<string> result;\n    FOR(i,0,n-1){\n        int found=target.find(arr[i]);\n        if(found==0){\n            string suffix=target.substr(arr[i].size());\n            targetways = allConstruct(suffix,arr,n);\n            FOR(j,0,targetways.size()-1){\n                targetways[i].insert(targetways[i].begin(),arr[i]);\n            }\n        }\n    }\n    return targetways;\n}\n\nvoid solve(){\n    string target;\n    int n;\n    cin>>target;\n    cin>>n;\n    vector<string>v;\n    for(int i=0; i<n; i++){\n        string x;\n        cin>>x;\n        v.push_back(x);\n    }\n    allConstruct(target,v,n);\n    FOR(i,0,targetways.size()-1){\n        FOR(j,0,targetways[i].size()-1){\n            cout<<targetways[i][j]<<\" \";\n        }\n        cout<<br;\n    }\n}\n\nThe macros used are:\n#define FOR(i, a, b) for(int i=int(a);i<=int(b);++i)\n#define br '\\n'", "likes": 0}}, {"topLevelComment": {"id": "UgwX24JqmZdfdIdxcC14AaABAg", "publishedAt": "2021-07-02T09:33:12Z", "author": "Jia Jian Hwa", "text": "This tutorial is so good!!!!!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugxd0ggsv6CvMlZhLlp4AaABAg", "publishedAt": "2021-07-02T05:05:52Z", "author": "Karan Kumar", "text": "Awesome content", "likes": 0}}, {"topLevelComment": {"id": "UgwT8opawAw2fPEBXHJ4AaABAg", "publishedAt": "2021-07-01T14:18:41Z", "author": "z08840", "text": "4:55:08 - error - you don't need to check words from position 1-'b' - since it's empty which means you can't get here with previous iteration(s) - you need just skip it.", "likes": 0}}, {"topLevelComment": {"id": "UgzYCSQNRXlRToLNxjB4AaABAg", "publishedAt": "2021-06-30T21:38:26Z", "author": "z08840", "text": "in howSum memoization - you actually don't need to cache anything but targets resulting no solution (null) - targets resulting successful solution just return immediately - no need to cache it - you will not use it anymore. So, complexity drops to O(2*n*m) and O(2*m)", "likes": 0}}, {"topLevelComment": {"id": "Ugz-z5HFAF7hx6kwbVh4AaABAg", "publishedAt": "2021-06-30T15:56:34Z", "author": "Abduljabbar Hersi", "text": "Can most dynamic programming problems be solved using the methods shown", "likes": 0}}, {"topLevelComment": {"id": "UgyJqfqWf7Zj31czEPp4AaABAg", "publishedAt": "2021-06-29T12:56:00Z", "author": "Vikrant Sharma", "text": "Damm, I am feeling sad that the video ended and now I have to work and think alone again.\nHope will meet one day Alvin Zablan.", "likes": 1}}, {"topLevelComment": {"id": "Ugx45dsvkumJ0zDoB5F4AaABAg", "publishedAt": "2021-06-29T09:06:17Z", "author": "Bogdan Ariton", "text": "Hi, on the bestSum problem, we're intializing shortestCombination in the function which doesn't mean that it will always be null when we're checking if it's smaller that combination? And this way wr would get back the last combination instead of the shortest. Please correct me if I'm wrong. \n\nGreat job on the course!!\n\nWanted to add also that on the gridTraveler solution with C++ for an 18/18 grid I get a widely different result. Don't understand why that would be: 18 by 18 grid = 18446744071748190540 as opposed to 2333606220 :-)\n\nMy code:\nuint gridTraveler(const uint& n, const uint& m, memoMap& memo)\n{\n    const std::string key = std::to_string(n) + \",\" + std::to_string(m);\n    if (memo.find(key) != memo.end()) return memo[key];\n    if (n == 1 && m == 1) return 1;\n    if (n == 0 || m == 0) return 0;\n\n    memo[key] = gridTraveler(n-1, m, memo) + gridTraveler(n, m-1, memo);\n    return memo[key];\n}", "likes": 0}}, {"topLevelComment": {"id": "UgyVPmgRwOQXZrzpuLB4AaABAg", "publishedAt": "2021-06-29T04:58:52Z", "author": "CodeSpace", "text": "Best video", "likes": 0}}, {"topLevelComment": {"id": "UgzzAMX2-IvCVf3n-MZ4AaABAg", "publishedAt": "2021-06-29T04:12:23Z", "author": "Minh Nguyen Anh", "text": "awesome content, easy understanding. Thanks a lot", "likes": 0}}, {"topLevelComment": {"id": "UgzF3i4kpV3QwYPYCJZ4AaABAg", "publishedAt": "2021-06-29T03:03:04Z", "author": "David Shook", "text": "text often blurry at 360P, have watched hundreds of videos at 360P with clearer text. shouldn't have to increase resolution and suck more bandwidth for this channel", "likes": 0}}, {"topLevelComment": {"id": "UgyMPXhf38ldC-d1ASx4AaABAg", "publishedAt": "2021-06-29T02:02:42Z", "author": "Minh Nguyen Anh", "text": "thank you :D", "likes": 0}}, {"topLevelComment": {"id": "UgypWZES1pda2bRHHkV4AaABAg", "publishedAt": "2021-06-28T09:19:59Z", "author": "Vikrant Sharma", "text": "Anyone have these codes in C++?", "likes": 0}}, {"topLevelComment": {"id": "UgzR-u_wCmb8pui2OgV4AaABAg", "publishedAt": "2021-06-28T07:07:24Z", "author": "Zabenom", "text": "the best tutorial of dynamic programming! thx <3", "likes": 0}}, {"topLevelComment": {"id": "Ugzbos8OqVTtfE4FH054AaABAg", "publishedAt": "2021-06-27T17:51:04Z", "author": "Vastauine", "text": "3:20 Tabular Fib  :   dosent table[i+2] run out of index ?? when i = n", "likes": 0}}, {"topLevelComment": {"id": "Ugw8IyQMjb0rDenbS3x4AaABAg", "publishedAt": "2021-06-27T17:31:43Z", "author": "Julian Antonucci", "text": "awesome explanation. thanks a lot Alvin", "likes": 0}}, {"topLevelComment": {"id": "UgweYZVC1ybLUfju_014AaABAg", "publishedAt": "2021-06-27T12:22:12Z", "author": "Dinesh Solanki", "text": "at 3:21:12 why didn't you get array out of bounds exception? When i =n, table[i+1 or 2] will not have any index in table of more than n so why no exception?", "likes": 0}, "replies": [{"id": "UgweYZVC1ybLUfju_014AaABAg.9P5PYfaHsTY9PEr3ElWE2T", "publishedAt": "2021-07-01T04:24:28Z", "author": "Dinesh Solanki", "text": "@Chico Mazapan so JavaScript is working different i guess, idk how. I was also thinking in terms of java.", "likes": 0}, {"id": "UgweYZVC1ybLUfju_014AaABAg.9P5PYfaHsTY9PEnO5eqmGv", "publishedAt": "2021-07-01T03:52:22Z", "author": "Chico Mazapan", "text": "I have the same question, I've tried the same code on Java and I get an index out of bounds", "likes": 0}]}, {"topLevelComment": {"id": "Ugy-HOUGMeCxwxkr9QB4AaABAg", "publishedAt": "2021-06-27T10:18:38Z", "author": "Aryan Mousavi", "text": "I wish I could give it more than one like...\n+1 sub to the great tutor!", "likes": 2}}, {"topLevelComment": {"id": "Ugwf9lRpp-_WrCEHVi94AaABAg", "publishedAt": "2021-06-27T06:49:45Z", "author": "Dinesh Solanki", "text": "Need clarity on Allconstruct memoization, if we have calculated one value of cdef why does it not get previous value and calculates new value of cdef?", "likes": 0}}, {"topLevelComment": {"id": "UgxeXI8IBSHutplUjNl4AaABAg", "publishedAt": "2021-06-27T05:36:37Z", "author": "Biggboss Footage", "text": "I definitely love his style of teaching. And those visualizations are clean, very helpful. Gonna subscribe to Coderbyte channel for sure.", "likes": 1}}, {"topLevelComment": {"id": "UgxlJxu-jNVyOwUw2tF4AaABAg", "publishedAt": "2021-06-27T00:54:39Z", "author": "Aniruddha Ingle", "text": "In the canSum problems (and the other two related problems) do we have to return false at the bottom, after the for loop? I have a gut feeling that if we do not, it should still work because it will get eliminated by the targetSum < 0 base case. Right? ((p.s: I am not writing this code into an editor right now because I want to let myself figure it out, mathematically before I run the code and convince myself using the evidence.))", "likes": 0}}, {"topLevelComment": {"id": "UgwSCCk2zNyveLncPs14AaABAg", "publishedAt": "2021-06-26T15:06:19Z", "author": "suseelkumar annamraju", "text": "Thanks for the video. When i m trying for bestsum through java code, i m getting different answer like [25, 1, 1, 2, 1, 2, 1, 2, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25, 1, 2, 5, 25]\r\nNot sure where i m doin mistake here. COde below\npublic static ArrayList bestSum(long targetSum, int[] numbers, HashMap<Long,ArrayList> memo) {\r\n        if(memo.containsKey(targetSum)) return memo.get(targetSum);\r\n        if(targetSum == 0) {\r\n            return new ArrayList();\r\n        }\r\n        if(targetSum < 0) return  null;\r\n\r\n        ArrayList<Long> shortestCombination = null;\r\n\r\n        for(long num : numbers) {\r\n            long remainder = targetSum - num;\r\n            ArrayList remainderCombination = bestSum(remainder, numbers, memo);\r\n            if(remainderCombination!=  null) {\r\n                remainderCombination.add(num);\r\n                if(shortestCombination == null || remainderCombination.size() < shortestCombination.size()) {\r\n                    shortestCombination = remainderCombination;\r\n                }\r\n            }\r\n        }\r\n        memo.put(targetSum, shortestCombination);\r\n        return shortestCombination;\r\n    } \nPlease help where i missing for input as 100, IntStream.of(1,2,5,25).toArray()", "likes": 0}}, {"topLevelComment": {"id": "UgylYx6WIMXL6POz6Kx4AaABAg", "publishedAt": "2021-06-26T07:11:16Z", "author": "Prem sai swain", "text": "Huge respect man \ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgyuDduYPVUAe6GhR4d4AaABAg", "publishedAt": "2021-06-25T19:31:32Z", "author": "Biggboss Footage", "text": "Would have been great had he taken the example of non repeating array elements for the canSum, howSum and bestSum problems. How would the memorization work in those cases??? I really need to understand that", "likes": 0}}, {"topLevelComment": {"id": "Ugy_oDhn4Z-LKrClXZ14AaABAg", "publishedAt": "2021-06-25T15:40:10Z", "author": "Julio Bailon", "text": "In the grid traveler you forgot the optimization for symmetric keys. just need to add this code after you store the key so you store also the symmetric one for performance: const symmetricKey = n + \u2018,\u2019\u00a0 + m; memo[symmetricKey] = memo[key];     Also, canSum can get improved adding a continue inside of the for when the number is bigger than the targetSum and returning true if the module of the targetSum % number is zero which means it is divisible by that number so you could add that number many times to sum to the target.", "likes": 0}}, {"topLevelComment": {"id": "UgxZkWfyfMR-MeCbMmR4AaABAg", "publishedAt": "2021-06-25T13:11:11Z", "author": "ball_is_life", "text": "To the grid traveler problem: The seeding number for position 1,1 should be 2 not 1: There are 2 ways to go from 0,0 to 1,1 (down-right, right-down). Can you please elaborate?", "likes": 1}, "replies": [{"id": "UgxZkWfyfMR-MeCbMmR4AaABAg.9P0LZkiW29U9P6bLYyDumi", "publishedAt": "2021-06-27T23:33:14Z", "author": "Sutthinart Khunvadhana", "text": "In this case, the table index start at 1 not 0", "likes": 0}]}, {"topLevelComment": {"id": "UgzWeLNV6CyKvDq6lw54AaABAg", "publishedAt": "2021-06-24T18:28:12Z", "author": "fede", "text": "Excellent course! Thank you, and thanks to Alvin! I've just subscribed to his channel.", "likes": 0}}, {"topLevelComment": {"id": "UgwN8_qTnqnKlHez23x4AaABAg", "publishedAt": "2021-06-24T15:50:12Z", "author": "Sijan Shrestha", "text": "https://youtu.be/oBt53YbR9Kk?t=4895\nfor canSum(7,[2,3]); it should be false ?", "likes": 0}, "replies": [{"id": "UgwN8_qTnqnKlHez23x4AaABAg.9Oz2yU4o0Tq9P6toWA_q2f", "publishedAt": "2021-06-28T02:14:37Z", "author": "pidwid", "text": "No, 2+2+3 = 7, so its possible (We can use one element multiple times).", "likes": 1}]}, {"topLevelComment": {"id": "UgzxfdokdvF9hZ04raZ4AaABAg", "publishedAt": "2021-06-24T13:49:38Z", "author": "ravon1982", "text": "does this guy reply to questions??", "likes": 0}}, {"topLevelComment": {"id": "UgxWIellote7kCjkEiB4AaABAg", "publishedAt": "2021-06-24T12:12:19Z", "author": "Jerson", "text": "At https://youtu.be/oBt53YbR9Kk?t=11425, shouldn't the time complexity be O(n^m * m)?  Multiplication by m takes into account the prepending of the word from the result.", "likes": 0}}, {"topLevelComment": {"id": "UgxQA2ziDJX1GTMz4Zt4AaABAg", "publishedAt": "2021-06-24T11:22:19Z", "author": "airaction", "text": "There are programmers that know how to code and others that know what to code.", "likes": 0}}, {"topLevelComment": {"id": "UgwQ_X39j4qSuu_sO7V4AaABAg", "publishedAt": "2021-06-24T08:21:44Z", "author": "Volkan \u00dclker", "text": "Cystal clear explanation bro", "likes": 0}}, {"topLevelComment": {"id": "UgwNerhRYToWEQ6IHot4AaABAg", "publishedAt": "2021-06-24T05:33:02Z", "author": "Not Found", "text": "This guy is amazing. One of the best Dynamic programming lessons I have gone through.", "likes": 0}}, {"topLevelComment": {"id": "UgymLU-VNZ_XdWBnid54AaABAg", "publishedAt": "2021-06-24T05:02:00Z", "author": "TheTruthsayer", "text": "So after watching this video and I still can\u2019t solve it, should I just quit learning DSA??", "likes": 0}, "replies": [{"id": "UgymLU-VNZ_XdWBnid54AaABAg.9Oxtmv-Kekc9PBirg40uBz", "publishedAt": "2021-06-29T23:15:08Z", "author": "Onime Kyo", "text": "No, it means that this information hasn't been ingrained to your brain properly and it hasn't turned to knowledge.\nAfter some time you will understand too.\nThe first time I watch this I don't really understand, now it gets easier", "likes": 1}]}, {"topLevelComment": {"id": "UgxatMoxFPgqk0U6fmp4AaABAg", "publishedAt": "2021-06-23T23:28:26Z", "author": "Nicholas Gurnard", "text": "Are we able to download the slides for this?", "likes": 1}}, {"topLevelComment": {"id": "UgwJ-bidFElaBhAX2Hp4AaABAg", "publishedAt": "2021-06-23T23:06:39Z", "author": "Wafik 20", "text": "Legend , really appreciate the amazing free content !!", "likes": 0}}, {"topLevelComment": {"id": "UgxfEnkOP8T809cPjJJ4AaABAg", "publishedAt": "2021-06-22T22:59:21Z", "author": "#\u0e1d\u0e23\u0e31\u0e48\u0e07\u0e2d\u0e22\u0e32\u0e01\u0e17\u0e33\u0e40\u0e01\u0e29\u0e15\u0e23", "text": "Sorry, but why don't just use a for loop with the fibonacci problem? And lose so much time explain recursion is bad.", "likes": 0}, "replies": [{"id": "UgxfEnkOP8T809cPjJJ4AaABAg.9OufV-2MvkH9Pmv7AZKvvs", "publishedAt": "2021-07-14T19:13:23Z", "author": "maelstrom57", "text": "The whole point of the recursion problems is to learn how to do it without loops.", "likes": 0}]}, {"topLevelComment": {"id": "Ugy8Wx89QLFz3kv0QQV4AaABAg", "publishedAt": "2021-06-22T14:14:12Z", "author": "Ram Chhabra", "text": "4:20:53", "likes": 1}}, {"topLevelComment": {"id": "UgyDgZ1A92JJrKXM89p4AaABAg", "publishedAt": "2021-06-22T13:50:01Z", "author": "Puneeth Satwik Vemula", "text": "Huge thanks to freecodecamp for helping newbie coders.", "likes": 1}}, {"topLevelComment": {"id": "UgxrjTkHTbBGKotNLCh4AaABAg", "publishedAt": "2021-06-21T09:29:30Z", "author": "SOUMEN GORAIN", "text": "in grid traveller problem using memoization, the line where the condition is \"if m==1 and n==1:\r\". The condition \"if m==1 or n==1:\r\" also works the same. what's the difference?", "likes": 2}, "replies": [{"id": "UgxrjTkHTbBGKotNLCh4AaABAg.9Oqe0aW7KEx9QSvpOJV0w9", "publishedAt": "2021-07-31T12:06:54Z", "author": "Ahnaf Tanjid", "text": "actually not much of a difference. But, (1,1) is the simplest grid using 1 right? think like that, (1,x) means a single row with x columns. so u have only one option to go to the end box which starts with moving right only. for (y,1) u have one single columns with y rows. so u have only one way to go to the end box as well and that is using only moving down.\nSo when u r using 'or' instead of 'and' there, it calculates this hence no output difference.", "likes": 0}]}, {"topLevelComment": {"id": "Ugw7D8oMoEi5Gv0D2214AaABAg", "publishedAt": "2021-06-21T07:33:40Z", "author": "Wei Wang", "text": "I have question regarding how the time complexity being calculated? It seems that the time complexity is directly derived from the number of leaf nodes in the recursive tree in the video. However, shouldn't time complexity drive from the total number of nodes in the recursive tree?", "likes": 0}}, {"topLevelComment": {"id": "UgwKFoFjaovCEhQMXxJ4AaABAg", "publishedAt": "2021-06-20T17:39:52Z", "author": "Franciszek Wieczorek", "text": "Hey, this is truly one of the best tutorials I've seen so far and very appreciated. Many thanks for your time!", "likes": 14}}, {"topLevelComment": {"id": "Ugwl1I4TH7vDwKGkkWd4AaABAg", "publishedAt": "2021-06-20T16:42:03Z", "author": "Nishil Parmar", "text": "I am straight, but I want to give this guy a polite bro kiss.", "likes": 0}}, {"topLevelComment": {"id": "Ugxjb1OJC7rfxr9o-eJ4AaABAg", "publishedAt": "2021-06-20T14:18:14Z", "author": "Artur Wrzosek", "text": "First thought: \"5 hours?? noooo f-way!!\".... but after 5 hours of watching I can onluy write: it's worth of it! I saw a bunch of 10-15min videos but they're too obvious and always with one fibonacchi example... great explanation, great examples, great tips - thanks a lot!", "likes": 0}}, {"topLevelComment": {"id": "Ugylt_uT2KdGMrBDEjJ4AaABAg", "publishedAt": "2021-06-20T13:26:26Z", "author": "Hassan Kabirian", "text": "so Nice", "likes": 0}}, {"topLevelComment": {"id": "UgzIOifXj0IL_NzEPH54AaABAg", "publishedAt": "2021-06-19T22:24:10Z", "author": "Rafael Peixoto Meira", "text": "How do you make this kind of presentation? Which tool do you use?", "likes": 0}}, {"topLevelComment": {"id": "UgytN9Zr4ImIAA5jkD54AaABAg", "publishedAt": "2021-06-19T05:32:15Z", "author": "SuperDoug51", "text": "Very informative! Alvin a great instructor. I was just discussing how to avoid recursive programming with my friend who I am co-developing a BBQ Contest scoring program for the new iPadOS. He is the expert coder. I'm a novice programmer for the 60's. Yeah, I can run a keypunch. He wanted to use an array in the formula. I didn't \"get it\" until I watched this video. I did a brute force creation of a table that took several hours to run. I think I could have trimmed a lot time off the computer run. Thanks, Doug", "likes": 0}}, {"topLevelComment": {"id": "UgxwBlVAHcqid3FhedN4AaABAg", "publishedAt": "2021-06-18T18:00:41Z", "author": "Captain Clown", "text": "For your tabulation examples, you never seem to have any integer in your numbers array that is greater than the target sum. But if you did, wouldn't you go out of bounds, thus redimensioning the array needlessly? Seems like a bounds check would be good here, no?", "likes": 0}}, {"topLevelComment": {"id": "UgyVNIoeKl6WYFx0Rx94AaABAg", "publishedAt": "2021-06-18T10:30:48Z", "author": "Pandav Patel", "text": "1:04:08 How is space complexity of GridTraveler is O(m+n) after memoization? Don't we need to store answer of all possible unique nodes (which is of O(m*n)) in the memo? So then shouldn't space complexity be O(m*n)?", "likes": 0}}, {"topLevelComment": {"id": "UgzyZ34rA6rgDaOmONh4AaABAg", "publishedAt": "2021-06-18T10:10:20Z", "author": "BARAVKAR NISHITH JAGDISH -IIITK", "text": "Its a wonderfully crafted video thanks Alvin", "likes": 0}}, {"topLevelComment": {"id": "UgwCVWQ6UIa93NSxrv94AaABAg", "publishedAt": "2021-06-18T05:53:49Z", "author": "Krishna Suhrut", "text": "Damn looking at people post c++ and python codes for this course I wish someone did a java version too, believe me if I was good enough to do it I would be.", "likes": 0}}, {"topLevelComment": {"id": "Ugx6r7XH2TKkHrVW-4Z4AaABAg", "publishedAt": "2021-06-18T02:02:35Z", "author": "cja", "text": "At 12:30, I don't understand how did you go from \"n\" to \"O(n) time\"? Where does that O come from and represent? Why is the n inside of \"( )\" and why is the word \"time\" there? I never understand how people just pull that out of no where.\n\n13:00 no, that wasn't straightforward at all", "likes": 0}, "replies": [{"id": "Ugx6r7XH2TKkHrVW-4Z4AaABAg.9Oi7UcMwcB99OjmDHqjEAr", "publishedAt": "2021-06-18T17:26:27Z", "author": "Nal Skipper", "text": "It's the Big O Notation. You can look for videos here in youtube for more info.", "likes": 0}]}, {"topLevelComment": {"id": "Ugzwm0pItW9qClqdQ1h4AaABAg", "publishedAt": "2021-06-17T13:17:51Z", "author": "Ashish Kaul", "text": "If anyone's wondering why for O(2^n/2), we take that as O(2n), see it as infinity/2 is equal to infinity as 'n' can be anything.", "likes": 0}}, {"topLevelComment": {"id": "Ugxcjks8xvjA3teAl5x4AaABAg", "publishedAt": "2021-06-16T21:58:56Z", "author": "Mikekkk", "text": "Watching this for 25 minutes, thinking why you are trying to solve the task in so complex way - trees, recursion, storing temp results (maybe only for educational purpose)\u2026 Here it is function O(n) time and O(1) space, no recursion, no need to store all temporary results\n\nfunction fib(n: integer): integer;\nvar\n  i, prev, aux: integer;\nbegin\n  result := 1;\n  prev := 1;\n  for i:= 3 to n do\n    begin\n      aux := result;\n      result := prev + aux;\n      prev := aux;\n    end;\nend;", "likes": 0}}, {"topLevelComment": {"id": "Ugze6z6AJyvWcYblqt94AaABAg", "publishedAt": "2021-06-16T18:50:45Z", "author": "Ashish Kaul", "text": "I just wanna know what theme is that for vscode <3", "likes": 0}}, {"topLevelComment": {"id": "Ugwmt0NHrfVXbyYvAv54AaABAg", "publishedAt": "2021-06-16T16:22:34Z", "author": "Yuta Itadori", "text": "54:00 how n+m ..?", "likes": 0}}, {"topLevelComment": {"id": "UgzRpK7xsQPVKizHi5x4AaABAg", "publishedAt": "2021-06-15T04:35:43Z", "author": "Edgar San Martin Jr.", "text": "I was unsure about dynamic programming like 5 hours ago. Now I\u2019m pretty confident that with some practice using these techniques, these sorts of problems can feel a lot more easier to solve", "likes": 1}}, {"topLevelComment": {"id": "UgwWP9nzfA5JYvoPLkt4AaABAg", "publishedAt": "2021-06-14T19:58:35Z", "author": "Lucas A", "text": "totally mind blowing", "likes": 1}}, {"topLevelComment": {"id": "UgyOwk25l5u-q4c1CZB4AaABAg", "publishedAt": "2021-06-14T08:22:25Z", "author": "Venkatesh Nayak", "text": "I actually felt bad when this course ended. Felt as if a part of my life's story just rested.", "likes": 65}, "replies": [{"id": "UgyOwk25l5u-q4c1CZB4AaABAg.9OZVm8VBEYg9V7dYeZ0CvW", "publishedAt": "2021-11-24T12:20:06Z", "author": "veipunii lana", "text": "which pograming language are you uisng for coding? \nIf you are using java can i ask you some questions?", "likes": 0}, {"id": "UgyOwk25l5u-q4c1CZB4AaABAg.9OZVm8VBEYg9T9xXknWlT8", "publishedAt": "2021-10-06T16:50:26Z", "author": "LUKFUN TV", "text": "\ud83d\ude05\ud83d\ude04\nWhat a nice line there\ud83d\udc4d\ud83d\udc4d", "likes": 3}]}, {"topLevelComment": {"id": "Ugz37l7RyXYtpQ35HeJ4AaABAg", "publishedAt": "2021-06-13T13:29:00Z", "author": "Said Elimam", "text": "Best dynamic programming course !", "likes": 0}}, {"topLevelComment": {"id": "UgwoP0qaeoLF_m5G-lh4AaABAg", "publishedAt": "2021-06-13T07:52:21Z", "author": "Balaganesh Somu", "text": "THANK YOU SOOOOO MUCH!", "likes": 0}}, {"topLevelComment": {"id": "UgyYmiNx6lIUYgnL6fl4AaABAg", "publishedAt": "2021-06-13T04:24:57Z", "author": "CSHub", "text": "Most detailed and best CS fundamental explanation ever. Didnt even flex or tried to show that he knows what he is doing. Will follow all of his videos", "likes": 0}}, {"topLevelComment": {"id": "UgwPdZRfRU2XFCD9nMV4AaABAg", "publishedAt": "2021-06-13T03:46:48Z", "author": "David G", "text": "Cool", "likes": 0}}, {"topLevelComment": {"id": "Ugx2YI5l3bQ3VJ_3Wwp4AaABAg", "publishedAt": "2021-06-12T06:45:56Z", "author": "stoneshadow07", "text": "Amazing video! Quick question - can you solve the 0/1 Knapsack problem using the recursive tree structure with memoization?", "likes": 0}}, {"topLevelComment": {"id": "UgzFoNDTM2L3z9DSIcF4AaABAg", "publishedAt": "2021-06-12T04:53:41Z", "author": "kh0st", "text": "boop!", "likes": 0}}, {"topLevelComment": {"id": "Ugw0u56nPbx9KdqE8lh4AaABAg", "publishedAt": "2021-06-12T01:42:54Z", "author": "Eclipse Gaming Spectrum", "text": "This definitely helped me better my problem solving skills! Thank you so very much, it was worth the 5 hour watch!", "likes": 3}}, {"topLevelComment": {"id": "UgygZOYplfKZap1LblF4AaABAg", "publishedAt": "2021-06-11T15:30:58Z", "author": "Vishal TK", "text": "This video is priceless !!! Thank you making it and sharing with us for FREE !!", "likes": 0}}, {"topLevelComment": {"id": "UgxzLQ3CyAk7sIHUHw14AaABAg", "publishedAt": "2021-06-11T06:24:28Z", "author": "Esteban BR", "text": "i was making the suffix exercise in python but it will do it super fast in any case with out memoization.. why is that?", "likes": 0}}, {"topLevelComment": {"id": "Ugyno9dcA9CGCrw6GY14AaABAg", "publishedAt": "2021-06-10T22:22:56Z", "author": "Donatello Donini", "text": "Thanks for this tutorial: with your lectures I improved an algorithm that calculates any of level the Pascal's triangle, it was really satisfying to see the big improvement with a very few lines of code", "likes": 19}}, {"topLevelComment": {"id": "UgwfUfZvzhRFm8jITfR4AaABAg", "publishedAt": "2021-06-10T17:49:01Z", "author": "Mahalakshmi Maddu", "text": "For the canConstruct memoize solution, why can't use store the intermediate results as well? This might save the complexity right? Is there any issue with the following loigc? \n\ndef canConstruct(sentence, words, memo={}):\n    if sentence in memo:\n        return memo[sentence]\n    if sentence == \"\":\n        return True \n        \n    for i in range(len(sentence)):\n        if sentence[:i+1] in words:\n            memo[sentence[i+1:]] = canConstruct(sentence[i+1:], words, memo)\n            if memo[sentence[i+1:]]:\n                return True \n    memo[sentence]  = False\n    return memo[sentence]", "likes": 0}}, {"topLevelComment": {"id": "UgxldO_nOLkGz1hLWod4AaABAg", "publishedAt": "2021-06-10T17:48:05Z", "author": "Moulya Pradeep", "text": "You are superb maaaannnn!!!", "likes": 0}}, {"topLevelComment": {"id": "UgxgcqdzDeY5h9DqIEJ4AaABAg", "publishedAt": "2021-06-10T06:01:54Z", "author": "Christian Altamirano", "text": "I think somewhere in the runtime analysis of the naive fib implementation there is a mistake:\nRecall that big O notation is defined only as an upper bound (a(x) = O(b(x)) if there exists a constant c such that |a(x)| <= c * b(x) for all x large enough). There is also a similar Omega notation that is the opposite of (a(x) = \\Omega(b(x)) if there exists a constant c such that |a(x)| >= c * b(x) for all x large enough). \nThen it is true that lib takes O(2^{n/2}) which is O(2^n) but not \\Omega(2^n), therefore you cannot lower bound the fib runtime with O(2^n).\nIn fact, it turns out the runtime for fib is O(\\phi^n) and also Omega(\\phi^n) where \\phi = (1 + \\sqrt{5})/2", "likes": 0}}, {"topLevelComment": {"id": "Ugz9HOSas5fh2mtXOjt4AaABAg", "publishedAt": "2021-06-09T23:23:03Z", "author": "Chandemy Linsons", "text": "God bless you Alvin, for such thorough explanation!", "likes": 0}}, {"topLevelComment": {"id": "Ugw57Kfo-gLxuHvByRJ4AaABAg", "publishedAt": "2021-06-09T11:38:28Z", "author": "Viktor Stefanov", "text": "Can someone please tell me what software is he using when he says 'let's head to the whiteboard'. It looks pretty neat", "likes": 0}}, {"topLevelComment": {"id": "UgwbxoevuwpVx60NrJ14AaABAg", "publishedAt": "2021-06-09T07:33:31Z", "author": "Kenneth Villafana", "text": "Wait why wasnt the time complexity of the optimized fib function O(n-1)? Wasn\u2019t the number of total calls 2n-1?", "likes": 0}}, {"topLevelComment": {"id": "UgyCVP0cbBWLRF6FGsl4AaABAg", "publishedAt": "2021-06-08T21:38:29Z", "author": "Steven Eck", "text": "OMG, you are the best! Never did any of this at my college and LeetCode had plenty of DP questions. This is more than enough for anyone to understand what's under the hood. Which is exactly how I learn and retain these concepts. SUBSCRIBED!", "likes": 0}}, {"topLevelComment": {"id": "UgzWvUzafz4VRMZicON4AaABAg", "publishedAt": "2021-06-08T04:51:16Z", "author": "CodeChannel", "text": "Squeeze theorem", "likes": 0}}, {"topLevelComment": {"id": "UgxO98vAu8uF-1V8-m14AaABAg", "publishedAt": "2021-06-08T03:17:18Z", "author": "Run The Code", "text": "The best thing to do for the best sum problem is to sort the numbers array in descending order. so the depth-first approach of the solution will start with a larger number thus resulting in the shortest array length solution.", "likes": 0}, "replies": [{"id": "UgxO98vAu8uF-1V8-m14AaABAg.9OJW546YDAS9OMIdeEHwVn", "publishedAt": "2021-06-09T05:17:32Z", "author": "Run The Code", "text": "@Alvin the Programmer  Thank you, Alvin. Your answer is an eye-opener for me, thanks a lot & also subscribed to your channel.", "likes": 0}, {"id": "UgxO98vAu8uF-1V8-m14AaABAg.9OJW546YDAS9OLlC7rm0EB", "publishedAt": "2021-06-09T00:16:32Z", "author": "Alvin the Programmer", "text": "Say I gave you a target of 8 and numbers [5,4,1]. The first solution that a pure depth first would return would be the sum using [5,1,1,1]. However, the correct answer is [4,4]. What you are suggesting is the largest-first greedy solution, but that is only a winning strategy when the numbers share a common factor (such as the US coinage [1, 5, 10, 25] that shares a mutual factor of 5). The greedy solution may not satisfy any arbitrary numbers given. Hope that clarifies! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgxLHAdJOIqRTOcWmjB4AaABAg", "publishedAt": "2021-06-07T15:21:45Z", "author": "Wai Lok Cheung", "text": "Hat off to this channel \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "Ugw6iaRgWwbDonHjph54AaABAg", "publishedAt": "2021-06-07T10:37:19Z", "author": "Pratyaksh", "text": "Best Teacher ever !", "likes": 0}}, {"topLevelComment": {"id": "UgwHyPiCfK9BKDePqT94AaABAg", "publishedAt": "2021-06-07T09:03:03Z", "author": "Mohammed Zeeshan", "text": "My teacher made me  hate dp.\nThis guy made me  hate my teacher.", "likes": 2}}, {"topLevelComment": {"id": "UgyUYkGJbnMICEFCvhR4AaABAg", "publishedAt": "2021-06-06T22:27:37Z", "author": "Adnan An-Noor", "text": "This is amazing content. I just finished the entire memoization unit. I did not quite understand the complexity analysis of `allConstruct`. Why does the fact that we need o (n^m) subarrays affect the time complexity with memoization? When you memoize it, wouldn't recurring subtree solutions be fetched from the memo object and prevent repetition of calculating that solution, thus saving you time? I also do not understand why space complexity is not exponential here. Would really appreciate any help in understanding.", "likes": 6}, "replies": [{"id": "UgyUYkGJbnMICEFCvhR4AaABAg.9OGQ8_PpzHj9atNIwsW2vL", "publishedAt": "2022-05-11T13:40:34Z", "author": "Mayank Sharma", "text": "May be time complexity is not affected because we are adding elements in a multidimensional saw that map function", "likes": 0}, {"id": "UgyUYkGJbnMICEFCvhR4AaABAg.9OGQ8_PpzHj9RGvDfacFoR", "publishedAt": "2021-08-20T16:42:07Z", "author": "Kartik Naithani", "text": "Have you figured out this?", "likes": 0}]}, {"topLevelComment": {"id": "Ugy_HhpXsyQN_kLDZEV4AaABAg", "publishedAt": "2021-06-06T20:23:26Z", "author": "Govarthenan Rajadurai", "text": "Who is this vid for? Is this suitable for someone who has no idea as to what Dynamic Programming is at all?", "likes": 0}, "replies": [{"id": "Ugy_HhpXsyQN_kLDZEV4AaABAg.9OGBw1hXyUk9OI79yD48_P", "publishedAt": "2021-06-07T14:20:16Z", "author": "Govarthenan Rajadurai", "text": "@Juha Kaarlas Will do what you said and \nsee :)", "likes": 1}, {"id": "Ugy_HhpXsyQN_kLDZEV4AaABAg.9OGBw1hXyUk9OHnrZgGkff", "publishedAt": "2021-06-07T11:22:51Z", "author": "Juha Kaarlas", "text": "Yes, the title can be confusing. Another way to describe the video might be \"Optimizing recursive algorithms.\" I would suggest watching the two different Fibonacci implementations in the beginning and then deciding if you want to continue.", "likes": 0}]}, {"topLevelComment": {"id": "UgyWGeO3j9qw70CADdV4AaABAg", "publishedAt": "2021-06-06T16:53:06Z", "author": "Run The Code", "text": "Just Brilliant!", "likes": 0}}, {"topLevelComment": {"id": "UgyEdPBOsxvNbg1iz4h4AaABAg", "publishedAt": "2021-06-05T18:51:41Z", "author": "xalaros330", "text": "finally a good quality tutorial with an accent that can be understood", "likes": 0}}, {"topLevelComment": {"id": "UgxWt8eL6-Y-_sldO-14AaABAg", "publishedAt": "2021-06-05T15:33:05Z", "author": "Soumya", "text": "for bestsum why dont we just sort the array , then just find the firstsum", "likes": 0}}, {"topLevelComment": {"id": "UgyVvOMicuHSLNw4MmF4AaABAg", "publishedAt": "2021-06-05T14:16:23Z", "author": "Sasirekha MSVL", "text": "Too good tutorial sir. Thank you so much.", "likes": 1}}, {"topLevelComment": {"id": "UgzzpQIaU4OYe0GYH-t4AaABAg", "publishedAt": "2021-06-05T13:10:28Z", "author": "Soumya", "text": "isnt it O(m*n) for memoized grid traveller", "likes": 0}}, {"topLevelComment": {"id": "Ugwk_IYAmyEm3HzW6Xt4AaABAg", "publishedAt": "2021-06-04T23:03:41Z", "author": "Peristilo peris", "text": "If you think you are making this easier, you are so wrong!", "likes": 0}}, {"topLevelComment": {"id": "UgzmZ-R3qKH5h-Bfwgp4AaABAg", "publishedAt": "2021-06-04T20:40:51Z", "author": "Tairan Yang", "text": "This is probably THE best DP tutorial on the web! Kudos to FCC, Coderbyte, and Alvin.", "likes": 5}}, {"topLevelComment": {"id": "UgwzKO0G2lGTAZVW2CZ4AaABAg", "publishedAt": "2021-06-03T06:11:28Z", "author": "Joe Troll", "text": "44:00, I have a different approach, I like to reverse engineer from the end point. All of the squares around the end square, have a cost of one, and then do the squares around those.", "likes": 0}}, {"topLevelComment": {"id": "Ugxwkkpw_gZduGvzhap4AaABAg", "publishedAt": "2021-06-03T04:33:08Z", "author": "Chico Mazapan", "text": "you can even hear the fans spinning up on the big number when the recursive approach is used :P", "likes": 0}}, {"topLevelComment": {"id": "UgwtS_rck23BgYGJGLh4AaABAg", "publishedAt": "2021-06-02T05:39:35Z", "author": "Abhishek Panthi", "text": "algoexpert leave me alone please i dont't want to be a software engineer at google but whatever that girl is hot  and yeah one  awesome video sir thank you for providing it for free", "likes": 0}}, {"topLevelComment": {"id": "Ugw8BNTKe-Zo5LmRIH14AaABAg", "publishedAt": "2021-06-02T05:37:38Z", "author": "Caro Cardozo", "text": "I finished it and I feel like my head is burning from excitement and curiosity for practicing. It was amazing. \nThank you so much for this course", "likes": 248}, "replies": [{"id": "Ugw8BNTKe-Zo5LmRIH14AaABAg.9O4JNhR2l6B9ZPvTu6_4xq", "publishedAt": "2022-03-11T00:48:39Z", "author": "Utopia Binary", "text": "all 5 hours?", "likes": 0}, {"id": "Ugw8BNTKe-Zo5LmRIH14AaABAg.9O4JNhR2l6B9WaYxl4y20u", "publishedAt": "2021-12-30T23:39:51Z", "author": "Sebastian Reyes", "text": "@KHZ 21 I don't think he's that good, the course only teaches the basics and some simple problems. If you want to become good at DP I think you should practice with some DP problems (from codeforces, for example)", "likes": 5}, {"id": "Ugw8BNTKe-Zo5LmRIH14AaABAg.9O4JNhR2l6B9V7eN38R_96", "publishedAt": "2021-11-24T12:27:16Z", "author": "veipunii lana", "text": "which pograming language are you uisng for coding? \r\nIf you are using java can i ask you some questions?", "likes": 1}, {"id": "Ugw8BNTKe-Zo5LmRIH14AaABAg.9O4JNhR2l6B9Uahj1obG_j", "publishedAt": "2021-11-11T08:02:26Z", "author": "KHZ 21", "text": "how good are you in DP now?", "likes": 1}, {"id": "Ugw8BNTKe-Zo5LmRIH14AaABAg.9O4JNhR2l6B9TAX9-AijUh", "publishedAt": "2021-10-06T22:10:22Z", "author": "Daniel W. R. Hart", "text": "Dynamic programming truly is crystal meth", "likes": 5}]}, {"topLevelComment": {"id": "UgzCAed6tCyu-Y91BjJ4AaABAg", "publishedAt": "2021-06-02T05:19:27Z", "author": "Parakh Chaudhary", "text": "Does anyone know the python implementation of the [...remainderResult] thing? I'm getting awkard lists in return.", "likes": 1}, "replies": [{"id": "UgzCAed6tCyu-Y91BjJ4AaABAg.9O4HIZJl0Tn9O6gzcviffS", "publishedAt": "2021-06-03T03:51:08Z", "author": "Parakh Chaudhary", "text": "@Alvin the Programmer Hey Alvin! Thank you. Btw I do have to mention, your patience and way of explanation is one of the best I've seen on youtube. I certainly didn't anticipate you yourself would reply! \nPleasent surprise.", "likes": 0}, {"id": "UgzCAed6tCyu-Y91BjJ4AaABAg.9O4HIZJl0Tn9O5QvEWyQAS", "publishedAt": "2021-06-02T16:02:45Z", "author": "Alvin the Programmer", "text": "Hey! Alvin here. For my pythonistas you can do [*remainderResult]. Python splat * operator  is the analog of JavaScript spread ... operator. Hope that helps.", "likes": 1}]}, {"topLevelComment": {"id": "UgylsFmeo0JbFjZo8JR4AaABAg", "publishedAt": "2021-06-01T09:28:44Z", "author": "Murali Krishnan T M", "text": "canSum, howSum, bestSum AWESOME!", "likes": 0}}, {"topLevelComment": {"id": "Ugxvg_fMbGNoxly8Ceh4AaABAg", "publishedAt": "2021-06-01T04:54:28Z", "author": "Matth J", "text": "Why is it that in the howSum tabulation solution at 04:05:54, he is once again not checking  if table[i + num] is out of bounds, but this time the code is NOT raising a \"heap out of memory\" error as it was happening at 03:50:38 in the canSum tabulation solution?\nShouldn't the array keep growing indefinitily because he is assigning things to indexes that doesn't exist in the array?", "likes": 0}, "replies": [{"id": "Ugxvg_fMbGNoxly8Ceh4AaABAg.9O1edcDx8sh9O5Qdr3eEFN", "publishedAt": "2021-06-02T16:00:23Z", "author": "Alvin the Programmer", "text": "Hey! It's alvin. The outer for loop in howSum, iterates explicitly up to a fixed number `targetSum` and not the length of the table array. Hope that helps.", "likes": 0}]}, {"topLevelComment": {"id": "UgxV_xg_7glcb49YSpd4AaABAg", "publishedAt": "2021-06-01T00:12:51Z", "author": "Alec DuBois", "text": "As someone who thought Dynamic Programming was Metaprogramming, I was both surprised and delighted by what this actually is", "likes": 0}}, {"topLevelComment": {"id": "UgzErWMW4mSQjKI_UWB4AaABAg", "publishedAt": "2021-05-31T21:03:48Z", "author": "Abhishek", "text": "Never thought DP is this simple.Give this guy a medal \ud83c\udfc5", "likes": 1}, "replies": [{"id": "UgzErWMW4mSQjKI_UWB4AaABAg.9O0omRg52hY9OeWfp2mzYg", "publishedAt": "2021-06-16T16:25:44Z", "author": "Yuta Itadori", "text": "Hey can you just explain me how no. Of levels are n+m at 54:00\nAs in that (2,3) example I can see only  3 levels?\nThanks in advance", "likes": 0}]}, {"topLevelComment": {"id": "UgxHMiKjAygP3u_DEPV4AaABAg", "publishedAt": "2021-05-31T15:58:20Z", "author": "Vinit Patni", "text": "Bro you are the awesome teacher", "likes": 0}}, {"topLevelComment": {"id": "UgxDZzI-9_I9qIMIcLd4AaABAg", "publishedAt": "2021-05-31T14:43:23Z", "author": "Saravanan J", "text": "Hands down, just awesome. \ud83d\udc4c", "likes": 0}}, {"topLevelComment": {"id": "UgxCt1L8oMZLrdXdjNZ4AaABAg", "publishedAt": "2021-05-31T12:42:19Z", "author": "Abhinav Umrao", "text": "Awesome teaching......made my life easy..... thank you soooo much\ud83d\ude4f\ud83c\udffb\ud83d\ude4f\ud83c\udffb\ud83d\ude4f\ud83c\udffb", "likes": 0}}, {"topLevelComment": {"id": "Ugx44tDHYql5jPVyqfF4AaABAg", "publishedAt": "2021-05-31T12:36:23Z", "author": "Koz_iorus", "text": "Could someone provide a C++ implementation of bestSum? I'm really struggling with this.", "likes": 0}}, {"topLevelComment": {"id": "Ugysb3FcCCzQ6wlfwAl4AaABAg", "publishedAt": "2021-05-31T09:26:52Z", "author": "Prabu Natarajan", "text": "Thank you freecodecamp and thank you Alvin", "likes": 0}}, {"topLevelComment": {"id": "UgxPvUygmIT-EUdPoPl4AaABAg", "publishedAt": "2021-05-29T20:29:41Z", "author": "elsa chen", "text": "When you are in the middle of the lecture and keep having the urge to run to leetcode and start tackling monsters.  You know this is GOOOOOOD STUFF:)", "likes": 0}}, {"topLevelComment": {"id": "UgyijpbRCYqoQKnV9sR4AaABAg", "publishedAt": "2021-05-29T09:20:51Z", "author": "Julia A", "text": "No other Algorithms video comes 1000km, close to this master piece of a video!", "likes": 0}}, {"topLevelComment": {"id": "UgwSks9c3KOm_BhF67B4AaABAg", "publishedAt": "2021-05-29T08:15:11Z", "author": "Jarvis Knows", "text": "just a C++ translation of bestSum(),\n\n// I used the first element in the answer vector to keep track of whether the sum is possible or not\n\nmap<int, vector<int>> m;\nvector<int> bestSum(int sum, vector<int> &v) {\n    if (m.find(sum) != m.end()) {\n        return m[sum];\n    }\n    if (sum == 0) {\n        return vector<int>{1}; // sum possible\n    }\n    if (sum < 0) {\n        return vector<int>{-1}; // sum not possible, more like a null return, in JS\n    }\n\n    vector<int> best{-1};\n\n    vector<int> curr;\n\n    for (int i = 0; i < v.size(); ++i) {\n        curr = bestSum(sum-v[i], v);\n        if (curr[0] != -1) {\n            curr.push_back(v[i]);\n            if (best[0] == -1 || best.size() > curr.size()) {\n                best = curr;\n            }\n        }\n    }\n\n    m[sum] = best;\n    return best;\n}", "likes": 0}}, {"topLevelComment": {"id": "UgyPwkIVBoEnF--d8rh4AaABAg", "publishedAt": "2021-05-29T01:45:20Z", "author": "Hakim Hauston", "text": "Any legend who watched the entire video in one sit?", "likes": 0}}, {"topLevelComment": {"id": "UgwI-qdxzQBpLXKdSwl4AaABAg", "publishedAt": "2021-05-28T23:34:35Z", "author": "Hamed", "text": "Gold!", "likes": 0}}, {"topLevelComment": {"id": "Ugwfn71U8VG7ggxh9ux4AaABAg", "publishedAt": "2021-05-28T16:53:41Z", "author": "vadim bogatu", "text": "I don't even know English well, but I understood everything, this is amazing, he is the best teacher\ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgzVxUpHbQPUnzyCTzl4AaABAg", "publishedAt": "2021-05-28T06:57:12Z", "author": "Chandradhar Rao", "text": "Finally after a week and 35 pages of Notes, I was able to complete the video!\nThank you Alvin Sir!\n\nTimestamps for my reference:\nResume @: 1:44:35\nResume @: 2:57:00\nResume @: 4:22:00\nDone!\n\nMy feedback:\n\n->If you could code in CPP then it would have been more useful(don't get me wrong but JS isn't used \rin many interviews)", "likes": 0}}, {"topLevelComment": {"id": "UgzvXh9TSOzi46HUtqd4AaABAg", "publishedAt": "2021-05-28T02:24:21Z", "author": "Abhishek De", "text": "Anyone else other than FCC, would've charged more than hundred bucks for this course. It's unbelievable to think that we're accessing this masterpiece for FREE !", "likes": 0}}, {"topLevelComment": {"id": "UgxNCWJMWlm3EqlGVcN4AaABAg", "publishedAt": "2021-05-27T14:33:18Z", "author": "M1", "text": "HowSum Memorization simple trick \n\n\njava code \n\nimport java.util.*;\r\npublic class HelloWorld{\r\n    static ArrayList<Integer> a=new ArrayList<Integer>();\r\n     public static void main(String []args){\r\n        Scanner sc=new Scanner(System.in);\r\n        int arr[]=new int[]{5,3,4,7};\r\n        System.out.println(howSum(7,arr));\r\n        System.out.println(a);\r\n     }\r\n     \r\n    public static Boolean howSum(int n,int[] arr){\r\n        return dSum(n,arr,new HashMap<>());\r\n    }\r\n    public static Boolean dSum(int n,int arr[],HashMap<Integer, Boolean> memo){\r\n        if (memo.containsKey(n)) { return memo.get(n); }\r\n        if(n==0){\r\n            return true;\r\n        } \r\n        if(n<0){\r\n            return false;\r\n        }\r\n        for(int i=0;i<n;i++){\r\n            if(dSum(n-arr[i],arr,memo)){\r\n                memo.put(n,true);\r\n                a.add(arr[i]);\r\n                return true;\r\n            }\r\n            \r\n        }\r\n        memo.put(n,false);\r\n        return false;\r\n    }\r\n    \r\n}", "likes": 1}}, {"topLevelComment": {"id": "Ugz2V-7hoplCsTp30hl4AaABAg", "publishedAt": "2021-05-26T09:44:33Z", "author": "Riz Panjwani", "text": "at 3:22:10 since your loop runs till n, accessing elements i+1 and i+2 will make you go out of bounds of the array.  Ofcourse in js, you won't see that error.", "likes": 0}}, {"topLevelComment": {"id": "UgzDcUwJSXjWeCO2YWJ4AaABAg", "publishedAt": "2021-05-26T00:35:25Z", "author": "hjop010", "text": "At the end of this video, you feel like you have gained superpowers.", "likes": 2}}, {"topLevelComment": {"id": "UgzNJi7w08gAjRhrV5l4AaABAg", "publishedAt": "2021-05-25T18:26:24Z", "author": "Peter Keller", "text": "Great so far. If the first half hour is an indicator of the rest, I already learnt more in that half hour than in the past 10 years... Great job", "likes": 19}}, {"topLevelComment": {"id": "UgxQKICCXi3v96ME8nx4AaABAg", "publishedAt": "2021-05-25T17:40:19Z", "author": "Jackie F.", "text": "Best of the best!!!", "likes": 0}}, {"topLevelComment": {"id": "UgyHY30FD7zhnYZLp3Z4AaABAg", "publishedAt": "2021-05-24T14:31:48Z", "author": "In The Midst Of It All", "text": "Thank you for a clear and concise explanation! Super valuable!", "likes": 0}}, {"topLevelComment": {"id": "UgxJAuFKpMnwmKH6tDx4AaABAg", "publishedAt": "2021-05-24T00:51:07Z", "author": "Vasanth Kumar", "text": "you can't go wrong with dynamic programming after this course", "likes": 0}}, {"topLevelComment": {"id": "Ugz2ysCAh-4wJXSJ6ap4AaABAg", "publishedAt": "2021-05-23T23:28:55Z", "author": "Vasanth Kumar", "text": "The best explanation on Dynamic programming..Thanks much", "likes": 0}}, {"topLevelComment": {"id": "UgyTuSz0Z1pfmV8rNE14AaABAg", "publishedAt": "2021-05-23T09:53:05Z", "author": "It'sMe Sujith", "text": "Can you help me with to solve a program", "likes": 0}}, {"topLevelComment": {"id": "Ugw_-jQxdasTKVPEyMR4AaABAg", "publishedAt": "2021-05-23T09:04:27Z", "author": "Prem Raja", "text": "Thanks a lot! Finally understood the concept", "likes": 0}}, {"topLevelComment": {"id": "Ugw7oKQVDfyy4N9RtZx4AaABAg", "publishedAt": "2021-05-22T17:03:49Z", "author": "Ruhan Syed", "text": "This is a great course to learn dynamic programming and helped me a lot to prepare for my interview.", "likes": 0}}, {"topLevelComment": {"id": "Ugx9Z7WeTmop3Ti88pl4AaABAg", "publishedAt": "2021-05-22T12:53:23Z", "author": "ekbastu", "text": "For best sum, how about simply sorting the numbers array in descending order and using howSum?", "likes": 0}}, {"topLevelComment": {"id": "UgxICTg0HgYVUaH9Ltl4AaABAg", "publishedAt": "2021-05-22T11:21:09Z", "author": "akshay bhanderi", "text": "I don't know if we have better than this.\n\ud83d\udd25\ud83d\udd25\n\u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgxlSxLzRxJUvRNeyfJ4AaABAg", "publishedAt": "2021-05-22T08:28:30Z", "author": "pramod gupta", "text": "I am getting this error in canSume problem\nhere is my code. What am I doing wrong?\n\nconst canSum = (target, arr, memo={}) => {\n     if(target in memo) return memo[target];\n     if(target === 0) return true;\n     if(target < 0 ) return false;\n\n     for( let i in arr){\n          let remainder = target - i;\n          if(canSum(remainder, arr, memo) === true){\n               memo[target] = true;\n               return true;\n          } \n     }\n     memo[target] = false;\n     return false;\n}\n\nconsole.log(canSum(7, [2,3]));", "likes": 0}, "replies": [{"id": "UgxlSxLzRxJUvRNeyfJ4AaABAg.9NdIBaixiHG9O5c2SmCNqm", "publishedAt": "2021-06-02T17:48:44Z", "author": "pramod gupta", "text": "@Alvin the Programmer Alvin, that was the issue. Thanks for going through it and taking time to reply. I am still trying to understand difference between indices and elements of an array.", "likes": 0}, {"id": "UgxlSxLzRxJUvRNeyfJ4AaABAg.9NdIBaixiHG9O5RBAeXKIu", "publishedAt": "2021-06-02T16:05:04Z", "author": "Alvin the Programmer", "text": "Hey! Alvin here. Your outer for loop is iterating thru the indices of the array, and not the elements. You wrote `for ( in ) ` loop where it should be `for ( of )` loop. Hope that helps.", "likes": 1}]}, {"topLevelComment": {"id": "UgxxhRMJqMRlMvInSsZ4AaABAg", "publishedAt": "2021-05-22T07:46:11Z", "author": "Abhinav Mittal", "text": "Maro muje maaro", "likes": 0}}, {"topLevelComment": {"id": "UgzfinR-2Hdeup03V_h4AaABAg", "publishedAt": "2021-05-21T20:13:50Z", "author": "ekbastu", "text": "One heck of a teacher. Thank you so much.", "likes": 0}}, {"topLevelComment": {"id": "UgwJj1h3wEj47wU6es54AaABAg", "publishedAt": "2021-05-21T18:38:12Z", "author": "444haluk", "text": "A very professional video.", "likes": 0}}, {"topLevelComment": {"id": "UgxYwBMWmsCgQEaqCOR4AaABAg", "publishedAt": "2021-05-21T15:22:10Z", "author": "Dhairyashil Bankar", "text": "What an detailed explanation with simpler steps!! Thanks Man!! Respect !!", "likes": 0}}, {"topLevelComment": {"id": "UgwioOC81sU-pHRL5Dh4AaABAg", "publishedAt": "2021-05-21T10:26:55Z", "author": "Vimal V", "text": "@52:33, Isn't the time complexity for the grid problem O(2^(m+n)-1)? Cause the tree height is only going to be (m+n)-1 and not (m+n)", "likes": 0}}, {"topLevelComment": {"id": "Ugz6AfaMtdca1dbYKpx4AaABAg", "publishedAt": "2021-05-21T06:50:47Z", "author": "heh", "text": "hi everyone, for the howSum memoization, why is the Space Complexity O(m^2)? \n\nFrom what I understand (might be wrong), the memo object has m keys where each value is a list of maximum length m. So, m*m space complexity. (List lengths are 1 + 2 + 3 + ... + m = m^2 space).\n\nHowever, why doesn't the tree contribute another m to space complexity, since deepest node is of depth m? What happens to it?\n\nMy guess is that it's O(m^2 + m), rounded off to O(m^2)?", "likes": 0}}, {"topLevelComment": {"id": "UgyDmFoQuvb7EDRSz1p4AaABAg", "publishedAt": "2021-05-20T18:49:20Z", "author": "Aman Saeed", "text": "@2:27:55 - for words = {cars, car, sa} and string = \"carsa\" ; will return false even though it is true.", "likes": 0}}, {"topLevelComment": {"id": "UgxjNx61Ztp6l6w96p14AaABAg", "publishedAt": "2021-05-20T11:04:10Z", "author": "Vinit K", "text": "I am super good at JS but in interview tests the simulators don't support JS. Struggling with Python because of it.", "likes": 0}}, {"topLevelComment": {"id": "Ugy6-2LFLlFs_u64pT14AaABAg", "publishedAt": "2021-05-20T08:58:29Z", "author": "shasvat Nayak", "text": "FreeCodeCamp teaches me stuff that four years of paid college failed to teach. Thanks a lot :)", "likes": 0}}, {"topLevelComment": {"id": "UgzAH0hKZyybfK3IkwB4AaABAg", "publishedAt": "2021-05-19T12:19:33Z", "author": "Vimal V", "text": "The good teacher explains. The superior teacher demonstrates. The great teacher inspires. You are a great teacher Sir! Thank you!", "likes": 21}}, {"topLevelComment": {"id": "UgzwIeCW63-X4HxsBB54AaABAg", "publishedAt": "2021-05-19T12:00:37Z", "author": "Pritish Pal", "text": "Can someone share the C++ code for all the problems he solved?", "likes": 0}}, {"topLevelComment": {"id": "UgxUJJStg7fv5AH7x3N4AaABAg", "publishedAt": "2021-05-19T10:45:11Z", "author": "Whiz#ard", "text": "really great video", "likes": 0}}, {"topLevelComment": {"id": "Ugw8MEUxCTeY6rs-pYB4AaABAg", "publishedAt": "2021-05-18T00:06:10Z", "author": "Jubayer Ahmed", "text": "Really liked the explanation! Though I know I'll forget sonn", "likes": 0}}, {"topLevelComment": {"id": "UgyAAxDAEKmo0cl52ph4AaABAg", "publishedAt": "2021-05-17T19:38:20Z", "author": "mikee2325", "text": "What an amazing video. Such a brilliant walkthrough.", "likes": 0}}, {"topLevelComment": {"id": "UgxQ0nxrzkB1n__eO_V4AaABAg", "publishedAt": "2021-05-17T14:42:23Z", "author": "Rob Fielding", "text": "it drives me nuts that he uses recursive fib as the example.  if you just calculate it forward, it's O(n) time, and O(1) space from the beginning.  I'm not sure which example is as simple, while still needing the recursion.", "likes": 0}}, {"topLevelComment": {"id": "Ugyn0rJTMub5F9p6mjZ4AaABAg", "publishedAt": "2021-05-17T05:23:59Z", "author": "JaeKwon Jin", "text": "what tool or library is used to create  the animation?", "likes": 0}}, {"topLevelComment": {"id": "Ugxch0uAgcQUuXdzpul4AaABAg", "publishedAt": "2021-05-16T23:49:44Z", "author": "NamanGineer", "text": "Will memoization ever be better in terms of performance / memory over tabulation or is it a safe bet to always use tabulation.", "likes": 0}}, {"topLevelComment": {"id": "UgzGHyUWVgUvAfqOaH54AaABAg", "publishedAt": "2021-05-16T22:42:13Z", "author": "Aah Pandas Run", "text": "Thanks, I finally understand dynamic programming.  I've never heard it explained well before.", "likes": 0}}, {"topLevelComment": {"id": "UgzimPJntRQRT9-35d14AaABAg", "publishedAt": "2021-05-16T18:35:43Z", "author": "RAJU RAWAT", "text": "After getting frustrated from these dynamics programing, after hunting to know the real concepts in books, articles, online paid courses, YouTube videos, finally got this here and that too free. I can't believe this. He teaches like crazy. Thanks a lot.\ud83d\udc4d", "likes": 347}, "replies": [{"id": "UgzimPJntRQRT9-35d14AaABAg.9NPvuh3CFGe9bu-FtwRdU4", "publishedAt": "2022-06-05T16:01:04Z", "author": "Tak Irr", "text": "He's crazy - 01:04:10 - OBVIOUS MISTAKE - he forgot to calculate space occupided by THE CACHE. Space is O(n * m), not O(n + m)  OMG OMG OMG", "likes": 0}, {"id": "UgzimPJntRQRT9-35d14AaABAg.9NPvuh3CFGe9XekHCGRHss", "publishedAt": "2022-01-26T11:15:51Z", "author": "Calculator", "text": "That's because he is crazy", "likes": 2}, {"id": "UgzimPJntRQRT9-35d14AaABAg.9NPvuh3CFGe9XKLgWKKG9d", "publishedAt": "2022-01-18T03:48:12Z", "author": "Quancy", "text": "Alvin is amazing. He currently works for google right now", "likes": 4}]}, {"topLevelComment": {"id": "UgyMIx316mvN84kjpEV4AaABAg", "publishedAt": "2021-05-16T17:49:50Z", "author": "Murad Hajiyev", "text": "Who knows a free (online or desktop) and good working \"Call Tree\" maker application for to visualize these kind of algorithms?  If you know, share with me please. Thanks in advance.", "likes": 0}}, {"topLevelComment": {"id": "Ugx_LqV4SOntCJLdTvh4AaABAg", "publishedAt": "2021-05-16T16:04:31Z", "author": "Jashan 092", "text": "Answer of the 1st question\n102334155", "likes": 1}}, {"topLevelComment": {"id": "UgyeqFmlu6X88BTI8BB4AaABAg", "publishedAt": "2021-05-15T23:44:18Z", "author": "Paul Elliott", "text": "free beers for you man, one of the best explanation of dynamic programing...", "likes": 0}}, {"topLevelComment": {"id": "UgzIVoxBdBCXqJv9txx4AaABAg", "publishedAt": "2021-05-15T14:41:13Z", "author": "asynciz", "text": "I watched many videos on dynamic programming, and read about it, and looked at problems etc..... BUT I never truly understood it until now. Thank you for this amazing tutorial!", "likes": 0}}, {"topLevelComment": {"id": "UgwPiqz0C1z5YD5UjBF4AaABAg", "publishedAt": "2021-05-15T09:45:39Z", "author": "Omotoyosi Ogundairo", "text": "Everyone else: Amazing video. Now I can help Elon Musk increase the efficiency of the SpaceX's Algo.\n\nMe: \ud83e\udd26\ud83c\udffd\u200d\u2642\ufe0f\ud83e\udd26\ud83c\udffd\u200d\u2642\ufe0f while almost everything after canSum flies over my head.", "likes": 1}}, {"topLevelComment": {"id": "Ugx6f0NhvcWPzS8IYMt4AaABAg", "publishedAt": "2021-05-15T07:02:04Z", "author": "Bishnu Patro", "text": "GOD Bless You For All These Nice Content And Very Good Explanation And All The Hard Work Put In.", "likes": 0}}, {"topLevelComment": {"id": "Ugw2xmQ_Pg6EOLceQJx4AaABAg", "publishedAt": "2021-05-14T19:06:45Z", "author": "Mayank Mittal", "text": "Just an observation. In the gridTraveller problem, the optimised code (with DP) is using key as \"m,n\" and checking against the same in dict. Shouldn't it be check for both \"m,n\" and \"n,m\" in dict as both returns the same number of steps.", "likes": 0}}, {"topLevelComment": {"id": "UgxQP0XpUp8wAHRORsp4AaABAg", "publishedAt": "2021-05-13T19:13:07Z", "author": "G-K Kon\u00e9", "text": "Best teacher ever! \nYou made the topic so clear!\nThank you very much FreecodeCamp!\nIll donate to the organization!", "likes": 0}}, {"topLevelComment": {"id": "UgyAjLYy4neVvRqgGxp4AaABAg", "publishedAt": "2021-05-13T12:01:16Z", "author": "Jacob011", "text": "I love the sound of your voice and way you explain things. Will definitely have to watch the whole thing, when I get off work.", "likes": 0}}, {"topLevelComment": {"id": "Ugyxl2qEsZSqKVQp3iR4AaABAg", "publishedAt": "2021-05-12T06:13:30Z", "author": "Rahul Makhija", "text": "Wow. Dynamic programming looked so daunting on the outside. In a matter of 2 days, you changed my mindset about it for good :)\nNow it seems easy and doable. Many thanks!", "likes": 42}}, {"topLevelComment": {"id": "UgzK8dZ7QszuTjhCdep4AaABAg", "publishedAt": "2021-05-11T16:22:51Z", "author": "Emil Dantzler", "text": "At 53:11, i don\u2019t understand why the height of the graph is n + m. I see the height being 4, but according to inputs, it should be 5. Can anyone explain?", "likes": 0}}, {"topLevelComment": {"id": "Ugy_yIvwS7Zfpgf0IHd4AaABAg", "publishedAt": "2021-05-11T07:29:48Z", "author": "Kabeer Collection", "text": "great stuff both instructor and freecodecamp !! thanks", "likes": 0}}, {"topLevelComment": {"id": "UgxlH5oX7E1tPQgZ2oV4AaABAg", "publishedAt": "2021-05-10T14:25:22Z", "author": "Ravi Raaja", "text": "javascript is useful here because there are 3 different states -- helpful in memoization --> undefined, null, value --- undefined is predefined state if the target is not set so we perform calculations, null is set for negative cases , some value is set for positive cases. -- if same in implemented in java we shall have null (predefined state) and some value(positive scenario) -- so we cannot optimize if we MIMIC the same implementation in java T(n) will be more for negative cases.", "likes": 0}}, {"topLevelComment": {"id": "UgwHxtSKeER-AUB6eGR4AaABAg", "publishedAt": "2021-05-10T10:39:32Z", "author": "Igor Svara", "text": "Thanks! Very clear  \nPs. What is the name of the theme you are using?", "likes": 1}}, {"topLevelComment": {"id": "UgxIo2uZPPWOsZBT9WN4AaABAg", "publishedAt": "2021-05-09T17:05:28Z", "author": "Florian Dyck", "text": "If you understand that the grid traveler is just how to distribute a certain number of downs on a fixed amount of total moves it is solvable in O(n+m): it\u00b4s n over n + m", "likes": 0}}, {"topLevelComment": {"id": "UgyxW-eJ28QF6Va6wGF4AaABAg", "publishedAt": "2021-05-09T07:12:40Z", "author": "Hackytech", "text": "This is one of the best explanation for Dynamic programming on entire Youtube. I have never seen such an clean and Fantastic explanation. Thanks alot", "likes": 5}}, {"topLevelComment": {"id": "UgwlXGmjl7MWOh26bC54AaABAg", "publishedAt": "2021-05-09T04:38:11Z", "author": "Shreenanda P", "text": "1:28:19 \nGives the wrong answer for canSum(300,[2,4])\nDid you guys get the correct answer?", "likes": 0}, "replies": [{"id": "UgwlXGmjl7MWOh26bC54AaABAg.9N6PVDxsWEN9N9eEWawxim", "publishedAt": "2021-05-10T10:53:25Z", "author": "MadDogMV", "text": "Hi, I got the correct answer for that input.\n\n       \n\tstatic boolean canSum(int sum, int[] num, Map<Integer, Boolean> memo) {\n        \n        \n\t\tif (memo.containsKey(sum))\n\t\t\treturn memo.get(sum);\n        \n\t\tif (sum == 0)\n\t\t\treturn true;\n\t\tif (sum < 0)\n\t\t\treturn false;\n\n\t\tfor (int n : num) {\n\n\t\t\tint rem = sum - n;\n\t\t\tboolean flag = canSum(rem, num, memo);\n\t\t\tif (flag) {\n\t\t\t    \n\t\t\t    memo.put(sum, flag);\n\t\t\t    return true;\n\t\t\t}\n\t\t\t\n\t\t}\n    \n        memo.put(sum, false);\n\t\treturn false;\n\t}\n\n$ java CanSum \n300\n2\n2\n4\ntrue", "likes": 0}]}, {"topLevelComment": {"id": "UgxqavrDss8jegksO4h4AaABAg", "publishedAt": "2021-05-09T03:56:54Z", "author": "Shreenanda P", "text": "Gordon Ramsay: Let the knife do its job\nDP: Let the recursion do its job.. You come with me boy let's have some beer", "likes": 0}}, {"topLevelComment": {"id": "UgytkEU0URQvDDqYtqx4AaABAg", "publishedAt": "2021-05-08T23:22:04Z", "author": "GeneralN0va", "text": "49:00, shouldn't the lowest and right most node be (2,0)?", "likes": 0}}, {"topLevelComment": {"id": "UgxgLgVWe-5QX_CXtF94AaABAg", "publishedAt": "2021-05-08T19:59:15Z", "author": "Rohan Sodha", "text": "Brilliant !", "likes": 0}}, {"topLevelComment": {"id": "UgxO_7xCVgShGwXWbrZ4AaABAg", "publishedAt": "2021-05-08T19:23:04Z", "author": "ANURAG", "text": "This is high quality content. Thanks a lot.", "likes": 0}}, {"topLevelComment": {"id": "UgyMqXmTB9xtui22oDl4AaABAg", "publishedAt": "2021-05-07T19:31:30Z", "author": "Ilyas siddiqui", "text": "his voice is definitely not his", "likes": 0}}, {"topLevelComment": {"id": "Ugz-nQ-mVfP5xPsiV3p4AaABAg", "publishedAt": "2021-05-07T15:34:43Z", "author": "A Pall", "text": "Subscribed to 'Coderbyte' everywhere! \nthis guy teaches 1st class material!", "likes": 0}}, {"topLevelComment": {"id": "UgyvViSUhIZu4Z6jd8h4AaABAg", "publishedAt": "2021-05-06T17:38:04Z", "author": "aniket nargotra", "text": "This video teaches more than a whole engineering degree", "likes": 0}}, {"topLevelComment": {"id": "Ugz4QOJJe7kYFYkFgc14AaABAg", "publishedAt": "2021-05-04T21:04:48Z", "author": "Abdulrahman Tolba", "text": "This tutorial is quite literally the best one on dynamic programming i've ever seen. Makes me feel like dp problems aren't so bad after all.\n\nAlso, for the problem around 2:24:19, you can actually use the String.prototype.startsWith(word) function instead of indexOf, just makes the code more understandable.", "likes": 2}, "replies": [{"id": "Ugz4QOJJe7kYFYkFgc14AaABAg.9MwIR59gTgE9S9VWi4_Qes", "publishedAt": "2021-09-11T16:05:30Z", "author": "Aditya Bhimesha", "text": "YES,  was about to suggest this too, also using indexOf would cause it to loop through the target string contributing to extra time complexity, since we only need to find out if the starting segment can be generated or not.", "likes": 1}]}, {"topLevelComment": {"id": "UgxSMHGLQEPJomEOLC14AaABAg", "publishedAt": "2021-05-04T18:46:39Z", "author": "Sooraj .v", "text": "Hows that cansum for loop working? time stamp:1:20:00", "likes": 0}}, {"topLevelComment": {"id": "Ugz3GsWzPDabDbPewiJ4AaABAg", "publishedAt": "2021-05-04T18:15:53Z", "author": "Piotr Martyniak", "text": "Wouldn't it reduce the complexity of howSum and bestSum to use references to the \"combination\" arrays instead of copying them over?", "likes": 0}}, {"topLevelComment": {"id": "UgxZhRPxvKoR2FBChtd4AaABAg", "publishedAt": "2021-05-04T05:55:01Z", "author": "Kevin Chou", "text": "The video is too long thus no subtitles.\ud83d\ude2b", "likes": 0}}, {"topLevelComment": {"id": "UgwBjc-HiIHYX8KX1OZ4AaABAg", "publishedAt": "2021-05-03T17:16:08Z", "author": "\u80e1\u6667\u78ca", "text": "At 21:10., the time complexity of O(2^N) is different from O(2^N/2)", "likes": 1}}, {"topLevelComment": {"id": "UgzU9OH-1hPNXWt2bQN4AaABAg", "publishedAt": "2021-05-02T23:00:05Z", "author": "Legendary Speed", "text": "Excellent tutorial, thank you so much!", "likes": 0}}, {"topLevelComment": {"id": "UgwihBimhPLBgL1ISO14AaABAg", "publishedAt": "2021-05-02T18:30:44Z", "author": "Joachim Dietl", "text": "Great video", "likes": 0}}, {"topLevelComment": {"id": "UgwvwP_PWd0B_QyBcQh4AaABAg", "publishedAt": "2021-05-01T19:59:27Z", "author": "Sudip Bhattarai", "text": "This  man is  real   programmer", "likes": 0}}, {"topLevelComment": {"id": "UgxUahkMt64O5kMkwY94AaABAg", "publishedAt": "2021-05-01T08:45:11Z", "author": "The NEW One", "text": "5:58:19 what happens if we had a [abcdefg] options?????", "likes": 1}}, {"topLevelComment": {"id": "UgwOI4R-Jtll7aP-4kV4AaABAg", "publishedAt": "2021-05-01T08:13:43Z", "author": "Simonas Bendinskas", "text": "Am I the only one who instantly went well gridTraveler(m,1) && gridTraveler(1,n) is edge cases?", "likes": 0}}, {"topLevelComment": {"id": "UgxvS9abjoR5M6wiTqJ4AaABAg", "publishedAt": "2021-05-01T07:10:02Z", "author": "Shopxtra #shorts", "text": "Awesome tutorial..  pls do the video for other algorithms", "likes": 0}}, {"topLevelComment": {"id": "UgzQX1L2EXBVYbAgikt4AaABAg", "publishedAt": "2021-05-01T06:06:13Z", "author": "777amey", "text": "Help review code\ncanSum in java not working\nPlease review.\nI GET ALL OUTPUT AS TRUE.\n\nimport java.util.*;\npublic class Main\n{\n\tpublic static void main(String[] args) {\n\t    HashMap<Integer,Boolean> memo=new HashMap<>();\n\t\tSystem.out.println(canSum(7,new int[] {2,3},memo));\n\t\tSystem.out.println(canSum(7,new int[] {5,3,4,7},memo));\n\t\tSystem.out.println(canSum(7,new int[] {2,4},memo));\n\t\tSystem.out.println(canSum(8,new int[] {2,3,5},memo));\n\t\tSystem.out.println(canSum(300,new int[] {7,14},memo));\n\n\t}\n\tpublic static boolean canSum(int targetSum,int[] numbers,HashMap<Integer,Boolean> memo)\n\t{\n\t    if(memo.containsKey(targetSum)) return memo.get(targetSum);\n\t    if(targetSum==0) return true;\n\t    for(int i: numbers)\n\t    {\n\t        int remainder=targetSum-i;\n\t        if(remainder>=0)\n\t        {\n\t        if(canSum(remainder,numbers,memo)==true)\n\t        {\n\t            memo.put(targetSum,true);\n\t            return true;\n\t        }\n\t        }\n\t    }\n\t    memo.put(targetSum,false);\n\t    return false;\n\t}\n}", "likes": 0}, "replies": [{"id": "UgzQX1L2EXBVYbAgikt4AaABAg.9MmyD1AEFM19NagXKwCSy8", "publishedAt": "2021-05-21T08:12:12Z", "author": "Prashant Nigam", "text": "This base condition is missing: \n        if (targetSum < 0)\r\n            return false;", "likes": 1}]}, {"topLevelComment": {"id": "Ugx06KPb-hkd5xS_6mJ4AaABAg", "publishedAt": "2021-05-01T00:05:09Z", "author": "Elegant Code", "text": "in grid traveler memoization problem, it is better to write if(m === 1 || n === 1) because once one of two dimensions is one, you only have one way", "likes": 0}}, {"topLevelComment": {"id": "UgzZBzmAjobZqswDqzh4AaABAg", "publishedAt": "2021-04-30T08:53:53Z", "author": "A Pall", "text": "This is gold! \nI was so desperate for this kind of DP video thanks man!", "likes": 0}}, {"topLevelComment": {"id": "UgzNnq2Bi7Ut3acqKjx4AaABAg", "publishedAt": "2021-04-30T01:55:23Z", "author": "Nishith Baravkar", "text": "Absolute masterpiece !! Thanks a LOT ALVIN", "likes": 0}}, {"topLevelComment": {"id": "UgxAlB0Z2J3Q_fMK3Tx4AaABAg", "publishedAt": "2021-04-30T00:25:17Z", "author": "Jerry Hung", "text": "For the grid problems. we know (m,n) = (n,m). If so, we should have key1 and key2 which are m,n and n,m. and this might save more time.", "likes": 0}}, {"topLevelComment": {"id": "UgwzYS1H9MwkL8NV34V4AaABAg", "publishedAt": "2021-04-29T16:29:17Z", "author": "Rajdeep Chakraborty", "text": "I bet those who disliked didn't understand dp well enough\ud83d\ude02", "likes": 1}}, {"topLevelComment": {"id": "UgxVuWpC_n35AtUxJAJ4AaABAg", "publishedAt": "2021-04-29T01:59:35Z", "author": "Daniel Rocha", "text": "You are awesome teaching complex stuff. What's your channel? I want more videos of you", "likes": 0}}, {"topLevelComment": {"id": "UgyBnXnryI5EkyxZAr54AaABAg", "publishedAt": "2021-04-28T15:56:45Z", "author": "Vijay Vadnal", "text": "I tried to write canSum functionality using C# I am getting false for every inputs that you have mentioned in your clip from 1:20, below is the code that I was trying to mimic in C#\n\n public static void Main()\r\n        {\r\n            CanSum(7, new int[] { 3, 4 });\r\n        }\r\n\r\n        public static bool CanSum(int target, int[] numbers)\r\n        {\r\n            if (target == 0) return true;\r\n            if (target < 0) return false;\r\n            foreach(int num in numbers)\r\n            {\r\n                int reminder = target - num;\r\n                if (CanSum(reminder, numbers)) return true;\r\n            }\r\n            return false;\r\n        }\n\ncan you please tell me why are we passing numbers integer array to the recursive function, because of this all the time reminder calculation is subtracting to the first number in array.", "likes": 0}, "replies": [{"id": "UgyBnXnryI5EkyxZAr54AaABAg.9MgIPdmj-0F9OHs11Ya7ny", "publishedAt": "2021-06-07T11:59:14Z", "author": "Juha Kaarlas", "text": "My implementation matches yours exactly (apart from not being static) and it returns true. I have a link to a GitHub repo containing C# implementations and test cases on my About page. I tried to drop it here but YT doesn't seem to like it.", "likes": 0}]}, {"topLevelComment": {"id": "UgyATgm_6LTTHGkJkVN4AaABAg", "publishedAt": "2021-04-28T10:18:31Z", "author": "N Liraj Khanna", "text": "Yo! in howSum Memoization, You returning null and '[ ]' what is the differnece and c++ people cannot do that i'm stuck with that problem can you help me?i can't differentiate this '[ ]' and null or return it respectively!", "likes": 0}, "replies": [{"id": "UgyATgm_6LTTHGkJkVN4AaABAg.9MfghJNpLPY9N2QFgD-Q1F", "publishedAt": "2021-05-07T15:27:50Z", "author": "erithion", "text": "Use std::optional with a vector in it", "likes": 1}]}, {"topLevelComment": {"id": "UgzH1uxKVSHIbHsXXk94AaABAg", "publishedAt": "2021-04-28T08:08:02Z", "author": "Donquixote Doflamingo", "text": "You might wanna change if (m == 1 && n == 1) to (m == 1 || n == 1) in gridTraveler. If the grid is left to a single dimension, there is only one possible way. And this reduce some steps.", "likes": 0}}, {"topLevelComment": {"id": "Ugzj7gB7ADbje4TJll14AaABAg", "publishedAt": "2021-04-27T16:58:43Z", "author": "Hrithik Sharma", "text": "any one please give source to pythonic solution's !!", "likes": 1}}, {"topLevelComment": {"id": "UgxpqDClTYkHl3Uo0g54AaABAg", "publishedAt": "2021-04-27T05:47:02Z", "author": "piyush verma", "text": "Maybe this algo expert gorll wanted a job at google.", "likes": 0}}, {"topLevelComment": {"id": "UgyO353jJAnmVmCGWwN4AaABAg", "publishedAt": "2021-04-26T11:20:59Z", "author": "Tursunali Kholdorov", "text": "Hey, you got a mistake on gridTraveler function. Your function retrurn 1 for any argument is one. i.e: gridTraverler(1,200) returns 1. Please fix it.", "likes": 0}, "replies": [{"id": "UgyO353jJAnmVmCGWwN4AaABAg.9MaeG750Dro9MbNq8ViNhF", "publishedAt": "2021-04-26T18:07:59Z", "author": "Tursunali Kholdorov", "text": "@I'm Here to help Oh, sorry it only counts the number of paths? I just thought it counts number of steps to reach the target.", "likes": 0}, {"id": "UgyO353jJAnmVmCGWwN4AaABAg.9MaeG750Dro9Mb93l5z2I2", "publishedAt": "2021-04-26T15:58:55Z", "author": "I'm Here to help", "text": "That's correct because there's only one path for a 1x200 grid.", "likes": 1}]}, {"topLevelComment": {"id": "UgxwP8p54mOnxJzkf4Z4AaABAg", "publishedAt": "2021-04-26T03:08:09Z", "author": "Sam R", "text": "Why is the height of the tree for grid traversal problem n + m?", "likes": 0}}, {"topLevelComment": {"id": "Ugxk4V7DHSyGk7YDQGF4AaABAg", "publishedAt": "2021-04-26T01:38:37Z", "author": "Isaac Michelsen", "text": "What I don't understand at 1:51:58 watching this for the first time is why we are settling for O(n*m^2) time and O(m^2) space; if the function ever returns an array, it will early return all the way up the tree without needing an array in the memo object.  This means we can have the memo object simple store a boolean that tells us that the return value for targetsum is null.  This lets us solve the problem in O(n*m+m^2) time and O(m) space.", "likes": 0}}, {"topLevelComment": {"id": "UgyjKRDg7cyjVRivHpx4AaABAg", "publishedAt": "2021-04-25T23:49:11Z", "author": "Daniel N", "text": "I have to admit that watching the array looping fibonacci solution @3:20:30 right now, i reeeeeaaaallllyyy dont feel comfortable with the array[i+1] and array[i+2] approach. This screams OutOfBounds so much with safety checks for it all over the place.\nWhy not just start at array[2] and do array[i] = array[i-1] + array[i-2]? This is so much safer as you can catch the case of fib(1) or below to default to 1 or 0 and compute the rest with the start as array[]={0,1,0,0....}\n\nI hope that I didnt miss the explanation given, as I watched it in one go and it is 1:50 already, aka beyond bed time :-)\n\nEdit:\nBeing at the GridTraveler @3:32:30 now, why not just go from table[0][0] = 1 instead as the column table[i][0] and row table[0][j] is always 0, this it is kinda wasted cycles. HOWEVER, if you start with table[0][0] = 1 like suggested before, you can loop up to i < n and j < m and thus do not have to do the if-checks for OutOfBounds safety, as they are inherent to the loop conditions. And to be honest, I kinda assumed that this was the whole reason to go for n+1 and m+1 array-size initializations in the first place when I saw it at the start.\n\nEdit2:\nSorry but the solution @3:52:20 really gives me goosebumps. The outmost loop should have iterated to i < table.length instead of i <= table.length to not run out of bounds there. After all, you run to i <= targetSum youself, with table[targetSum +1] and thus table.length = targetSum + 1. Therefor, running towards  i <= table.length goes 1 farther than i <= targetSum and thus OutOfBounds.\n\nFurthermore,  looping with i <= targetSum only just hides the next issue, the index for the table[i + num] insertion should have been caught properly. Imagine you are doing a canSum(10, [1, 2000000000]). Sure JS doesnt really seem to allocate all the space inbetween, but as this isnt just JS specific but rather a general coding course of sorts, it should have been written more in mind with consistency across all these other languages as well.\n\n\n\nAlso please dont get me wrong. Your video is awesome! It is pure gold and worth a lot. Most of the stuff I see here, I likely wouldnt have coded like that out of the box and I especially could not visualize it as great as you did!\n\nSo I am simply just \"nagging\" on a high level and kinda legit asking for my own understandings, in case I missed something myself.\n\nThat said, please dont feel let down in any way for this great content. It is lovely and great of you to publish such quality content for free! Thanks a lot =)", "likes": 1}}, {"topLevelComment": {"id": "UgzHwmqMK3TycKO3_fR4AaABAg", "publishedAt": "2021-04-25T19:53:40Z", "author": "Umair Shaikh", "text": "Fabulous \u2764\ufe0f", "likes": 1}}, {"topLevelComment": {"id": "UgwB49m3Li8Jwj1bPfl4AaABAg", "publishedAt": "2021-04-25T18:59:56Z", "author": "Umair Shaikh", "text": "\u2764\ufe0f", "likes": 1}}, {"topLevelComment": {"id": "Ugw4cbjUCPB_KpBQSPF4AaABAg", "publishedAt": "2021-04-25T09:08:51Z", "author": "Menard Francisco", "text": "Can I use this in Python?", "likes": 0}}, {"topLevelComment": {"id": "Ugz_ZQg3hfVgo2EJpmN4AaABAg", "publishedAt": "2021-04-25T07:46:12Z", "author": "Garon Hock", "text": "Alvin taught me how to program", "likes": 0}}, {"topLevelComment": {"id": "UgyDrn5CsduYDV6EpAx4AaABAg", "publishedAt": "2021-04-24T23:23:07Z", "author": "Anand Jain", "text": "Apart from the knowledge served, I also want to appreciate the work done to choose colours for slides. It works so perfect for both day and night mode.", "likes": 25}}, {"topLevelComment": {"id": "Ugw7R54dX9oo3gL8amd4AaABAg", "publishedAt": "2021-04-24T22:53:40Z", "author": "Sigweirt Sarlazahm", "text": "anyone else pissed of by the flickering video compression artifacts in this video?", "likes": 0}}, {"topLevelComment": {"id": "UgyPbL-LbbDVtCR4nIZ4AaABAg", "publishedAt": "2021-04-24T08:42:49Z", "author": "BeautyChauffeur", "text": "the best thing that i am watching today", "likes": 0}}, {"topLevelComment": {"id": "UgzjuSmrNd0PaHNFw6R4AaABAg", "publishedAt": "2021-04-24T07:18:26Z", "author": "Sergey Neskhodovskiy", "text": "Also, somewhat unrelated to the topic of this course but worth mentioning because it's often overlooked: Every time you add an \"if (x in memo)\" check you are essentially adding another O(n) stack inside of each of your recursive calls. Because in order to check if something is contained in a hashmap, the engine will have to go through that hashmap one by one. But because it happens \"under the hood\" (not in our code, but in the underlying programming language engine code) it easily evades attention during complexity analysis.\n\nOf course, it doesn't cancel the value of memoization overall, since as we see it still works well. But something to remember for the interview :)", "likes": 0}}, {"topLevelComment": {"id": "Ugz3wT847NkU5BSUrGN4AaABAg", "publishedAt": "2021-04-24T07:05:04Z", "author": "Sergey Neskhodovskiy", "text": "Anyone wanna try to solve the Travelling Salesman Problem using recursion and memoization now? ;)", "likes": 0}}, {"topLevelComment": {"id": "UgwxvU6r5cCNgDdLE514AaABAg", "publishedAt": "2021-04-23T19:41:04Z", "author": "Sai Praneeth Talluri", "text": "Seriously colleges are nothing but bullshit to take money and nothing in return... This guy is like the demigod for all the people who are facing difficulty in cracking ds algo interviews", "likes": 0}}, {"topLevelComment": {"id": "Ugzxl9fmXp2uiLatMCl4AaABAg", "publishedAt": "2021-04-23T18:06:39Z", "author": "Ismael VC", "text": "The first one: fib40() = 63245986  #  :)", "likes": 0}}, {"topLevelComment": {"id": "Ugy1MyD8kU1g13VC1B54AaABAg", "publishedAt": "2021-04-23T15:08:51Z", "author": "J: Sobev", "text": "thank god i find this", "likes": 0}}, {"topLevelComment": {"id": "UgztSJQKKjiEylyNwpR4AaABAg", "publishedAt": "2021-04-23T13:40:29Z", "author": "Nishad Kumar", "text": "Finally someone explaining DP the right way! Thanks guys. \ud83d\ude4f\ud83c\udffb", "likes": 0}}, {"topLevelComment": {"id": "UgziG4mvMES6ybTwYYl4AaABAg", "publishedAt": "2021-04-23T04:52:12Z", "author": "Miguel Ricardo Sobong", "text": "Just started, how'e the first problem's solution 2n? Shouldn't we account for the early exit so most likely isn't it 2(n-1)?", "likes": 0}}, {"topLevelComment": {"id": "Ugx1JguIRqIFFwzZeu14AaABAg", "publishedAt": "2021-04-22T16:12:33Z", "author": "JH", "text": "49:20  I'd be better to use OR instead of AND in your base case. You only need one value to be one to know there's only one way.\n(1,1)=(2,1)=...=(n,1)=(1,n) = 1\nThe same holds for 0:   \n(0,0)=(0,1)=(0,2)=...=(0,n)=(n,0) = 0\n\nYou'll never need the 0 case btw, unless you specifically call gridTraveler(0,b) or gridTraveler(a,0)", "likes": 0}}, {"topLevelComment": {"id": "Ugwm-RJnOi6brIdP04F4AaABAg", "publishedAt": "2021-04-22T11:03:35Z", "author": "Danielle Barker", "text": "You can actually further expand the base cases for the gridTraveler problem to have: if (n===1 || m===1) return 1.  When there is 1 row or 1 column there is always only one way to travel", "likes": 0}}, {"topLevelComment": {"id": "UgyQh-8GS9d0zoGOF_Z4AaABAg", "publishedAt": "2021-04-21T15:21:40Z", "author": "SALAH EDDINE", "text": "6:38 fibonacci(0)=0", "likes": 0}}, {"topLevelComment": {"id": "UgwbcQabljDOUuw7_sB4AaABAg", "publishedAt": "2021-04-21T08:04:44Z", "author": "Anushri H.V", "text": "Without a doubt THE BEST tutorial on DP!!", "likes": 0}}, {"topLevelComment": {"id": "UgzNI49boGyDlyeEEDx4AaABAg", "publishedAt": "2021-04-21T03:35:41Z", "author": "A google User", "text": "Quick info:\nJavaScript is not a prerequisite to this course", "likes": 29}}, {"topLevelComment": {"id": "Ugx0nbmEnW2KnnOBk-Z4AaABAg", "publishedAt": "2021-04-20T14:19:38Z", "author": "Carlos Santamaria", "text": "What should I know before watching this video? An specific topic or something like that", "likes": 0}}, {"topLevelComment": {"id": "UgwyTqHyLnEdirPrP2p4AaABAg", "publishedAt": "2021-04-20T04:46:34Z", "author": "Aayush Anand", "text": "Why is it called dynamic programming?", "likes": 1}}, {"topLevelComment": {"id": "UgxsPDr9LR3U7qT_qPF4AaABAg", "publishedAt": "2021-04-19T19:02:18Z", "author": "random thoughts", "text": "I kinda curious to know what type of peep dislike this masterpiece of a work.", "likes": 40}, "replies": [{"id": "UgxsPDr9LR3U7qT_qPF4AaABAg.9MKSUorhJC59PBbQ8mPVnS", "publishedAt": "2021-06-29T22:10:04Z", "author": "Azat Salikhov", "text": "I don't think anyone could give it 'thumbs down'. I dunno, but I get a feeling that YouTube fakes some of these ratings like the 'thumb downs'... hmmm", "likes": 2}, {"id": "UgxsPDr9LR3U7qT_qPF4AaABAg.9MKSUorhJC59OHrEZy9pMU", "publishedAt": "2021-06-07T11:52:20Z", "author": "Jodajazzjunky", "text": "other coding sites, you could of used recursion to figure that out lol!!!", "likes": 1}, {"id": "UgxsPDr9LR3U7qT_qPF4AaABAg.9MKSUorhJC59N1VuxqmMpn", "publishedAt": "2021-05-07T06:58:03Z", "author": "Piyush Borse", "text": "They are college teachers \ud83d\ude06.", "likes": 13}]}, {"topLevelComment": {"id": "UgxX-E80Em6n6yK8H894AaABAg", "publishedAt": "2021-04-19T06:55:39Z", "author": "Siddhant Pathak", "text": "Fellow Learners!! How necessary is it to know JavaScript to actually grasp everything in this video? I know only python, should I commence this??", "likes": 0}}, {"topLevelComment": {"id": "UgxktpRQbNFGzFbGe8Z4AaABAg", "publishedAt": "2021-04-18T23:12:16Z", "author": "encode decode", "text": "sous title  ??", "likes": 0}}, {"topLevelComment": {"id": "Ugxwk9YnE8aV7LrCF-p4AaABAg", "publishedAt": "2021-04-18T16:39:24Z", "author": "Haneef Saeed", "text": "c++ code i implemented for some of the problems:\n\n#define ll long long\nint dp[DP_MAX];\nint cc = 0;\n\n\nll fib(ll n) {\n\tcc++;\n\tif(dp[n] == -1)\n\tif (n<= 1) {\n\t\treturn  n;\n\t}\n\telse\n\t\treturn dp[n] = fib(n - 1) + fib(n - 2);\n\treturn dp[n];\n}\n\nbool canSum(int x, int a[], int s) {\n\tcc++;\n\tif (dp[x] != -1) return dp[x];\n\n\tif (x == 0)\n\t\treturn true;\n\tif (x < 0) \n\t\treturn false; \n\tfor (int i = 0; i < s; i++) {\n\t\t\tauto remain = x - a[i];\n\t\t\tif (canSum(remain, a, s) == true) {\n\t\t\t\tdp[x] = 1;\n\t\t\t\treturn true; \n\t\t\t}\n\t\t}\n\n\tdp[x] = 0;\n\treturn false;\n}\n\nunordered_map<int, vector<int>> hsdp;\nvector<int> howSum(int x, int a[], int s) {\n\tcc++;\n\tif (hsdp.find(x) != hsdp.end()) return hsdp[x];\n\tif (x == 0) { return vector<int>(1); }\n\tif (x < 0) { return vector<int>(); }\n\tfor (int i = 0; i < s; i++) {\n\t\tint d = x - a[i];\n\t\tauto t = howSum(d, a, s);\n\t\tif (t.size()!=0) {\n\t\t\t\tt.push_back(a[i]);\n\t\t\t\tif (t[0] == 0) {\n\t\t\t\t\tt.erase(t.begin());\n\t\t\t\t}\n\t\t\t\thsdp[x] = t;\n\t\t\t\treturn t;\t\n\t\t}\n\t}\n\thsdp[x] = vector<int>();\n\treturn hsdp[x];\n}\n\nvector<int> bestSum(int x, int a[], int s) {\n\tcc++;\n\tif (hsdp.find(x) != hsdp.end()) return hsdp[x];\n\tif (x == 0)\treturn vector<int>(1);\n\tif (x < 0) return vector<int>();\n\n\tvector<int> best;\n\tfor (int i = 0; i < s; i++) {\n\t\tint diff = x - a[i];\n\t\tauto comb = bestSum(diff, a, s);\n\t\tif(comb.size() != 0){\n\t\t\tcomb.push_back(a[i]);\n\t\t\tif (comb[0] == 0) {\n\t\t\t\tcomb.erase(comb.begin());\n\t\t\t}\n\t\t\tif (best.size() == 0 || comb.size() < best.size()) {\n\t\t\t\tbest = comb;\n\t\t\t}\n\t\t}\n\t}\n\thsdp[x] = best;\n\treturn best;\n}\n\nint main(){\nmemset(dp, -1, sizeof(dp));\n\tint n = 100;\n\tint a[] = { 1,2, 5, 25 };\n\tint s = sizeof(a) / sizeof(a[0]);\n\t//canSum(300, a, 2) ? cout << \"TRUE\\n\" : cout << \"FALSE\\n\";\n\t//vector<int> i = howSum(3000, a, 2);\n\t//auto i = bestSum(n, a, s);\n\t\n\t/*for (auto x : i) {\n\t\tcout << x << \" \";\n\t}*/\nreturn 0;\n}", "likes": 0}}, {"topLevelComment": {"id": "UgyTiSsSJv4DutN6nV54AaABAg", "publishedAt": "2021-04-18T06:53:19Z", "author": "Adebayo Mayowa", "text": "This is the best video I have watched so far on dynamic programming!  I never thoiught that DP could be this powerless. But in my school we are only allowed to use C++ and i can't find a way to apply the memo object you used here, in C++ and it is a very important step. Do you know how please?", "likes": 0}, "replies": [{"id": "UgyTiSsSJv4DutN6nV54AaABAg.9MG_GdX0h_Q9TUJ23Hvxn9", "publishedAt": "2021-10-14T14:31:54Z", "author": "David Rebatto", "text": "In C++ you cannot use the implicit polymorphism because you cannot pass the temporary-valued empty map as a default parameter.\nStill, you can make the polymorphism explicit:\n\n#include <map>\n#include <string>\ntypedef unsigned long long int travelcount_t;\ntypedef std::map<std::string, travelcount_t> memo_t;\n\ntravelcount_t gridTraveler(const size_t n, const size_t m, memo_t &memo) {\n  ...\n}\n\ntravelcount_t gridTraveler(const size_t n, const size_t m) {\n  memo_t memo = {}; // this requires C++11 afair\n  return gridTraveler(n, m, memo);\n}", "likes": 0}]}, {"topLevelComment": {"id": "UgwAYroGiqaLkUO8jd94AaABAg", "publishedAt": "2021-04-17T21:58:11Z", "author": "Philippe Tremblay", "text": "57:30 You can use an array for the key, which will be converted to a string, basically giving the same result. You can then access the value by passing an array as well.", "likes": 1}}, {"topLevelComment": {"id": "UgyDbdtTOAPW7omDyrV4AaABAg", "publishedAt": "2021-04-17T16:00:18Z", "author": "Micha\u0142 Szewczyk", "text": "I managed to reduce complexity of bestSum (1:52:06) algorithm to:\n- time complexity: O(m * n) \n- space complexity: O(m)\nby doing the following:\n- using hash map as a memo, where key is sum from current node, value is sum from parent node in tree\n- using BFS to walk the tree, to ensure that the shortest path will be used\nSample implementation:\nhttps://github.com/MichalSzewczyk/algorithms/blob/master/src/main/java/com/algo/dp/BestSum.java", "likes": 1}}, {"topLevelComment": {"id": "Ugx6qXrpSIqqkEltgjl4AaABAg", "publishedAt": "2021-04-17T13:37:23Z", "author": "ssandeep79", "text": "Definitely, one of the best courses to start with DP. Just started with the tabulation approach and, decided to attempt it after watching the initial explanation. But decided to follow a different approach as below:\ndef fibDPTabulation(position):\n    if position <= 1: return 1\n    table = list()\n    table = [0 for i in range(0, position+1)]\n    table[1] = 1\n    \n    length = len(table)\n    for i in range(2, length):\n        table[i] = table[i-2] + table[i-1]\n    \n    return table[position]\nThe approach uses the same logic as the basic looping approach but uses an extra list/array for the purpose of keeping track of the calculations.", "likes": 14}, "replies": [{"id": "Ugx6qXrpSIqqkEltgjl4AaABAg.9MEiiEMaBhB9XgvJuOSAga", "publishedAt": "2022-01-27T07:30:50Z", "author": "Vedran \u010ca\u010di\u0107", "text": "Yeah, I wondered that too, why he's doing forward tabulation instead of backward one. But for the later problems with strings, it really makes much more sense to think forward, so he just wanted to establish consistent practice.", "likes": 1}]}, {"topLevelComment": {"id": "UgwrMfcsi3KHN-sss154AaABAg", "publishedAt": "2021-04-16T19:05:44Z", "author": "SanAmm", "text": "Did anybody tried to do the algorithms in python?\nThe canConstruct and  countConstruct are not working for me and I am stuck.", "likes": 0}}, {"topLevelComment": {"id": "Ugwh4xz4EWOTMNorrh54AaABAg", "publishedAt": "2021-04-15T16:29:42Z", "author": "JSimba", "text": "Rather than spreading the array and picking up a copying cost, can we not just use a stack and simply push to it to save on time complexity for howSum?", "likes": 0}}, {"topLevelComment": {"id": "UgxlbBYlhv8znwO95gl4AaABAg", "publishedAt": "2021-04-15T09:43:58Z", "author": "MAD-DOG CHUCK", "text": "dis C#?", "likes": 0}}, {"topLevelComment": {"id": "UgxKeCvWO-LGoOGcjEl4AaABAg", "publishedAt": "2021-04-13T22:35:41Z", "author": "Roman Zelinskyi", "text": "The best Dynamic Programing course I've had so far, thanks a lot for the best teacher.", "likes": 11}, "replies": [{"id": "UgxKeCvWO-LGoOGcjEl4AaABAg.9M5O8KmF66b9V7eTMk1XQJ", "publishedAt": "2021-11-24T12:28:07Z", "author": "veipunii lana", "text": "which pograming language are you uisng for coding? \r\nIf you are using java can i ask you some questions?", "likes": 0}]}, {"topLevelComment": {"id": "UgwJdwOQtE1D9quV1Vx4AaABAg", "publishedAt": "2021-04-13T01:17:31Z", "author": "Very Pog Orca", "text": "Hello my program's not working, I see no difference between my code and theirs. \nconst bestSum = (targetSum, numbers) => {\n    if (targetSum == 0) {\n        return []\n    } \n    if (targetSum < 0) {\n        return null\n    }\n    let shortestCombination = null\n    for (let num of numbers) {\n        const remaining = targetSum - num\n        const remainderCombination = bestSum(remaining, numbers)\n        if (remainderCombination !== null ) {\n            const combination = [...remainderCombination, num]\n            if (shortestCombination === null || combination.length < shortestCombination.length) {\n                shortestCombination = combination\n            }\n        }\n        \n    }\n}\nconsole.log(bestSum(8, [1,2,3]))", "likes": 0}, "replies": [{"id": "UgwJdwOQtE1D9quV1Vx4AaABAg.9M35rqB7QeD9M35sfprKm8", "publishedAt": "2021-04-13T01:17:38Z", "author": "Very Pog Orca", "text": "node js", "likes": 0}]}, {"topLevelComment": {"id": "UgxzmaRmjgWAIsXuIiV4AaABAg", "publishedAt": "2021-04-12T16:55:10Z", "author": "Aryan Kumar", "text": "Any ways to do the all construct code using c++", "likes": 0}}, {"topLevelComment": {"id": "UgytGk0a-bsZmziu0fx4AaABAg", "publishedAt": "2021-04-12T13:41:03Z", "author": "nayan dhabarde", "text": "Can you make one for greedy algorithms. There is so much less content and information on youtube for it", "likes": 2}}, {"topLevelComment": {"id": "UgwfZdGhtV2RtI03RHN4AaABAg", "publishedAt": "2021-04-12T08:44:32Z", "author": "los", "text": "I can't believe we're getting this sort of quality content for FREE", "likes": 27}}, {"topLevelComment": {"id": "UgzOTKz3wS9LbwXZvK54AaABAg", "publishedAt": "2021-04-12T06:54:27Z", "author": "nayan dhabarde", "text": "I did a course from Udacity, this is much better and so easy to understand", "likes": 0}}, {"topLevelComment": {"id": "Ugwi33UEUArnUAClY2F4AaABAg", "publishedAt": "2021-04-12T05:07:06Z", "author": "Saibaba Alapati", "text": "Well Done. Thank you for your contribution.", "likes": 0}}, {"topLevelComment": {"id": "UgzkB3NDJLFconaoAKd4AaABAg", "publishedAt": "2021-04-11T14:00:24Z", "author": "Pendyala Abhishek", "text": "I need c++ solution .", "likes": 1}}, {"topLevelComment": {"id": "Ugw_iVZFyRHPzj1ZZtB4AaABAg", "publishedAt": "2021-04-10T00:29:37Z", "author": "\u0130slam Aydo\u011fmu\u015f", "text": "Dude that animations are AWESOME. I wan't to make some education videos about mathematics. Mind if I asked what program or programming language did you use to make those?", "likes": 0}}, {"topLevelComment": {"id": "UgyEoj4MnKv2829D0HV4AaABAg", "publishedAt": "2021-04-09T22:04:20Z", "author": "Bilal Az", "text": "Thanks a lot, never seen before explanation with nodes n edges \n\nAt 47:43, right most bottom node should be (2,0)", "likes": 0}}, {"topLevelComment": {"id": "UgwlWisr3lXWlDYpEm54AaABAg", "publishedAt": "2021-04-09T21:26:09Z", "author": "Albert Zakhia", "text": "Ok, I am just guessing here by just reading the code. In the howsum, we understand only 1 result is to be returned, no matter which. This means when and if a result is found, we will be winding back the top of the stack and exit the function. This means:\n1. the statement 'if (targetSum in memo) return memo[targetSum]' will only happen for null branches, that is branches not yielding a value. This means  'if (targetSum in memo) return memo[targetSum]' is the same as 'if (targetSum in memo) return false;' This also means that once we find a branch yielding a value, the function will no longer venture into other branches, hence no more null values will propagate.\n2. Once we find a summable combination, we can save space by return just the array and not adding the array into the memo. There is no longer a need to memoize it as we are going fully back to the top of the stack and exit, we will no longer be testing other branches. So instead of memoizing and lose resources:\n        memo[targetSum] = [ ...remanderResult, num];\n        return memo[targetSum];\nWe can just return [ ...remanderResult, num]; \nDoing the above modifications will prove much faster yet using much less space.\nFor the positive branches, if i recall well my math, we move from O(n), number of elements to store positive arrays, to O(1) meaning only 1 value is needed.", "likes": 0}, "replies": [{"id": "UgwlWisr3lXWlDYpEm54AaABAg.9Lvy-Z4CJNa9M6XgbmEjky", "publishedAt": "2021-04-14T09:18:23Z", "author": "Henry Fajardo", "text": "@Albert Zakhia Just realized I had replied to two of your comments haha. I always like to check out comment sections in these types of videos as they are usually full of interesting concepts or different perspectives on the video content.", "likes": 1}, {"id": "UgwlWisr3lXWlDYpEm54AaABAg.9Lvy-Z4CJNa9M1sPFnTy6O", "publishedAt": "2021-04-12T13:51:54Z", "author": "Albert Zakhia", "text": "@Henry Fajardo Thank you for reading the comments and following up on the discussions. \nRegardless of my comments to the videos, I believe this is a work well done and Alvin Zablan has done a wonderful job.", "likes": 0}, {"id": "UgwlWisr3lXWlDYpEm54AaABAg.9Lvy-Z4CJNa9M11xi7o9LN", "publishedAt": "2021-04-12T06:04:53Z", "author": "Henry Fajardo", "text": "This is correct, it is not necessary to store any arrays at all since a positive result (i.e reaching a zero) will be encountered at most once, and every node in that path with only be visited once", "likes": 1}]}, {"topLevelComment": {"id": "Ugxe_6PrgnWc72K6-UV4AaABAg", "publishedAt": "2021-04-09T20:30:41Z", "author": "Albert Zakhia", "text": "Hi again. For the CanSum, starting with a targetSum of 0 will always return true regardless of the array elements, which is incorrect. \ncanSum(0, [any values]) --> true", "likes": 0}, "replies": [{"id": "Ugxe_6PrgnWc72K6-UV4AaABAg.9LvreI-gcJA9M6XFh9RFGV", "publishedAt": "2021-04-14T09:14:34Z", "author": "Henry Fajardo", "text": "@Albert Zakhia yeah, I understand that point of view. For the context of these problems however you need to assume 0 is the trivial solution (i.e don't need to consider values from the array as it is always true/possible) same as when dealing with strings you need to assume the empty string to be the trivial solution in that case. The reason for this is that these base cases will always be reached at some point (if there is a solution ofc), and to solve the function call with target 0 or the empty string some sort of assumption must be made otherwise the search will fail at his last step. Using the same logic of \"the sum of nothing is nothing\" you also need to use the convention of \"nothing in numbers is the same as 0\" and \"nothing in strings is the same as the empty string\", which would mean 0 and the empty string are always in the solution set for any given array.", "likes": 0}, {"id": "Ugxe_6PrgnWc72K6-UV4AaABAg.9LvreI-gcJA9M1rYbZ23qk", "publishedAt": "2021-04-12T13:44:27Z", "author": "Albert Zakhia", "text": "@Henry Fajardo I can agree and disagree, it depends on how you look at it. From my side, the sum of nothing is nothing, not 0. 0 is a valid number, as any other.. it is more about concept..", "likes": 0}, {"id": "Ugxe_6PrgnWc72K6-UV4AaABAg.9LvreI-gcJA9M10o4DJVC6", "publishedAt": "2021-04-12T05:54:50Z", "author": "Henry Fajardo", "text": "He explains this case in the howSum portion of the video. \n\nBasically you can always sum to 0 by not choosing any elements from the array, and with this assumption canSum(0, [any values]) is always true", "likes": 1}]}, {"topLevelComment": {"id": "UgxE29rz6G6Ka70sfax4AaABAg", "publishedAt": "2021-04-09T19:42:59Z", "author": "Albert Zakhia", "text": "Hi. In the gridtraveller, at 58:00, we know (and you said it) that count for grid[m,n] is the same as count for grid[n,m], but I don't see this reflected in the code. Did i miss something?  If we don't find the cached value of [m,n] shouldn't we add two keys instead of one? \nkey1 = m + ',' + n\nkey2 = n + ',' + m\n...\nresult = gridtraveller(m - 1, n, memo) + gridtraveller(m, n - 1, memo)\nmemo[key1] = result\nmemo[key2] = result\nreturn result", "likes": 0}}, {"topLevelComment": {"id": "Ugxhq8nl0UCSrpR_TOJ4AaABAg", "publishedAt": "2021-04-09T13:55:52Z", "author": "Crafty Code", "text": "I want to say that the term \"Dynamic Programming\" here is wired! The first time I heard of this term was years ago Amazon held an interview at a hotel in Shenzen, the interviewer asked this to me. Years later, when I was solving an algorithm for a client, the description reminds me of that term. This time I heard of it from you. I want to say that those people are selling the made up concept over something already existed in computer science for really really long time!!! If you know LZW algorithm, which is built upon a dictionary for compression. Which is 'dynamically' building the dictionary, and use it for further data processing (compressing). This was not new in algorithms (programming). Named it a 'Dynamic Programming' feels like refurbishing the old concept with a new name and selling it in the market (of human resource). Actually that was not a programming model, but a type of algorithms instead. That was confusing!! When we talk about programming, it was about a paradigm of programming, which very different from an algorithm!!", "likes": 1}, "replies": [{"id": "Ugxhq8nl0UCSrpR_TOJ4AaABAg.9Lv9TgHkHES9Lyj6B5lO4Y", "publishedAt": "2021-04-10T23:13:42Z", "author": "Crafty Code", "text": "And please check my coding channel too, I made a video explaining this.", "likes": 0}]}, {"topLevelComment": {"id": "UgzCfHdY8GOlVL1m0lV4AaABAg", "publishedAt": "2021-04-09T09:52:47Z", "author": "ZtrixX", "text": "In bestSum problem:-\nWhy it doesn't return empty arr ([]) as the smallest result?\nI am new to recursion, so please help!", "likes": 0}}, {"topLevelComment": {"id": "UgxG4zjvbj61SU_Elzl4AaABAg", "publishedAt": "2021-04-09T04:02:29Z", "author": "Lucas Guns", "text": "This is one of the best lectures out there, no cap", "likes": 1}}, {"topLevelComment": {"id": "UgzBVTk9wA0YfpVaxQV4AaABAg", "publishedAt": "2021-04-07T18:15:30Z", "author": "Zachary Shifrel", "text": "Great stuff", "likes": 0}}, {"topLevelComment": {"id": "UgyJULRlwn2iYk2tRdR4AaABAg", "publishedAt": "2021-04-07T10:17:55Z", "author": "Physixtential", "text": "lineeeeeeer", "likes": 0}}, {"topLevelComment": {"id": "Ugzd4I552M9Tz7P8qyN4AaABAg", "publishedAt": "2021-04-07T10:02:12Z", "author": "Physixtential", "text": "This has a great pace and clarity, but for god sake, count the number of times you said \"sort of\", \"kind of\", etc, when they were totally unnecessary and in fact untrue. 99.9% of the time when you say this, your statement is exactly true, not sort of true or kind of true or almost true or maybe true or roughly true or... Get the point? You used all of these nearly every sentence. It gets really wearing and reduces clarity. In the few cases where you say these to avoid comments about niche technicality, it still isn't worth saying. It just makes everything you say harder to track.\nThe reason this is so irritating is that you are basically one easy step away from perfection here.", "likes": 0}}, {"topLevelComment": {"id": "Ugwzr9x2htEckmIoq0d4AaABAg", "publishedAt": "2021-04-06T10:51:00Z", "author": "Vladyslav Karasov", "text": "This is amazing! Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgySWEYPrScLL4-Mo114AaABAg", "publishedAt": "2021-04-05T22:17:56Z", "author": "Hendrix Gryspeerdt", "text": "Oh, btw, combinatorics approach to grid traveler problem is a lot faster. 4-5 times faster (34x34 grid).", "likes": 0}}, {"topLevelComment": {"id": "UgwzlfeUQsfSj92DKYx4AaABAg", "publishedAt": "2021-04-05T21:35:59Z", "author": "Hendrix Gryspeerdt", "text": "for the grid traveler, can't you also say that if m or n equal 1 then the result is 1? ex: in a 10x1 grid there is only 1 path since you can only move one way.", "likes": 0}}, {"topLevelComment": {"id": "Ugw4atxATscKexJk1oN4AaABAg", "publishedAt": "2021-04-05T20:56:33Z", "author": "ph\u1ea1m anh", "text": "For those confused about the space complexity of the gridTraveler problem, here's why. Space is O(m + n) because the height of the tree is m or n, whichever is larger, either of which will be less than O(m + n). The height of the tree is m or n because at each level, we are decreasing m or n by 1", "likes": 0}}, {"topLevelComment": {"id": "UgzHRuz1Rf6oUJ7rCbp4AaABAg", "publishedAt": "2021-04-05T12:18:53Z", "author": "VIKAS KUMAR", "text": "Could anyone please explaine me why the following C++ program doesn't work? (It's equivalent to the JavaScript program of the author #freecodecamp.org)\n#include \"bits/stdc++.h\"\n\nusing namespace std;\n\n\nint countConstruct(string target, vector<string> wordBank, map<string, int> memo = {})\n\n{\n\nif (memo.find(target) != memo.end())\n\nreturn memo.at(target);\n\nif (target == \"\")\n\nreturn 1;\n\nint totalCount = 0;\n\nfor (auto word : wordBank)\n\n{\n\nif (target.find(word) == 0)\n\n{\n\nauto suffix = target.substr(word.length(), target.length() - word.length());\n\nint numWaysForRest = countConstruct(suffix, wordBank, memo);\n\ntotalCount += numWaysForRest;\n\n}\n\n}\n\nmemo[target] = totalCount;\n\nreturn totalCount;\n\n}\n\n\nint main(int argc, char *argv[])\n\n{\n\ncout << boolalpha;\n\ncout << countConstruct(\"abcdef\", {\"ab\", \"abc\", \"cd\", \"def\", \"abcd\", \"ef\"}) << endl;\n\ncout << countConstruct(\"skateboard\", {\"bo\", \"ska\", \"ate\", \"sk\", \"boar\"}) << endl;\n\ncout << countConstruct(\"eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\", {\"e\", \"eee\", \"eeee\", \"eeeee\", \"eeeeee\", \"eeeeeee\"}) << endl;\n\nreturn 0;\n\n}", "likes": 0}, "replies": [{"id": "UgzHRuz1Rf6oUJ7rCbp4AaABAg.9LkgBosfyQC9LlC5RHVxKm", "publishedAt": "2021-04-05T17:06:22Z", "author": "Rashi Gupta", "text": "Maybe because you are not passing the map as a reference... was this method working for canConstruct problem?", "likes": 0}]}, {"topLevelComment": {"id": "Ugxqr4Zz3l2m_Oqg4Nx4AaABAg", "publishedAt": "2021-04-05T01:04:30Z", "author": "En_CODED", "text": "if you look at those word problems youll see 'sequence' and 'find different ways' or 'best ways to'' of sub....   so problems looking for a PATTERN from a list or group of things...", "likes": 0}}, {"topLevelComment": {"id": "Ugy8Cwt8uTHKttLsb0N4AaABAg", "publishedAt": "2021-04-04T20:18:10Z", "author": "Robert", "text": "change line 3 in 01:28:32 to if(memo[targetSum]) return memo[targetSum]; for it to be faster", "likes": 0}}, {"topLevelComment": {"id": "UgxXLvTUN1O2o4VNDuh4AaABAg", "publishedAt": "2021-04-04T15:13:51Z", "author": "JDalmasca", "text": "Pretty sure your gridTraveler algorithm can be sped up slightly even beyond this implementation.  If *either* dimension is 1, you hit an edge, and there's only one route left to traverse to the finish.\nReplace this:\nif(m === 1 && n === 1) return 1;\nWith this:\nif(m ===1 || n === 1) return 1;", "likes": 0}}, {"topLevelComment": {"id": "UgwwiZVuyVXpGt4Xm114AaABAg", "publishedAt": "2021-04-04T08:55:04Z", "author": "Andreas Rosenqvist", "text": "Curious about the mistake at 1:00:47. Is that somekind of a function overload? I am mostly coding in C-languages, but here you're able to pass in the wrong number of arguments and still it runs. How does that work?", "likes": 0}, "replies": [{"id": "UgwwiZVuyVXpGt4Xm114AaABAg.9Lhk4A_DKAt9M14ahRcXtj", "publishedAt": "2021-04-12T06:27:58Z", "author": "Henry Fajardo", "text": "since a value isn't specified it uses the default value in the function's definition which is an empty memo, meaning it wouldn't memoize at all since every call works with a new empty memo object", "likes": 0}]}, {"topLevelComment": {"id": "UgwqoexS9zoW6wgv-ct4AaABAg", "publishedAt": "2021-04-04T06:25:58Z", "author": "Jonathan Argumedo", "text": "I finally finished the video after a week :) Very cool video, thank you very much. This helped a lot!! I'm sure it will come in handy for my upcoming interview <3", "likes": 0}}, {"topLevelComment": {"id": "Ugz3Fp66SNFDI3Cs6MB4AaABAg", "publishedAt": "2021-04-04T04:51:34Z", "author": "Undergrad Algo", "text": "Can any one please link the problems to practice hands on", "likes": 0}}, {"topLevelComment": {"id": "Ugy2Xm1qroM6sdwhe614AaABAg", "publishedAt": "2021-04-02T17:28:26Z", "author": "Amir Daneshmand", "text": "I learned a lot from this even though my prog language is Python. Bravo!", "likes": 0}}, {"topLevelComment": {"id": "UgyNfbnBUWByzLEUwo54AaABAg", "publishedAt": "2021-04-02T04:27:26Z", "author": "Darth Vader", "text": "Best Dynamic Programming series ever to be made", "likes": 0}}, {"topLevelComment": {"id": "UgzSRuTXetCWplJsWsN4AaABAg", "publishedAt": "2021-04-02T01:45:50Z", "author": "ahmed razzak", "text": "The best video about dynamic programming and recursion it\u2019s like I had a huge gap in my knowledge and you just filled it thank you you\u2019re a great teacher", "likes": 1}}, {"topLevelComment": {"id": "Ugz2IwlJDgFREwX0ymF4AaABAg", "publishedAt": "2021-04-01T19:38:29Z", "author": "Mahira Modi", "text": "1:19:52 is he not incorrect in getting true for case canSum(7,[2,3])  can anyone please clear my doubt", "likes": 0}, "replies": [{"id": "Ugz2IwlJDgFREwX0ymF4AaABAg.9LbAK24F4MZ9M4GP-IPvsc", "publishedAt": "2021-04-13T12:08:48Z", "author": "Nerissa Monroe", "text": "@Mahira Modi any time \ud83d\ude0a", "likes": 1}, {"id": "Ugz2IwlJDgFREwX0ymF4AaABAg.9LbAK24F4MZ9Lf7JaOvmk8", "publishedAt": "2021-04-03T08:29:10Z", "author": "Mahira Modi", "text": "@Nerissa Monroe thank you soo much you explained it really well thank a lot fo the help", "likes": 1}, {"id": "Ugz2IwlJDgFREwX0ymF4AaABAg.9LbAK24F4MZ9LeEV6nUNo_", "publishedAt": "2021-04-03T00:12:40Z", "author": "Nerissa Monroe", "text": "He\u2019s not wrong because 2+2+3 is 7\n\nIn the constraints, it was stated that numbers in the array could be duplicated to reach the targetSum", "likes": 1}]}, {"topLevelComment": {"id": "UgwvkMLDxihNlVKk-jN4AaABAg", "publishedAt": "2021-04-01T03:05:00Z", "author": "Shynggys Kassen", "text": "is this guy using VIM for vscode?", "likes": 1}}, {"topLevelComment": {"id": "UgyZ5KO8PC-IobGQuhV4AaABAg", "publishedAt": "2021-03-31T13:56:13Z", "author": "GR", "text": "2:13:53", "likes": 0}}, {"topLevelComment": {"id": "UgzYICtXERNZ9hNrI9J4AaABAg", "publishedAt": "2021-03-31T12:13:33Z", "author": "Tony", "text": "Great great teacher, very calm in his explanations. Easy to listen to", "likes": 0}}, {"topLevelComment": {"id": "UgxP21C616jLsIS00A94AaABAg", "publishedAt": "2021-03-30T22:41:50Z", "author": "qantum251", "text": "Great content, I hate to say it...nowadays it has become really hard to find a well structured course well articulated, recorded by a native speaker. Just focusing on  ideas  and concepts, comfortable to follow, thank you.", "likes": 0}, "replies": [{"id": "UgxP21C616jLsIS00A94AaABAg.9LXLiE7a0Ed9YffAHLuI12", "publishedAt": "2022-02-20T16:21:51Z", "author": "Jack Alope", "text": "Indians are often native speakers, they just speak a different standard version of English than most of the anglophone world.", "likes": 0}]}, {"topLevelComment": {"id": "UgwUrP2dCiqJPdrHhU94AaABAg", "publishedAt": "2021-03-30T07:41:09Z", "author": "Mohamed kalanthar hussain jaheer usain", "text": "1:29:57\nHello My fellow geeks  I convert howSum problem in my way it will return same howSum in O(n*m) times.,I think this one is better than O(n*m**2) times..\nHere it is solution..\n\ndef howSum(listValue,target):\n    table=[[[] for _ in range(target+1)] for item in range(len(listValue))]\n    for i in range(len(listValue)):\n        substitudeValue=listValue[i]\n        for j in range(target+1):\n            if listValue[i]==j:\n                table[i][j].append(listValue[i])\n            elif listValue[i]!=j:\n                table[i][j].append(0)\n            \n            sumValue=sum(table[i][j-listValue[i]])\n            if sumValue+listValue[i]==j and listValue[i]!=j:\n                table[i][j]= table[i][j-listValue[i]]+[listValue[i]]\n            else:\n                if i!=0:\n                    table[i][j]=table[i-1][j]\n                \n    print(table)\nlistValue ,target=[2,3],7\nprint(howSum(listValue ,target))\n\n\nplease someOne explain if it is wrong \n\nThank you", "likes": 0}}, {"topLevelComment": {"id": "UgzyvM_wBJFF79H1nQB4AaABAg", "publishedAt": "2021-03-29T23:50:23Z", "author": "Aymen BEN", "text": "@3:20:22 when i gets to n, wouldn't table[i+2] be outside of the table boundary?\nCould you also use startsWith() instead of slice for a simpler code maybe?", "likes": 0}, "replies": [{"id": "UgzyvM_wBJFF79H1nQB4AaABAg.9LUtlJV_rp49OXmNMTVJsR", "publishedAt": "2021-06-13T16:17:42Z", "author": "Alptraum", "text": "Yes it would be. I guess JavaScript does not throw an error but many other languages definitely will. An easy fix is to create the table with n+2 length.", "likes": 0}]}, {"topLevelComment": {"id": "UgzPGc36XUYHj2pBvuF4AaABAg", "publishedAt": "2021-03-29T10:23:29Z", "author": "Sang Nguyen", "text": "Thank you very much, this tutorial is awesome.", "likes": 0}}, {"topLevelComment": {"id": "Ugw52BjgBSYkNvsxvB94AaABAg", "publishedAt": "2021-03-29T05:12:04Z", "author": "RANDY WEST", "text": "Really good lecture but target.slice(word.length) dose not copy one chanter at a time nor dose [ ...solution, num] do a single move for every element in the array,. when determining the complexity of a solution you need to be aware of how the compiler/interpreter is likely to optimize your code", "likes": 0}}, {"topLevelComment": {"id": "UgxWwhNxsobDlt7D5y14AaABAg", "publishedAt": "2021-03-28T22:00:45Z", "author": "mateiacd", "text": "What is the editor you are using ?", "likes": 0}}, {"topLevelComment": {"id": "UgxdEvINVS59f47tVXl4AaABAg", "publishedAt": "2021-03-28T19:57:02Z", "author": "GADORCHA", "text": "This is amazing content, thank you very much", "likes": 0}}, {"topLevelComment": {"id": "Ugzcjnahzzu_7GSmLXx4AaABAg", "publishedAt": "2021-03-28T14:07:51Z", "author": "Nadia Afanaseva", "text": "Thank you so much for this course, Alvin! It really moved me forward to the understanding of DP problems. \nCan anyone share the information about Python tip&trics in this area?", "likes": 0}}, {"topLevelComment": {"id": "Ugw_Fuk6rmvJ6s741wN4AaABAg", "publishedAt": "2021-03-28T12:39:40Z", "author": "Manish G", "text": "At 1:04:04 ..though we ignore constants in Big-O analysis, shouldn't the number of operations be m*n/2 as if memoization has m, n key then it would be used for n, m key too...", "likes": 0}}, {"topLevelComment": {"id": "UgwMW5pKFToxXd8vi9x4AaABAg", "publishedAt": "2021-03-27T16:18:02Z", "author": "Jonathan Argumedo", "text": "Alright, I'm 30 min in to the video. It's really amazing, thank you for this amazing video, it really helped a lot. Also, I actually used freeCodeCamp to learn JS a while back ago. So glad to see this channel grow!!", "likes": 0}}, {"topLevelComment": {"id": "UgzKdRhYeJglsmMEyF94AaABAg", "publishedAt": "2021-03-27T13:22:15Z", "author": "YUVARAJAN M", "text": "I have a doubt in time space complexity  in howsum without memo we store an array of size m in worst case, and we have m function calls then  if each function calls store an array of size m then how the space complexity will be O(m) instead of O(m^2) can anyone help me.", "likes": 1}}, {"topLevelComment": {"id": "Ugwr-it6-5t4IU3s_s54AaABAg", "publishedAt": "2021-03-27T08:47:00Z", "author": "Shaurya Gautam", "text": "Will the time complexity remain O(n*m) if I am using C++ for howSum memoization?? Cz I'm not returning array... I have kept it global. And also will the space be O(m) ??", "likes": 0}}, {"topLevelComment": {"id": "Ugxlcprlq4ijx495KT54AaABAg", "publishedAt": "2021-03-27T01:46:27Z", "author": "fid tran", "text": "Happy to see Alvin here!!! He is the reason why I decided to choose App Academy vs other Bootcamps!", "likes": 1}}, {"topLevelComment": {"id": "Ugz2u-OzAt2GMYvY0EF4AaABAg", "publishedAt": "2021-03-26T19:42:42Z", "author": "IcedCupcakes", "text": "man this guy is SO articulate!", "likes": 0}}, {"topLevelComment": {"id": "UgyQcjudxAHzFkHi95p4AaABAg", "publishedAt": "2021-03-26T14:50:15Z", "author": "Tom\u00e1s Sacripanti", "text": "Thank you so much, i love and appreciate the work you do for the programming community. Greetings from Argentina!", "likes": 0}}, {"topLevelComment": {"id": "UgxnV86iYV-Vq8BC0Yh4AaABAg", "publishedAt": "2021-03-26T13:34:24Z", "author": "Sugan", "text": "He is a real hero, thanks a lot bro\ud83d\ude0a", "likes": 0}}, {"topLevelComment": {"id": "Ugw-R3BfbD0ZCgYy7C14AaABAg", "publishedAt": "2021-03-26T09:31:43Z", "author": "Montvydas Klumbys", "text": "When solving for bestSum, wouldn't it be easier to approach the problem from the perspective that the larger the number is, the shorter path would be (assuming that larger number does produce a desired outcome). In that case, all you gotta do is reverse sort the numbers and call the already implemented function howSort:\nnumbers = [1, 2, 5, 25]\nnumbers.reverse()\nconsole.log(howSort(100, numbers))\nOr in python:\nprint(how_sum(100, sorted([1, 2, 5, 25], reverse=True)))", "likes": 0}, "replies": [{"id": "Ugw-R3BfbD0ZCgYy7C14AaABAg.9LLd6fvL3Is9Lo_iW4k53i", "publishedAt": "2021-04-07T00:39:17Z", "author": "NEERAJ SANGWAN", "text": "@Montvydas Klumbys glad I could help \ud83d\ude42", "likes": 0}, {"id": "Ugw-R3BfbD0ZCgYy7C14AaABAg.9LLd6fvL3Is9Lo03pyCJws", "publishedAt": "2021-04-06T19:19:01Z", "author": "Montvydas Klumbys", "text": "@NEERAJ SANGWAN Yeah, makes sense now! Thanks for the explanation, it seems I missed it in the video somehow :)", "likes": 0}, {"id": "Ugw-R3BfbD0ZCgYy7C14AaABAg.9LLd6fvL3Is9LOgYvJx7Tv", "publishedAt": "2021-03-27T13:59:30Z", "author": "NEERAJ SANGWAN", "text": "He mentions that in the video that it will fail in some test cases . \nif you have target sum = 8 and your array is[1,4,5].\nthen according to your logic it will print [5,1,1,1] but the best case is [4,4]. So, you need to run for all cases and compare them with each other and then only you can decide which is best case.", "likes": 0}]}, {"topLevelComment": {"id": "UgxPFmzd6ZthCQsreqp4AaABAg", "publishedAt": "2021-03-26T08:06:38Z", "author": "Fr\u00e9d\u00e9ric GIRARDIN", "text": "I'm really sorry, but we are really not agree about dynamic programming purpose ! Dynamic means, no data structure already know before execution, OR, parametric data who implement programming way of execution. Example : External data dictionary that implement dynamic Class, or, External listing of pair (criteria[], calling parametric process[]), or, Grammatical programming that trying to solve Textual input as sequential programming execution from parametric context. Indexing result of recursive process to win time in execution is not dynamic at all.", "likes": 0}}, {"topLevelComment": {"id": "UgwtxJ9LtG3-V1C6Yjp4AaABAg", "publishedAt": "2021-03-26T05:44:04Z", "author": "Moez HADDAD", "text": "can you make another video with the same problems but with  no re-use of the elements ?", "likes": 1}}, {"topLevelComment": {"id": "Ugw5ODUliH4MvQ2HMbZ4AaABAg", "publishedAt": "2021-03-25T17:44:06Z", "author": "Techno TV !", "text": "Mind blown after 25 years, post college !!!", "likes": 0}}, {"topLevelComment": {"id": "UgxFvyMLH20k4Biiv114AaABAg", "publishedAt": "2021-03-25T16:04:09Z", "author": "M Thaha", "text": "I see JavaScript and I subscribe", "likes": 0}}, {"topLevelComment": {"id": "UgybjeMTH7dtcR4gN-14AaABAg", "publishedAt": "2021-03-25T13:10:24Z", "author": "Thanos", "text": "We want this dynamic Programming in Java", "likes": 0}}, {"topLevelComment": {"id": "UgzeazMT_DoUAvrE7yh4AaABAg", "publishedAt": "2021-03-25T05:37:06Z", "author": "Ryan Levy", "text": "Anyone else get goosebumps every time the newly optimized solution was run and he said \"that was quick\"", "likes": 0}}, {"topLevelComment": {"id": "Ugz6GLNMACXS3hzzzBJ4AaABAg", "publishedAt": "2021-03-24T21:14:06Z", "author": "Khalid Eltawagny", "text": "Somebody gives this man a medal !", "likes": 1}}, {"topLevelComment": {"id": "UgzTLM26TRYB9yEakhl4AaABAg", "publishedAt": "2021-03-24T05:51:36Z", "author": "Aaron Schooley", "text": "For \"bestsum\", just use your \"howsum\" program and sort your number list descending so that larger values are considered first. I believe this is valid and works on my implementation. It takes precisely one additional line of code. \n\nGreat video. Lots of great information!", "likes": 0}, "replies": [{"id": "UgzTLM26TRYB9yEakhl4AaABAg.9LG5Km5Y8dL9cRNIx2HsLo", "publishedAt": "2022-06-19T00:25:23Z", "author": "Aaron Schooley", "text": "@NEERAJ SANGWAN You are of course correct. The instructor even addresses this at https://youtu.be/oBt53YbR9Kk?t=7065\n\nI am not sure how I missed his explanation. Thank you for the correction.", "likes": 0}, {"id": "UgzTLM26TRYB9yEakhl4AaABAg.9LG5Km5Y8dL9LOguUsxpUr", "publishedAt": "2021-03-27T14:02:35Z", "author": "NEERAJ SANGWAN", "text": "It will work for some test cases. But in some cases it will produce wrong output.\nif you have target sum = 8  and array = [1,4,5]. then by your logic it will print [5,1,1,1] but the best case is [4,4]. So you need to iterate for all cases and then compare them to find best case.", "likes": 1}]}, {"topLevelComment": {"id": "UgzDAHLTkYm8gYCXtst4AaABAg", "publishedAt": "2021-03-24T03:21:30Z", "author": "D P", "text": "27", "likes": 0}}, {"topLevelComment": {"id": "UgySaY8Cwme9KwFf_Lt4AaABAg", "publishedAt": "2021-03-23T12:12:48Z", "author": "Kabilasudhan Nc", "text": "I really need to see the 139 peoples who disliked this video", "likes": 0}}, {"topLevelComment": {"id": "UgxlVed0YhOIDho60Tl4AaABAg", "publishedAt": "2021-03-23T08:42:34Z", "author": "Anastasia K", "text": "Great video! I\u2019m only 30 min in and leaving the rest for later. Hoping that at some point the C++ pops up.\nSuch elaborated content with so many useful insights, now I feel like I have to pay.", "likes": 0}}, {"topLevelComment": {"id": "UgwRgxm1fBYYeLiqb4d4AaABAg", "publishedAt": "2021-03-22T14:11:38Z", "author": "Nezih Aksu", "text": "Just finished now,thank you so much,you are great at teaching it.", "likes": 0}}, {"topLevelComment": {"id": "Ugw_xp66EW97qef-6Th4AaABAg", "publishedAt": "2021-03-22T13:23:29Z", "author": "\u040f\u043e\u043d \u041c\u0430\u0441\u0442\u0435\u0440\u043c\u0430\u043d", "text": "Excellent material, God bless youtube and these fine people", "likes": 0}}, {"topLevelComment": {"id": "UgzOjXeH1f6L4-rWi1F4AaABAg", "publishedAt": "2021-03-22T09:30:36Z", "author": "gotos gotos", "text": "he is the King \u221a", "likes": 0}}, {"topLevelComment": {"id": "UgwYuUHz4a-7emBcGzp4AaABAg", "publishedAt": "2021-03-22T07:57:31Z", "author": "SOURASHIS MONDAL", "text": "Quality education with lots of effort", "likes": 0}}, {"topLevelComment": {"id": "UgxkbxHHgPItaFDUCxJ4AaABAg", "publishedAt": "2021-03-22T05:46:52Z", "author": "Baurzhan", "text": "In the problem of 2D traveller, shouldn't we make sure that key for memoisation has some particular order and will be matched? \nSo, that, for example \"3,2\" would be \"2,3\" instead if we assume ascending order.", "likes": 0}}, {"topLevelComment": {"id": "UgwE5Q7oUZxdRrXvzxJ4AaABAg", "publishedAt": "2021-03-20T17:37:24Z", "author": "Apurva Kokate", "text": "Thank you for putting this video on youtube... I really like seeing quality content like this :)", "likes": 0}}, {"topLevelComment": {"id": "UgyzsZDCV1yzJy5BMZV4AaABAg", "publishedAt": "2021-03-20T09:20:19Z", "author": "Sai Chandu", "text": "The best explanation on dynamic programming", "likes": 0}}, {"topLevelComment": {"id": "Ugwspl6sd8-UBpf-oGx4AaABAg", "publishedAt": "2021-03-20T07:41:54Z", "author": "Shalmoli Neogi", "text": "The bestSum solution is really working? Can someone confirm who tried it out by him/herself?", "likes": 0}}, {"topLevelComment": {"id": "UgwKfTyxtzNsLFrwm3t4AaABAg", "publishedAt": "2021-03-20T06:00:09Z", "author": "mohamed abdo", "text": "bruh you are magician, I paid fucking 20K for a Bootcamp to teach me 5% value of this course, if I found you earlier I wouldn't have paid a penny.", "likes": 0}}, {"topLevelComment": {"id": "UgyZz320VydiqSd3a6V4AaABAg", "publishedAt": "2021-03-19T22:03:36Z", "author": "Obaydah BOUIFADENE", "text": "i think that \"in\" works in O(size  of memo), so if I wasn't wrong, I think that the final complexity would be the complexity you calculated multiplied by O(size  of memo)! also I think we could use some kind of array that accepts random access and use it !!", "likes": 0}}, {"topLevelComment": {"id": "UgwkOQHJiVjZ9BaQvL94AaABAg", "publishedAt": "2021-03-19T00:33:24Z", "author": "Obaydah BOUIFADENE", "text": "thanks for the video, I have a question, in 1:01:30 why didn't you set the returned value to both a+','+b and b+','+a ? so that we can use the memo in a better way?", "likes": 0}, "replies": [{"id": "UgwkOQHJiVjZ9BaQvL94AaABAg.9L2dwqGS2jV9L71AqF57UC", "publishedAt": "2021-03-20T17:22:08Z", "author": "lostpetal", "text": "I think he forgot about that. Try this at the beginning of the function: \n\nconst key = m + ',' + n;\u00a0\nconst reverseKey = n + ',' + m; \nif (key in memo || reverseKey in memo) return memo[key];", "likes": 1}]}, {"topLevelComment": {"id": "UgwB8viTY0m1E1OUaDh4AaABAg", "publishedAt": "2021-03-18T23:56:30Z", "author": "lostpetal", "text": "In the solution to grid traveler, didn't the solution provided fail to include the memoization logic of gridTraveler(m,n) == gridTraveler(n,m) ? The keys would be different with they are made, but really they shouldn't be different.", "likes": 0}}, {"topLevelComment": {"id": "UgxcLAHMuZMQ__-MNJF4AaABAg", "publishedAt": "2021-03-18T14:00:17Z", "author": "kanta jain", "text": "omg he's too good! Too too good!", "likes": 0}}, {"topLevelComment": {"id": "UgwWk2W-1D6I_WwDGEp4AaABAg", "publishedAt": "2021-03-18T01:23:49Z", "author": "dante dt", "text": "This is the best video on YouTube about Dynamic Programming.Truly nice work!", "likes": 0}}, {"topLevelComment": {"id": "UgzObRkYQ1INi3M85wR4AaABAg", "publishedAt": "2021-03-18T00:53:42Z", "author": "David Castro", "text": "The best dynamic programming course i've seen in youtube!!!", "likes": 0}}, {"topLevelComment": {"id": "UgwZJqM7SC9lUF7FVAV4AaABAg", "publishedAt": "2021-03-17T11:50:03Z", "author": "Hara Totapally", "text": "I used Chrome just to vote Thumbs up.  Question to the people who voted down:  Can you explain what did you not like in this lecture?  Is it just because it is free?", "likes": 1}}, {"topLevelComment": {"id": "Ugx_6f-mhHbpm1gU9m94AaABAg", "publishedAt": "2021-03-16T20:37:55Z", "author": "DECKsek", "text": "Outstanding course!\nPerfect explanations!\nThank you so much for this video :)", "likes": 0}}, {"topLevelComment": {"id": "UgxG5wjz6wzuvRwsh3V4AaABAg", "publishedAt": "2021-03-16T17:31:29Z", "author": "Mar\u00eda V. Ortiz", "text": "3:33:00", "likes": 0}}, {"topLevelComment": {"id": "Ugzt3k8fkNlQxdKo7xt4AaABAg", "publishedAt": "2021-03-15T22:44:58Z", "author": "Bahad\u0131r Ba\u015faran", "text": "Can someone enlighten me why memoization wouldn't optimize our time complexity in \"allConstruct\" case, considering the fact that it would make us get rid of some of the \"trimming&recurring\" cases?", "likes": 0}}, {"topLevelComment": {"id": "UgzJAyT0uFnClHDhrB94AaABAg", "publishedAt": "2021-03-15T06:11:43Z", "author": "Swapnadip Moni", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"id": "UgzG-9ec2-kt8ihnwht4AaABAg", "publishedAt": "2021-03-14T15:44:25Z", "author": "Data Case", "text": "You are genius. I can't believe, what I see.", "likes": 0}}, {"topLevelComment": {"id": "UgyzVaAVN1ZZ4es11YB4AaABAg", "publishedAt": "2021-03-14T12:43:24Z", "author": "Thi\u00ean Nguy\u00ea\u0303n", "text": "I love this guy ! Thank you so much !!!", "likes": 0}}, {"topLevelComment": {"id": "UgzA60huR8RfmUQ9CIZ4AaABAg", "publishedAt": "2021-03-14T10:09:51Z", "author": "Kolonki Gnome", "text": "Thank you for the course! 21:00 not sure that O((n/2)^2)  is the same as O(n^2)! Or is it? That would mean that O(2^n), O(3^n), O(4^n) are all the same", "likes": 0}}, {"topLevelComment": {"id": "UgwXHeSVkVjaXpFivGt4AaABAg", "publishedAt": "2021-03-14T07:20:33Z", "author": "neziakuyr", "text": "Thanks for the awesome vid. This is the only coding video i watched in normal speed!!", "likes": 0}}, {"topLevelComment": {"id": "UgwN4bZyrePCZFHhhVR4AaABAg", "publishedAt": "2021-03-14T06:22:17Z", "author": "Lokesh Negi", "text": "it would me more easier if the code is in c++ or java.\notherwise thanks for  the great work you are doing.", "likes": 0}}, {"topLevelComment": {"id": "Ugzidoi28v6uBnDoFft4AaABAg", "publishedAt": "2021-03-14T05:11:12Z", "author": "kobe248ryant", "text": "Love it Alvin, great explanations and easy to follow. Do you have a channel for us to follow?", "likes": 0}}, {"topLevelComment": {"id": "UgyknuAlwqOVrhFY-EF4AaABAg", "publishedAt": "2021-03-13T23:02:52Z", "author": "Jean DAVID", "text": "59:20  in gridTraveler optimized code, you didn't treat the case for a memo value of gridTraveler(n,m) when the value of gridTraveler(m,n) is already memoized !", "likes": 0}, "replies": [{"id": "UgyknuAlwqOVrhFY-EF4AaABAg.9KqbbINPlVV9M13yqzR92Q", "publishedAt": "2021-04-12T06:22:31Z", "author": "Henry Fajardo", "text": "@Aditya Gupta in python it is probably better use tuples for the keys, that way you can search for (n, m) in memo and (m, n) in memo without needing to construct any strings. in my test it halves the run time for large inputs when you test for both keys this way", "likes": 0}]}, {"topLevelComment": {"id": "Ugy_hXdf8sKQ3K0XBmx4AaABAg", "publishedAt": "2021-03-13T21:34:51Z", "author": "Hedayat khezri", "text": "Just finished the gridTraveler section, great tutorial so far. Also wanted to note that you forgot to check for the reversed key (key = n + \",\" + m) in the memo for the gridTraveler problem.", "likes": 6}, "replies": [{"id": "Ugy_hXdf8sKQ3K0XBmx4AaABAg.9KqSXiq-nII9SGJVHGZ-8y", "publishedAt": "2021-09-14T07:35:07Z", "author": "Ahmet Cengiz", "text": "if you pass x first y last in the arguments of the function, you should only check x,y in de memoize object. checking reverse means not that much.", "likes": 0}]}, {"topLevelComment": {"id": "UgzSXy_snMpCN5IwSrd4AaABAg", "publishedAt": "2021-03-13T13:02:25Z", "author": "Eugene Karataev", "text": "Is it correct that all dynamic programming problems are solved with a recursion?\nI mean fibonacci numbers task can be solved with for loop, i.e. without a recursion.  So it seems that the same task can be solved with different approaches: a dynamic programming way (in the video) and a \"classic\" way. But I guess that some problems are solvable in dynamic programming way only.", "likes": 0}, "replies": [{"id": "UgzSXy_snMpCN5IwSrd4AaABAg.9KpXtZk0JAN9LOkpznW16W", "publishedAt": "2021-03-27T14:36:55Z", "author": "Eugene Karataev", "text": "@NEERAJ SANGWAN thanks! It seems that I wrote my comment too early and the second part of the video solves the same problems with loops approach indeed)", "likes": 1}, {"id": "UgzSXy_snMpCN5IwSrd4AaABAg.9KpXtZk0JAN9LOhThDcyCL", "publishedAt": "2021-03-27T14:07:32Z", "author": "NEERAJ SANGWAN", "text": "Dynamic programming consists of memoization(top-bottom approach) and tabulation(bottom-top approach).\nMemoization is done recursively while tabulation is done iteratively(using loops) . So the loop approach is  part of dynamic programming too.", "likes": 1}]}, {"topLevelComment": {"id": "UgxX7KVZJgcuFsrkO9t4AaABAg", "publishedAt": "2021-03-13T13:01:49Z", "author": "Data Case", "text": "You are talking to fast. I'm german and I has to follow, but that's difficult.", "likes": 0}}, {"topLevelComment": {"id": "UgxeJ6GlHOc4kv-YAat4AaABAg", "publishedAt": "2021-03-13T06:14:30Z", "author": "Tushar Goyal", "text": "tabulation method is not very good and I'm facing hard time getting it. but the recursive one with the tree is dope. thanks for that.", "likes": 0}}, {"topLevelComment": {"id": "UgwgaKtD7a0VZSmLKEp4AaABAg", "publishedAt": "2021-03-12T20:41:21Z", "author": "Chirag Chainesh Patil", "text": "How is the time complexity of cansum Memoization (n*m) ? Can someone explain it. I didn't get that.", "likes": 1}}, {"topLevelComment": {"id": "Ugw44CMdbhMzqlWrcKl4AaABAg", "publishedAt": "2021-03-12T20:02:24Z", "author": "Albert Chang", "text": "For the meaning, \"end case\" seems more suitable than \"base case\"; and it's shorter, albeit slightly...", "likes": 1}}, {"topLevelComment": {"id": "UgyYe_S78aFbl7SMt3t4AaABAg", "publishedAt": "2021-03-12T17:09:15Z", "author": "Brian Ngetich", "text": "Just a thought here, when doing the grid traveler problem, is it wrong to generalize that if we have 1 as either our row or column, I.e. gridTraveller(1, 3) or gridTraveller(3, 1) can we say the answer is always 1, my reasoning is, whenever we are confined to 1d we only have 1 way to reach the end.", "likes": 0}, "replies": [{"id": "UgyYe_S78aFbl7SMt3t4AaABAg.9KnPLTVEpdm9M16LxuW9iV", "publishedAt": "2021-04-12T06:43:17Z", "author": "Henry Fajardo", "text": "This is correct, you can simplify the initial test case to check if n OR m equals 1 -> return 1 which should reduce run times", "likes": 1}]}, {"topLevelComment": {"id": "Ugx7AOeY-8mVqxdzBZl4AaABAg", "publishedAt": "2021-03-12T17:04:07Z", "author": "Eugene Karataev", "text": "It's amazing to realize that grid traveler problem sounds like a completely different problem to fibonacci, but it's solved with the same pattern. Just wow.", "likes": 68}, "replies": [{"id": "Ugx7AOeY-8mVqxdzBZl4AaABAg.9KnOkrNrSEr9V7eJLw92XS", "publishedAt": "2021-11-24T12:26:45Z", "author": "veipunii lana", "text": "which pograming language are you uisng for coding? \r\nIf you are using java can i ask you some questions?", "likes": 0}, {"id": "Ugx7AOeY-8mVqxdzBZl4AaABAg.9KnOkrNrSEr9RiWIWcP44h", "publishedAt": "2021-08-31T19:13:34Z", "author": "Will Crawford", "text": "@black c yeah, C(m + n, n).", "likes": 0}]}, {"topLevelComment": {"id": "Ugzgt_dTbuDQmhQyK094AaABAg", "publishedAt": "2021-03-12T11:57:20Z", "author": "Bilal Syed", "text": "Really really helpful and eye opener", "likes": 0}}, {"topLevelComment": {"id": "Ugz2Ik6_y88l3orP8jx4AaABAg", "publishedAt": "2021-03-12T09:37:00Z", "author": "Eugene Karataev", "text": "I've been watching the video for 16 minutes and it's  the greatest algorithms content I've seen so far.\nI definitely need couple of tea cups for the next 5 hours of pleasure \ud83d\ude43", "likes": 0}}, {"topLevelComment": {"id": "Ugzsz4_PJRK2_FIVRlF4AaABAg", "publishedAt": "2021-03-12T01:59:40Z", "author": "N J", "text": "grid traveler tab python implementation\n\ndef grid_traveler(n, m):\n    if n == 0 or m == 0: \n        return 0 #[[]]\n\n    grid = [[0 for _ in range(m)] for _ in range(n)]\n    grid[0][0] = 1\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0: continue\n            grid[i][j] = grid[i][j - 1] + grid[i - 1][j]\n\n    return grid[n-1][m-1]", "likes": 0}}, {"topLevelComment": {"id": "Ugw6hA-5hSaC6Zr_hvN4AaABAg", "publishedAt": "2021-03-11T18:43:34Z", "author": "anythgofnthg", "text": "Absolutely top notch teaching. If anyone can answer a question I have about the memo parameter in canSum @ 1:28:01 I would love to hear it. \n\nWith the following code, HOW does the updated memo object get passed to the recursive function call? \n\n```\nconst canSum = (targetSum, numbers, memo={}) => {\r\n  \r\n  \r\n  if(targetSum in memo){\r\n    console.log('RETURN FROM MEMO: ', memo) // <-- This only seems to log if it is false\r\n    return memo[targetSum]\r\n  }\r\n\r\n  if(targetSum === 0) return true\r\n\r\n  if(targetSum < 0) return false\r\n\r\n  for(let num of numbers){\r\n\r\n    const remainder = targetSum - num\r\n    \r\n    if(canSum(remainder, numbers, memo) === true){\r\n      memo[targetSum] = true // **<-- How does this updated memo object get passed to the recursive function call?**\r\n      return true\r\n    }\r\n  \r\n\r\n  }\r\n  \r\n  memo[targetSum] = false // **<-- How does this updated memo object get passed to the recursive function call?**\r\n  return false\r\n\r\n}\n\n```", "likes": 0}, "replies": [{"id": "Ugw6hA-5hSaC6Zr_hvN4AaABAg.9Kl-LTfnQdU9Kuro0KC44m", "publishedAt": "2021-03-15T14:41:22Z", "author": "anythgofnthg", "text": "Found the answer... @ 30:52 \"... it would be pass by reference...when you pass a JavaScript object to a function, you receive that exact object, it doesn't make a copy...so basically I'm giving my function calls sort of a global reference \"", "likes": 0}]}, {"topLevelComment": {"id": "UgxFEG49mI6D-7VyaPZ4AaABAg", "publishedAt": "2021-03-11T17:40:39Z", "author": "Moustafa Abdelhamid", "text": "I want to click like on this video again :D", "likes": 0}}, {"topLevelComment": {"id": "UgwhY4eURqs9QDP10vV4AaABAg", "publishedAt": "2021-03-11T08:16:25Z", "author": "Michael Suarez", "text": "You have the most amazing, clear, and easy to understand explanations and your voice is just so easy to listen to. Thank you so much for the awesome tutorial.", "likes": 1}}, {"topLevelComment": {"id": "UgyfAi07YfjtwCAweFB4AaABAg", "publishedAt": "2021-03-11T02:42:14Z", "author": "TokyoXtreme", "text": "1:57:33 420 blaze it lmao \ud83d\ude02 \ud83c\udf41", "likes": 0}}, {"topLevelComment": {"id": "UgzqVZQXs9a_Le3QqWl4AaABAg", "publishedAt": "2021-03-10T20:19:25Z", "author": "Aldo Guti\u00e9rrez", "text": "Why is this called dynamic programming? I am an old programmer and just call it recursivity with a cache or recursivity with precalculated value(s)", "likes": 0}}, {"topLevelComment": {"id": "Ugwn3vdUAXKFvM_5uTd4AaABAg", "publishedAt": "2021-03-10T18:41:13Z", "author": "hellosugaree", "text": "This is easily the most clear, concise yet thorough, and easy to follow explanations I've encountered of any programming-related topic (really any topic of similar complexity from any subject).\nI merely listened to the first hour of during my commute (while driving) and I already feel like I've gotten a better understanding of the material than other videos and articles on the subject that I've followed while actually focusing and doing the examples. \nYou masterfully break down every topic into smaller concepts. I love how you diagram the problem, write the brute force approach in code, draw the tree of the brute force approach using values from your code, explain the complexity, then revise your functions to improve based on what you get from the brute force tree. So much more helpful than just jumping in and saying \"Here's how you write an efficient fibonacci function, don't forget to subscribe.\" \nIf all learning materials were this clear, the world would be a much smarter place.", "likes": 0}}, {"topLevelComment": {"id": "UgylFNMl_bASZ8veiR14AaABAg", "publishedAt": "2021-03-10T14:25:53Z", "author": "Daniel Bodovs", "text": "Btw, fori and a tab is a shorthand for (let i = 0; i < ; i++) {\n}\nAt least it's like that in WebStorm, maybe VS is different. I noticed the lecturer typing for loops manually and wanted to mention it. Maybe the lecturer did it so students didn't get confused, but I hope this knowledge can be useful for someone.", "likes": 0}}, {"topLevelComment": {"id": "UgxjIYWmCcfn7Pe8ehN4AaABAg", "publishedAt": "2021-03-10T14:07:55Z", "author": "Daniel Bodovs", "text": "Hey, so allConstruct memoization is exponential in size, that much is true, but with some memoization we could get a tighter bound on the complexity through the introduction of a new variable. Instead of storing the arrays, we could store an array with the indices of the used words in the numbers array. What I mean is, we could have a memo object which would take as keys the possible substrings and for each substring, we would have found ways to achieve the target word using some words. E.g. if we have the word abcdef and [a, ab, c, d, e, f], we would have a memo that looks like this: {abcdef: [index of a in number, index of ab in number], bcdef: [index of b in number], cdef: [index of c in number], def: [index of d in number], ef: [index of e in number], f:[index of f in number]}. This could be done in polynomial time (<= m calls (for each possible suffix string), for each of them n words that would be added to the dynamic array, that is m*n, but since we also check if a word starts with a substring using indexOf, it's actually m*n*m(the last m is for the checking of substring)). When we want to use those values to create the 2d array, we would just do it in a similar way. Now we could call the complexity of the \"unpacking\" is d and the overall complexity is polynomial + d. Now d would be exponential in terms of n and m, but if given some other values like the biggest number d is or something else even more complex, we could get a non-exponential complexity. On a competitive programming problem, this could be simply given. In a real-world situation, we could just decide we are interested in the first k values or whatever. So, yeah, it could be useful to do it like that. At least I think so.", "likes": 0}}, {"topLevelComment": {"id": "Ugwmci8K7VxgekbSgD94AaABAg", "publishedAt": "2021-03-10T08:05:18Z", "author": "A CHAVE DO TAMANHO", "text": "What is that language you are using? Not Python, C, Java?", "likes": 0}}, {"topLevelComment": {"id": "UgxkEsUg8NM_NT3Bd8d4AaABAg", "publishedAt": "2021-03-10T04:13:11Z", "author": "litttlemoon Cream", "text": "though I really don't understand every second of this course, I find it interesting haha", "likes": 1}}, {"topLevelComment": {"id": "UgxhrhaZuBfn-Xf2GfN4AaABAg", "publishedAt": "2021-03-10T02:54:22Z", "author": "Sai Chandu", "text": "Confused at 3:41:50", "likes": 0}}, {"topLevelComment": {"id": "UgyBCDdPFmte2NIpnih4AaABAg", "publishedAt": "2021-03-09T13:27:03Z", "author": "Sr\u0111an Stankovi\u0107", "text": "@freeCodeCamp.org\nIn CanSum we don't need to keep track of the true targets. This is because when we run into the true case BruteForce method works just as memoizing one.\n\nIn any case big thanks for the video, I learned a lot.", "likes": 0}}, {"topLevelComment": {"id": "UgxAJg9-pb76q50__2V4AaABAg", "publishedAt": "2021-03-09T08:31:02Z", "author": "Ahbar Ahad", "text": "So good, cant believe i actually completed  the whole course", "likes": 2}}, {"topLevelComment": {"id": "Ugx4wXWytIjr3tmnmbh4AaABAg", "publishedAt": "2021-03-08T18:11:29Z", "author": "Simon Baxter", "text": "Had 5 minutes to kill, so searched through YouTube. Found this, started watching, realised it was 5 hrs 10 min long ! Went and watch some Russian car crash video's instead!", "likes": 1}}, {"topLevelComment": {"id": "Ugy2AINBQ4TDxk4gFQ94AaABAg", "publishedAt": "2021-03-08T11:30:40Z", "author": "Tomas House", "text": "This is some quality content.Have someone already noticed that canSum algorithm can be improved?", "likes": 0}, "replies": [{"id": "Ugy2AINBQ4TDxk4gFQ94AaABAg.9KcVQ5CS6JA9KcWHUF-d-x", "publishedAt": "2021-03-08T11:38:13Z", "author": "Tomas House", "text": "A line that memorises True can be removed and the if (targetSum in memo) can just return False. There is no need to store True values as they will never be used except to end the function on the first find.", "likes": 0}]}, {"topLevelComment": {"id": "UgxItsHx26enUNFze694AaABAg", "publishedAt": "2021-03-07T17:42:28Z", "author": "Bharath Reddy", "text": "in canSum problem sorting the array in descending order will do the job right??", "likes": 0}}, {"topLevelComment": {"id": "Ugzwvdneoa0H3kv2PYJ4AaABAg", "publishedAt": "2021-03-07T16:54:22Z", "author": "C\u01b0\u1eddng Nguy\u1ec5n Tr\u1ea7n H\u1eefu", "text": "your vid is so good and really understandable, thanks for your teaching!!!!!!", "likes": 0}}, {"topLevelComment": {"id": "UgxR4049suNxhonPkcl4AaABAg", "publishedAt": "2021-03-07T14:28:58Z", "author": "Akhil Bhardwaj", "text": "Speechless.", "likes": 1}}, {"topLevelComment": {"id": "UgyF9r8a8_PpRWlFIed4AaABAg", "publishedAt": "2021-03-07T01:20:43Z", "author": "Sehajpreet Singh", "text": "I am curious how long did it take to edit this video. The material is very helpful; thank you for providing it.", "likes": 0}}, {"topLevelComment": {"id": "UgxS1xdvZujKj5kIIzV4AaABAg", "publishedAt": "2021-03-06T19:09:50Z", "author": "Andr\u00e9s Serr\u00f3n", "text": "This is the man, he really does the job, amazing!", "likes": 0}}, {"topLevelComment": {"id": "Ugx3D5iaLNsENufv2mh4AaABAg", "publishedAt": "2021-03-06T17:00:24Z", "author": "Proxyvert", "text": "This is the best coding lesson I watched on YT so far.", "likes": 0}}, {"topLevelComment": {"id": "Ugw_ak7wJtfytPQDt1J4AaABAg", "publishedAt": "2021-03-06T11:36:34Z", "author": "Rajkeshwar Prasad", "text": "Thank you Alen for providing such a concise course on DP. These can cover so many DP problems around the internet. I would like to take all of your courses. I am not able to find your courses. Please someone provide me the source.", "likes": 0}}, {"topLevelComment": {"id": "UgyU1DcdldfOah7Wapl4AaABAg", "publishedAt": "2021-03-05T20:10:17Z", "author": "Abhishek", "text": "Are we considering the space complexity of the memoized object", "likes": 0}}, {"topLevelComment": {"id": "Ugy3orZJCGbFfnojwJR4AaABAg", "publishedAt": "2021-03-05T11:19:44Z", "author": "Abhishek", "text": "18:08  also 2^50 is called 1 Petabyte", "likes": 0}}, {"topLevelComment": {"id": "UgwppxvDn1Psg2_k9ZB4AaABAg", "publishedAt": "2021-03-05T07:43:05Z", "author": "Avi Twito", "text": "One of the best programming videos I've seen", "likes": 0}}, {"topLevelComment": {"id": "Ugy78Bl7x6810VbsaHx4AaABAg", "publishedAt": "2021-03-05T03:18:09Z", "author": "Jon Santos", "text": "Solving Problems & Coding Challenges using JAVASCRIPT - A great topic and good for practicing!", "likes": 2}}, {"topLevelComment": {"id": "UgyHyHzhgJ5ZEtnIhNh4AaABAg", "publishedAt": "2021-03-04T20:18:30Z", "author": "Ray Allen", "text": "Another implementation of all the code in python \n\r\nhttps://github.com/idy-3/DynamicProgramsEx", "likes": 1}, "replies": [{"id": "UgyHyHzhgJ5ZEtnIhNh4AaABAg.9KU8dd9dJQQ9cVqCxXZOhV", "publishedAt": "2022-06-20T18:03:40Z", "author": "LrdKGB", "text": "Thanks real lifesaver", "likes": 0}]}, {"topLevelComment": {"id": "UgzhZcB6TMyY9URBMN94AaABAg", "publishedAt": "2021-03-04T20:16:55Z", "author": "Preetham D P", "text": "finally taking on dynamic programming after years of procrastination.", "likes": 1}}, {"topLevelComment": {"id": "UgwYd6OaBekOvBdZuj94AaABAg", "publishedAt": "2021-03-04T18:27:31Z", "author": "Malcolm VanOrder", "text": "Python grid traver:\n\ndef grid_traveler(m, n, memo={}):\n    # Check for base cases\n    if 0 in (m, n):\n        return 0\n    elif 1 in (m, n):\n        return 1\n\n    # Create a sorted key to avoid symetric duplicates\n    key = tuple(sorted((m, n)))\n\n    # Return memoized result\n    if key in memo:\n        return memo[key]\n\n    # Memoize new result\n    memo[key] = grid_traveler(m, n - 1, memo) + grid_traveler(m - 1, n, memo)\n    \n    # return new result\n    return memo[key]", "likes": 0}}, {"topLevelComment": {"id": "UgyoIkmXJjhSsIF4QO54AaABAg", "publishedAt": "2021-03-03T19:18:57Z", "author": "Chitrank Dixit", "text": "This is the best video with nice explanation I found on dp so far cheers.", "likes": 0}}, {"topLevelComment": {"id": "UgyiqBTkhreveeaLJ054AaABAg", "publishedAt": "2021-03-03T17:46:43Z", "author": "Andrey Nogueira", "text": "This surely could be a Master Class. Picture me watching this and simultaneously translating/coding it in Lua. Oh, those 0th elements in arrays hahaha", "likes": 3}}, {"topLevelComment": {"id": "UgxUvLRpU64iaPf0grh4AaABAg", "publishedAt": "2021-03-03T17:27:20Z", "author": "Anand Vardhan", "text": "I just loved the way you have explained the concepts. Thanks a lot.", "likes": 1}}, {"topLevelComment": {"id": "UgzCOTdBnibkarsgfVF4AaABAg", "publishedAt": "2021-03-03T07:51:09Z", "author": "Mani R", "text": "You don't have problem with dp, you have problem with recursion", "likes": 0}}, {"topLevelComment": {"id": "UgwEHXRWy-5eg8c__yB4AaABAg", "publishedAt": "2021-03-03T00:46:16Z", "author": "TheDovahBear 7", "text": "What IDE are you using?", "likes": 0}}, {"topLevelComment": {"id": "UgyFZZzle4B8tz6vcFp4AaABAg", "publishedAt": "2021-03-02T20:05:31Z", "author": "Zohaib Khan", "text": "If you taught me at school, I would be teaching like this right now", "likes": 0}}, {"topLevelComment": {"id": "UgxS2FgswwqiAzf70eZ4AaABAg", "publishedAt": "2021-03-02T17:34:18Z", "author": "brian m", "text": "At 1:47:34 is it necessary to memoize the array since, once you hit the first array, it will return the result, hence this memoized array will never actually be used. Basically, only the targetSum with null should memoized, thus lowering the time and space complexity. Am I wrong in this logic?", "likes": 0}}, {"topLevelComment": {"id": "UgxyeE4qEyVopeRfEOt4AaABAg", "publishedAt": "2021-03-02T16:38:53Z", "author": "The Liashchynski", "text": "Nice video, man! I noticed some moments, correct me if I'm wrong:\n1. 58:02 In row 5 you can use \"or\" (||) instead of \"and\" (&&), because if any side is 1 you have only one path from start to end\n2. Memo in 3:08:00 will not allow you to find new paths after memoized target. Example input: \"abcdef\", [\"a\", \"abc\", \"bc\", \"def\", \"bcdef\", \"abcd\"] Should return 3 paths. Your code will return only 2 - more precisely two unique paths and one copy.\n3. I think tabulation (bottom-up approach) with calculation of the fib(i) = fib(i-1)+fib(i-2) is more elegant and looks better in context of evolving recursive solution. As well as for gridTravler: dp[i][j] = dp[i-1][j] + dp[i][j-1] - it doesn't require to check borders.", "likes": 0}}, {"topLevelComment": {"id": "UgzJtX9nfaROhPSoHMt4AaABAg", "publishedAt": "2021-03-01T17:37:42Z", "author": "Holy Mango", "text": "How do you implement efficient fibo in c#?", "likes": 0}}, {"topLevelComment": {"id": "UgxAucEBDtsYyZ8fgSF4AaABAg", "publishedAt": "2021-02-28T21:08:18Z", "author": "garett's", "text": "fibonacci of 5000 - instant answer by my computer - infinity", "likes": 0}}, {"topLevelComment": {"id": "UgxMZxNIYIkKe8LOP2R4AaABAg", "publishedAt": "2021-02-28T15:17:28Z", "author": "Bal\u00e1zs Kl\u00e9zli", "text": "I haven't finished yet with the whole video, but I really like it. Big thanks for making it and sharing it!", "likes": 0}}, {"topLevelComment": {"id": "Ugxpk-8ZFzOGS6pO4zp4AaABAg", "publishedAt": "2021-02-28T11:58:02Z", "author": "Walid Dkhili", "text": "Cool explaination. Thanks, but I didn't understand why the time complexity of the grid traveler brute force approach is O(2^(n+m)). I think that it is O(2^max(n, m)). Same thing for the space complexity: O(max(n, m)). And I think also that we don't have to go down until getting a 0 because there is only one way to travel a grid with just one row or one column. Am I worng? Please help.", "likes": 1}, "replies": [{"id": "Ugxpk-8ZFzOGS6pO4zp4AaABAg.9KIxBbVDwjW9WZv9xh6nRo", "publishedAt": "2021-12-30T08:24:09Z", "author": "Edwin Mui", "text": "I know this is super late, but yes the time complexity should indeed be O(2^max(n, m)). You can easily see this by drawing out the complete tree for grid_traveler(2, 3) and comparing the number of recursive calls to 2^3 vs. 2^5", "likes": 0}]}, {"topLevelComment": {"id": "UgyWZb6WdYFZ3H5wso94AaABAg", "publishedAt": "2021-02-28T07:23:14Z", "author": "Debabrata Pani", "text": "This is some crazy tutorial on dynamic programming. Inspired teaching!", "likes": 5}}, {"topLevelComment": {"id": "UgzHKm4G3Crs_lKYtr94AaABAg", "publishedAt": "2021-02-28T06:23:55Z", "author": "YTBlogs", "text": "4:05:34 - line 8 in howSum with tabulation should be as below\nif (i+num <= targetSum) \n   table[i + num] = [...table[i], num]; \n   //This condition check is required to prevent array from expanding beyond index targetSum.", "likes": 0}}, {"topLevelComment": {"id": "UgxgHDJPtlwUneOC5m14AaABAg", "publishedAt": "2021-02-28T05:08:56Z", "author": "YTBlogs", "text": "Really liked the section on tabulation.", "likes": 0}}, {"topLevelComment": {"id": "UgzAFxItUW9pzeoAXS14AaABAg", "publishedAt": "2021-02-28T04:30:24Z", "author": "YTBlogs", "text": "This video contains too many ads. It's really gets hard to concentrate and learn.", "likes": 0}}, {"topLevelComment": {"id": "Ugyfhh0Jo4q9lSDP8zN4AaABAg", "publishedAt": "2021-02-27T19:06:36Z", "author": "Gustavo Fe", "text": "The asians dominate the world!", "likes": 0}}, {"topLevelComment": {"id": "Ugx3nBxvR9WPpHZ5miR4AaABAg", "publishedAt": "2021-02-27T10:39:13Z", "author": "ok fine", "text": "Wow, the person and channel both of them are good. idk what to say but Thanks a lot", "likes": 1}}, {"topLevelComment": {"id": "Ugz2K8Z_EaigcpH6UwV4AaABAg", "publishedAt": "2021-02-27T10:29:21Z", "author": "RYUK SG", "text": "#GRID TRAVELER using P&C\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n*factorial(n-1)\n\ndef gridtraveler(m,n):\n    r=n-1\n    d=m-1\n    return factorial(r+d)//(factorial(r)*factorial(d))\n\nm, n = map(int, input().split())\nprint(gridtraveler(m, n))", "likes": 0}}, {"topLevelComment": {"id": "UgxlEkiF854mc86EExl4AaABAg", "publishedAt": "2021-02-27T01:20:25Z", "author": "Nhut Le", "text": "1:26:59 canSum(7, [2,3]) should return False. Both ground truth and the function give the wrong answer. :D", "likes": 0}, "replies": [{"id": "UgxlEkiF854mc86EExl4AaABAg.9KFEQgWKbTD9KI0JubLKKV", "publishedAt": "2021-02-28T03:14:53Z", "author": "Nhut Le", "text": "@Gautam Jain Thank you. I didn't know it still counts.", "likes": 0}, {"id": "UgxlEkiF854mc86EExl4AaABAg.9KFEQgWKbTD9KH79OWh-NJ", "publishedAt": "2021-02-27T18:55:22Z", "author": "Gautam Jain", "text": "2+2+3", "likes": 1}]}, {"topLevelComment": {"id": "UgzHQhcGxUcvh4oJXrt4AaABAg", "publishedAt": "2021-02-27T01:04:57Z", "author": "Danny Belmonte", "text": "You do a great job at explaining the process by which you tackle these problems. The video make's it very easy to visualize each step and follow the path you took to arrive at the solution. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgxzXl-sdRvVwY_q7kJ4AaABAg", "publishedAt": "2021-02-26T15:50:17Z", "author": "Ayush Nenawati", "text": "@freeCodeCamp.org Why not use iterative approach for fibonacci which is linear in time complexity and use constant space. whereas dynamic uses linear space?", "likes": 0}}, {"topLevelComment": {"id": "UgxlH1TG88Yrm2wvcoZ4AaABAg", "publishedAt": "2021-02-26T07:53:07Z", "author": "Sam", "text": "alvin: so, it looks like this last test case is taking a while..\n\nme: okay, it's..\n\ntogether: *TIME TO GO TO THE DRAWING BOARD*", "likes": 3}}, {"topLevelComment": {"id": "Ugy9pN8WeSHkEFyNgPR4AaABAg", "publishedAt": "2021-02-25T07:52:30Z", "author": "Jack Windensky", "text": "Wouldn't the memoized gridTraveler have O(n*m) space complexity?\nSince you would need to store every key and there are n*m of them. 1:04:14", "likes": 0}}, {"topLevelComment": {"id": "UgwQy_MqvVMWRoKTSN54AaABAg", "publishedAt": "2021-02-24T21:36:26Z", "author": "Jacek Grzegorczyk", "text": "Nice tut.", "likes": 0}}, {"topLevelComment": {"id": "UgxtKRnY__fH-s24uo94AaABAg", "publishedAt": "2021-02-24T17:51:03Z", "author": "Stone", "text": "You are the best!!!\nThank you", "likes": 0}}, {"topLevelComment": {"id": "Ugzh1-Pst7mcpxjDenN4AaABAg", "publishedAt": "2021-02-23T23:26:17Z", "author": "diego ramos", "text": "This was amazing! will you cover another techniques like greedy algorithms or divide and conquer?", "likes": 0}}, {"topLevelComment": {"id": "Ugw6L5VX34-Lvn4EG0l4AaABAg", "publishedAt": "2021-02-23T09:49:05Z", "author": "Mansoor Khan", "text": "Commendable work indeed! I won't mind spending five more hours on this since the concepts are explained so well.", "likes": 0}}, {"topLevelComment": {"id": "UgxblY0hVSu9xpdc0Nl4AaABAg", "publishedAt": "2021-02-23T04:53:30Z", "author": "tony qiu", "text": "The fact a DP course video has this killer of a like ratio is nutty. DP is the hardest topic to teach and the like ratios of every other DP video shows it. Well done!", "likes": 0}}, {"topLevelComment": {"id": "UgyEl9dklsToGrqDX694AaABAg", "publishedAt": "2021-02-23T03:37:42Z", "author": "ARVIND ROSHAAN S", "text": "In the howSum section, should the time complexity of brute force be O(n^m + m^2) instead of O(m*n^m). As we are only going to append to array (cost m) maximum of m times (the depth of the tree). And we only have to do it once due to early exit. Pleas correct if my understanding is wrong.", "likes": 0}, "replies": [{"id": "UgyEl9dklsToGrqDX694AaABAg.9K5AxfxAOTa9N2SjX2Z30-", "publishedAt": "2021-05-07T15:49:31Z", "author": "erithion", "text": "I have the same O(n^m + m^2). Don't know how he got to his O. Still a great material so far.", "likes": 0}]}, {"topLevelComment": {"id": "UgyvFC7pbt-KHNt4PNt4AaABAg", "publishedAt": "2021-02-23T03:26:11Z", "author": "1 dog", "text": "Thank you!", "likes": 0}}, {"topLevelComment": {"id": "Ugy5wHPBkAMmuLasnM54AaABAg", "publishedAt": "2021-02-22T19:21:27Z", "author": "Ishtiak hasan", "text": "LOL , gridtraveler has a simple solution that is \" (M+N)! / (M! * N!) \" COMPLEXITY O(1) or O(min(m,n)).\nthe answer \" (M+N)! / (M! * N!) \" can be easily obtained by using permutation and combination", "likes": 0}}, {"topLevelComment": {"id": "Ugx_8E80rJ2s6shDmXF4AaABAg", "publishedAt": "2021-02-22T17:06:50Z", "author": "Nikhil Bharadwaj", "text": "what is this black magic? Im understanding DP!!!!", "likes": 0}}, {"topLevelComment": {"id": "UgxUZHLFOASxOuOi0hl4AaABAg", "publishedAt": "2021-02-22T07:02:27Z", "author": "Deepen Patel", "text": "Can someone please explain why the time complexity for canSum memoized version is O(m*n), as per my experimentation we are never going to recurse more than m times. If you have 1 even once in the numbers array, we will recurse up to m times and return True as soon as targetSum becomes 0.", "likes": 0}}, {"topLevelComment": {"id": "UgxiUHvA_y41ueFa_dd4AaABAg", "publishedAt": "2021-02-22T03:17:24Z", "author": "Ravi Pratap Mishra", "text": "At 18 min, how he is getting time complexity as 2^n, as since total number method calls, should be sum of calls at each level, and which should be 1+2+2^2+....+2^n=n*2^n(if we assume each term as 2^n), anyone can tell me, is i am doing something wrong.", "likes": 0}}, {"topLevelComment": {"id": "Ugz5RMF59RFTbGAtrQF4AaABAg", "publishedAt": "2021-02-22T02:25:31Z", "author": "Rodrigo Hashimoto", "text": "I'm very impressed, this dude has some serious teaching skills ..\n\nI'm an infra guy but love studying development (just a hobby).. and this vid clarified some of the annoying topics for me", "likes": 1}}, {"topLevelComment": {"id": "UgyWXTEm0F4Hwm_ChQt4AaABAg", "publishedAt": "2021-02-21T20:43:12Z", "author": "Hallo Q", "text": "What theme is he using?", "likes": 0}}, {"topLevelComment": {"id": "Ugw0duWArjC2_8Q75N14AaABAg", "publishedAt": "2021-02-21T14:48:02Z", "author": "Woop Woop", "text": "whats that VSCode theme?", "likes": 0}}, {"topLevelComment": {"id": "UgyDL4anz1GRL-xCzgx4AaABAg", "publishedAt": "2021-02-21T13:30:56Z", "author": "ouafaa aissaoui", "text": "tried the canSum it works for some false results but some it gives  a (Maximum call stack size exceeded) error  like  for console.log(canSum(7,[3,0]));", "likes": 0}, "replies": [{"id": "UgyDL4anz1GRL-xCzgx4AaABAg.9K15FrsUYRa9K15OQ0KFNk", "publishedAt": "2021-02-21T13:32:06Z", "author": "ouafaa aissaoui", "text": "ok  i found out because of the 0 element in numbers it will have no end  so we must have an array of numbers without 0", "likes": 0}]}, {"topLevelComment": {"id": "UgzjiMhEVxXUmmcCwTx4AaABAg", "publishedAt": "2021-02-21T03:59:54Z", "author": "Abhishek Dutt", "text": "Here is the C++ implementation of all the problems discussed   https://github.com/duttabhishek32/Dynamic_Programming", "likes": 1}}, {"topLevelComment": {"id": "Ugy8car89j2yORofXpJ4AaABAg", "publishedAt": "2021-02-21T03:32:51Z", "author": "Nicholas Curran", "text": "Foo Fivers returns Dave Grohl.", "likes": 0}}, {"topLevelComment": {"id": "Ugypupz0vXxuTc7PJvh4AaABAg", "publishedAt": "2021-02-20T19:35:36Z", "author": "\u041f\u0430\u0436\u0438\u043b\u043e\u0439 \u041c\u0430\u0441\u043b\u0430\u0447", "text": "Good", "likes": 0}}, {"topLevelComment": {"id": "Ugzt9wwSkobFlzlVfFd4AaABAg", "publishedAt": "2021-02-20T17:58:52Z", "author": "Giulio", "text": "This is a great short course with a great teacher!! \ud83d\ude09\ud83d\ude09\ud83d\ude09\ud83d\ude19  The classes I attended about dynamic programming in my university are not even comparable to this. This is much more understandable,  well presented and makes you want to keep learning the topic.", "likes": 27}}, {"topLevelComment": {"id": "Ugw6dTDpZczzi3V5Fe54AaABAg", "publishedAt": "2021-02-20T07:17:51Z", "author": "Raghav N", "text": "Hello Alvin.. I  love the way you explain different concepts. Do create more videos on computer science basics, algorithm and  design.\n\nThank you so much.\ud83d\ude4f\ud83c\udffd", "likes": 1}}, {"topLevelComment": {"id": "UgxVP_gd9oxH3RgZnwh4AaABAg", "publishedAt": "2021-02-19T18:03:28Z", "author": "MEG", "text": "Brilliant!!! Thank you Alvin, you are really talented.", "likes": 0}}, {"topLevelComment": {"id": "UgzdPpagywIO8ngRHnt4AaABAg", "publishedAt": "2021-02-19T07:45:44Z", "author": "Siva ch", "text": "You made me feel guilty of not contributing to this channel Alvin. This is one of the channels I'll pay after I pay of my father's debt.", "likes": 0}, "replies": [{"id": "UgzdPpagywIO8ngRHnt4AaABAg.9JwK9nQR8FV9LAo8RCRNu9", "publishedAt": "2021-03-22T04:36:25Z", "author": "Feng Zhao", "text": "This is not Alvin's channel. Follow Coderbyte to support him!", "likes": 0}]}, {"topLevelComment": {"id": "UgyZKJFZhsAnniwGGKV4AaABAg", "publishedAt": "2021-02-18T14:42:37Z", "author": "The Average Coder", "text": "I have a subscription of algoexpert and believe me it is nowhere near this video in terms of explanation , quality of content and especially the quality of audio .\nP.S. : Don't buy a course just because of the fancy price tag , a lot of content better than those are available on YouTube .", "likes": 0}}, {"topLevelComment": {"id": "UgyphEug8Is8K4ufsH14AaABAg", "publishedAt": "2021-02-18T08:13:47Z", "author": "\u0421\u0432\u044f\u0442\u043e\u0441\u043b\u0430\u0432 \u0425\u043e\u0440\u043e\u0431\u0440\u0438\u0439", "text": "Sorry. In 40:18. What about way: \"Down, Right, Up, Right, Down\" ?", "likes": 0}, "replies": [{"id": "UgyphEug8Is8K4ufsH14AaABAg.9Jtn_QKQsHU9JwrhaNane9", "publishedAt": "2021-02-19T12:47:34Z", "author": "TheNardow", "text": "He mentions that it is only possible to go RIGHT or DOWN. UP is an invalid move for this definition of the problem.", "likes": 1}]}, {"topLevelComment": {"id": "UgyvP76hmV9NdcbAwz14AaABAg", "publishedAt": "2021-02-18T05:37:26Z", "author": "Mohamed Mostafa", "text": "Super amazing demonstration, I opened the video and continue to listen without being bored and even didn't realize how much time has passed !!\nThanks for the great content", "likes": 0}}, {"topLevelComment": {"id": "Ugw62URRf4jQGup9sGB4AaABAg", "publishedAt": "2021-02-18T00:53:39Z", "author": "violian5", "text": ".....I'll be right back - need to go to the cabinet to grab some Advil pills for my headache.", "likes": 0}}, {"topLevelComment": {"id": "Ugyaf4-A_tEvbNBZBvp4AaABAg", "publishedAt": "2021-02-18T00:51:38Z", "author": "Voloskaya", "text": "Really good video, so well explained. Unless I am missing something I think there is a small mistake in the time and space complexity of howSum:\nThere is no need to store the positive result (an array in this case) in the memo object, since as soon as we find one good result, we stop the exploration and just return all the way up, so no other recursive call will be made, and the memo object will never be checked again. Only storing false/null is useful.\nBy that logic, even if you do store the array in memo, at most there will be a single array of length m in memo, so the space complexity would be O(m*2) so O(m) and not O(m*m).\nIn the same way, we are going to create a new array at most m times (a single path will ever return an array, never multiples, so 1 time per node in the path), so time complexity of copying the arrays would be O(m) again, for a total time complexity of O(n*m+m) instead of O(n*m^2).\nSo basically, you are assuming that in the worst-case scenario (say a numbers array filled with 1) every single path will return an array, while in reality it's always at most 1 path, since we stop all exploration as soon as we have one match.\n\nAm I missing something?", "likes": 7}}, {"topLevelComment": {"id": "UgwZKM9jIBq-4VPBHdp4AaABAg", "publishedAt": "2021-02-17T20:17:12Z", "author": "ValchyGaming", "text": "Really good video. I really like how you explain everything e.g the map method of the array. Even though I knew what everything JS related did I simply appreciate how you take a couple of minutes to show it so that people that don't know do not feel left out. Good stuff, keep it up!", "likes": 0}}, {"topLevelComment": {"id": "UgwPLRT3-Up2S62zpHh4AaABAg", "publishedAt": "2021-02-17T17:00:46Z", "author": "avadhesh sharma", "text": "howSum : https://youtu.be/oBt53YbR9Kk?t=6719 \nSpace complexity can be reduced by using Stack data structure. (C++ program)\n\nbool howSum(int targetSum, const vector<int>& numbers, unordered_map<int, bool>& inMap, stack<int>& stackNumbers) {\n    if (targetSum == 0) return true;\n    \n    if(targetSum < 0) return false;\n    \n    const auto& itr = inMap.find(targetSum);\n    if (itr != inMap.end()) {\n        return inMap[targetSum];\n    }\n    for(const auto& num : numbers) {\n        stackNumbers.push(num);\n        int remainderr = targetSum - num;\n        if ( canSum(remainderr, numbers, inMap, stackNumbers)) {\n            inMap[targetSum] = true;\n            return true;\n        }\n        else {\n            stackNumbers.pop();\n        }\n    }\n    inMap[targetSum] = false;\n    return false;\n}", "likes": 0}}, {"topLevelComment": {"id": "UgxRn1WICMMAmyJWrYp4AaABAg", "publishedAt": "2021-02-17T06:19:48Z", "author": "Varun Bachalli", "text": "why not just use (m == 1 or n == 1) in grid traveller instead of (m == 1 and n ==1 ) ? doesn't that reduce the number of computations?", "likes": 0}}, {"topLevelComment": {"id": "UgyMvb-qMGVcN4OjjSR4AaABAg", "publishedAt": "2021-02-17T06:00:43Z", "author": "Archon", "text": "Do people not know any other way to describe programming problems other than a tree or a hash map or graph?", "likes": 0}}, {"topLevelComment": {"id": "Ugzah7czlLPZcO4uDSx4AaABAg", "publishedAt": "2021-02-16T15:08:39Z", "author": "Roger Ruiz", "text": "Finally some todays animation-visualization-explanation of algorithms, nice job !!!", "likes": 0}}, {"topLevelComment": {"id": "Ugxp7gE9usng4Anw4AR4AaABAg", "publishedAt": "2021-02-16T14:06:21Z", "author": "BODDU BHARADWAJ", "text": "at 47:40 the leaf node at the right subtree should have (2,0) ,right?", "likes": 0}}, {"topLevelComment": {"id": "UgwnEeBxdrKLRoYACUJ4AaABAg", "publishedAt": "2021-02-15T23:03:32Z", "author": "lautaro lopez", "text": "Alvin...just \ud83d\udc4f", "likes": 0}}, {"topLevelComment": {"id": "UgzYVxGmAHptaGya0Ld4AaABAg", "publishedAt": "2021-02-15T18:56:16Z", "author": "TyTalks", "text": "This is the kind of channel and content that makes me wish that i could subscribe 2x or 3x . This channel is amazing", "likes": 0}}, {"topLevelComment": {"id": "Ugxs_Ns7vdJepNYjoQx4AaABAg", "publishedAt": "2021-02-15T06:32:58Z", "author": "Rohitashwa Chakraborty", "text": "Great content!! Thank you so much for this lucid explanation...", "likes": 0}}, {"topLevelComment": {"id": "UgzDoozRvFr6FiNt3mZ4AaABAg", "publishedAt": "2021-02-14T14:04:31Z", "author": "Atul Kumar Verma", "text": "World needs more such instructors and more such initiatives.", "likes": 0}}, {"topLevelComment": {"id": "UgwaCeCnf_MU1VZkZbB4AaABAg", "publishedAt": "2021-02-14T12:34:44Z", "author": "Shashank Gupta", "text": "can Someone help me with the C++ implementation of BestSum?", "likes": 0}, "replies": [{"id": "UgwaCeCnf_MU1VZkZbB4AaABAg.9JjyG7SBUSf9JqhxN5wQxY", "publishedAt": "2021-02-17T03:26:54Z", "author": "Shashank Gupta", "text": "@Ojou NIi Sama Please share code", "likes": 0}, {"id": "UgwaCeCnf_MU1VZkZbB4AaABAg.9JjyG7SBUSf9Jq_3aDXLre", "publishedAt": "2021-02-17T02:09:15Z", "author": "Ojou NIi Sama", "text": "I can", "likes": 0}]}, {"topLevelComment": {"id": "UgwsOxGW7EPQJnNqZCx4AaABAg", "publishedAt": "2021-02-14T06:14:38Z", "author": "Ajay Kumar", "text": "dint see a better video on dynamic programming than this one!! Thanks Alvin!!", "likes": 0}}, {"topLevelComment": {"id": "UgxNi2hXcHHufCCVPoJ4AaABAg", "publishedAt": "2021-02-13T17:41:55Z", "author": "venkatesh Grandhi", "text": "\u2764\ufe0f\u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgyC0JsD_BduW3S2Pbp4AaABAg", "publishedAt": "2021-02-12T19:42:44Z", "author": "David Yu", "text": "I love you.", "likes": 0}}, {"topLevelComment": {"id": "Ugx0pKGXnWZqWM5ZrZF4AaABAg", "publishedAt": "2021-02-12T11:57:19Z", "author": "Ramyak Sharma", "text": "his voice is sooo good", "likes": 0}}, {"topLevelComment": {"id": "Ugy0fiGe8k-5icMfEDx4AaABAg", "publishedAt": "2021-02-12T11:46:09Z", "author": "Random Access Meme", "text": "Alviny Zablano here, the Internet's busiest dynamic programming nerd", "likes": 0}}, {"topLevelComment": {"id": "Ugz9QmQobwVwNmmhUw14AaABAg", "publishedAt": "2021-02-12T00:45:50Z", "author": "Miko\u0142aj Podbielski", "text": "Grid traveler: (x+y)! / x! y!", "likes": 0}}, {"topLevelComment": {"id": "Ugyabw_-sR_xr6z-hrp4AaABAg", "publishedAt": "2021-02-11T02:28:57Z", "author": "Sai Kumar K", "text": "These problems are all available online if you really want to make videos make videos in difficult videos", "likes": 0}}, {"topLevelComment": {"id": "UgzeND4XTu0_ZaP6Qjx4AaABAg", "publishedAt": "2021-02-11T00:53:02Z", "author": "Sam", "text": "i just wanna get through the university. i'm having adhd and autism and it's way harder than it should.. i would like to see something with threads. i'm out of ideas, i need exercises", "likes": 1}}, {"topLevelComment": {"id": "UgxvXHHeQzHjwyw4NRV4AaABAg", "publishedAt": "2021-02-10T22:40:20Z", "author": "super sinful silicon software", "text": "can we use automatic closed captioning on this? It's not working - no option available to enable CC.", "likes": 0}}, {"topLevelComment": {"id": "UgzTAS5U9ojcvS9LPI54AaABAg", "publishedAt": "2021-02-10T22:37:11Z", "author": "michael scoggins", "text": "i am getting so confused when he tells me the height of each tree...", "likes": 1}, "replies": [{"id": "UgzTAS5U9ojcvS9LPI54AaABAg.9Jak14u_SSU9PKLkshycl_", "publishedAt": "2021-07-03T07:37:39Z", "author": "lim", "text": "Right! I don't get it. He keeps saying it's n+m, which in the example in grid traveller is 2+3 = 5 but there are clearly 4 nodes, so is the height always nodes + 1? Why? IIt's such a good video but it's frustrating not being able to ask questions.", "likes": 1}]}, {"topLevelComment": {"id": "UgwkETSmBiSkuD9D6A54AaABAg", "publishedAt": "2021-02-10T17:31:00Z", "author": "Dinara Garifollina", "text": "Could someone please tell me time & space complexity for allConstruct problem with and without memoization at (@\u200b). The one on the video time: O(n^m) and space: O(m) is without memoization? Then what's for with memoization?", "likes": 0}}, {"topLevelComment": {"id": "Ugxaco97IAwRM8I0sRJ4AaABAg", "publishedAt": "2021-02-10T11:27:33Z", "author": "Rajsekhar Dutta", "text": "Can anyone provide a link for the c++ code of the problems?\nI can't seem to find a few on the internet. Especially the howSum problem brute force approach.\n\nHalfway through the tutorial and it's absolutely amazing.", "likes": 0}}, {"topLevelComment": {"id": "UgwjPm_APh9tLjTn8wl4AaABAg", "publishedAt": "2021-02-10T02:34:39Z", "author": "Saurabh Agrawal", "text": "This is just awesome. Best dp tutor!!", "likes": 0}}, {"topLevelComment": {"id": "UgzWlCjfiR2waI6vFB94AaABAg", "publishedAt": "2021-02-10T02:13:39Z", "author": "michael scoggins", "text": "around 52:00 he says the height of the tree is n + m... but that would be 5 and i only count 4? what am i missing?", "likes": 0}, "replies": [{"id": "UgzWlCjfiR2waI6vFB94AaABAg.9JZZ-dwOR5e9JcucOZjL6Q", "publishedAt": "2021-02-11T18:48:16Z", "author": "michael scoggins", "text": "@Ojou NIi Sama I understand that but what\u2019s that have to do with the height of the tree? Isn\u2019t the height the longest path from the root to the leaf/base case?", "likes": 0}, {"id": "UgzWlCjfiR2waI6vFB94AaABAg.9JZZ-dwOR5e9JcMMY2P-Ls", "publishedAt": "2021-02-11T13:40:08Z", "author": "Ojou NIi Sama", "text": "Remember big O notation is a general assumption of the time and space complexity of a program. Don\u2019t look at it only from the perspective of the given example instead take into account the lower and upper bound of inputs and how it affects the space and time complexity. So in general constants are removed: n -1 just becomes n because on larger values for n the -1 becomes insignificant...", "likes": 0}]}, {"topLevelComment": {"id": "UgwgMcj8zZkiGZEf1_N4AaABAg", "publishedAt": "2021-02-10T01:56:21Z", "author": "armandso1", "text": "sorry, should have also mentioned that i'm referring to section starting around 32:15 or so mark", "likes": 0}}, {"topLevelComment": {"id": "Ugz27N25C3M_K60Bczl4AaABAg", "publishedAt": "2021-02-10T01:55:28Z", "author": "armandso1", "text": "okay, so i'm quite new to programming, so please be gentle :)  but isn't the 6th number in the Fib series, 5?  0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,....", "likes": 0}, "replies": [{"id": "Ugz27N25C3M_K60Bczl4AaABAg.9JZWvUVM6tp9J_cHg-61rn", "publishedAt": "2021-02-10T12:10:18Z", "author": "Ojou NIi Sama", "text": "2 versions of fib series. One starts at 0 the other starts at 1 the video utilized the latter", "likes": 0}]}, {"topLevelComment": {"id": "UgwgFfnXQsrIyNQlgpV4AaABAg", "publishedAt": "2021-02-09T21:48:28Z", "author": "Debashish Bera", "text": "Can you post the codes for these programs in JAVA in description or coomment box.It would be helpful if you do this.", "likes": 0}}, {"topLevelComment": {"id": "UgwNfKgZatFMYPHXjcN4AaABAg", "publishedAt": "2021-02-09T18:37:32Z", "author": "ATHARV RAMESH NAIR", "text": "How do you do the howsum one in C++?", "likes": 1}, "replies": [{"id": "UgwNfKgZatFMYPHXjcN4AaABAg.9JYjo1LWLEN9JjyTvV1M7B", "publishedAt": "2021-02-14T12:36:37Z", "author": "Shashank Gupta", "text": "#include <bits/stdc++.h> \r\n#define MOD 1000000007\r\n#define test int t; cin>>t; while(t--)\r\n#define init(arr,val) memset(arr,val,sizeof(arr))\r\n#define loop(i,a,b) for(int i=a;i<b;i++)\r\n#define loopr(i,a,b) for(int i=a;i>=b;i--)\r\n#define loops(i,a,b,step) for(int i=a;i<b;i+=step)\r\n#define looprs(i,a,b,step) for(int i=a;i>=b;i-=step)\r\n#define ull unsigned long long int\r\n#define ll long long int\r\n#define P pair\r\n#define PLL pair<long long, long long>\r\n#define PII pair<int, int>\r\n#define PUU pair<unsigned long long int, unsigned long long int>\r\n#define L list\r\n#define V vector\r\n#define D deque\r\n#define ST set\r\n#define MS multiset\r\n#define M map\r\n#define UM unordered_map\r\n#define mp make_pair\r\n#define pb push_back\r\n#define pf push_front\r\n#define MM multimap\r\n#define F first\r\n#define S second\r\n#define IT iterator\r\n#define RIT reverse_iterator\r\n#define FAST ios_base::sync_with_stdio(false);cin.tie();cout.tie();\r\n#define FILE_READ_IN freopen(\"input.txt\",\"r\",stdin);\r\n#define FILE_READ_OUT freopen(\"output.txt\",\"w\",stdout);\r\n#define all(a) a.begin(),a.end()\r\n#define deb(x) cerr<<#x<<' '<<'='<<' '<<x<<'\\n';\r\nusing namespace std;\r\n\r\nconst ll maxn = 1e5;\r\nconst ll inf = 1e9;\r\nconst double pi = acos(-1);\r\n\r\nll arr[10000];\r\nint memo[10000];\r\nvector<ll>v;\r\n\r\nbool howSum(ll target,ll n ){\r\n  \r\n     if(target==0) return true;\r\n    if(target<0) return false;\r\n    if(memo[target]!=-1){\r\n        return memo[target];\r\n    }\r\n   \r\n    ll rem;\r\n    for(ll i=0;i<n;i++){\r\n        rem=target-arr[i];\r\n        if(howSum(rem,n)==true){\r\n            v.push_back(arr[i]);\r\n            memo[target]=1;\r\n            return true;\r\n        }\r\n    }\r\nmemo[target]=0;\r\nreturn false;\r\n}\r\n\r\nint main(){\r\n    FAST\r\n ll target,n;\r\n cin>>target;\r\ncin>>n;\r\n\r\nmemset(memo,-1,sizeof(memo));\r\n\r\nfor(ll i=0;i<n;i++) cin>>arr[i];\r\n\r\n \r\nif(howSum(target,n)==true){\r\n\r\nfor(auto el: v){\r\n    cout<<el<<\" \";\r\n}\r\n }else{\r\n     cout<<\"NOT Possible\";\r\n }\r\n\r\n\r\n\r\n\r\n   return 0;\r\n}", "likes": 1}]}, {"topLevelComment": {"id": "Ugx1Q1tO_veJjKhC5054AaABAg", "publishedAt": "2021-02-09T12:08:44Z", "author": "Aditya P", "text": "Ok kind of a weird doubt but throughout the video we calculated the time complexity as O(n^m) because that's how many times we call the function as represented as the total number of nodes in the tree structure. But at 03:09:44 you say that \"at the base of the tree you have n^m number of nodes\", but that is different from the notation we were following all throughout the earlier examples where n^m represented all the nodes in the tree.", "likes": 0}}, {"topLevelComment": {"id": "Ugwx40b2iLN50Mct6eN4AaABAg", "publishedAt": "2021-02-09T11:45:04Z", "author": "Edwin", "text": "Does this algorithm work for ( 1,5) - I don't think so  . . .", "likes": 0}}, {"topLevelComment": {"id": "UgzijefqqdnasT_F-Kx4AaABAg", "publishedAt": "2021-02-09T04:44:47Z", "author": "Chandan Sharma", "text": "can someone tell me why my howSum() function takes forever to run, though I am using memoization:\n\ndef howSum(targetNum, arr, memo={}):\r\n    if targetNum in memo: return memo[targetNum]\r\n    if targetNum == 0: return []\r\n    if targetNum < 0: return\r\n\r\n    for num in arr:\r\n        if num != 0:\r\n            remainder = targetNum - num\r\n            res = howSum(remainder, arr, memo)\r\n            if res is not None:\r\n                res.append(num)\r\n                memo[targetNum] = res\r\n                return memo[targetNum]\r\n\r\n    return\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(howSum(300, [7, 14]))", "likes": 0}}, {"topLevelComment": {"id": "UgwVTlcWjcoXwTMcQBZ4AaABAg", "publishedAt": "2021-02-08T19:22:52Z", "author": "Jaideep Shekhar", "text": "Just a nitpick, but there is actually a formula for the nth term of a Fibonacci sequence, and so both the complexities are actually O(1). Same for the gridtraveler too.", "likes": 4}}, {"topLevelComment": {"id": "UgzwrEkRXBK8CqOOVAp4AaABAg", "publishedAt": "2021-02-08T16:38:18Z", "author": "MarcOfDeath", "text": "fib(50);\n*Fan Noises Intensify*", "likes": 1}}, {"topLevelComment": {"id": "Ugxa976UMkHZv9MP8i14AaABAg", "publishedAt": "2021-02-07T18:06:11Z", "author": "Keen Start", "text": "Sir i have a doubt in best sum problem why you copied the remainderCombinations value into combination. Can't we just add num using array push it will save time of array copying. Please someone tell if i am thinking in wrong direction", "likes": 0}}, {"topLevelComment": {"id": "Ugwf2aTzMyRZ98DHeBB4AaABAg", "publishedAt": "2021-02-07T16:14:57Z", "author": "Thao Huynh", "text": "Thank you for the courses!\nI\u2019m not an English native speaker. How can I have a subtitle to make sure I don\u2019t miss important things?", "likes": 0}}, {"topLevelComment": {"id": "UgyBChccAaKaus3u5tN4AaABAg", "publishedAt": "2021-02-07T08:45:54Z", "author": "Aswin Gokulachandran", "text": "Best Dynamic programming video ever! Thank you Alvin and a big thanks to freeCodeCamp for doing this.", "likes": 0}}, {"topLevelComment": {"id": "UgwHQBQsTLSR7uKLsNN4AaABAg", "publishedAt": "2021-02-07T07:52:19Z", "author": "abdullah y\u0131ld\u0131z", "text": "thank you", "likes": 0}}, {"topLevelComment": {"id": "UgxFEOnSQhJNduI4iuZ4AaABAg", "publishedAt": "2021-02-06T19:24:19Z", "author": "Luca Morelli", "text": "please add subtitles, for someone that doesn't talk natively english like me is not possibile to follow a complex topic listening someone talk quickly", "likes": 0}}, {"topLevelComment": {"id": "UgwDtsyr7hioPcX3lnh4AaABAg", "publishedAt": "2021-02-06T15:04:03Z", "author": "S", "text": "This is the best explanation of dp ever! Wow great great video", "likes": 0}}, {"topLevelComment": {"id": "UgxQhPfDxK5q2LoIuGx4AaABAg", "publishedAt": "2021-02-06T14:59:45Z", "author": "Joshua Geisler", "text": "Outstanding video. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgwlkALQQdwTaLL6ZC54AaABAg", "publishedAt": "2021-02-06T12:03:41Z", "author": "Zangief \u262d", "text": "06:15 you can actually hear the fan of the laptop revving up :D", "likes": 0}}, {"topLevelComment": {"id": "UgyJM7tNo0PKqzj3kgp4AaABAg", "publishedAt": "2021-02-05T15:41:30Z", "author": "pratheep", "text": "Can You please Make a Video similar to this for backtracking ?", "likes": 0}}, {"topLevelComment": {"id": "UgymEsJPKs3rAnjYlSp4AaABAg", "publishedAt": "2021-02-05T07:35:17Z", "author": "ghani abdu", "text": "Great tutorial for algorithms", "likes": 0}}, {"topLevelComment": {"id": "UgyqlBV4OITvz4MLTdV4AaABAg", "publishedAt": "2021-02-05T01:22:35Z", "author": "jared0801", "text": "Can anyone help me understand why replacing \"const combination = [ ...remainderCombination, num ];\" with \"remainderCombination.push(num);\" (and replacing combination with remainderCombination) doesn't work in bestSum? It seemed to work in both canSum and howSum.", "likes": 0}}, {"topLevelComment": {"id": "UgxgBpk0hraWujpwzBV4AaABAg", "publishedAt": "2021-02-04T12:36:26Z", "author": "Dan-Timon Rudolph", "text": "Cool.", "likes": 0}}, {"topLevelComment": {"id": "UgyeM6uwatBTdgLoICV4AaABAg", "publishedAt": "2021-02-04T08:55:04Z", "author": "Rabi Siddique", "text": "Can someone please guide me on how to get all the combinations that meet up the target sum, in a result array?  In that howSum question.", "likes": 0}}, {"topLevelComment": {"id": "UgwNsajBeTvYHScgMkt4AaABAg", "publishedAt": "2021-02-04T03:08:30Z", "author": "Bharathwaj Srinivasan", "text": "Hi, thanks for this amazing free video !!\nI have a question... In the countConstruct memoization, you have not added numWaysForRest into the memo (inside the for loop). Isn't this necessary ??", "likes": 0}}, {"topLevelComment": {"id": "UgyDc8ysB6Kt9b_gfyF4AaABAg", "publishedAt": "2021-02-04T01:51:22Z", "author": "Kalvin", "text": "Easily the best dp video I've ever seen", "likes": 0}}, {"topLevelComment": {"id": "Ugz9-AHk3a-NVe10o714AaABAg", "publishedAt": "2021-02-03T18:58:11Z", "author": "Vikram Kumar Jaiswal", "text": "thanks", "likes": 0}}, {"topLevelComment": {"id": "UgxveW1i_xP2t6tYalR4AaABAg", "publishedAt": "2021-02-03T07:57:13Z", "author": "B18CS155_MOHAMMED ASIFUDDIN", "text": "I watched this whole vedio, I liked it very much. He really explained it very well, I understood everything even I don't know anything in JavaScript.", "likes": 0}}, {"topLevelComment": {"id": "UgzC7674FudCnuGt-EN4AaABAg", "publishedAt": "2021-02-03T07:27:41Z", "author": "Life Simply Rocks", "text": "Best video ever!! You really helped me with my fear of Dyn Programming. Thanks a million!", "likes": 0}}, {"topLevelComment": {"id": "UgzyAgWHHQnDAj6H4gV4AaABAg", "publishedAt": "2021-02-03T03:37:14Z", "author": "\u0b85\u0bb1\u0bae\u0bcd", "text": "This is a gem, thank you very much!", "likes": 0}}, {"topLevelComment": {"id": "Ugx1AQYtCs246-DzR594AaABAg", "publishedAt": "2021-02-02T19:11:31Z", "author": "Benjamin Eastman", "text": "Alvin looks just like this guy Alvin I saw over at app Academy!  He has been holding my hand for about a month now (figuratively speaking).", "likes": 0}}, {"topLevelComment": {"id": "UgyaTKMeB47LAJE4z6N4AaABAg", "publishedAt": "2021-02-02T11:38:36Z", "author": "Faheel Mohammad", "text": "This is probably the best dp tutorial i have came across hands down. Great job!!", "likes": 0}}, {"topLevelComment": {"id": "UgyYsHb9a0LneoVHCD54AaABAg", "publishedAt": "2021-02-01T23:39:55Z", "author": "David Pocsai", "text": "for canSum, if the numbers array contains the value 0, the function will reach the maximum call size. What is the best way to prevent this? The rules of the problem only stated that we can assume the numbers in the array will be nonnegative, which doesn't include 0.", "likes": 0}, "replies": [{"id": "UgyYsHb9a0LneoVHCD54AaABAg.9JEg2e62eBy9J_d1msiORk", "publishedAt": "2021-02-10T12:16:52Z", "author": "Ojou NIi Sama", "text": "Check if its 0 then just don\u2019t do anything...", "likes": 0}]}, {"topLevelComment": {"id": "UgykLbxNAZZ48AYVjM14AaABAg", "publishedAt": "2021-02-01T22:05:55Z", "author": "Drogo Khan", "text": "On the gridTraveller problem, if you provide an alternative key (n,m), it will be more efficient...\n\nPython code:\n===========\nimport time\n\nmemo = {}\n\ndef gridTraveller(m, n):\n\tkey = str(m) + ',' + str(n)\n\taltkey = str(n) + ',' + str(m)\n\n\tif (key in memo or altkey in memo):\n\t\treturn memo[key]\n\tif (m == 1 and n == 1):\n\t\treturn 1\n\tif (m == 0 or n == 0):\n\t\treturn 0\n\n\tmemo[key] = gridTraveller(m - 1, n) + gridTraveller(m, n - 1)\n\tmemo[altkey] = memo[key]\n\n\treturn memo[key]\n\nstart = time.time()\nprint(\"300:\", gridTraveller(300, 300))\nend = time.time()\n\nprint(end - start)\n\nResults:\n=======\nWithout Alternative Key:\n---------------------------------------\npython3 gridTraveller.py\n300: 33833374456476027173908567106470249682112006372919903153413786757881673724876222945396614406913473243407345775801127858692128670474411917786805115287613592893650100698633381061600\n0.252795934677124\n\nWith Alternative Key:\n----------------------------------\npython3 gridTraveller.py\n300: 33833374456476027173908567106470249682112006372919903153413786757881673724876222945396614406913473243407345775801127858692128670474411917786805115287613592893650100698633381061600\n0.22671008110046387", "likes": 0}}, {"topLevelComment": {"id": "UgylQ8mOBMHQz6njsTF4AaABAg", "publishedAt": "2021-02-01T19:57:48Z", "author": "David Pocsai", "text": "Some thoughts on the gridTraveler problem. If you have a 1x1 grid you technically are not traveling so I argue that this should not be considered. I drew the tree out in a similar way as Alvin, but anytime either m or n became 1 (ex. 2x1...1x4... 3x1 etc.) I stopped going further down the tree. I considered each one of those 1 x n or m x 1 instances to be the base case, and if you were to count them it returns the correct answer. There is exactly 1 way to travel from start to finish in any 1 x n or m x 1 grid (1x150 is the same as 2x1).  In my code I had the following: (before memoziation) \n\nconst grid = (m, n) => {\r\n\tif (m <= 0 || n <= 0) return 'invalid grid';\r\n\tif (m === 1 || n === 1) return 1;\r\n\treturn grid(m - 1, n) + grid(m, n - 1);\r\n};\r\n\nAnyone have any thoughts on this logic? Am I mistaken?", "likes": 0}}, {"topLevelComment": {"id": "UgyUv7k1v2MF6E0Zvf14AaABAg", "publishedAt": "2021-02-01T09:09:30Z", "author": "Suya Si", "text": "couldn't be better :D", "likes": 0}}, {"topLevelComment": {"id": "UgwySnWpaml6WCI98ft4AaABAg", "publishedAt": "2021-01-31T22:16:38Z", "author": "Space Cats", "text": "FCC you're killing it with content. These are the type of topics I've spent at the university for a fucking pos paper.  ugh, wish i was born in another time line. D:", "likes": 0}}, {"topLevelComment": {"id": "Ugxd1CPhnDn1iDM5bNd4AaABAg", "publishedAt": "2021-01-31T19:59:42Z", "author": "David Pocsai", "text": "This video changed my life. Really loved the explanations, it made everything so much simpler to visualize, and to fully understand what goes on behind the scenes. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgytmRXcQbXk9G_mx-Z4AaABAg", "publishedAt": "2021-01-31T13:22:03Z", "author": "Kurt Van Bever", "text": "[ LIKE ]  this comment if you learned something here\nand you agree that Alvin deserves some recognition on his own channel.\nAlvin's channel :  https://www.youtube.com/c/CoderbyteDevelopers/featured\nMake sure to sub.", "likes": 0}}, {"topLevelComment": {"id": "UgypuN5iDOp561l3xL54AaABAg", "publishedAt": "2021-01-31T11:11:06Z", "author": "R\u00f3cherz", "text": "Uploaded on my B.D., what a treat!  :D", "likes": 0}}, {"topLevelComment": {"id": "UgwKLrWFfkzCO6ZklSZ4AaABAg", "publishedAt": "2021-01-30T09:13:52Z", "author": "somekind ofBox", "text": "54:05 wouldn't it be more accurate to say that the time complexity is 2^((n-1) + (m-1))?", "likes": 0}, "replies": [{"id": "UgwKLrWFfkzCO6ZklSZ4AaABAg.9J7zLnAyECM9J_dGK7P2H-", "publishedAt": "2021-02-10T12:18:51Z", "author": "Ojou NIi Sama", "text": "You remove constants on big O notation. 2n is just n, 3n is just n, n - 1 is just n.", "likes": 0}]}, {"topLevelComment": {"id": "UgyKTOSFUO6lCXxhnNJ4AaABAg", "publishedAt": "2021-01-30T08:55:46Z", "author": "Necro", "text": "1:04:07 I thought the space complexity for the memoized version would be O(n*m) since we are storing at every iteration", "likes": 0}}, {"topLevelComment": {"id": "UgyblhYv9U4gCdUPUrh4AaABAg", "publishedAt": "2021-01-29T16:36:09Z", "author": "tsumitsukuri", "text": "const key = (n > m) ? (n + ',' + m) : (m + ',' + n); // s small improvement for gridTraveler\nif(targetSum % num == 0) return true; // we can reuse numbers for canSum, so this, possibly, will be a small improvement - add this line at he the beginning of the loop", "likes": 0}}, {"topLevelComment": {"id": "UgwlIyXhBIoaTUevQW54AaABAg", "publishedAt": "2021-01-29T14:03:40Z", "author": "xerxius", "text": "2:23:54 - alternatively we can also use target.startsWith(word)", "likes": 0}}, {"topLevelComment": {"id": "Ugx6bhWKKW-K6RTj3o14AaABAg", "publishedAt": "2021-01-29T13:27:29Z", "author": "Will Boos", "text": "Thank you for all of your hard work on this. Just started MITxPro, and our syllabus includes nodejs, mongodb, express-generator...  Thankfully I already had it working on Ubuntu because of your code camp.", "likes": 0}}, {"topLevelComment": {"id": "Ugx4i4xGbQAvx4_JaJV4AaABAg", "publishedAt": "2021-01-29T12:37:10Z", "author": "xerxius", "text": "Yep, You are looking at the best Dynamic Programming Tutorial on the internet", "likes": 0}}, {"topLevelComment": {"id": "UgwDhw00FJnVoTQvNXx4AaABAg", "publishedAt": "2021-01-29T10:58:00Z", "author": "Prabdeep Dhaliwal", "text": "This is amazing! I love the explanation, it is clear and keeps me interested!", "likes": 1}}, {"topLevelComment": {"id": "UgxUDoqzxKZBUkXsi9J4AaABAg", "publishedAt": "2021-01-29T07:57:26Z", "author": "Tanay Raj", "text": "This is a million dollar tutorial", "likes": 1}}, {"topLevelComment": {"id": "UgygSNjl8NzfaF8pIx94AaABAg", "publishedAt": "2021-01-28T22:24:50Z", "author": "Justin Rush", "text": "Anyone else notice the chef John voice inflection?", "likes": 0}}, {"topLevelComment": {"id": "UgwJ5LkQRQnrhzA1lJJ4AaABAg", "publishedAt": "2021-01-28T21:39:52Z", "author": "James Edwards", "text": "First, fantastic video! Huge kudos!\n\nBut, second... Characterizing the allConstruct algorithm as O(m) space is just plain wrong, for both brute force and memoized versions. It is not true that only the call-stack depth is what matters here (as claimed at 3:10:15), otherwise all the earlier algorithms would have also only been O(m) space. They weren't, and aren't, and neither is this one. It is rather obviously at least O(n^m) space, considering that the answer itself can be that size. (Even the simpler countConstruct algorithm is stated as O(m^2) space, and allConstruct can't be less than it.)\n\n3:09:36 followed by 3:10:15, and the claims in-between that very large output results aren't included in big-O space assessments, are just baffling. Because that isn't true. The end result is the objective of the algorithm and must necessarily be included in the space assessment, *_especially_** when it's very large.*", "likes": 0}}, {"topLevelComment": {"id": "Ugx4zdPrD9V1pi4xfAZ4AaABAg", "publishedAt": "2021-01-28T19:33:32Z", "author": "Minuet", "text": "Nitpicking and kinda thinking a-caps here... seems off to me, to be calling the leaves of the tree in howSum (around 1:35:00) \"base cases\". I'm aware of the term's use in mathematical induction proofs... but in this context, those end-result leaves aren't really base cases, right? I see how a leaf of zero can be traced back up to the root, and that the edge values give the desired combination of numbers... but \"base case\" isn't an appropriate term here, is it? Maybe \"derived case\"?", "likes": 0}}, {"topLevelComment": {"id": "UgycZzV3-es-B1vCJLl4AaABAg", "publishedAt": "2021-01-28T19:14:26Z", "author": "boggo", "text": "This is an EXCELLENT video.", "likes": 0}}, {"topLevelComment": {"id": "Ugxp7g02lm21HHObGkB4AaABAg", "publishedAt": "2021-01-27T19:24:15Z", "author": "Darren Yeung", "text": "For the GridTraveler problem, can't we optimize more in the code by doing: \nif key in memo {=\n    return memo[key];\n} else if (flip(key) in memo) {\n    return memo[flip(key)];\n}\n\nI see that Alvin mentioned it when describing the tree visual but he didn't implement it when he was coding. Is my way correct as well? Thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxT-e47BVNhpg5K2el4AaABAg", "publishedAt": "2021-01-27T19:05:35Z", "author": "Shweta Rajguru", "text": "Overall very interesting video.\nnot sure if I got it correctly but seems that CanSum provides incorrect answer eg : CanSum(7, [5, 3, 1, 8]) - result: true |  Expected: false", "likes": 0}, "replies": [{"id": "UgxT-e47BVNhpg5K2el4AaABAg.9J1Jg0mC_D59J_dUAJNEC-", "publishedAt": "2021-02-10T12:20:44Z", "author": "Ojou NIi Sama", "text": "5 + 1 + 1 = 7", "likes": 0}]}, {"topLevelComment": {"id": "Ugxp5pr_ad51dnGNEsl4AaABAg", "publishedAt": "2021-01-27T16:15:06Z", "author": "Aditya Gupta", "text": "can anyone explain how the time complexity of allConstruct using memorization is exponential, instead the time complexity of countConstruct is polynomial although it also explores full tree when there is no duplicate.", "likes": 0}, "replies": [{"id": "Ugxp5pr_ad51dnGNEsl4AaABAg.9J10AS3fjTz9J4DSHEDZFv", "publishedAt": "2021-01-28T22:08:51Z", "author": "James Edwards", "text": "Presumably, we agree that in the brute force case both are about O(n^m) time (neglecting the slicing noted at 2:32:30, which roughly multiplies by another m), so let's consider only the memoization case. (Side note: \"memoization\", not \"memorization\".)\r\n\r\nKEY INSIGHT WHEN MEMOIZING here: unlike in the brute force case, neither countConstruct nor allConstruct exhaustively \"explore the full recursive search space tree\", *even in the worst case scenario.*\r\n\r\nWhy? Because memoizing short-circuits many recursive-call branches of this exhaustive search. Consider: for a target input of length m, there are a maximum of m \"suffixes to explore\". At any given point in the tree, you've either \"solved\" that suffix, or you haven't. You only need to do that m times, ever, with memoization (not n^m times, like in brute force, which ignores duplicate effort). At any point, either:\r\n1) this is your first and only time ever needing to solve the suffix (and memoize the result), or\r\n2) you've already seen and memoized the solution of the suffix, so its recursive search branch is effectively pruned.\r\n\r\nSo, what makes the difference between countConstruct and allConstruct? The nature of the result itself (and the memoization characteristics).\r\n\r\nSums aggregate, so countConstruct's result is a single number, as are all of its memoized entries for every possible suffix (max of m). If you've seen a suffix before, you just add its count to all the other suffixes' counts at this level, and that answer now represents the answer for the longer suffix. This \"aggregation\" of counts is O(n), in each case (n items to sum), and it only needs to be done a max of m times---once for each suffix---resulting in O(n*m). (Again, this is neglecting slicing.)\r\n\r\nHowever, in the case of allConstruct, the *memos themselves are exponential* in nature, requiring that every possible construction for each suffix be enumerated within its memo rather than just a single count number. And, every time you have seen a suffix before, **even though you don't need to \"recursively re-solve it\"**, you still must combine it with all other suffixes' possible constructions at that same level in order to define the answer for the longer suffix. This ultimately results in exponential behavior even though you still only need to do this \"aggregation\" a maximum of m times. This is because the combination of constructions is itself O(n^k), where k is the current suffix's length. In the worst case, for a suffix of length k, there are n^(k-1) possible constructions for EACH \"child suffix\", and to construct the (k-length) suffix's result, you must combine all n of those n^(k-1)-sized construction sets, i.e., build a set to memoize that is n*(n^(k-1)) = n^k in size. This remains true at the top, where k=m, so the final result is O(n^m) time (again, neglecting slicing).\r\n\r\nRecommendation: as just an example case, think carefully about that final test input, minus its terminal letter. Once you've \"solved\" the top-most, left-most recursive branch (let's call it L-branch), none of the other branches need to be recursively called down into any deeper than the first level because every possible suffix below that has already been memoized inside L-branch. (This is similarly true for branches inside L-branch, working down through it.) The only thing that must be done is to combine those other first level prefixes with any relevant already-memoized suffixes.\r\n\r\nNOTE: I commented elsewhere on this video that characterizing the allConstruct algorithm as O(m) space is just plain wrong, for both brute force and memoized versions. Even the simpler countConstruct algorithm is stated as O(m^2) space, and allConstruct is rather obviously at least O(n^m) space, considering that the answer itself can be that size.", "likes": 0}]}, {"topLevelComment": {"id": "UgzlWqhjHjrkbQIoHPJ4AaABAg", "publishedAt": "2021-01-27T05:03:06Z", "author": "Greg Tiu", "text": "Haven't touched dynamic programming in years. Step by step explanation was *chefkiss", "likes": 0}}, {"topLevelComment": {"id": "Ugw93f2XauUX9DBs3r54AaABAg", "publishedAt": "2021-01-27T03:45:23Z", "author": "SniperLegacy", "text": "I think for the gridTraveler problem you also forgot to add the check in the memo for inversed grid which you told they give the same result.\nconst inversedKey = n + \",\" + m;\nif (inversedKey in memo) return memo[inversedKey];", "likes": 2}, "replies": [{"id": "Ugw93f2XauUX9DBs3r54AaABAg.9J-fNMxDgD89Oj13nTp2zR", "publishedAt": "2021-06-18T10:25:44Z", "author": "Pandav Patel", "text": "Also, I did not understand how space complexity is O(m+n) for GridTraveller. Because to store memo we need O(m*n) space. Do you agree? Or am I missing something?", "likes": 0}]}, {"topLevelComment": {"id": "UgzBuQ9Xn2IyQRWtfGx4AaABAg", "publishedAt": "2021-01-26T17:45:27Z", "author": "SLPKNTs", "text": "1:44:33 shouldn't the complexity be O(n^m + m) instead of O(n^m * m)? The line 9 will be executed only m times when constructing return result and once we have it the code will exit.\nThe complexity might be O(n^m * m) for code that will try to find all possible solutions, I think. Correct me if I'm wrong.\nAnd huge thanks for the video, awesome work!", "likes": 0}}, {"topLevelComment": {"id": "UgyfThACFucvctcy71B4AaABAg", "publishedAt": "2021-01-26T14:08:45Z", "author": "macrograms", "text": "\"it goes without saying.\"\nthen why is this the pointless phrase people on youtube can't stop saying?", "likes": 3}}, {"topLevelComment": {"id": "UgyrT56hKKbFH0x-kIR4AaABAg", "publishedAt": "2021-01-26T13:53:00Z", "author": "Preeti Jindal", "text": "I am writing this review by just viewing the content for 30 mins. I loved it. I was bit reluctant to start as Dynamic Programming is very difficult and yet very important at the same time. This has given me a boost of confidence as i was able to code the same concept in Java. Thank you so much. And Happy Coding everyone. \nNo matter how difficult it seems, we would go through it Together. :)", "likes": 7}}, {"topLevelComment": {"id": "UgzNCMliBQs8PG_dRcN4AaABAg", "publishedAt": "2021-01-26T13:05:03Z", "author": "Dreamingbig", "text": "The link for this guys YouTube isn't working !!", "likes": 0}}, {"topLevelComment": {"id": "UgzNomlQwQMQyDnJESJ4AaABAg", "publishedAt": "2021-01-26T09:52:06Z", "author": "zeno aratus", "text": "this guy has a great calming logical approach to explaining, exploring the problem and coding the solution.  great skills", "likes": 0}}, {"topLevelComment": {"id": "UgwGyO9rRmVl0a9HevF4AaABAg", "publishedAt": "2021-01-26T06:09:40Z", "author": "Udayan Birajdar", "text": "DP is love. DP is life \u2665\ufe0f Thank you Alvin", "likes": 0}}, {"topLevelComment": {"id": "UgyulCz5JQsGkSZJtvd4AaABAg", "publishedAt": "2021-01-25T21:12:33Z", "author": "Carlos M", "text": "5 hrs well spent! This guy is amazing, I want him teach me how to brew espresso at home and make sourdough english muffins next.", "likes": 3}}, {"topLevelComment": {"id": "UgzaYe74WdRZWpF-zRN4AaABAg", "publishedAt": "2021-01-25T17:55:33Z", "author": "Rudi Klein", "text": "Great trainer, great format and great content. \ud83d\udc4d", "likes": 0}, "replies": [{"id": "UgzaYe74WdRZWpF-zRN4AaABAg.9Ix24MEQKtk9Js5a2QNb5d", "publishedAt": "2021-02-17T16:21:25Z", "author": "Tarun Pratap Singh", "text": "just freecodecamp things", "likes": 0}]}, {"topLevelComment": {"id": "UgxS5a0WGCcp5jNgMjV4AaABAg", "publishedAt": "2021-01-25T17:20:16Z", "author": "Adriana Paun", "text": "I wish that my algo teacher had explained to me dynamic programming like this guy....", "likes": 0}}, {"topLevelComment": {"id": "UgzQ2D6gcPEajwaSYoN4AaABAg", "publishedAt": "2021-01-25T06:11:17Z", "author": "peacockStar", "text": "1:09:59", "likes": 0}}, {"topLevelComment": {"id": "UgzPw8HedrcfNFHnZF54AaABAg", "publishedAt": "2021-01-25T05:31:20Z", "author": "Pulkit Joshi", "text": "Really? I dont see his handle on cf or cc", "likes": 0}}, {"topLevelComment": {"id": "UgwTq8DWv6ESVtex66t4AaABAg", "publishedAt": "2021-01-24T21:41:12Z", "author": "Investing Learning Machine", "text": "I wish my algorithm class teacher send his paycheck to you\ud83c\udf1a\ud83c\udf1a", "likes": 69}, "replies": [{"id": "UgwTq8DWv6ESVtex66t4AaABAg.9Ius6B7xOja9T9xRn2ybif", "publishedAt": "2021-10-06T16:49:37Z", "author": "LUKFUN TV", "text": "Send him after you earn ur ist...", "likes": 0}]}, {"topLevelComment": {"id": "UgwzjWcLu0gqlfkNOfF4AaABAg", "publishedAt": "2021-01-24T21:37:24Z", "author": "Seth", "text": "2:33:00 Would line 5 traget.indexOf(word) also increase the time complexity by m because worse case it would have to iterate through the entire target string?", "likes": 0}, "replies": [{"id": "UgwzjWcLu0gqlfkNOfF4AaABAg.9IurfOv8NJC9OhWDY4wx_q", "publishedAt": "2021-06-17T20:19:27Z", "author": "amit samrat maurya", "text": "That will just make the complexity 2M", "likes": 0}]}, {"topLevelComment": {"id": "Ugy-S7qZb0Wy7MMmcn54AaABAg", "publishedAt": "2021-01-24T20:08:40Z", "author": "Nikolaos Tsagkarakis", "text": "I do not think that O(2^{n/2}) = O(2^n).\nIt is like saying that O(a^n) = O(b^n) even when a is not equal to b.\n(in your care, a = sqrt(2) and b= 2.)", "likes": 1}, "replies": [{"id": "Ugy-S7qZb0Wy7MMmcn54AaABAg.9IuhWR9OYJx9IzgIU2b3jX", "publishedAt": "2021-01-26T18:34:13Z", "author": "Nikolaos Tsagkarakis", "text": "@Glyn Normington it says \"Highlighted reply.\" I thought you highlighted it............. it probably is a youtube thing.... never mind", "likes": 1}, {"id": "Ugy-S7qZb0Wy7MMmcn54AaABAg.9IuhWR9OYJx9IzY4UkY8nh", "publishedAt": "2021-01-26T17:13:40Z", "author": "Glyn Normington", "text": "@Nikolaos Tsagkarakis I suppose so. Why do you ask?", "likes": 0}, {"id": "Ugy-S7qZb0Wy7MMmcn54AaABAg.9IuhWR9OYJx9IzWSEr1-zC", "publishedAt": "2021-01-26T16:59:26Z", "author": "Nikolaos Tsagkarakis", "text": "@Glyn Normington Isn't Alvin managing the video(s)?", "likes": 0}, {"id": "Ugy-S7qZb0Wy7MMmcn54AaABAg.9IuhWR9OYJx9IzQbcecCsU", "publishedAt": "2021-01-26T16:08:25Z", "author": "Glyn Normington", "text": "I agree. Note that (2^(n/2))^2=2^n. Wikipedia gives a helpful definition: https://en.wikipedia.org/wiki/Big_O_notation", "likes": 0}]}, {"topLevelComment": {"id": "UgyCitCHc1Dg7GqK6hl4AaABAg", "publishedAt": "2021-01-24T19:46:13Z", "author": "Hervinho", "text": "This was a very good video, and content well explained. Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgwL2LOwtJYLvirYgrx4AaABAg", "publishedAt": "2021-01-24T11:33:04Z", "author": "A. Teima", "text": "Solved the howSum problem with dfs https://paste.ofcode.org/FQ5Q7RiukifwGn3Yxh3tdw *C++*\nIf there are any issues in my code please tell me \nAlso does anyone know what the time complexity of this program is?", "likes": 1}}, {"topLevelComment": {"id": "UgyrM5Wl6CJu6YpOUoR4AaABAg", "publishedAt": "2021-01-23T22:38:32Z", "author": "Adhikrut D", "text": "Feeling good like I should \ud83d\ude0d Thanks you freeCodeCamp", "likes": 0}}, {"topLevelComment": {"id": "UgznYOnUFFqO1CRfjOx4AaABAg", "publishedAt": "2021-01-23T21:34:48Z", "author": "Rufat Aliyev", "text": "I would pay a good amount for this course. Very simple and clear explanations. Appreciate it.", "likes": 1}}, {"topLevelComment": {"id": "UgxZQ3u8AQ3bc1EqJfh4AaABAg", "publishedAt": "2021-01-23T15:36:34Z", "author": "Steve Warren", "text": "In howSum() why are you making a copy of the array you return, using the spread operator, rather than simply pushing the new value and returning that array?", "likes": 0}, "replies": [{"id": "UgxZQ3u8AQ3bc1EqJfh4AaABAg.9Ird_fr9SvJ9Ire5_6jvdH", "publishedAt": "2021-01-23T15:41:03Z", "author": "Steve Warren", "text": "I guess the question is more like, how do you make that original decision - to create a copy and incur the processing cost, versus taking the faster road (push) that might incur other problems down the road?", "likes": 0}, {"id": "UgxZQ3u8AQ3bc1EqJfh4AaABAg.9Ird_fr9SvJ9IrdqLA_nkG", "publishedAt": "2021-01-23T15:38:50Z", "author": "Steve Warren", "text": "I think I see that could cause problems with memoization. Were you just planning for that in advance?", "likes": 0}]}, {"topLevelComment": {"id": "UgwiOUJD5vS_1sVU8Bt4AaABAg", "publishedAt": "2021-01-22T16:58:51Z", "author": "Chethan Sai", "text": "how he didn't got index out of range error for Fibonacci tabulation method??\ud83d\ude05\ud83d\ude05\ud83d\ude05", "likes": 0}}, {"topLevelComment": {"id": "Ugxw7yFui5tTun_6h6V4AaABAg", "publishedAt": "2021-01-22T13:19:39Z", "author": "\u4e91\u7115Leon", "text": "To make gridTraveler one line simpler is to use \"  if(m === 1 || n === 1) return 1;\"", "likes": 0}}, {"topLevelComment": {"id": "Ugw8LcSOxMrC2-SFOOV4AaABAg", "publishedAt": "2021-01-22T08:50:44Z", "author": "Lior Shalev", "text": "In the Fibonacci memoized version, should the key lookup and insertion cost also added to the total complexity?", "likes": 0}}, {"topLevelComment": {"id": "UgwLS_i9xLZQ5Nj_Grx4AaABAg", "publishedAt": "2021-01-22T05:02:15Z", "author": "The Last Hair Bender", "text": "Lol memoization", "likes": 0}}, {"topLevelComment": {"id": "UgzgPV-nOKpddLM8Nt14AaABAg", "publishedAt": "2021-01-21T23:57:29Z", "author": "Mihail Zhelev", "text": "Does someone know what is the name of his theme", "likes": 0}}, {"topLevelComment": {"id": "UgwnfBOW_4N-uaDqYTJ4AaABAg", "publishedAt": "2021-01-21T15:32:32Z", "author": "Oscar Carzaniga", "text": "About the n-th Fibonacci number F(n):\nthere is an exact formula to calculate any fibonacci number, but involve exponentials of the golden ratio (very beautiful formula) but due to digits precision it fails on big enough values of n.\nIf the language is optimized for tail recursion it's possible to create algorithms that are very space-efficient (like O(1) ).\nOne of such algorithm which is quite famous is the one starting with (0,1) and proceeding with recursion (a,b) -> (b, a+b) which is O(n) without the need of a memo.\nWith a clever use of the Catalan identity https://en.wikipedia.org/wiki/Cassini_and_Catalan_identities I created a tail recursive algorithm. Both the math and the implementation are far more complex than the previous one, but as far as I can understand should run as O(log(n)). I've implemented it in F# because it can optimize tail recursion and also can use the bigint. https://www.dropbox.com/s/j01wz2ywplsf4ga/Fibonacci_Catalan.fsx?dl=0\n\nI know this isn't the point of the video, but... Grid problem: n*m segments - > binomial coefficient (n+m) over n.\nIf you prefer squares: binomial coefficient (m+n-2) over (n-1)\n\nEDIT: refined function with python:\ndef fib( number ):\n    normalized = abs(number) + 1\n    (x, y) = (0, 1)\n    for i in range(normalized.bit_length()-2, -1, -1):\n        (x, y) = (y*y + x*x, y*y + 2*x*y)\n        if normalized & (1<<i) : (x, y) = (y, x+y)\n    return -x if ( number < 0 and normalized % 2 ) else x", "likes": 1}}, {"topLevelComment": {"id": "UgwFDluOwwBz9Mbt5k94AaABAg", "publishedAt": "2021-01-21T13:18:16Z", "author": "Yandira Vivancos", "text": "Hola!!! un gusto\ud83d\udd90\ud83d\ude0a genial tengo un problemita con el Ingles reconozco que tengo que  aprender es necesario, entiendo el c\u00f3digo pero lo que explica no mucho podr\u00eda habilitarlo el traductor de configuraci\u00f3n del video para poder aprovechar al m\u00e1ximo ?? porfavor!!! saludos desde Bolivia!!\n \ud83e\udde1\ud83d\udc9b\ud83d\udc9a", "likes": 0}}, {"topLevelComment": {"id": "UgwVwxxL4W7HE7-0fot4AaABAg", "publishedAt": "2021-01-21T11:29:37Z", "author": "Ignacio Cortorreal", "text": "3:11:52 the ancestor of recursion. Who invented this technique?", "likes": 0}}, {"topLevelComment": {"id": "Ugx26t8g4ZiOAlRFScd4AaABAg", "publishedAt": "2021-01-21T07:59:15Z", "author": "Chiranjib Konwar", "text": ":)", "likes": 1}}, {"topLevelComment": {"id": "UgwzRMl7tP4-fr7KqLF4AaABAg", "publishedAt": "2021-01-21T07:17:19Z", "author": "adisone sinakone", "text": "to err is human, to edit is divine", "likes": 1}}, {"topLevelComment": {"id": "UgzU9nh53bp4BV2LEzl4AaABAg", "publishedAt": "2021-01-21T05:00:55Z", "author": "adisone sinakone", "text": "wedding", "likes": 0}}, {"topLevelComment": {"id": "UgwPGBO6hCwiuanGuzR4AaABAg", "publishedAt": "2021-01-21T02:55:42Z", "author": "Kimmo Salin", "text": "In gridTraveler (m === 1 && n === 1) could be (m === 1 || n === 1) for more speed.", "likes": 0}}, {"topLevelComment": {"id": "UgwHneYLBm5bz0EfWLh4AaABAg", "publishedAt": "2021-01-20T05:21:44Z", "author": "Light Theory LLC", "text": "Assalamualaikum brothers and sis, I am seeking Software Engineers, whom can code in Tensor flow and RNN Time series.  I am paying.. I am based in USA.. Please check out https://lighttheory.page/  or email us at info@LightTheory.tech  SALAM", "likes": 0}}, {"topLevelComment": {"id": "UgzdM8Ibg3ZFmflbWHd4AaABAg", "publishedAt": "2021-01-20T05:00:36Z", "author": "tindo tare", "text": "53:58 won't the height be ((n+m)-2) since 0,0 is not a valid position??", "likes": 0}}, {"topLevelComment": {"id": "UgxI8z17LU6AuU6YZiF4AaABAg", "publishedAt": "2021-01-20T03:00:37Z", "author": "Philcob Suzuki", "text": "Is it okay to learn this with only just basic  Javascript knowledge?", "likes": 0}}, {"topLevelComment": {"id": "Ugzsb-0r6-CHl50l6c54AaABAg", "publishedAt": "2021-01-19T16:01:14Z", "author": "Vadim", "text": "I would remark that at 22:14 this is an unjustified conclusion.\nStrictly speaking, under the formal definition(in terms of limits) of big O time complexity, Something like O(2^n) differs from O(2^(n/2)) or O(3^n).\nWhen at 20:49, we \"simplify\" O(2^(n/2)) to O(2^n), we are only giving it a weaker bound. Just as you can say that an O(n) algorithm\nis also technically O(n^2).\nWhen you give \"dib\" a weaker bound, you can't say anything about whether or not O(dib) <= O(fib) back at 22:14.\nIt is true that all of these are O(2^n), but you can give tighter bounds on O(dib) and O(fib), which would be O(2^(n/2)) for O(dib) and\nO(phi^n) for O(fib), phi being (1+sqrt(5))/2.", "likes": 0}}, {"topLevelComment": {"id": "UgwYazuzYwP3e2zLkg14AaABAg", "publishedAt": "2021-01-19T15:29:17Z", "author": "Never", "text": "1:07:55\n1:36:51", "likes": 0}}, {"topLevelComment": {"id": "UgwNwUKcOLMewxCqefl4AaABAg", "publishedAt": "2021-01-19T15:26:00Z", "author": "Ivan Kljun", "text": "Alvin, freeCodeCamp, thank you so much for this superb content!!!", "likes": 0}}, {"topLevelComment": {"id": "UgwPf7RIWh-3BwUyKrl4AaABAg", "publishedAt": "2021-01-19T11:06:50Z", "author": "An Ho\u00e0ng B\u00ecnh", "text": "i need English subtitle. please", "likes": 1}}, {"topLevelComment": {"id": "Ugw80lmxcxdYoj03QQh4AaABAg", "publishedAt": "2021-01-18T19:21:54Z", "author": "george hart", "text": "Love what you do, I also try to explain complex ideas in beginner language on my channel, I would appreciate your support https://www.youtube.com/channel/UC6N4i972Z7F-ozmUWDakS1Q", "likes": 0}}, {"topLevelComment": {"id": "Ugyn0kdcAK0oQoIOt5x4AaABAg", "publishedAt": "2021-01-18T15:53:15Z", "author": "Benayas Debela", "text": "14:04 I don't quite understand how 1/2 * N cancels out  the 2 in N/2. Are you multiplying 1/2 by N/2?", "likes": 2}, "replies": [{"id": "Ugyn0kdcAK0oQoIOt5x4AaABAg.9IenWSAMCJY9LT0S2fsV7h", "publishedAt": "2021-03-29T06:19:02Z", "author": "redpilled \ud83d\udc8a", "text": "N/2 is equal to N * 1/2, its just a different form of showing it", "likes": 0}]}, {"topLevelComment": {"id": "UgxtRZl5veyacQz20Tl4AaABAg", "publishedAt": "2021-01-18T10:37:37Z", "author": "Mukil Rajeev", "text": "My Lord and My God.", "likes": 0}}, {"topLevelComment": {"id": "Ugx6hjVEQXjezqsHib14AaABAg", "publishedAt": "2021-01-18T01:09:18Z", "author": "Farruh Habibullaev", "text": "Great video. After 5 years, I have finally managed to understand and get the feeling that I can do dynamic programming. Thank you. One suggestions on 3:32:33, I have avoided  if conditions when updating the table by tables[vertical][horizontal] = tables[vertical][horizontal] + tables[vertical - 1][horizontal] + tables[vertical][horizontal - 1];", "likes": 0}}, {"topLevelComment": {"id": "Ugz5sYzLfByoXCQ-UWV4AaABAg", "publishedAt": "2021-01-17T23:00:33Z", "author": "Curb Your Shi*", "text": "You Da They. Excellent, excellent subject and excellent teaching. I'll be back when I know more. Thanks.", "likes": 0}}, {"topLevelComment": {"id": "Ugx-lxmeJPsiQyiF0Pp4AaABAg", "publishedAt": "2021-01-17T21:25:55Z", "author": "Sal Kabalani", "text": "At time 03:20:52, I am confused about why the interpreter does not flag an array index out-of-bounds error.\n\r\nAssume that we try to solve for fib(6).  The function creates an array table[ ] of 7 elements (n+1) accessible through table[0] through table[6].  The \"for loop\" iterates through i=0 to i=6.  All works fine until i=6 then line 5 tries  to access table[i+1] = table[7].  Line 6 also tries  to access table[i+2] = table[8].  Both table[7] and table[8] are outside of the array bounds.  \r\n\r\nObviously the code works, but i don't know why it does not flag an error.  Can anyone help?", "likes": 0}}, {"topLevelComment": {"id": "UgzkpS0dKbxNBGK0Kl14AaABAg", "publishedAt": "2021-01-17T14:19:23Z", "author": "Garry Du", "text": "JS has something like lru_cache in Python?", "likes": 0}}, {"topLevelComment": {"id": "UgxKo_izIiUoJk-Kot14AaABAg", "publishedAt": "2021-01-17T11:47:11Z", "author": "Martin Fri\u010d", "text": "great video, but at 58:56 you could further improve your efficiency by checking reverse order of parameters. In your implementation gridTraveler(4,6,memo) would evaluate as well as gridTraveler(6,4,memo) despite the fact their results will be the same.", "likes": 1}}, {"topLevelComment": {"id": "UgzGFjFV1OLIkDd-YpN4AaABAg", "publishedAt": "2021-01-17T06:57:10Z", "author": "psionl0", "text": "A fascinating and clear explanation of dynamic programming.\n\nJust a minor nitpick: not all exponential running times are the same. O(4^n) is not the same as O(2^n) because no matter what constant you multiply 2^n by, there will always be a value of n for which 4^n > k.2^n. The running time of the brute force recursive method for Fibonacci numbers is O(1.618^n).", "likes": 0}}, {"topLevelComment": {"id": "UgwTA7ZTgYtc-PKmmlp4AaABAg", "publishedAt": "2021-01-17T04:41:00Z", "author": "Roshan Bhattad", "text": "Is it worth watching?", "likes": 0}}, {"topLevelComment": {"id": "UgxGcb8va0z6Hi86agB4AaABAg", "publishedAt": "2021-01-17T01:30:02Z", "author": "Rajan Subramanian", "text": "No one ever uses this nonsense in the real world speaking from practical experience", "likes": 0}}, {"topLevelComment": {"id": "UgwmcYUjF6vAAObkyz54AaABAg", "publishedAt": "2021-01-16T23:14:29Z", "author": "Artod", "text": "Time to time, I exit full screen mode and am trying to like this video, and see that I've already liked it :D", "likes": 12}}, {"topLevelComment": {"id": "Ugx8gXKmgc7pTF_Fa-94AaABAg", "publishedAt": "2021-01-16T21:42:32Z", "author": "David Masterson", "text": "How do I do the spread operator operation in scala? Nothing I\u2019ve tried has worked.", "likes": 0}}, {"topLevelComment": {"id": "UgyCj9kWCceyuaNdeJ94AaABAg", "publishedAt": "2021-01-16T21:29:58Z", "author": "Joseph Cox", "text": "Problem is university professors do a horrible job teaching this. They get to involved in the mathematics of it and do like a 30 second explanation of it in sudo code.", "likes": 0}}, {"topLevelComment": {"id": "UgzEWLDhv8r9jI3RDGB4AaABAg", "publishedAt": "2021-01-16T20:44:07Z", "author": "ivaniclixx", "text": "50:50 the first conditional of gridTraveller\n\nif ( m === 1 && n === 1 )\n\ncould be improved to\n\nif ( m === 1 || n === 1 )\n\nsince any one dimension grid can be only solved in one path (down or right).", "likes": 2}, "replies": [{"id": "UgzEWLDhv8r9jI3RDGB4AaABAg.9IaAD4QL6J_9Iblu_kDnLs", "publishedAt": "2021-01-17T11:41:28Z", "author": "ivaniclixx", "text": "for w in range(1,1000):\n\tfor h in range(1,1000):\n\n\t\tprint(w,\",\",h)\n\n\t\tstarttime = time.time()\n\t\tres = grid_traveller(w,h)\n\t\t#print(\"Original:\", res)\n\t\t#print(\"In\",time.time() - starttime,\"seconds\")\n\n\t\tstarttime = time.time()\n\t\tres_ivan = grid_traveller_ivan(w,h)\n\t\t#print(\"Ivan:\", res)\n\t\t#print(\"In\",time.time() - starttime,\"seconds\")\n\n\t\tif res != res_ivan:\n\t\t\tprint(\"ERROR !\")\n\t\t\texit()\n\nprint(\"All match\")\n\nIvans-iMac:tmp ivan$ python3 dynprog.py\n1 , 1\n1 , 2\n1 , 3\n1 , 4\n1 , 5\n1 , 6\n1 , 7\n1 , 8\n1 , 9\n1 , 10\n\n[...]\n\n999 , 991\n999 , 992\n999 , 993\n999 , 994\n999 , 995\n999 , 996\n999 , 997\n999 , 998\n999 , 999\nAll match", "likes": 1}, {"id": "UgzEWLDhv8r9jI3RDGB4AaABAg.9IaAD4QL6J_9IblfJ3-9aZ", "publishedAt": "2021-01-17T11:39:23Z", "author": "ivaniclixx", "text": "@Devashish Shukla I tried all cases from 1,1 to 1000,1000 and they all match", "likes": 1}, {"id": "UgzEWLDhv8r9jI3RDGB4AaABAg.9IaAD4QL6J_9IbixNMorrK", "publishedAt": "2021-01-17T11:15:38Z", "author": "Devashish Shukla", "text": "@ivaniclixx it might work for one test case try with multiple test cases", "likes": 0}, {"id": "UgzEWLDhv8r9jI3RDGB4AaABAg.9IaAD4QL6J_9IbiDqCU404", "publishedAt": "2021-01-17T11:09:17Z", "author": "ivaniclixx", "text": "Even without the \"memoized\" code, It is faster\n\nIvans-iMac:tmp ivan$ cat dynprog.py \nimport time\n\ndef grid_traveller(m, n, cache={}):\n\tkey= m,\",\",n\n\tif key in cache:\n\t\treturn cache[key]\n\tif m == 1 and n == 1:\n\t\treturn 1\n\tif m == 0 or n == 0:\n\t\treturn 0\n\tcache[key] = grid_traveller(m - 1, n, cache) + grid_traveller(m, n - 1, cache)\n\treturn cache[key]\n\ndef grid_traveller_ivan(m, n):\n\tif m == 1 or n == 1:\n\t\treturn 1\n\tif m == 0 or n == 0:\n\t\treturn 0\n\treturn grid_traveller(m - 1, n) + grid_traveller(m, n - 1)\n\nprint(\"400,300\")\n\nstarttime = time.time()\nprint(\"Original:\",grid_traveller(400,30))\nprint(\"In\",time.time() - starttime,\"seconds\")\n\nstarttime = time.time()\nprint(\"Ivan:\",grid_traveller_ivan(400,30))\nprint(\"In\",time.time() - starttime,\"seconds\")\n\n\nIvans-iMac:tmp ivan$ python3 dynprog.py \n400,300\nOriginal: 878816604605874461814170724074998303227799200\nIn 0.012150049209594727 seconds\nIvan: 878816604605874461814170724074998303227799200\nIn 9.059906005859375e-06 seconds", "likes": 1}, {"id": "UgzEWLDhv8r9jI3RDGB4AaABAg.9IaAD4QL6J_9IbhHol3Ez6", "publishedAt": "2021-01-17T11:01:05Z", "author": "ivaniclixx", "text": "@Devashish Shukla I tried It and the results are the same, plus faster to execute", "likes": 1}]}, {"topLevelComment": {"id": "UgyhJEquDx8V33iJuw94AaABAg", "publishedAt": "2021-01-16T19:17:08Z", "author": "Carla Gomez", "text": "will you have subtitles?", "likes": 0}}, {"topLevelComment": {"id": "UgyrWwEt6paCiro6n654AaABAg", "publishedAt": "2021-01-16T17:33:04Z", "author": "Mohamed Ahmed", "text": "Algoexpert give me a break. I'm busy and you're distracting", "likes": 0}}, {"topLevelComment": {"id": "UgzZdz_Kvr9F94Q4eVB4AaABAg", "publishedAt": "2021-01-16T13:48:06Z", "author": "Chris Dupuy", "text": "Great video on dynamic programming.", "likes": 0}}, {"topLevelComment": {"id": "UgycMNJ4k4lXgWA_mOh4AaABAg", "publishedAt": "2021-01-16T09:20:01Z", "author": "Kasra Torabi", "text": "He is the Bob Ross of coding.", "likes": 1}}, {"topLevelComment": {"id": "UgwWsZ50gNCHpuwFPzR4AaABAg", "publishedAt": "2021-01-16T08:50:46Z", "author": "Attyuttam Saha", "text": "I am not sure why allConstruct cannot be optimized even by memoization. I mean, if we memoize all the words that can form a particular target string, when the recursion logic wants the result of that particular string, we aren't recursing again as the value has already been stored right ?, so that essentially given a O(n*m*internal_work_value) complexity right ? \n\nLike you were talking about devising all possible combinations in the worst case which is n^m but that is also true for the countConstruct problem right ?", "likes": 0}}, {"topLevelComment": {"id": "UgwHBgfX2XkHg9mtkI14AaABAg", "publishedAt": "2021-01-16T08:12:31Z", "author": "blasttrash", "text": "wow these videos are way better than MIT dynamic programming videos. College(even MIT) sucks for computer science. In no friggin parallel universe would a professor spend so much time animating and analyzing time complexities of all these problems. They would just explain 2 + 2 = 4 in class, while the homework would be to solve trigonometry problems while in exam we get calculus questions. Lazy fellows all my professors.", "likes": 0}}, {"topLevelComment": {"id": "UgzaZvJf-xDLV-0nD_94AaABAg", "publishedAt": "2021-01-16T01:46:26Z", "author": "D C", "text": "Why JavaScript? :(", "likes": 0}, "replies": [{"id": "UgzaZvJf-xDLV-0nD_94AaABAg.9IZ80VbzdR29IhkP1kROoe", "publishedAt": "2021-01-19T19:23:44Z", "author": "Nick Haralampopoulos", "text": "because JS rocks!", "likes": 1}]}, {"topLevelComment": {"id": "UgwA-02eMSgAAbszvpN4AaABAg", "publishedAt": "2021-01-15T21:46:36Z", "author": "Duane McDonald", "text": "how to write allConstruct line 10 in python?", "likes": 0}}, {"topLevelComment": {"id": "UgyQ06qjkKXYgpBHa4x4AaABAg", "publishedAt": "2021-01-15T19:18:51Z", "author": "Amol Gawai", "text": "Fantastic course - here is my python implementation - https://github.com/amolgawai/data_struct_and_algo/tree/main/dynamic_prog", "likes": 0}}, {"topLevelComment": {"id": "UgzZRoZm8zX7krxpLeF4AaABAg", "publishedAt": "2021-01-15T19:14:41Z", "author": "Allwin DSouza", "text": "t_word = \"purple\"\r\nbank_ = [\"purp\", \"le\", \"ur\", 'purpl']\r\n\r\ndef num_construct(target_word, bank):\r\n    if target_word == \"\":\r\n        return [[]]\r\n\r\n    result=[]\r\n\r\n    for word in bank:\r\n        if word == target_word[:len(word)]:\r\n            ways = num_construct(target_word[len(word):], bank)\r\n            target_ways = [m.insert(0, word) for m in ways]\r\n            result = result + target_ways\r\n    return result\r\n\r\n\r\nprint(num_construct(t_word, bank_))\r\n\n\n\n\nthis is my implementation for  allconstruct ....it doest work please help !!!!!!!", "likes": 0}}, {"topLevelComment": {"id": "UgyWhVxXttKFqZvo7Rh4AaABAg", "publishedAt": "2021-01-15T15:06:36Z", "author": "\u1218\u1203\u122a", "text": "Thanks a lot! The tree building approach is really gold. I use it when solving coin change problem. \"coin change problem\"  == bestSum", "likes": 0}}, {"topLevelComment": {"id": "UgxcyfVBR_HuOi95Pm14AaABAg", "publishedAt": "2021-01-15T05:24:25Z", "author": "Mister Illuminati", "text": "For tabulating fib(n) In Python, you will need to alter the implementation a bit:\n\ndef fib(n):\n    table = [0] * (n+2) ---> You have to add two extra elements or you'll get an out of range error, since you're working with lists instead of arrays.\n\n    table[1] = 1\n    for i in range(n):\n        table[i + 1] += table[i]\n        table[i + 2] += table[i]\n    return table[n]", "likes": 0}}, {"topLevelComment": {"id": "UgwoT0BMD_uIci_8pm54AaABAg", "publishedAt": "2021-01-14T18:45:18Z", "author": "Idan Grady", "text": "you are great tho!!!!! Thank you", "likes": 0}}, {"topLevelComment": {"id": "Ugwc17pwBCH4c1gncgZ4AaABAg", "publishedAt": "2021-01-14T13:36:38Z", "author": "saarthak johari", "text": "You really helped me in improving the approach towards DP", "likes": 1}}, {"topLevelComment": {"id": "Ugwid6S1ZGUSwwjDiE14AaABAg", "publishedAt": "2021-01-14T13:04:28Z", "author": "Chandu P", "text": "can you please explain backtracking too??? \ud83d\ude4f\ud83d\ude4f\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgxbSwneIbz4cYK0_zB4AaABAg", "publishedAt": "2021-01-14T04:36:56Z", "author": "Marcelo Almeida", "text": "Might just watch this again for fun hahaha. Masterfully explained!", "likes": 0}}, {"topLevelComment": {"id": "Ugw4Qh7dkOIUbe27LNl4AaABAg", "publishedAt": "2021-01-13T23:32:59Z", "author": "Nick Pashkov", "text": "59:40 Eminem", "likes": 0}}, {"topLevelComment": {"id": "UgziBxL0p20f6q1ZJ5N4AaABAg", "publishedAt": "2021-01-13T19:03:41Z", "author": "adnan alkarfan", "text": "thank you.you are the best", "likes": 0}}, {"topLevelComment": {"id": "UgwooTaOFa7UooHuYQ54AaABAg", "publishedAt": "2021-01-13T06:51:40Z", "author": "GOURANG PATHAK", "text": "Wonderfully Explained !!!", "likes": 2}}, {"topLevelComment": {"id": "UgxpbUIMweEW_GSXP6B4AaABAg", "publishedAt": "2021-01-13T05:22:58Z", "author": "Tomasz Kaczmarek", "text": "38:45 Does return (m-1+n-1)!/((m-1)!(n-1)!) works?", "likes": 0}}, {"topLevelComment": {"id": "UgygC0ZwevqGFhjmuMV4AaABAg", "publishedAt": "2021-01-13T03:18:23Z", "author": "Chandu P", "text": "\ud83d\udc96\ud83d\udc96\ud83d\udc96 my first comment on youtube.........simply awesome!!!!!!!!", "likes": 0}}, {"topLevelComment": {"id": "UgyaUZlxpb8Ixqj0DfJ4AaABAg", "publishedAt": "2021-01-13T00:08:54Z", "author": "Jonnatan Ortiz", "text": "Alvin, you made the videos at App Academy easy to understand, and I really like your approach on these problems, it makes it easy to assimilate the way of thinking and how to get started. You are also invited to my wedding!", "likes": 0}}, {"topLevelComment": {"id": "Ugy5TqP9-eHsTFiIGsl4AaABAg", "publishedAt": "2021-01-12T21:00:44Z", "author": "Jayden Roylance", "text": "dfss", "likes": 0}}, {"topLevelComment": {"id": "UgznTD-EsnsQf4dNZ_p4AaABAg", "publishedAt": "2021-01-12T18:23:48Z", "author": "Ujjwal Aryal", "text": "Guy is god man", "likes": 1}}, {"topLevelComment": {"id": "UgwSlk6ZgJsNQC0gjzJ4AaABAg", "publishedAt": "2021-01-12T16:21:01Z", "author": "\u10dc\u10d8\u10d9\u10dd \u10e4\u10d4\u10d8\u10e5\u10e0\u10d8\u10e8\u10d5\u10d8\u10da\u10d8", "text": "Thank you for the video, \nwas struggling with this problem: https://leetcode.com/problems/k-diff-pairs-in-an-array/ , not able to do it with Dynamic Programming Approach, any ideas?", "likes": 0}}, {"topLevelComment": {"id": "Ugx1mweSr2dGRLw4pp14AaABAg", "publishedAt": "2021-01-12T05:08:52Z", "author": "PRIT", "text": "THANK YOU!!!!!!!!!!!!!!!!!!!!!!", "likes": 0}}, {"topLevelComment": {"id": "Ugzi7Juu-0LocwYSaPV4AaABAg", "publishedAt": "2021-01-11T20:22:21Z", "author": "Joker Smith", "text": "What editor is he using??", "likes": 0}}, {"topLevelComment": {"id": "Ugw0HSa7zlIEh7_pVdd4AaABAg", "publishedAt": "2021-01-11T19:05:57Z", "author": "John Doan", "text": "I can't express how much this video has changed how I approach difficult problems. Your speed is also very articulate and easy to understand. 10/10 Video.", "likes": 0}}, {"topLevelComment": {"id": "UgyZosDZ8eRt4d6uRqR4AaABAg", "publishedAt": "2021-01-11T13:52:53Z", "author": "Shubham Shinde", "text": "1:48:00\n\ni think this is better:-\n\nbool howSum(int target,vector<int>&vec,map<int,bool>&m,vector<int>&res){\r\n  std::map<int,bool,less<int>,allocator<pair<const int,bool>>>::iterator it =m.find(target);\r\n  if(it != m.end())return m[target];\r\n  if(target == 0)return true;\r\n  if(target < 0)return false;\r\n  for(unsigned int i{};i<vec.size();i++){\r\n\t  int temp = target-vec[i];\r\n\t  m[target] = howSum(temp,vec,m,res);\r\n      if(m[target]){\r\n    \tres.push_back(vec[i]);\r\n        return  true;\r\n      }\r\n  }\r\n  return false;\r\n}", "likes": 1}}, {"topLevelComment": {"id": "UgwAEd2dg_XQhnnSY8N4AaABAg", "publishedAt": "2021-01-11T13:08:05Z", "author": "Chaz Allen", "text": "54:00: m = 2; n = 3; n+m = 5\nThere are clearly 4 levels there, not 5. Why isn't it 2^(m+n-1)?", "likes": 0}, "replies": [{"id": "UgwAEd2dg_XQhnnSY8N4AaABAg.9INU2dxuoIu9IOhfWpSUse", "publishedAt": "2021-01-12T00:35:06Z", "author": "Cargo Bob", "text": "the -1 gets very insignificant with large values of m+n, it is ignored.", "likes": 0}]}, {"topLevelComment": {"id": "UgxY-uEMtaXhjeXz0Kp4AaABAg", "publishedAt": "2021-01-11T06:53:22Z", "author": "peeyar2000", "text": "Life saver.", "likes": 0}}, {"topLevelComment": {"id": "Ugyv8nvhgXjXgq-UqQB4AaABAg", "publishedAt": "2021-01-10T21:34:59Z", "author": "Universal1", "text": "CODERBYTE -> ALVIN", "likes": 0}}, {"topLevelComment": {"id": "Ugz71_az-EJ-Q8MugBR4AaABAg", "publishedAt": "2021-01-10T16:14:14Z", "author": "Udit Verma", "text": "Is there any personal YT channel of this guy?", "likes": 0}}, {"topLevelComment": {"id": "UgxvE_V72E5WiQrcY8J4AaABAg", "publishedAt": "2021-01-10T14:01:08Z", "author": "Vasily Urosov", "text": "20:50, no O(2^(n/2)) does not simplify to O(2^n). This will mean that there exist such c and n0 that for all n >= n0: 2^n <= c * 2^(n/2). Divide both by 2^(n/2) and see the contradiction that for all n > n0 2^(n/2) <= c. Real time complexity of na\u00efve fib function is O((1 + sqrt(5)/2)^n) (see that we do fib(n) operations to calculate fib(n) and look up Binet's formula)", "likes": 1}, "replies": [{"id": "UgxvE_V72E5WiQrcY8J4AaABAg.9IL-KNjf8KL9IMpVQ4dnUZ", "publishedAt": "2021-01-11T07:05:00Z", "author": "Question 1900", "text": "I was looking for this comment hahaha,", "likes": 0}]}, {"topLevelComment": {"id": "UgyiSlXGPrKwOaOFXJ94AaABAg", "publishedAt": "2021-01-10T12:00:13Z", "author": "ali batur karakulluk\u00e7u", "text": "what is the program that he writes his code.that also has a terminal", "likes": 0}}, {"topLevelComment": {"id": "UgzGBb4Gib5IJejZs7J4AaABAg", "publishedAt": "2021-01-10T02:12:17Z", "author": "\u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0425\u043c\u0435\u043b\u0435\u0432", "text": "another asian coder", "likes": 1}}, {"topLevelComment": {"id": "UgzHUqGGMh1OFAJgHN94AaABAg", "publishedAt": "2021-01-10T00:45:18Z", "author": "Anton Voltchok", "text": "Why couldn\u2019t you make this video years ago when I needed it haha, this is the best explanation on the subject I\u2019ve seen, hands down, excellent job", "likes": 0}}, {"topLevelComment": {"id": "UgyDFGxD8nCeuaVhgfx4AaABAg", "publishedAt": "2021-01-09T18:37:37Z", "author": "Dipu Joy", "text": "I am his fan from hereon!!....", "likes": 1}}, {"topLevelComment": {"id": "UgwL0Sf3rec5DwnX3SR4AaABAg", "publishedAt": "2021-01-09T17:37:26Z", "author": "Issac Chua", "text": "How can i support you? You are amazing.", "likes": 1}}, {"topLevelComment": {"id": "UgzqMXw9NCq7QEPK1MJ4AaABAg", "publishedAt": "2021-01-09T17:27:08Z", "author": "Prasad Sawant", "text": "At 53:44 Shouldn't there be m+n-1 levels can someone explain plss", "likes": 0}, "replies": [{"id": "UgzqMXw9NCq7QEPK1MJ4AaABAg.9IIn6BR3tS-9J_ep683X4P", "publishedAt": "2021-02-10T12:32:28Z", "author": "Ojou NIi Sama", "text": "-1 is becomes insignificant on larger values of n. So in big O notation constants are removed", "likes": 0}]}, {"topLevelComment": {"id": "UgzPViFnCKsWoV2Jr5l4AaABAg", "publishedAt": "2021-01-09T16:45:55Z", "author": "DIY at home", "text": "Learn Tableau Complete Course\nhttps://youtu.be/b3c4PCp7EV", "likes": 0}}, {"topLevelComment": {"id": "Ugyncw_Aom7n5u-bk3V4AaABAg", "publishedAt": "2021-01-09T15:59:32Z", "author": "VISHAL YADAV 5-Yr IDD Mining Engg.", "text": "FreeCodeCamp - The best charity which donates knowledge.", "likes": 0}}, {"topLevelComment": {"id": "UgzMmJqaJ47KMyPXfW94AaABAg", "publishedAt": "2021-01-09T12:04:11Z", "author": "Usha Rani Bennabhaktula", "text": "I have become a different person after watching this video! Kudos!!", "likes": 0}}, {"topLevelComment": {"id": "Ugwp_bCevNoNJw5wMxp4AaABAg", "publishedAt": "2021-01-09T09:13:09Z", "author": "\ud835\udc16\ud835\udc21t\ud835\udc00\ud835\udc29\ud835\udc29+\ud835\udfcf\ud835\udfd1\ud835\udfce\ud835\udfd0\ud835\udfd35\ud835\udfd6\ud835\udfce\ud835\udfd6\ud835\udfd1\ud835\udfcf", "text": "Bitcoin is a good business someone can think of doing..", "likes": 15}, "replies": [{"id": "Ugwp_bCevNoNJw5wMxp4AaABAg.9IHu_ExlB599INkfokJUrt", "publishedAt": "2021-01-11T15:42:07Z", "author": "Jack Vilma", "text": "She's just good i recommended", "likes": 0}, {"id": "Ugwp_bCevNoNJw5wMxp4AaABAg.9IHu_ExlB599INkea3vkhP", "publishedAt": "2021-01-11T15:41:57Z", "author": "Jack Vilma", "text": "Nice doing business with her", "likes": 0}, {"id": "Ugwp_bCevNoNJw5wMxp4AaABAg.9IHu_ExlB599INeiCNpwOZ", "publishedAt": "2021-01-11T14:50:01Z", "author": "Donark Lessie", "text": "Good testimonies of expert Jennifer", "likes": 0}, {"id": "Ugwp_bCevNoNJw5wMxp4AaABAg.9IHu_ExlB599INehAjnQwY", "publishedAt": "2021-01-11T14:49:52Z", "author": "Donark Lessie", "text": "Anyone who recommended expert Mrs Jennifer to you really loves you......", "likes": 0}, {"id": "Ugwp_bCevNoNJw5wMxp4AaABAg.9IHu_ExlB599INaFAZbjz_", "publishedAt": "2021-01-11T14:10:57Z", "author": "John Amalia", "text": "+1 4 0 8 7 6 2 10 24", "likes": 0}]}, {"topLevelComment": {"id": "Ugw7EoWsCkdiQfCUpiR4AaABAg", "publishedAt": "2021-01-09T07:13:14Z", "author": "AJEDU \u0f3a 10M \u0f3b", "text": "Must watch/share/like/comments and take benefit of free education.\n\nhttps://youtu.be/u4S5hdaIRMY\n\nhttps://youtu.be/OUcvvBB5yfw\n\nRegular class for all competitive exams.\n\nhttps://youtu.be/60crFPkFGfY\n\n\u0905\u0917\u0930 \u0906\u092a\u0928\u0947 \u0907\u0938\u0947 \u0928\u0939\u0940\u0902 \u0926\u0947\u0916\u093e \u0924\u094b \u0906\u092a\u0915\u0947 \u091c\u0940\u0935\u0928 \u092e\u0947\u0902 \u0915\u0941\u091b \u092d\u0940 \u0928\u0939\u0940\u0902 \u0926\u0947\u0916\u093e\u0964 \u091c\u093e\u0928\u0935\u0930\u094b\u0902 \u0915\u0947 \u0938\u093e\u0925 \u0916\u0947\u0932\u0928\u0947 \u0935\u093e\u0932\u0940 \u091b\u094b\u091f\u0940 \u0932\u0921\u093c\u0915\u0940 \u0915\u094b \u0926\u0947\u0916\u0928\u093e \u091a\u093e\u0939\u093f\u090f\u0964\n\nhttps://youtu.be/u8CdH2huIAE\n\nhttps://youtu.be/zlBGucyUQF4\n\nRANK 1 ? OR 100/100 MARKS IN YOUR EXAM ? THEN SHARE THE VIDEO AND TAKE BENIFIT OF FREE EDUCATION.\n\nhttps://youtu.be/0d5EPx0R5NE\n\nPlease don't forgot to like , share, comment and subscribe for more  videos on daily based suffering topics like this. \n\nI hope you will like it by considering my words in video \u2665\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgwLxhHGG3vUhVijjDV4AaABAg", "publishedAt": "2021-01-09T05:33:41Z", "author": "ktrip96", "text": "Guys, can anyone help me with this:\nI tried to run canSum(300, [7,14]) and indeed my pc needs about 10 seconds to finish the calculation. ( *** Without memoization ***)\nBut when I try to run canSum(300, [2, 3]) (*** again without memoization ***), my pc finish immediately the calculation.\nDoes anybody know why is that?\nIt's still the same complexity, and in fact I expected the second case (with 2, 3) to run slower than the first one, because the solution tree is longer than the first one.  (300, 298, ... etc VS 300, 293.. etc)\n\nThanks in advance", "likes": 1}, "replies": [{"id": "UgwLxhHGG3vUhVijjDV4AaABAg.9IHWSoK0ajv9IJwiZ18tQ7", "publishedAt": "2021-01-10T04:10:23Z", "author": "ktrip96", "text": "\u200b@Deepak Singh Yea dude.. Thanks a lot!  It's totally clear now.\nI also tried to run canSum(350, [7,14]) , canSum(700, [7,14]) etc. [targetSum that is divisible by 7] and indeed the program finishes in linear time because of the reason you just described.", "likes": 1}, {"id": "UgwLxhHGG3vUhVijjDV4AaABAg.9IHWSoK0ajv9IIcoLS405P", "publishedAt": "2021-01-09T15:57:10Z", "author": "Deepak Singh", "text": "Visualize the recursion call tree for (i) canSum(300, [2, 3]) and (ii) canSum(300, [7, 14]). In the case of (i), we reach the base case that returns true (canSum(0,[...])) in the leftmost branch, this returns true immediately, and all the parent node bubble up this true value up to the root node without exploring further branches. In the case of (ii), we explore every branch from the leftmost to the rightmost and then return false. I hope it is clear to you now.", "likes": 1}]}, {"topLevelComment": {"id": "UgwVOYx2LSwlXKlt8p54AaABAg", "publishedAt": "2021-01-09T03:41:10Z", "author": "Elite Coders", "text": "which theme is he using in VS code", "likes": 0}}, {"topLevelComment": {"id": "UgxWRppAKiP2NcWElRV4AaABAg", "publishedAt": "2021-01-08T20:29:30Z", "author": "Shoaib Rain", "text": "def canSum(targetSum, numbers, memo = {}):\r\n    if targetSum in memo:\r\n        return memo[targetSum]\r\n    if targetSum == 0:\r\n        return True\r\n    if targetSum < 0:\r\n        return False\r\n    for num in numbers:\r\n        remainder = targetSum-num\r\n        if canSum(remainder,numbers,memo) == True:\r\n            memo[targetSum] = True\r\n            return memo[targetSum]\r\n\r\n    memo[targetSum] = False\r\n    return memo[targetSum]\r\n\r\n\r\nif __name__ == '__main__':\r\n    print(canSum(7,[2,3]))\r\n    print(canSum(7,[5,3,4,7]))\r\n    print(canSum(7,[2,4]))\r\n    print(canSum(8,[2,3,4,5]))\r\n    print(canSum(300,[7,14]))\r\nI am getting the wrong answers after memoizing. All the answers are True. Can someone point what's wrong in the python implementation above?", "likes": 0}}, {"topLevelComment": {"id": "Ugz3AFM96xU4ShD5Fat4AaABAg", "publishedAt": "2021-01-08T00:58:01Z", "author": "LorenzoP", "text": "depth of the tree is height? easier to think of it as depth, so why not call it that? what even is memo, why call it that? it's a cache. at least easier for me to understand if using the proper terms.", "likes": 0}}, {"topLevelComment": {"id": "UgwsPL6vxF4KUhueWSp4AaABAg", "publishedAt": "2021-01-07T20:56:39Z", "author": "Sal Kabalani", "text": "You are a fantastic teacher.  Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgyVsSuQuRCQzc7sCCR4AaABAg", "publishedAt": "2021-01-07T18:53:43Z", "author": "mohamed beyrem makhlouf", "text": "following using kotlin", "likes": 0}}, {"topLevelComment": {"id": "Ugy_3rRRbk3Ths9B2Il4AaABAg", "publishedAt": "2021-01-07T15:06:06Z", "author": "CHRISTY MATHEW", "text": "FOUND MY CODE GOD\u2665\ufe0f IM GONNA BE A BELIEVER\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgxtJMzQIUAImkid6T14AaABAg", "publishedAt": "2021-01-07T13:56:55Z", "author": "Tomas Elke", "text": "What do you use to make the visual representation of the tree?", "likes": 0}}, {"topLevelComment": {"id": "UgwdBI-cMDbekx43AGh4AaABAg", "publishedAt": "2021-01-07T11:15:58Z", "author": "Osama Bin Abid", "text": "which IDE is this. can anyone tell plx", "likes": 0}}, {"topLevelComment": {"id": "UgzIkb8nGwPTa6C6J7R4AaABAg", "publishedAt": "2021-01-07T10:26:45Z", "author": "Shivam Sharma", "text": "After my first income, I promise I'll donate a significant portion of it to freeCodeCamp!", "likes": 0}}, {"topLevelComment": {"id": "UgzfmPRc5pyB1sCutc14AaABAg", "publishedAt": "2021-01-07T05:18:45Z", "author": "Ojou NIi Sama", "text": "Guys this is an amazing tutorial I highly recommend to try implementing the solutions yourself while following with the video. Instead of asking for the code here in the comments, its great practice to do it on your own and can help with your intuition with dynamic programming problems.", "likes": 6}}, {"topLevelComment": {"id": "UgzciKY5gz2bf8Pgtrp4AaABAg", "publishedAt": "2021-01-07T02:13:41Z", "author": "S G", "text": "Thanks for sharing.\nGoing to save it & watch it later...", "likes": 0}}, {"topLevelComment": {"id": "UgyEfLuMm8dA8AzCroF4AaABAg", "publishedAt": "2021-01-06T15:47:08Z", "author": "singam surya", "text": "Please add english subtitles", "likes": 0}}, {"topLevelComment": {"id": "UgzYeSJucngSnjnqRrJ4AaABAg", "publishedAt": "2021-01-06T15:18:12Z", "author": "basbekjenl", "text": "man an hour in and got to take a break, I'd love to get this but the information intake just tanked. Got to take a breath pen down some thoughts and come back later.", "likes": 0}, "replies": [{"id": "UgzYeSJucngSnjnqRrJ4AaABAg.9IApyGfiPZg9IAu9Nge_UA", "publishedAt": "2021-01-06T15:54:48Z", "author": "basbekjenl", "text": "So this is my take so far just the first hour comprehension.\nto dynamically solve programming problems look for the repeated part of the problem.\r \n\nBrute force solves any problem given enough time but to dynamically solve that problem you recognise the sub-problem that gets solved over and over, by bridging the answer from the last time it was solved you solved the problem dynamically.", "likes": 0}]}, {"topLevelComment": {"id": "UgxS_Asia9q8Bqbdzc14AaABAg", "publishedAt": "2021-01-06T10:25:07Z", "author": "Vinay Kumar", "text": "then memoization it is :)", "likes": 0}}, {"topLevelComment": {"id": "UgywnT3JdrTTaM2zWz54AaABAg", "publishedAt": "2021-01-06T06:11:11Z", "author": "ketan khandelwal", "text": "Can anyone provide me C++ code of the programs.", "likes": 0}}, {"topLevelComment": {"id": "UgzpImc8QJrRJQW5MOp4AaABAg", "publishedAt": "2021-01-05T21:44:38Z", "author": "Milap Naik", "text": "How do you draw out the tree and show your argument for time complexity in a virtual interview?", "likes": 0}}, {"topLevelComment": {"id": "UgwObi2JNvh5_EGc2JF4AaABAg", "publishedAt": "2021-01-05T19:55:11Z", "author": "aron pop", "text": "2:44:54. Totalcount needs to be global and outside of the function. Otherwise the variable declaration will asign 0 to totalCount at every function call.", "likes": 0}, "replies": [{"id": "UgwObi2JNvh5_EGc2JF4AaABAg.9I8ks3yLnza9J_fC7aGPGH", "publishedAt": "2021-02-10T12:35:45Z", "author": "Ojou NIi Sama", "text": "Well you return totalCount so it all adds up", "likes": 0}]}, {"topLevelComment": {"id": "UgyRKFkU9MEzuqhYGOt4AaABAg", "publishedAt": "2021-01-05T19:04:18Z", "author": "Baterodalo", "text": "Ah yes make the Fibonacci sequence DRY", "likes": 0}}, {"topLevelComment": {"id": "UgzIZguFVmcCgGEJfyJ4AaABAg", "publishedAt": "2021-01-05T18:13:05Z", "author": "Athanikar Ammy", "text": "This guy is going to heaven for sure!!", "likes": 16}, "replies": [{"id": "UgzIZguFVmcCgGEJfyJ4AaABAg.9I8_BH80RV39T9xKCuXrfw", "publishedAt": "2021-10-06T16:48:35Z", "author": "LUKFUN TV", "text": "\ud83d\ude05", "likes": 0}, {"id": "UgzIZguFVmcCgGEJfyJ4AaABAg.9I8_BH80RV39Iip5UWD2n7", "publishedAt": "2021-01-20T05:24:00Z", "author": "Light Theory LLC", "text": "must say in sha ALLAH, only ALLAH knows best", "likes": 0}]}, {"topLevelComment": {"id": "Ugwkf1GFe-d8l0dhTId4AaABAg", "publishedAt": "2021-01-05T15:29:35Z", "author": "Dewy", "text": "In allConstruct, I don't understand why the space complexity is O(m) when you have the exponential result. Why do you include the array size in the previous examples for space complexity but purposely omit it here?", "likes": 0}}, {"topLevelComment": {"id": "UgzdW9H_DH0IdDPvzcR4AaABAg", "publishedAt": "2021-01-05T15:03:39Z", "author": "Viraj Singh", "text": "At 1:45:44 instead of using spread operator we can instead push which is O(1) into remainderResult by using push method and by this we can reduce the time complexity from O(n^m*m) to O(n*m).", "likes": 0}}, {"topLevelComment": {"id": "UgwfEEpkpC9QfNIdFuZ4AaABAg", "publishedAt": "2021-01-05T13:08:16Z", "author": "Jakub Charv\u00e1t", "text": "Correct me if I'm wrong, but in the memoized canSum algorithm, since you're bubbling return true all the way to root as soon as you hit the first true, it should be fine to only store those values that have been found to be false, so you could replace the memo object with just a set of the values which return false.", "likes": 0}}, {"topLevelComment": {"id": "UgxmiIQ2UnMP5yqLlTx4AaABAg", "publishedAt": "2021-01-04T21:17:05Z", "author": "FunnyAnimal Vine", "text": "For java players(if anyone is following with java ), try out this implementation if needed (all the solution in java).\nhttps://pastebin.com/WLVDRYfU", "likes": 0}}, {"topLevelComment": {"id": "Ugz-QtzbrLdvc3DuYQd4AaABAg", "publishedAt": "2021-01-04T19:55:25Z", "author": "Aditya Jena", "text": "can anyone share a c++ implementation codes..", "likes": 4}, "replies": [{"id": "Ugz-QtzbrLdvc3DuYQd4AaABAg.9I6B5tRnpeG9SrkOTk72-j", "publishedAt": "2021-09-29T05:50:00Z", "author": "Irfan Quader", "text": "@Airbus5717  thanks a lot mate", "likes": 0}, {"id": "Ugz-QtzbrLdvc3DuYQd4AaABAg.9I6B5tRnpeG9IItTZAw14z", "publishedAt": "2021-01-09T18:22:45Z", "author": "Airbus5717", "text": "not mine but here https://github.com/Shuvro-d/Dynamic.Programming", "likes": 1}, {"id": "Ugz-QtzbrLdvc3DuYQd4AaABAg.9I6B5tRnpeG9IA1nGPlzAj", "publishedAt": "2021-01-06T07:51:03Z", "author": "ketan khandelwal", "text": "if u got ,then please share here also", "likes": 0}]}, {"topLevelComment": {"id": "Ugzjj4B4R1ug0xDVb3B4AaABAg", "publishedAt": "2021-01-04T19:46:37Z", "author": "tgtffr", "text": "For those looking for C# equivalent code: https://github.com/Yawarmurtaza/DynamicProgrammingCourse/tree/main", "likes": 0}}, {"topLevelComment": {"id": "UgxT2hcWBA3kDSC2qnh4AaABAg", "publishedAt": "2021-01-04T13:35:15Z", "author": "Jobin Jacob Kavalam", "text": "freeCodeCamp.org: Shouldn't space complexity be O(m^2) instead of O(m)  at 1:46:45 ?", "likes": 0}}, {"topLevelComment": {"id": "UgxYUjgjiXMrWo-It3V4AaABAg", "publishedAt": "2021-01-04T13:08:38Z", "author": "NJ ", "text": "what are the tools used for making these slides ?", "likes": 0}}, {"topLevelComment": {"id": "Ugw4JVawdZ0HXkiuBwh4AaABAg", "publishedAt": "2021-01-04T11:40:12Z", "author": "zach31194", "text": "Awh, was hoping you would show how to get fib to be a space complecity of O(1). Its quite fasinating. Reply if you know it!", "likes": 0}, "replies": [{"id": "Ugw4JVawdZ0HXkiuBwh4AaABAg.9I5IQmrMmvu9I8SczLJDxo", "publishedAt": "2021-01-05T17:07:06Z", "author": "Coding Perspective", "text": "This video shows how to get fib with a space complexity of O(1)\n https://youtu.be/vYhaNVpaq-k", "likes": 0}]}, {"topLevelComment": {"id": "UgzFX6H_rZ8qTZdOxD54AaABAg", "publishedAt": "2021-01-04T06:50:01Z", "author": "Jobin Jacob Kavalam", "text": "@freeCodeCamp.org : O(2^(n/2)) is not the same as O(2^n) ? (21:01)", "likes": 0}}, {"topLevelComment": {"id": "Ugxd0vvJSqWtP8mpVwZ4AaABAg", "publishedAt": "2021-01-04T04:21:38Z", "author": "Marvin Mallari", "text": "wow, made it all the way through and found Alvin to be a great teacher on this topic. Systematic process to explain imo, a difficult topic and he simplifies the topic in very digestible pieces of knowledge. Thanks so much for this course!", "likes": 0}}, {"topLevelComment": {"id": "UgxccRM-K-1V-43IJZt4AaABAg", "publishedAt": "2021-01-03T20:38:30Z", "author": "Fahraynk", "text": "If you run gridTraveler in parallel would it be worse or better? Would the same key be calculated at the same time, causing more calculations on multiple processors with no real gain?", "likes": 0}}, {"topLevelComment": {"id": "Ugx-hxlGll5WBterow54AaABAg", "publishedAt": "2021-01-03T19:09:18Z", "author": "USMAN MUNIR", "text": "This guy is awesome ... he did much work for it", "likes": 0}}, {"topLevelComment": {"id": "UgxhXrruRdwkuGDWadl4AaABAg", "publishedAt": "2021-01-03T18:20:16Z", "author": "Akshat Jain", "text": "bestSum Memoization not working in java", "likes": 0}}, {"topLevelComment": {"id": "UgyqBFbi1idgCWjggrl4AaABAg", "publishedAt": "2021-01-03T15:45:26Z", "author": "Ravikumar Jeyaraman", "text": "This is awesome.. Thanks for the detailed explanation on time complexities..", "likes": 0}}, {"topLevelComment": {"id": "Ugz9tWWWShcFTec1CLV4AaABAg", "publishedAt": "2021-01-03T15:13:18Z", "author": "Mark Bjerke", "text": "I liked how he presented the material, very high quality exposition. Thank you , yes it's amazing the quality of instruction online, this was better than my actual classroom instruction.", "likes": 0}}, {"topLevelComment": {"id": "Ugyn3C3-MPOLZntyQMB4AaABAg", "publishedAt": "2021-01-03T12:08:39Z", "author": "i- -i", "text": "really well explained thank you :)", "likes": 0}}, {"topLevelComment": {"id": "Ugy2bpMUeXaFro49U5t4AaABAg", "publishedAt": "2021-01-03T06:43:19Z", "author": "Lucas", "text": "Wait hold on, canSum(7, [2, 3]) is true? How is that true?", "likes": 0}, "replies": [{"id": "Ugy2bpMUeXaFro49U5t4AaABAg.9I2BeUpn36Z9I3FQ7Kmqv2", "publishedAt": "2021-01-03T16:35:24Z", "author": "Lucas", "text": "@Kunta Kinte Hi, thank you so much brother for helping me out! Now I understand how the code works. I thought each number was only called once, I totally forgot about the loop part where all numbers are repeated again and again inside the recursion! Once again thanks bro for opening my mind!", "likes": 1}, {"id": "Ugy2bpMUeXaFro49U5t4AaABAg.9I2BeUpn36Z9I2wjuOCkVu", "publishedAt": "2021-01-03T13:43:29Z", "author": "Kunta Kinte", "text": "Hi brother, search for call stack it will help you to understand that. I can answer your question and im not sure if this is the correct answer but i teach myself this way. My english not that great but i will try.  \r\n\n    When you've come to the if statement inside of a for loop, the program will call another function until  the remainder below 0.\r\n\n   First you are going with 7.  Remainder = 7-2 =5. And then in if statement you are calling function again. but  this time you are going with targetsum=5 because your remainder=5 . Then you come inside of loop and your remainder now equals to 3. And you doing it again and now your remainder is 1. Once you hit remainder=1 you dont go further because if you call function with targetsum=1 your remainder will be -1 which is not allowed in this problem.So you stop when your remainder = 1 which now become your targetsum. You will go backward for other number in array which is 3.  Your targetsum is 1 you are in for loop again remainder = 1-3 = -1 not allowed. then we go backward again it will make your targetsum = 3 because there was a remainder= 3 before remainder=1. ( callstack remember your previous calls its work that way you can search for the better explenation) Once you go with targetsum=3 inside of for loop remainder = 3 - 3 = 0 so your remainder hit 0, that means your targetsum = 0\r\nAnd when its equal to 0 it will return true. Thats why it return True.\r\n\r\nIt can be confusing to read what i write, you can just search for Recursive and Callstack .", "likes": 0}]}, {"topLevelComment": {"id": "UgzoWyIOOMHNkJWOfX94AaABAg", "publishedAt": "2021-01-03T02:50:51Z", "author": "George Tsiros", "text": "you should write them as foobonacci and barbonacci, but still read them as foo and bar \ud83d\ude01", "likes": 1}}, {"topLevelComment": {"id": "UgyHC4jJnGj0u2n8nUZ4AaABAg", "publishedAt": "2021-01-03T02:45:58Z", "author": "George Tsiros", "text": "10:17 at that exact point you were ready to introduce memoization. How come you delayed it?", "likes": 0}}, {"topLevelComment": {"id": "UgxQnt-BEogQZSXppeJ4AaABAg", "publishedAt": "2021-01-03T00:31:34Z", "author": "Joy O", "text": "pro", "likes": 0}}, {"topLevelComment": {"id": "UgyblvZ0ojvE0WKXjW54AaABAg", "publishedAt": "2021-01-02T22:27:56Z", "author": "John Doe", "text": "This is so amazing", "likes": 0}}, {"topLevelComment": {"id": "Ugwb_0Nd_g5PyXCgoe94AaABAg", "publishedAt": "2021-01-02T17:45:50Z", "author": "Srinivasan P", "text": "Thank you for this great video.", "likes": 0}}, {"topLevelComment": {"id": "Ugy7y-fCJ4GE-X6Jrj54AaABAg", "publishedAt": "2021-01-02T16:05:00Z", "author": "Drogon \u2022 Gaming", "text": "Can anyone provide the code in c++ language", "likes": 1}}, {"topLevelComment": {"id": "Ugx14_m0s4BT19HXoPx4AaABAg", "publishedAt": "2021-01-02T11:37:08Z", "author": "Andr\u00e9 Padez", "text": "I love this course and the lecturer. A suggestion for the gridTraveler:\nsince gridTraveler(m,n) === gridTraveler(n,m)\nyou can check for both cases at the begining:\n\nconst gridTraveler = (m, n, memo = {}) => {\n\tconst key1 = `${m},${n}`\n\tconst key2 = `${n},${m}`\n\tif (key1 in memo) return memo[key1]\n\tif (key2 in memo) return memo[key2]\n\tif (m === 1 && n === 1) return 1\n\tif (m === 0 || n === 0) return 0\n\tmemo[key1] = gridTraveler(m - 1, n, memo) + gridTraveler(m, n - 1, memo)\n\treturn memo[key1]\n}", "likes": 1}, "replies": [{"id": "Ugx14_m0s4BT19HXoPx4AaABAg.9I08UeO873J9I48TBxWL5L", "publishedAt": "2021-01-04T00:53:54Z", "author": "Andr\u00e9 Padez", "text": "@Louis Wouters that's a bit too much for me, haha", "likes": 0}, {"id": "Ugx14_m0s4BT19HXoPx4AaABAg.9I08UeO873J9I4423rCOAu", "publishedAt": "2021-01-04T00:15:14Z", "author": "Louis Wouters", "text": "or even better, use maths: gridTraveler(n,m) = (n+m-2)!/((n-1)!*(m-1)!)", "likes": 1}]}, {"topLevelComment": {"id": "Ugyq4uSW0FYG0lEBVMh4AaABAg", "publishedAt": "2021-01-02T09:54:07Z", "author": "Ahmed Boutaraa", "text": "......", "likes": 0}}, {"topLevelComment": {"id": "UgwNP2DHq7Syokn3OxJ4AaABAg", "publishedAt": "2021-01-02T07:12:16Z", "author": "Ashes", "text": "for the grid traveler problem couldnt we simplify the base condition even more by just checking if any one of the dimensions is one?That would result in only one way to traverse the grid either down or right and we could avoid some calculations. Also in the memo object when we store m,n we could also store n,m since they are basically the same shape which the instructor pointed out but didnt include in the program.", "likes": 0}}, {"topLevelComment": {"id": "UgwbZaOoMXVURAcZjg54AaABAg", "publishedAt": "2021-01-02T01:25:14Z", "author": "MorTobXD", "text": "Good examples but technically there are better solutions:\n\nThere's a formula for fibonacci to calculate each number directly although it might be faster to do it \"dynamically\". You only need to save the last values though so no point in using dynamic programming\n\nThe grid traveler problem can be solved via math:\n\nThe answer is \"m+n-2 choose m-1\"\n(m+n-2 choose n-1 works too since selecting some elements is the same as not selecting the others)", "likes": 1}}, {"topLevelComment": {"id": "Ugwm6Ko4g8dYw9yUAKR4AaABAg", "publishedAt": "2021-01-01T19:40:24Z", "author": "Anirban Gorai", "text": "Two words: Pure gem!", "likes": 2}}, {"topLevelComment": {"id": "UgxYPNb6MzKZPT8x0rB4AaABAg", "publishedAt": "2021-01-01T17:27:22Z", "author": "vibhore gupta", "text": "Thanks for the video. Your explanations are crisps and clear\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgzOPBWACbNkXy5E7eB4AaABAg", "publishedAt": "2021-01-01T14:52:47Z", "author": "Soubarno Banerjee", "text": "The greatness behind this tutorial knows no bounds. From whatever I learnt by watching this, I would however like to make a comment on the \"GridTraveller\" problem.\n\nThe base case as you defined is : If Both the row number and the column number == 1, then return 1(as there is only one way).\n\nBut I think that can be further changed to : If either of the row or the column == 1, return only 1 way. \n\nThen the case of 0 row or 0 column will never appear. Definitely correct me if I was wrong, but I think that if any of the row or column is 1, there will always be only 1 way to traverse from source to destination", "likes": 2}, "replies": [{"id": "UgzOPBWACbNkXy5E7eB4AaABAg.9Hyv4jTPCNe9IcQlalTjS0", "publishedAt": "2021-01-17T17:47:15Z", "author": "Help Ayesha, She was 6", "text": "ur  BaseCase is better as It remove 1 extra recurrsion call corresponds to value 0, although in worst case it will not gonna effect", "likes": 1}]}, {"topLevelComment": {"id": "Ugyke7P1hlECL9G9E9l4AaABAg", "publishedAt": "2021-01-01T04:03:32Z", "author": "IanSGI", "text": "so if (m,n) is the same as (n,m), why perform calculations on both, and the store both in the memo? Why not sort so the higher value of 'n' or 'm' is always stored first. Wouldn't this reduce the number of calculations and memory required by about 50%?", "likes": 0}}, {"topLevelComment": {"id": "UgwFZvqoKOq0WSlB-hx4AaABAg", "publishedAt": "2021-01-01T02:04:07Z", "author": "beastwick", "text": "For the grid traveler memoization, the base case could be broadened\n   \"if m == 1 or n == 1\"\nrather than\n  \"if m == 1 and n == 1\"\nbecause whenever either is one, it only leaves one possible path.\nThis would also mean the base case of \"if m == 0 or n ==0\" will have to be checked before checking if either is one.", "likes": 1}, "replies": [{"id": "UgwFZvqoKOq0WSlB-hx4AaABAg.9HxY6pzAlqo9I2C-4I2llb", "publishedAt": "2021-01-03T06:46:15Z", "author": "Lucas", "text": "@beastwick Ohh yeah now that makes sense. Thanks!", "likes": 0}, {"id": "UgwFZvqoKOq0WSlB-hx4AaABAg.9HxY6pzAlqo9I-culOisKj", "publishedAt": "2021-01-02T06:52:29Z", "author": "beastwick", "text": "@Lucas the reason for the change is that it removes unnecessary recursion. Basically, once the function reaches a point where either m or n are 1, it still continues to recurse. An example would be if the function receives m=1 and n=3, it still continues on decrementing n to n=2 and then n=1, which is the base case. Basically, whenever m=1 or n=1, it will lead to the base case. Therefore the base case can be broadened to \"if m=1 or n=1\" since we know that will ultimately it will reach m=1, n=1", "likes": 0}, {"id": "UgwFZvqoKOq0WSlB-hx4AaABAg.9HxY6pzAlqo9I-ZkTzVyFE", "publishedAt": "2021-01-02T06:16:07Z", "author": "Lucas", "text": "I'm sorry, but what is this for? Dont we only need to sum the grid(2d)?", "likes": 0}]}, {"topLevelComment": {"id": "Ugw2hbTco_kFW1SO6W94AaABAg", "publishedAt": "2020-12-31T18:51:08Z", "author": "Prasoon Jha", "text": "Can we solve grid problem just by permutations formula only... I think it  can be solved without dp also...\nIf m and n are sizes of grids than \nAnswer would be (m+n-2)!/((m-1)!*(n-1)!)", "likes": 0}}, {"topLevelComment": {"id": "Ugy0oYrkYCPZiqPHWTh4AaABAg", "publishedAt": "2020-12-31T12:40:27Z", "author": "Lightwatch", "text": "You explained this extremely well. I have been struggling with dynamic programming for a long time, but this video clearly explains all the core concepts. Towards the end I found myself trying to solve the problems before viewing the solution, and I was pleased to find that I sometimes found the answer on my own! I think that is a sign that I genuinely learned from this video. Thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgzFoTGVJSYxiLEiIEJ4AaABAg", "publishedAt": "2020-12-31T11:16:35Z", "author": "Tariq Ebadi", "text": "How can I trust this lecture when the first problem is wrong. The implementation of fib, Base Case (n<-2) return 1 doesn't hold, run through the stack. It should be 0 and 1", "likes": 0}, "replies": [{"id": "UgzFoTGVJSYxiLEiIEJ4AaABAg.9HvxYPLNwm09I1HWXkKPAE", "publishedAt": "2021-01-02T22:15:16Z", "author": "Tariq Ebadi", "text": "@Alvin the Programmer Thanks, I just learned something new. Awesome video btw", "likes": 0}, {"id": "UgzFoTGVJSYxiLEiIEJ4AaABAg.9HvxYPLNwm09HzHwvFaM9P", "publishedAt": "2021-01-01T18:21:17Z", "author": "Alvin the Programmer", "text": "There are multiple fibonacci sequence interpretations. Both seed values generate the same sequence, they just differ in what is considered the first element. If you seed 0, 1 then the sequence goes 0,1,1,2,3,5,8,13,... If you seed 1, 1 then sequence is 1,1,2,3,5,8,13,..", "likes": 0}]}, {"topLevelComment": {"id": "Ugztod7gUUGRg4yGInF4AaABAg", "publishedAt": "2020-12-31T02:42:24Z", "author": "SurendraNath Tadepalli", "text": "QQ, since gridTravel(m,n) = grindTravel(n,m),  while checking the key=m,n in memo,   I hope we can also check existence of  key=n,m so that we can optimize further.. any comments?", "likes": 0}}, {"topLevelComment": {"id": "UgwIXFa45DIa9wLJA7B4AaABAg", "publishedAt": "2020-12-30T13:10:27Z", "author": "Ankit Shah", "text": "In bestSum Problem why cant we push number into remainderCombination array instead of using spread operator and saving it in different variable ? Doing this will reduce time and space complexity a bit, isnt it?", "likes": 0}}, {"topLevelComment": {"id": "Ugy8_OFSM3XNLJ8CDP94AaABAg", "publishedAt": "2020-12-30T12:47:24Z", "author": "qwerty qwerty", "text": "How to implement allConstruct function in c#?", "likes": 1}}, {"topLevelComment": {"id": "UgwjCRg3EGgXLXQZlPV4AaABAg", "publishedAt": "2020-12-30T09:33:23Z", "author": "aadil42", "text": "The grid traveller solution with tabulation is very very neat, almost seems like magic, i  did not even think about that solution while solving the problem.", "likes": 0}}, {"topLevelComment": {"id": "Ugwgkgl57dGy9ch4OD54AaABAg", "publishedAt": "2020-12-30T00:04:48Z", "author": "Benjamin Ugbene", "text": "Great tutorial!! Thanks Alvin. One question though; when you memoized gridTraveler, you used the 1,2 key, how about the 2,1 swap. Unless I'm mistaken, the code will still run through the 2,1 nodes. Do we need to mod the code to cover this?", "likes": 0}, "replies": [{"id": "Ugwgkgl57dGy9ch4OD54AaABAg.9HsAsGdpUA_9Hu7xYSdOKx", "publishedAt": "2020-12-30T18:17:48Z", "author": "Benjamin Ugbene", "text": "@Arman Sidhu not tried to figure it out yet. Still going through the tutorial. So, no. Not yet.", "likes": 0}, {"id": "Ugwgkgl57dGy9ch4OD54AaABAg.9HsAsGdpUA_9Hu7Ws75O4U", "publishedAt": "2020-12-30T18:14:01Z", "author": "Arman Sidhu", "text": "Same question. Did you find the answer?", "likes": 0}]}, {"topLevelComment": {"id": "UgxFRAcoWchE2WPkWRF4AaABAg", "publishedAt": "2020-12-29T23:41:32Z", "author": "Akshen Doke", "text": "One of the best teachers on YouTube!!!:D  Thanks for the video!", "likes": 1}}, {"topLevelComment": {"id": "UgwdQB8YtvocTmoKId14AaABAg", "publishedAt": "2020-12-29T15:58:52Z", "author": "David Evans", "text": "note: factor = gcd(f(x), n) and nonsense = lcm(f(x), n).  What else can we find in this form? Does this help with solving quadratic congruences? I wonder, but I have no #time for such pursuits any longer.", "likes": 0}}, {"topLevelComment": {"id": "UgwgKElJcheogqOUs394AaABAg", "publishedAt": "2020-12-29T07:17:27Z", "author": "Abdul Hassan Sayed", "text": "Hi I like this video but can u provide code in python thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugw5j1bE2Ms1uBXAIad4AaABAg", "publishedAt": "2020-12-28T23:42:11Z", "author": "Andrew Nguyen", "text": "3:21:08 I don't understand, if we iterate all the way until n, won't we get an OutOfBounds exception? Our table only allocates up until index 6. Index 7 and 8 will be out of bounds.", "likes": 0}, "replies": [{"id": "Ugw5j1bE2Ms1uBXAIad4AaABAg.9HpZUdml1R89J0mwNT65Ux", "publishedAt": "2021-01-27T14:10:43Z", "author": "SLPKNTs", "text": "JavaScript arrays don't really have a concept of size. You can try to retrieve an element from any position in the array, and if no element exists it will return undefined . There is no such thing as an out of bounds error", "likes": 0}]}, {"topLevelComment": {"id": "Ugwje0pmrN_XfyJ7RHx4AaABAg", "publishedAt": "2020-12-28T23:34:35Z", "author": "Mike Bates", "text": "Trying to write allConstruct  memoization in Python but not getting past the result.  Been a great video and I am still not done. Thanks!", "likes": 0}, "replies": [{"id": "Ugwje0pmrN_XfyJ7RHx4AaABAg.9HpYc0MqhnI9I8SrWQ35A2", "publishedAt": "2021-01-05T17:09:05Z", "author": "Coding Perspective", "text": "I recommend you watch this video for more about memoization and similar approaches\nhttps://youtu.be/vYhaNVpaq-k", "likes": 0}]}, {"topLevelComment": {"id": "Ugz9MuXABt_4xhzqaIJ4AaABAg", "publishedAt": "2020-12-28T15:44:03Z", "author": "Hrishikesh Kamble", "text": "Thank you \ud83d\ude4c", "likes": 0}}, {"topLevelComment": {"id": "UgzNDxaKOSuy4VXrA2t4AaABAg", "publishedAt": "2020-12-28T05:10:12Z", "author": "M G", "text": "I love u", "likes": 0}}, {"topLevelComment": {"id": "Ugyyvx9V8fU49dLb93p4AaABAg", "publishedAt": "2020-12-28T01:37:25Z", "author": "Jeong-hun Sin", "text": "Is he using \"dynamic programming\" for Fibonacci only because to use \"dynamic programming\" or is \"dynamic programming\" is good for this task? I mean, my first instinct was just using a for loop. I tested it in a C# code, and of course, it worked.\n\n\tpublic static ulong Fib(ulong num)\n\t{\n\t\tulong sum = 0;\n\t\tulong prev1 = 1;\n\t\tulong prev2 = 1;\n\t\tif(num<3)\n\t\t\treturn 1;\n\t\telse for(ulong i=3; i<=num; i++)\n\t\t{\n\t\t\tsum=prev1+prev2;\n\t\t\tprev1=prev2;\n\t\t\tprev2=sum;\n\t\t}\n\t\treturn sum;\n\t}", "likes": 0}, "replies": [{"id": "Ugyyvx9V8fU49dLb93p4AaABAg.9HnBsoSI4rp9HtutjYoZpZ", "publishedAt": "2020-12-30T16:14:56Z", "author": "Coding Perspective", "text": "Your approach is the best way to code the Fibonacci sequence. We discuss all the possible approaches in this video https://youtu.be/vYhaNVpaq-k", "likes": 0}]}, {"topLevelComment": {"id": "UgwqpNidLQWgDmQxle14AaABAg", "publishedAt": "2020-12-28T00:44:32Z", "author": "Wenjing Xu", "text": "in the fib() function, why the memo passed inside the function is still memo, not memo[n-1] ------------------what I mean is that code: memo[n] = fib(n-1,memo)+ fib(n-2,memo) why it is not fib(n-1,memo[n-1])+ fib(n-2,memo[n-2]) ?", "likes": 0}}, {"topLevelComment": {"id": "Ugw5HAGGqkoTSWVw6U14AaABAg", "publishedAt": "2020-12-27T19:29:06Z", "author": "Wanderson Gomes", "text": "Thank you.", "likes": 0}}, {"topLevelComment": {"id": "Ugxmw3qjARJO1zXjGaF4AaABAg", "publishedAt": "2020-12-27T12:57:42Z", "author": "Puranjay Arora", "text": "Can someone please tell why javascript doesn't give \"Index out of  Range\" error when the code tries to access i+1 and i+2  at 3:21:11", "likes": 0}}, {"topLevelComment": {"id": "Ugwpj3nzOeURvLcBGY14AaABAg", "publishedAt": "2020-12-27T01:04:39Z", "author": "Willson Mock", "text": "This is one of the most clear and succinct explanations on the memoization and tabulation techniques for dynamic programming!", "likes": 73}, "replies": [{"id": "Ugwpj3nzOeURvLcBGY14AaABAg.9HkZKvTdJHf9V7eU_k7zxN", "publishedAt": "2021-11-24T12:28:17Z", "author": "veipunii lana", "text": "which pograming language are you uisng for coding? \r\nIf you are using java can i ask you some questions?", "likes": 0}]}, {"topLevelComment": {"id": "UgwuHb6MWahwHrXurPl4AaABAg", "publishedAt": "2020-12-26T18:00:14Z", "author": "Kong Zilla", "text": "Really Loved this course and the instructor ..\ud83e\udde1...\nI wish I could like the video it  more than once... :)", "likes": 0}}, {"topLevelComment": {"id": "UgzmXiwhSsMNUVjtvNh4AaABAg", "publishedAt": "2020-12-26T13:53:06Z", "author": "Samuel Rowe", "text": "There is an off-by-one bug in the Fibonacci program using tabulation.\n\nIt appears that this error is not manifested because of how arrays work in JavaScript. This would be a problem for those who are following this tutorial in a language like Java. If you run the snippet below, you will notice that the size of the array for fib(6) is 9, when we expected it to be 7.\n\nconst fib = (n) => {\n    const table = Array(n + 1).fill(0);\n    table[1] = 1;\n    for (let i = 0; i <= n; i++) {\n        table[i + 1] += table[i];\n        table[i + 2] += table[i];\n    }\n    console.log(table.length);\n    return table[n];\n}\n\nconsole.log(fib(6));\n\nHere's an implementation in Java without the off-by-one bug.\n\npublic class Test {\n\n    private static int fib(int n) {\n        int[] table = new int[n + 2]; // We need two extra elements in the first and the last positions of the array.\n        table[1] = 1;\n        for (int i = 0; i < n; i++) {\n            table[i + 1] += table[i];\n            table[i + 2] += table[i];\n        }\n        return table[n];\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib(40));\n    }\n}", "likes": 1}, "replies": [{"id": "UgzmXiwhSsMNUVjtvNh4AaABAg.9HjMUQLvCi89HwlTa7NmSR", "publishedAt": "2020-12-31T18:50:19Z", "author": "Arman Sidhu", "text": "With just 1 extra space\n\npublic class Fibonacci \r { \n\n  int fib(int n) \r{ \n\n    int f[] = new int[n+1]; \r\n    f[0] = 0; \r\n    f[1] = 1; \r\n    for (int i = 2; i <= n; i++) \r\n          f[i] = f[i-1] + f[i-2]; \r\n    return f[n]; \r\n  }", "likes": 1}]}, {"topLevelComment": {"id": "UgwWgu3wMPfIkLM20Sx4AaABAg", "publishedAt": "2020-12-26T05:59:13Z", "author": "Govind Agarwal", "text": "In howSum brute force method, shouldn't time complexity be O(n^m + m^2) as copying of array only happens for one branch, where sum is equal to targetSum.", "likes": 0}}, {"topLevelComment": {"id": "Ugx9gzdj3Q2OjPyrTnh4AaABAg", "publishedAt": "2020-12-26T04:22:24Z", "author": "Girava | \u0d9c\u0dd2\u0dbb\u0dc0\u0dcf", "text": "Hi guys, \nI extended howSum problem to allSum problem which will return all possibilities to make the target sum. My \"memo\" version is super fast but the \"tabular\" version is extremely slow for ([7,14], 300) inputs. I understand that in \"tabular\" cases we build many arrays for any i*7 indexes. But Im not sure is there any other issue in this code https://github.com/Chamindasl/data-structures-and-algorithms/blob/main/python/dp/all_sum.py", "likes": 0}}, {"topLevelComment": {"id": "UgxeNX4uEEusBxkYimt4AaABAg", "publishedAt": "2020-12-26T04:13:44Z", "author": "Herp Derpingson", "text": "20:57 No you cannot simplify O(2^(n/2)) to O(2^n) as 2^(n/2) cannot be expressed as a * 2^n + b * 2^(n-1) + ... + c form.\n\n1:04:08 No, the cache size can become  n * m / 2 in the worst case. So, the space complexity should also be O(n * m)", "likes": 7}, "replies": [{"id": "UgxeNX4uEEusBxkYimt4AaABAg.9HiKB-QL5ps9N2RvJINbdN", "publishedAt": "2021-05-07T15:42:23Z", "author": "erithion", "text": "What I can't grasp is how he got O(n^m * m) in the unoptimized howSum. Upon each recursive call you do at most one copy of m elements, and you do it m times, so the final O is O(n^m + m^2).", "likes": 0}, {"id": "UgxeNX4uEEusBxkYimt4AaABAg.9HiKB-QL5ps9N2PHtecXY7", "publishedAt": "2021-05-07T15:19:23Z", "author": "erithion", "text": "It is not a simplification. I guess what he meant was big O in the academic sense, i.e. the upper bound function. Since 2^(n/2) == sqrt(2)^n, so you can say that it is always less than 2^n.", "likes": 0}, {"id": "UgxeNX4uEEusBxkYimt4AaABAg.9HiKB-QL5ps9M15J-3noGr", "publishedAt": "2021-04-12T06:34:09Z", "author": "Henry Fajardo", "text": "after checking closely what I said is in fact not true lol", "likes": 0}, {"id": "UgxeNX4uEEusBxkYimt4AaABAg.9HiKB-QL5ps9M13DJyyfF_", "publishedAt": "2021-04-12T06:15:54Z", "author": "Henry Fajardo", "text": "but wouldn't 2^(n/2) simplify to sqr(2)*2^n?", "likes": 0}, {"id": "UgxeNX4uEEusBxkYimt4AaABAg.9HiKB-QL5ps9ImObHSVNBO", "publishedAt": "2021-01-21T14:40:46Z", "author": "El Gallo", "text": "Thanks for pointing this out. I was about to comment on the O(n * m) space complexity.", "likes": 1}]}, {"topLevelComment": {"id": "UgwK9ZDPMEdpjzk_g-F4AaABAg", "publishedAt": "2020-12-25T23:30:00Z", "author": "John T.", "text": "Ill donate a nice money to FCC after I find my first job", "likes": 0}}, {"topLevelComment": {"id": "UgybFbHNClapjMOiIm94AaABAg", "publishedAt": "2020-12-25T21:26:23Z", "author": "Pain et Cirque", "text": "Astounding and outstanding!", "likes": 0}}, {"topLevelComment": {"id": "Ugw2wVkXmD0eVolPbTh4AaABAg", "publishedAt": "2020-12-25T20:36:06Z", "author": "Vikram Ranabhatt", "text": "It's ultimate....please add for backtracking,branch n bound and Greedy as well", "likes": 0}}, {"topLevelComment": {"id": "UgwtA5_HYJGagp9MCFB4AaABAg", "publishedAt": "2020-12-25T18:16:29Z", "author": "MrJuggernautishere", "text": "this is awesome", "likes": 0}}, {"topLevelComment": {"id": "UgzmuLyRgpVTl_NyAP54AaABAg", "publishedAt": "2020-12-25T16:25:55Z", "author": "Uriel Ramirez", "text": "What? I'll stick to G code programming.", "likes": 0}}, {"topLevelComment": {"id": "Ugzx2HQ_Dt3ClNl4v9B4AaABAg", "publishedAt": "2020-12-25T12:34:03Z", "author": "bhavisha hadiyal", "text": "I'm writing code in Python but even the code is same as him still it's giving different output", "likes": 0}, "replies": [{"id": "Ugzx2HQ_Dt3ClNl4v9B4AaABAg.9HgddXRyr7G9HpdPRNlFqa", "publishedAt": "2020-12-29T00:25:09Z", "author": "bhavisha hadiyal", "text": "@tadgam sure", "likes": 0}, {"id": "Ugzx2HQ_Dt3ClNl4v9B4AaABAg.9HgddXRyr7G9HoB6nqU-Xk", "publishedAt": "2020-12-28T10:49:58Z", "author": "tadgam", "text": "I do it in Python too and it goes ok. Can you show your results?", "likes": 0}]}, {"topLevelComment": {"id": "UgxEIGttEr2mAtsQ54d4AaABAg", "publishedAt": "2020-12-25T12:33:16Z", "author": "bhavisha hadiyal", "text": "Guys can anyone please please help me", "likes": 0}}, {"topLevelComment": {"id": "Ugw37rrXBsHfas76PmN4AaABAg", "publishedAt": "2020-12-25T01:57:06Z", "author": "Corwin Keylon", "text": "For the gridtraveler base case, wouldnt \n\nif (m === 1 || n === 1) return 1; \n\nstill work and even be better? You wouldn't even have to memo 1,2", "likes": 0}}, {"topLevelComment": {"id": "UgwlPJWLZHRKZsr5UvN4AaABAg", "publishedAt": "2020-12-25T01:50:42Z", "author": "The SoullessLime", "text": "Hey it would be nice if there was a java version to follow along. Other than that great video.", "likes": 0}, "replies": [{"id": "UgwlPJWLZHRKZsr5UvN4AaABAg.9HfV0XMH7Tm9I8ytgG_2gs", "publishedAt": "2021-01-05T21:57:44Z", "author": "C\u00e9sar Soto Valero", "text": "Here are the solutions for the problems in Java, if you are interested: https://www.cesarsotovalero.net/2020-12-21-dynamic-programming-classics", "likes": 0}]}, {"topLevelComment": {"id": "UgxFCjBrJdteXO02E1d4AaABAg", "publishedAt": "2020-12-25T01:04:23Z", "author": "Lifazul Tonmoy", "text": "We choose Alvin to lead the tech rebellion", "likes": 4}}, {"topLevelComment": {"id": "UgzBwTsuz3XJFUf--GZ4AaABAg", "publishedAt": "2020-12-24T20:08:13Z", "author": "Eric Tang", "text": "In the memoized canSum problem, I don't think you need line 10 (memo[targetSum] = True). If ever the target ===0, the function should early exit and return True, thus it shouldn't ever need to be retrieved from the memo table. \n\nIn any event,  great video!", "likes": 0}}, {"topLevelComment": {"id": "UgzbKQuaXkBNHCIdKVV4AaABAg", "publishedAt": "2020-12-24T15:49:23Z", "author": "giteshgreat", "text": "1:45:40 why do we need to do the copying for each recursive call? We will do the copying only in case we found a way to reach target sum. Because of the if statement returning and coming back, no further calls will will be made. It should be O(n^m + msquare) not multiplied as the copying will happen only in 1 path not in all the paths. It is wrong to multiply in my opinion. Anyone thinking the same as me?", "likes": 0}}, {"topLevelComment": {"id": "Ugy5G12BdiBnBfwQv9h4AaABAg", "publishedAt": "2020-12-24T15:07:54Z", "author": "Rohit Ramchandani", "text": "thats being said you are a hero", "likes": 0}}, {"topLevelComment": {"id": "UgwCek8CQDLJLHWzgjN4AaABAg", "publishedAt": "2020-12-24T12:13:18Z", "author": "Ivan Kudryashov", "text": "GridTravler is not a great example for memoization. There is a straightforward solution using binomial coefficients. Namely the answer to this problem is (n - 1 + m - 1) choose (n - 1), and all you need is a factorial function.", "likes": 0}}, {"topLevelComment": {"id": "Ugx2F5WuoQE1oXh62w14AaABAg", "publishedAt": "2020-12-24T06:52:06Z", "author": "Karl Sauter", "text": "Could someone help me clarify?\nIn the very last example (5:02:41), shouldn't there be an if before the inner for loop that checks weather I could be at that position in the first place? If there is an empty array in the position, I shouldn't check for words from the wordBank matching. Otherwise I'd start adding paths to other positions that don't actually lead there.", "likes": 0}}, {"topLevelComment": {"id": "UgytxwHsdt7ZoimDTC14AaABAg", "publishedAt": "2020-12-24T00:38:05Z", "author": "girish doddi", "text": "you saved my ass from dynamic programing ,thanks a lot ,quality teaching", "likes": 0}}, {"topLevelComment": {"id": "Ugzk50QA51VkU6GcZuJ4AaABAg", "publishedAt": "2020-12-23T21:47:21Z", "author": "Daniel Brannon", "text": "@14 minutes or so he lists 2 functions, and says they would base case at 0. But the way they are written they don't account for negatives, so in this case wouldn't there never be a base case? Someone correct me if i'm wrong please.", "likes": 0}}, {"topLevelComment": {"id": "Ugx2Id8-OomkcOjjPGJ4AaABAg", "publishedAt": "2020-12-23T17:25:36Z", "author": "Subash Raj", "text": "Awesome Explanation.. and made my understanding more clear.. Expecting more videos.. Thanks \ud83d\ude0a", "likes": 0}}, {"topLevelComment": {"id": "UgyQJgEbi2oeKm32kX14AaABAg", "publishedAt": "2020-12-23T14:57:51Z", "author": "Nouamane Haggouch", "text": "at 6:11 it should print \n13\n21\r\n34", "likes": 0}}, {"topLevelComment": {"id": "Ugy5wfY-WKKCbDTzvB14AaABAg", "publishedAt": "2020-12-23T10:55:58Z", "author": "June", "text": "I think we do not need a 0 base case in gridTraveler, as 0 does not play so much role", "likes": 0}}, {"topLevelComment": {"id": "UgxRsLtVeHPwdEF64vR4AaABAg", "publishedAt": "2020-12-23T08:04:02Z", "author": "Sourav A S", "text": "It took me a week to finish this tutorial. \nThis tutorial is just pure gold. \nI always found it hard to understand time complexity for recursive solutions. But this video explains it perfectly.\nThis is probably the best tutorial on dynamic programming. I can't believe you're giving such quality content for free...", "likes": 1670}, "replies": [{"id": "UgxRsLtVeHPwdEF64vR4AaABAg.9Hb098BTkH29eONbnhpFBz", "publishedAt": "2022-08-06T13:33:09Z", "author": "Repent and believe in Jesus Christ", "text": "Repent to Jesus Christ \u201cWe demolish arguments and every pretension that sets itself up against the knowledge of God, and we take captive every thought to make it obedient to Christ.\u201d\n\u202d\u202d2 Corinthians\u202c \u202d10:5\u202c \u202dNIV\u202c\u202c\nht", "likes": 0}, {"id": "UgxRsLtVeHPwdEF64vR4AaABAg.9Hb098BTkH29co9U9URyis", "publishedAt": "2022-06-28T06:06:21Z", "author": "Damien Spectre", "text": "what software is he using to design the trees etc? looks handy to convey system design", "likes": 0}, {"id": "UgxRsLtVeHPwdEF64vR4AaABAg.9Hb098BTkH29c2Xsz47mMV", "publishedAt": "2022-06-09T08:56:48Z", "author": "wildhrushka", "text": "@Sourav A S  Why, you're practically Speedy Gonzales compared to me", "likes": 2}, {"id": "UgxRsLtVeHPwdEF64vR4AaABAg.9Hb098BTkH29bu-Kscsays", "publishedAt": "2022-06-05T16:01:45Z", "author": "Tak Irr", "text": "01:04:10 - OBVIOUS MISTAKE??? Did he forgot to calculate space occupided by THE CACHE? Space should be O(n * m), not O(n + m)  OMG", "likes": 0}, {"id": "UgxRsLtVeHPwdEF64vR4AaABAg.9Hb098BTkH29aQFG3IDGy_", "publishedAt": "2022-04-29T20:53:03Z", "author": "one punch", "text": "but do you understand the tabulation part? I don't... But it is great content", "likes": 0}]}, {"topLevelComment": {"id": "UgyusxjFhaiBHKUlPgd4AaABAg", "publishedAt": "2020-12-23T04:43:59Z", "author": "Spirolli", "text": "Just an FYI to others who use Python to practice with this video.  Javascript, the language used in the video, works slightly different than Python.  This call's syntax is legal in both Python and Javascript (shown below and leaving off proper function definition syntax for the respective language), but they have huge difference in how they act:\n... *canSum(targetSum, numbers, memo={})*\n\nIn Javascript, memo will exist only for the function *call* (i.e. the function will dispose of memo, and other mutable values at the end of the _initial_ function call).  For recursive calls, I think the call stack will still allow *memo* to persist so long as the base call is on the call stack.  Once the base/initial function call is over, memo is lost. \n\nHowever, for Python, memo will exist, and persist, at function *definition* .  This means that Python will create the array and have it persist throughout the lifetime of the global namespace of the program.  This means, that all calls to canSum, even calls that make initial calls to canSum, will all operate on the same memo value.  So true and false values in memo from previous calls will be used for future calls to canSum that should operate with a completely new and empty mutable value.  This will inevitably cause problems.\n\nTo fix this for Python, just take out the default value in the function definition and include an empty dictionary (i.e. '{}') in your function call.", "likes": 0}, "replies": [{"id": "UgyusxjFhaiBHKUlPgd4AaABAg.9HaeFppJsYp9HiYzW4sza4", "publishedAt": "2020-12-26T06:23:06Z", "author": "ApiolJoe", "text": "@Spirolli Okay, got it! thanks.\nHave a nice day", "likes": 0}, {"id": "UgyusxjFhaiBHKUlPgd4AaABAg.9HaeFppJsYp9Hi9CNiOofX", "publishedAt": "2020-12-26T02:37:48Z", "author": "Spirolli", "text": "@ApiolJoe I took a look at the code in your last statement and it was fine.  It worked with the test cases I used before (FYI, they were just the test cases used for canSum in the video).\n\nAnd yes, you can conclude that inputting a manual value for memo when the function is called will guarantee that it will work, in so far as you're memo values are logically independent of any other calls to canSum that happen outside the function itself.  If you create a new dictionary at the time of initial/first function call, you'll be good to go.  \n\nKeep in mind, though, that you need to create a *new* dictionary every time that canSum is called.  You can do this by defining a literal (e.g. {0: True}) in the function call or by copying the dictionary before you send it to canSum.\n\nAlso another way to ensure that you have a 'new' memo would be to define the default value of memo=None.  Then write an if statement that checks if the value is None, and, if so, create an empty memo ( e.g. {}) or a memo with your initial values, albeit, this would require some rewrites to other statements in the function.\n\nAs for your final question, I'm not sure exactly why the choice was made to have a complex, mutable objects (i.e. arrays and dictionaries) defined and persist throughout the execution of function's lifetime.  There are ways to avoid this in the writing of code that are simple enough to achieve and according to this webpage (https://web.archive.org/web/20200221224620/http://effbot.org/zone/default-values.htm), sometimes writing to data that is shared between multiple, can have it's advantage.  If you have to call a particular function, a lot, it's a costly calculation every time a 'new' input is received and you don't care at all about logical independence, using a persistent memo can cut down on operation time.  The webpage above also offers UI design as a apt subject.  A lot of the time you only want to interact with one particular object in a UI, and it doesn't make sense to create a new object every single time.  The problem with _canSum_ is that you *DO* need a logical independence between calls (calling from outside the function).", "likes": 0}, {"id": "UgyusxjFhaiBHKUlPgd4AaABAg.9HaeFppJsYp9HgSW8NwWNy", "publishedAt": "2020-12-25T10:48:03Z", "author": "ApiolJoe", "text": "@Spirolli Okay I revisited all the code, here's where I'm at exploring this issue:\n\n#implementation with memoization\ndef canSum_memo(targetsum, numbers, memo={0: True}):\n  if targetsum == 0:\n    return memo[targetsum]\n  for n in numbers:\n    if targetsum >= n:\n      try:\n        if memo[targetsum-n]==True:\n          return True\n      except:\n        memo[targetsum-n] = canSum_memo(targetsum - n, numbers, memo)\n        if memo[targetsum-n]==True:\n          return True\n  return False\n\nSince my bruteforce solution gives the right answer, I'll simply use it as a baseline and make sure the memo version gives the right answer. This allows to generate random test cases, meaning randomized tuples of (sum, number_set)\n\nimport random\ntestsize = 50\ncorrect_answers = 0\ncorrected_answers = 0\n\nfor i in range(testsize):\n  sum = random.randint(1, 1000) #stopping at 1000 for execution time\n  n = random.randint(10, int(sum/10))\n  numbers = [random.randint(1, sum) for i in range(n)] #creating the randomized numbers set\n\n  bf_result = canSum_bruteforce(sum, numbers) #storing the true result in a variable since I'll use it twice\n  if canSum_memo(sum, numbers) != bf_result:\n    #If the result ir incorrect with the normal call, I check whether initializing a memo with the initial call solves the issue\n    corrected = canSum_memo(sum, numbers, memo={0: True}) == bf_result\n    corrected_answers += corrected\n    print(sum, '<=', numbers, 'was {}corrected'.format('' if corrected else 'not '))\n  else:\n    if canSum_memo(sum, numbers, memo={0: True}) == bf_result:\n      corrected_answers += 1\n    correct_answers += 1\nprint('Correct answers: {0:.3g}%'.format(100*correct_answers/testsize))\nprint('Correct answers with initialization: {0:.3g}%'.format(100*(corrected_answers)/testsize))\n\nWhich returns\n57 <= [22, 9, 45] was corrected\n31 <= [22, 23] was corrected\n58 <= [13] was corrected\n40 <= [26, 33, 12] was corrected\n79 <= [66, 6] was corrected\n58 <= [31, 50, 22] was corrected\n25 <= [17, 11] was corrected\n59 <= [19, 19, 51] was corrected\n21 <= [5] was corrected\n51 <= [38, 39, 25] was corrected\n94 <= [57, 93, 45, 6, 21, 30] was corrected\n17 <= [7] was corrected\n56 <= [37] was corrected\n10 <= [9] was corrected\n54 <= [26, 41, 46] was corrected\n94 <= [81, 78] was corrected\n79 <= [20, 36] was corrected\nCorrect answers without initialization: 66%\nCorrect answers with initialization: 100%\n\nI ran this test on more test cases (up to testsize = 10000) and the results were perfectly consistent with this example. correct answers without initialization seemed to range between 50% and 80%. With initialization I allways got 100%.\n\nDo you find another mistake in what I did here? I want to conclude that initializing manually a value for the initial call is enough to guarantee that its modifications are not leaking into further calls, and am ready to leave it at that.\nAnyways, thank you for the discussion. You definitely saved \"future me\" hours of debugging with that variable initialization at function definition instead of function call!\nDo you know if this feature is intended? Meaning that I can count on it to have a persistent object persist through calls? No idea yet how to use that or why not use a class object instead if I want a something persistent, but who knows.", "likes": 0}, {"id": "UgyusxjFhaiBHKUlPgd4AaABAg.9HaeFppJsYp9HgLFwraLNU", "publishedAt": "2020-12-25T09:44:40Z", "author": "ApiolJoe", "text": "@Spirolli Which test cases did you use that returned wrong answers? (Edit2: my code doesn't work properly, it returns False prematurely as soon as the. for example it returns false with numbers [4, 7] and targetsum of 15, which should be true. I'm investigating)\n\nI also tried this:\n\nnumbers = [3, 6] #chosen to make sure some tests will be false\nmistake = False\nfor i in range(500):\n  if canSum(i, numbers) != canSum(i, numbers, memo={0: True}):\n    mistake = True\n    break\nprint(mistake)\n\nInitializing manually a new memo object for each initial call on the second member of the if test.\nthe code indeed returns False.\nMaybe I misunderstood your initial comment. Sorry if that's the case, I'm not a CS guy, just an amateur learning on his own.\n\nEdit: Okay read fully your second message. From what I understand, this will inevitably cause problems  if we run multiple tests with different number sets. On my machine I was testing everything with the same number set and different target sums. So in my case the memo not being reinitialized at every initial call didn't cause any error because the entries remaining in it were correct, but that would not necessarily be the case if we decided to change the number set. The fact that I didn't spot any issue came from the fact my test cases didn't cover all possible cases, am I right?\n\nnumbers = [3, 6]\nprint(canSum_memo(15, numbers))\nnumbers = [4, 8]\nprint(canSum_memo(15, numbers))\nprint(canSum_memo(15, numbers, memo={0: True}))\n\nAnd you were right, this returns \n> True\n> True\n> False\n\nWhich is incorrect on the second result, as you rightfully expected.\nInterestingly, it seems that you are wrong about the fact that initializing manually a new memo object wouldn't correct the issue. I'm not really sure what more to test to understand more about this, or if you really are wrong about it.", "likes": 0}, {"id": "UgyusxjFhaiBHKUlPgd4AaABAg.9HaeFppJsYp9Hev8JU7G7j", "publishedAt": "2020-12-24T20:28:27Z", "author": "Spirolli", "text": "@ApiolJoe I tested your code and got mostly wrong results (F, F, F, T, T when it should have been T, T, F, T, F).  I don't know if you copied down your program wrong or something else, but my main point is if someone using Python doesn't adjust their program to handle the case I brought up, they will *probably* get wrong answers.  This isn't the type of wrong where the program will crash, but where you'll get unreliable answers.  Also, what I was discussing won't *necessarily* cause a problem in every case of multiple test cases being run, there's a good chance that the more test cases you run, the likelier that this problem will show up.  \n\nFurthermore, the issue isn't with the code itself, but the way the Python acts under the hood to handle the code.  \n\nThe problem with memo in canSum rear its ugly head when you run *more than one* test cases on the same run ('more than one test case' being important to recognize here).  This will most likely cause problems for multiple test runs that operate within the same global namespace.  A simple example of this is can be shown with this small program:\n\n# Start of program -----\ndef testMemo(value, memo={}):\n     memo[str(value)] = value\n     print(memo)\n\nif __name__ == '__main__':\n    testMemo(3)\n    testMemo(5)\n# End of program ---\n\nTaking the above example, we have a _testMemo_ function that takes a value and has a default value of an empty dict for memo.  In javascript, a similar call (i.e. with correct javascript syntax) would produce the following output:\n\n{'3': 3} // For the first call\n{'5': 5} // For the second call\n\nThat's what we want.  We want separate dictionary/objects for different *initial* calls to our function (javascript will keep memo 'alive', or have it persist through recursive calls to itself).  However, in Python (which I tested on an online editor for versions 2.7 and 3.8, and an offline editor for 3.6), we get the following:\n\n{'3': 3} # For the first call\n{'3': 3, '5': 5} # For the second call\n\nWe don't want that.  We want the second call to only have the value {'5': 5}.  And even if you include a value in your memo default value definition (i.e. ... memo={'2': 2} or anything else) you'll just get something similar:\n\n{'2': 2, '3': 3} # For the first call\n{'2': 2, '3': 3, '5': 5} # For the second call --- we don't want '3': 3 here.\n\nLike I said in my previous post, the reason being is that javascript creates memo at function *call* . Meaning, when we call testMemo in a javascript program, javascript *creates* memo every time the testMemo function is called.  Upon returning from its initial call back (the first function call that wasn't a recursive call) to the scope that called it, javascript treats memo as a variable in function scope, and when garbage collecting, throws memo away like every other function scope variable.  \n\nFor Python, the Python interpreter creates memo at function *definition* .  This means when the program is passed to the Python interpreter,  Python reads all functions definitions into the program and creates a function definition for every function in the global namespace (or program namespace).  In the case above, we only have testMemo as function definition and before main is run, Python interprets all function definitions and creates any mutable values in the declaration.  So, when something calls Python's testMemo during the run of 'main', nothing new happens with memo, and when we throw away every function scope variable for Python's testMemo when it's fully run and getting itself off the call stack, memo remains.  We, however, want memo to be tossed when we're leaving testMemo entirely, that way we won't get carryover in a future, unrelated call.\n\nI'm not sure how Javascript handles function definition, but it at least doesn't create memo at function definition,  Python however does.  Python instantiates a memo dictionary at the beginning of its run (BEFORE its even been called) and treats it as a continuously existing variable throughout that program.\n\nThis phenomenon only, potentially causes problems if you're running more than one test case in the same namespace declaration.  If you use something like IDLE and restart the editor every time you run your program with ONE test case, this won't crop up.  Hell, this won't necessarily occur if you do it 2 or three times with multiple test cases in the same run.  If early test cases don't have small values for numbers and a high targetSum, the likelihood that you'll cause problems for future test cases is low (but not impossible).  But if you, however, run all test cases mentioned in the video in the same 'run', you'll probably see this problem show up.", "likes": 0}]}, {"topLevelComment": {"id": "Ugx9Of_LX2KwfBqGKyN4AaABAg", "publishedAt": "2020-12-23T00:21:37Z", "author": "Nihal Agarwal", "text": "I think the bestSum optimization == coin change problem ??", "likes": 0}}, {"topLevelComment": {"id": "Ugzx_M46pmUSvwHymjh4AaABAg", "publishedAt": "2020-12-22T17:57:04Z", "author": "R\u0259\u015fad Kaz\u0131mov", "text": "\u0130f its possible can you activate at least auto subtitle", "likes": 0}}, {"topLevelComment": {"id": "UgwhktkcEE332flEAaN4AaABAg", "publishedAt": "2020-12-22T13:04:23Z", "author": "chinley biggins", "text": "getSum (f*!k, yeah) {\n}", "likes": 0}}, {"topLevelComment": {"id": "Ugy8zM3NUnt_Qky_g7d4AaABAg", "publishedAt": "2020-12-22T07:25:33Z", "author": "Ritesh Jha", "text": "Hey, I was thinking about the canSum problem where you kind of use all the elements of array multiple times. It looked same as the Dynamic Programming problem \"Coin Change\". But the results do not match, can you please comment why?", "likes": 0}}, {"topLevelComment": {"id": "UgzLGkXSKLl_KT4ahXd4AaABAg", "publishedAt": "2020-12-22T06:39:51Z", "author": "Tejas Aditya", "text": "YOUTUBE IS THE BEST THING THAT HAPPENED IN HUMAN CIVILIZATION,,...", "likes": 0}, "replies": [{"id": "UgzLGkXSKLl_KT4ahXd4AaABAg.9HZHieim79f9HbA5TIL08-", "publishedAt": "2020-12-23T09:30:55Z", "author": "Suraj Kushwah", "text": "actually no .. You are wrong. . Youtube is very bad company since it's basically GOOGLE. We love youtube because of the talented people who put these kind of good content for free. Youtube don't even recommend good channels. Youtube = Google and Google have resources to make it fast and best ..but we deserve a better platform.", "likes": 0}]}, {"topLevelComment": {"id": "UgzlUzbQ5_q809LOC1R4AaABAg", "publishedAt": "2020-12-21T23:49:40Z", "author": "Nihal Agarwal", "text": "@freeCodeCamp.org please add subtitles for this video, the content is superb and fascinating but sometimes some word and sentences are hard to understand if you don't want to create and add your own subtitle, at least add the option of 'auto-generated subtitles' in this video.\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgxXi2WX7p9A2bT6F654AaABAg", "publishedAt": "2020-12-21T22:03:35Z", "author": "Motivation 2021", "text": "Informative and informative explains.", "likes": 0}}, {"topLevelComment": {"id": "UgzmJNIcXV06AU1jLSV4AaABAg", "publishedAt": "2020-12-21T19:26:54Z", "author": "Warren Tait", "text": "I can't believe you made this with over 2,000 slides. You're a hero.", "likes": 56}, "replies": [{"id": "UgzmJNIcXV06AU1jLSV4AaABAg.9HY4hqyickB9RFnaGndP2S", "publishedAt": "2021-08-20T06:16:12Z", "author": "CST1992", "text": "Yeah, that coordination is spot-on.", "likes": 0}, {"id": "UgzmJNIcXV06AU1jLSV4AaABAg.9HY4hqyickB9OXpdSJfyoC", "publishedAt": "2021-06-13T16:46:15Z", "author": "Lil Papa", "text": "What did he use to create those slides ?", "likes": 2}]}, {"topLevelComment": {"id": "UgxzEn_CZs974mPdJPx4AaABAg", "publishedAt": "2020-12-21T19:10:24Z", "author": "Prateek Gupta", "text": "If this video can't teach you DP, no one can! \ud83d\udd25", "likes": 26}, "replies": [{"id": "UgxzEn_CZs974mPdJPx4AaABAg.9HY2ovw6tUL9HZX-zqhknL", "publishedAt": "2020-12-22T08:53:25Z", "author": "ketan khandelwal", "text": "Correct Bro.!", "likes": 0}]}, {"topLevelComment": {"id": "UgzDzw1CnNIqHi_nfWJ4AaABAg", "publishedAt": "2020-12-21T10:39:45Z", "author": "mytube", "text": "Do more Videos...pleazee", "likes": 0}}, {"topLevelComment": {"id": "Ugw1SWoq4LDWHfH20vJ4AaABAg", "publishedAt": "2020-12-21T09:22:05Z", "author": "Ingmar Crone - Nederlands", "text": "1 min in, already feeling annoyed by the way that he talks. Ending every sentence in a high tone, as if every sentence is a question.", "likes": 1}}, {"topLevelComment": {"id": "UgwYnODXfjPmzqzykfV4AaABAg", "publishedAt": "2020-12-21T08:23:37Z", "author": "Torben J\u00e4ckel", "text": "Me: Starting a 5 hour Tutorial about Dynamic Programming\nYoutube: Before you start, here's an ad for Backpain Medication.", "likes": 39}, "replies": [{"id": "UgwYnODXfjPmzqzykfV4AaABAg.9HWtnlUGRkw9HvSJUBJNWK", "publishedAt": "2020-12-31T06:34:56Z", "author": "Leon", "text": "lol", "likes": 2}]}, {"topLevelComment": {"id": "UgzX_Z9unZlxkA1D8Rh4AaABAg", "publishedAt": "2020-12-21T06:16:59Z", "author": "Aerosfilis", "text": "Wouldn't the howSum brute force time complexity be more around the line of O(n^m + m^2)?\nSince the array copy is inside an if with a return, the said if only runs when the function is on the solved branch, it will only have to duplicate the array m times at most from the bottom, with max array length of m.\nThen for the memoize version, the time complexity would drop to O(n*m + m^2) for similar reason, the array is only duplicated on the last branch back that is the solution, as for any other branch it would have returned null from the memo.\n\nEither way, if the time complexity is O(n^m + m^2), would we simplify it to O(n^m) since for any n>1,  n^m will grow much faster than m^2? which would probably be a lot of the time, but I don't have quite enough practice with more complex O notations than the basic 1 input example you find the most when learning it.", "likes": 0}}, {"topLevelComment": {"id": "UgwfYSuYiWkTAarKGSF4AaABAg", "publishedAt": "2020-12-20T18:51:23Z", "author": "Ignacio Cortorreal", "text": "1:14:01 Imagine solving  codingbat.com's java exercises without knowing this.", "likes": 2}}, {"topLevelComment": {"id": "UgxVYdPlpDM8WYuSQtN4AaABAg", "publishedAt": "2020-12-20T17:09:23Z", "author": "Yash Pathak", "text": "Dude you are awesome", "likes": 0}}, {"topLevelComment": {"id": "Ugx4t4USp3sPRXncDel4AaABAg", "publishedAt": "2020-12-20T12:51:08Z", "author": "Pablo Garin", "text": "47:00 last node to the right should be 2,0... still a base case, so no difference overall, but it's best to clarify to prevent people of confusion and frustration...", "likes": 11}}, {"topLevelComment": {"id": "UgzV_0mjGIZRKAKZ4c54AaABAg", "publishedAt": "2020-12-20T12:39:18Z", "author": "George Unknown", "text": "0:48 - \"of the Fibonacci's sequence\" maybe?", "likes": 0}}, {"topLevelComment": {"id": "UgzRs_wBXuWOKCRIvSN4AaABAg", "publishedAt": "2020-12-20T10:36:01Z", "author": "Sarfaraz Nawaz", "text": "At 59:00, I'd define the key as : `const key = m < n ? m + \",\" + n : n + \",\" + m` .. so that `(1,2)` and `(2,1)` would generate the same key, and avoid re-computation.", "likes": 0}}, {"topLevelComment": {"id": "Ugx6a-lYj1FMSMUN6g14AaABAg", "publishedAt": "2020-12-20T10:23:10Z", "author": "deepak Pahwa", "text": "I am in love with Dynamic programming just because of coderByte. Have watched many videos and course but the explanation given by CoderByte is amazing.. Thank you So much CoderByte and FreeCodeCamp", "likes": 0}}, {"topLevelComment": {"id": "Ugw5uRjYSuNg3KeaGFV4AaABAg", "publishedAt": "2020-12-20T10:07:21Z", "author": "RISHIKESH G", "text": "U guys are really doing a great job. Thanks for putting these contents free on youTube....", "likes": 2}}, {"topLevelComment": {"id": "Ugz6nrJa-7QOUKRYglN4AaABAg", "publishedAt": "2020-12-20T07:20:55Z", "author": "vamsidhar reddy", "text": "Did any one has c++ version for all the codes", "likes": 0}}, {"topLevelComment": {"id": "UgyWGPThaSVFSoSJuNd4AaABAg", "publishedAt": "2020-12-20T01:48:12Z", "author": "Jose Buraschi", "text": "I am watching your video with my son and we are enjoying learning about memoization. Thank you!! Well delivered. Question, I think you may be able to optimize the implementation of the grid traveler solution by returning 1 when either m === 1 or n === 1 instead of just when both are equal to 1.", "likes": 0}}, {"topLevelComment": {"id": "UgxS04YqW-VFJmfzWqZ4AaABAg", "publishedAt": "2020-12-19T21:56:32Z", "author": "Saket Seshadri", "text": "In the time complexity analysis of howsum we get O(n^m*m). If we had used a python list or a stack we could have skipped the copying of m variables in each call and could have just gotten away with a O(1) operation of adding a new element instead of O(m).", "likes": 0}}, {"topLevelComment": {"id": "Ugy1Na_1Y8BQBlnYHDN4AaABAg", "publishedAt": "2020-12-19T20:54:54Z", "author": "Satish Vattikuti", "text": "A little improvement to your solution of the gridTraveler problem, you said that gridTraveler(1, 2) === gridTraveler(2, 1) and we don't have to calculate the other if we calculate one. I just incorporated that. Thanks for such a great tutorial. \n\nconst gridTraveler = (m, n, memo = {}) => {\n    const key = m > n ? `${[m, n]}` : `${[n, m]}`;\n    if (key in memo) return memo[key]\n    if (m === 1 && n === 1) return 1;\n    if (m === 0 || n === 0) return 0;\n    memo[key] =  gridTraveler(m - 1, n, memo) + gridTraveler(m, n - 1, memo);\n    console.log(memo);\n    return memo[key];\n};", "likes": 0}}, {"topLevelComment": {"id": "Ugz-ewouirw-yQrylLN4AaABAg", "publishedAt": "2020-12-19T20:51:45Z", "author": "Bal\u00e1zs Gyekiczki", "text": "gridTraveler can be solved with maths, a closed form is binomial(m+n-2, m-1) (a.k.a. \"choose\")", "likes": 0}}, {"topLevelComment": {"id": "UgxfCRkrfHHPJfwZyJx4AaABAg", "publishedAt": "2020-12-19T18:38:17Z", "author": "Arianna Basha", "text": "Omg, it's Alvin from app academy open, he was the one who taught me Ruby. Amazing dude, I didn't know he was at codebtye.", "likes": 2}}, {"topLevelComment": {"id": "UgzhONESbv9EhLzuqkV4AaABAg", "publishedAt": "2020-12-19T16:09:25Z", "author": "TheSalakiller", "text": "Thanks for this great video. In 1:04:06 shouldn't the space complexity of the memoized version be O(n*m), think of 'memo' as a matrix that can be indexed as following 'memo[1 ... n, 1 ... m]'", "likes": 0}}, {"topLevelComment": {"id": "UgzBZU0-D0bCqR574wh4AaABAg", "publishedAt": "2020-12-19T10:12:48Z", "author": "troll", "text": "the traveler can be further optimized - you actually say that traveler(n,m) = traveler(m,n) but you are not implementing:\n- you could check for the mirror key: check if object[m,n] or object[n,m] exists\n- you could store a mirror of key when you find the value", "likes": 0}}, {"topLevelComment": {"id": "UgxlOWuj3Th-8qx7UTR4AaABAg", "publishedAt": "2020-12-19T02:26:41Z", "author": "nycmetros", "text": "This is great content", "likes": 0}}, {"topLevelComment": {"id": "UgxkHX9_xJcwyYr47qp4AaABAg", "publishedAt": "2020-12-19T01:39:24Z", "author": "Engineering Quest", "text": "That was the most boring video I have ever seen. how does he go on for 5 hours?", "likes": 0}}, {"topLevelComment": {"id": "Ugwvz4yW2rTZnh1K3V14AaABAg", "publishedAt": "2020-12-18T21:38:24Z", "author": "Maun Taunoson", "text": "Wouldnt the only base case for gridTraveler be m == 1 || n == 1? Since if either m or n is 1, you can only move in one direction so there is only one way to the end, or am I missing something?", "likes": 1}}, {"topLevelComment": {"id": "UgxgwFO7STDxgNcr-4V4AaABAg", "publishedAt": "2020-12-18T21:27:29Z", "author": "Adam Tak", "text": "I'm 2 hours into this and it's been the same problem with just minor changes. I hope new problems are introduced...", "likes": 0}}, {"topLevelComment": {"id": "Ugzs1qfw1bknvbok8rt4AaABAg", "publishedAt": "2020-12-18T12:16:42Z", "author": "CS171 Trishanku Sarma", "text": "Quality knowledge ....Thanks a lot", "likes": 0}}, {"topLevelComment": {"id": "UgwcwTI4o9OLk8jgpC54AaABAg", "publishedAt": "2020-12-18T09:54:55Z", "author": "snknsnp", "text": "To be honest, this video is not really about dynamic programming. It is about memoization (which can be a useful technique in dynamic programming) and about tabulation (which is not related to DP). The first part that covers some simple recursive algorithms could be considered DP as are the explanations about tree-depth and branching factors, but it really just scratches the surface. Consider this video more of a teaser-trailer to the field of DP.\n\nNevertheless I liked the video: the two depicted concepts are certainly very valuable knowledge for beginner programmers.\n\nSome notes that I would like to add:\n- at 2:32:24 you mention the time complexity of slice. I think you should rather look into the time complexity of `indexOf` at the line above (and replace it with a ~ `startsWith` function). Furthermore in javascript all string operations create new strings, so there really is no way of index-based pointing to the original string. It might be worth pointing out that in pointer/reference based languages this might be a possible optimization (e.g. not copying the string every time, but rather using a start-position carry).\n- For the bestSum methods, it might be worth pointing out that sorting your input parameters descendingly reduces the problem complexity to a DFS (depth-first-search).\n- The grid traveler problem is easily solvable as a purely combinatorics-problem and can be calculated in linear time. E.g. you need (m-1) down-moves and (n-1) right moves in total, ie (m+n-2)!/[ (m-1)! * (n-1)! ]. For example (18,18) this would be: 34!/(17!*17!) = 2333606220", "likes": 0}}, {"topLevelComment": {"id": "UgwWfpT4LdQ1pZ7KhhZ4AaABAg", "publishedAt": "2020-12-18T07:47:01Z", "author": "noodnutt", "text": "Here is the VBA equivalent of the Fibonacci problem:\r\n\r\nFor context: My system is only a year old with 32g of Ram and reasonably high-end CPU, sadly though! It\u2019s not a Thread-Ripper with an insane number of Cores.\r\n\r\nFirst Version: (50 Cycles was too high as Excel would hang requiring program restart). In the end I settled on 40 cycles:\r\n\r\nFunction fibA(n As Double) as Double\r\n    If (n = 0) Or (n = 1) Then\r\n        fibA = 1\r\n    Else\r\n        fibA = fibA(n - 1) + fibA(n - 2)\r\n    End If\r\nEnd Function\r\n\r\nI called each Function from a Sub-Routine\r\nSub MyFibA()\r\nDebug.Print \"01 - \" & fibA(1)\r\nRepeated this all the way to:-\r\nDebug.Print \"40 - \" & fibA(40)\r\nEnd Sub\r\n\r\nIt took Approx:  1 Min 1.5 seconds to cycle thru 40 iterations.\r\n\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026\u2026.\r\nSecond Version: (Literally instantaneous, maybe 1 \u2013 2 secs)\r\n\r\nDim f(50) As Double\r\nFunction fibB(n As Double) as Double\r\nIf (n <= 2) Then\r\nfibA = n\r\nElseIf f(n) > 0 Then\r\nfib = f(n)\r\nElse\r\nF(n) = fibB(n \u2013 1) + fibB(n \u2013 2)\r\nfibB = f(n)\r\nEnd if\r\nEnd Function\r\n\r\nSub MyFibB()\r\nDebug.Print \"01 - \" & fibB(1)\r\nRepeated this all the way to:-\r\nDebug.Print \"50 - \" & fibB(50)\r\nEnd Sub\r\n\r\nI had absolutely zero memory issues using this second version so was able to cycle 50 iterations.\r\n\r\nThis is the \u201cImmediate Window\u201d  results:\r\n\r\nmyFibB\r\n01 - 1\r\n02 - 2\r\n03 - 3\r\n04 - 5\r\n05 - 8\r\n06 - 13\r\n07 - 21\r\n08 - 34\r\n09 - 55\r\n10 - 89\r\n11 - 144\r\n12 - 233\r\n13 - 377\r\n14 - 610\r\n15 - 987\r\n16 - 1597\r\n17 - 2584\r\n18 - 4181\r\n19 - 6765\r\n20 - 10946\r\n21 - 17711\r\n22 - 28657\r\n23 - 46368\r\n24 - 75025\r\n25 - 121393\r\n26 - 196418\r\n27 - 317811\r\n28 - 514229\r\n29 - 832040\r\n30 - 1346269\r\n31 - 2178309\r\n32 - 3524578\r\n33 - 5702887\r\n34 - 9227465\r\n35 - 14930352\r\n36 - 24157817\r\n37 - 39088169\r\n38 - 63245986\r\n39 - 102334155\r\n40 - 165580141\r\n41 - 267914296\r\n42 - 433494437\r\n43 - 701408733\r\n44 - 1134903170\r\n45 - 1836311903\r\n46 - 2971215073\r\n47 - 4807526976\r\n48 - 7778742049\r\n49 - 12586269025\r\n50 - 20365011074", "likes": 0}}, {"topLevelComment": {"id": "Ugy0WmmlYJqftIIei6x4AaABAg", "publishedAt": "2020-12-18T02:29:07Z", "author": "Paul Choudhury", "text": "This the  best and most informative explanation of DP I've seen in 25 years! Great job and I hopefully some day you'll be compensated well for your outstanding teaching ability.", "likes": 29}}, {"topLevelComment": {"id": "UgwckrCYTY0i4EivLld4AaABAg", "publishedAt": "2020-12-18T02:01:54Z", "author": "Random Perspective", "text": "In the gridtraveler memo, I think you forgot to check for (n,m) key, in addition to (m,n)", "likes": 15}, "replies": [{"id": "UgwckrCYTY0i4EivLld4AaABAg.9HOUjJdiFE_9OuX9qDU4_P", "publishedAt": "2021-06-22T21:37:49Z", "author": "Aaron Thompson", "text": "Late reply but I solved this by storing the keys as frozensets (in python), so order doesn't matter. All depends on what's viable to be used as a key in your programming language of choice", "likes": 2}, {"id": "UgwckrCYTY0i4EivLld4AaABAg.9HOUjJdiFE_9Li90riRFDe", "publishedAt": "2021-04-04T12:41:49Z", "author": "Rana Kelani", "text": "We could store the values after sorting them, so they would always have the same key.  Try this:\nconst key = n > m  ?  m + ',' + n  :  n + ',' +m;", "likes": 4}, {"id": "UgwckrCYTY0i4EivLld4AaABAg.9HOUjJdiFE_9LT2YLWcg4r", "publishedAt": "2021-03-29T06:37:22Z", "author": "redpilled \ud83d\udc8a", "text": "Could change it to the following:\nconst key1 = m + ',' + n;\nconst key2 = n + ',' + m;\nif (key1 in memo) return memo[key1];\nif (key2 in memo) return memo[key2];\n//rest of code", "likes": 0}, {"id": "UgwckrCYTY0i4EivLld4AaABAg.9HOUjJdiFE_9LT0ehMs5yA", "publishedAt": "2021-03-29T06:20:54Z", "author": "redpilled \ud83d\udc8a", "text": "I was looking for that too, thanks", "likes": 1}, {"id": "UgwckrCYTY0i4EivLld4AaABAg.9HOUjJdiFE_9KH3-PmUaVg", "publishedAt": "2021-02-27T18:19:03Z", "author": "indrajit bagchi", "text": "yup", "likes": 0}]}, {"topLevelComment": {"id": "Ugznj46c0EUy_Gixr5l4AaABAg", "publishedAt": "2020-12-18T01:32:05Z", "author": "T", "text": "Oooooooohhhhh LOL", "likes": 0}}, {"topLevelComment": {"id": "UgzOf1Lde11upupmW394AaABAg", "publishedAt": "2020-12-17T22:24:07Z", "author": "Ahmad SALEH", "text": "Trying the canSum in Python but I always get the answer True, what might be the issue here ??\n\ndef canSum(targetSum,numbers,memo={}):\r\n\t\r\n\tif targetSum in memo:\r\n\t\treturn memo[targetSum]\r\n\r\n\tif targetSum==0:\r\n\t\treturn True\r\n\r\n\tif targetSum <0:\r\n\t\treturn False\r\n\r\n\tfor num in numbers:\r\n\t\tremainder=targetSum-num\r\n\t\tif (canSum(remainder,numbers,memo) == True):\r\n\t\t\tmemo[targetSum]=True\r\n\t\t\treturn True\r\n\tmemo[targetSum]=False\r\n\treturn False", "likes": 0}, "replies": [{"id": "UgzOf1Lde11upupmW394AaABAg.9HO5oGPFASA9HQ3-oC4DdT", "publishedAt": "2020-12-18T16:38:05Z", "author": "Ahmad SALEH", "text": "Found the answer in the comments , there is nothing wrong in the code its because I am calling multiple sessions of the funtion in the same run, and the memo doesnt flush \"go back to {} from one example to another \n\nto solve it send {} when you call the function like this:\nprint (canSum(7,[5,3,4,7],{}))\r\nprint (canSum(7,[2,4],{}))\r\nprint (canSum(8,[2,3,5],{}))\r\nprint (canSum(300,[7,14],{}))\r\n\n\nhere the original answer thanks to @Wei Ping Goh\r\n\r\nWei Ping Goh\r\n1 week ago\r\nThere is nothing wrong with your code, it\u2019s just that when you call canSum in the same session, the memo isn\u2019t cleared although you did not parse the argument. You can print the value of memo before each return statement to observe the changes. To make sure you get the correct answer for each new targetSum/numbers set, you can parse in an empty memo argument to force initialising a blank memo, i.e.,\r\nprint(cansum(7, [2, 3], {}))\r\nprint(cansum(7, [2, 4], {}))", "likes": 1}]}, {"topLevelComment": {"id": "UgzkrzlXRoP3qOAK-Fl4AaABAg", "publishedAt": "2020-12-17T20:47:27Z", "author": "Acharya", "text": "\ud83d\ude2e\ud83d\ude00", "likes": 0}}, {"topLevelComment": {"id": "UgwMjmgLh-ZGNqGjZop4AaABAg", "publishedAt": "2020-12-17T20:24:48Z", "author": "atlas flare", "text": "Thank you . thank you so much for this . much appreciated !!", "likes": 1}}, {"topLevelComment": {"id": "UgwJ6fP96LFUmSROwUp4AaABAg", "publishedAt": "2020-12-17T20:08:03Z", "author": "Mila Y", "text": "Amazing video", "likes": 0}}, {"topLevelComment": {"id": "UgwzBr5sWDqgDsFBMx14AaABAg", "publishedAt": "2020-12-17T19:10:48Z", "author": "Adam Tak", "text": "So the left hand sides get calculated all the way to the base first right? fin(n - 1) and once that has returned a value then the right hand side gets calculated fib(n -2) at which point  it uses the memo object base case?", "likes": 0}}, {"topLevelComment": {"id": "Ugy0Mxm4nTgbKq6mOZx4AaABAg", "publishedAt": "2020-12-17T18:54:00Z", "author": "Adam Tak", "text": "With the memoization approach, when you hit the first return keyword, doesn't the function just cancel itself? How does it keep calling the fib function if memo[n] is being returned.", "likes": 0}, "replies": [{"id": "Ugy0Mxm4nTgbKq6mOZx4AaABAg.9HNilIzDFQY9HNjZ6zhuem", "publishedAt": "2020-12-17T19:00:56Z", "author": "Adam Tak", "text": "Oh wait, is it because by the time the memoization lookup happens, all the fib functions have already been called?", "likes": 0}]}, {"topLevelComment": {"id": "UgxLNaF8fgptYfNnkoB4AaABAg", "publishedAt": "2020-12-17T15:54:48Z", "author": "Nithish D", "text": "Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgxsixSTTqZmZuQP63J4AaABAg", "publishedAt": "2020-12-17T13:50:40Z", "author": "Abhijit Paul", "text": "What is the text editor he is using? I quite love it. (The reason is - the output screen/terminal;. Its so much better and flexible to use than codeblocks output screen.)", "likes": 0}, "replies": [{"id": "UgxsixSTTqZmZuQP63J4AaABAg.9HNB2dMNwJu9I36wdLBH9-", "publishedAt": "2021-01-03T15:21:20Z", "author": "Nivetha Govindan", "text": "Its Visual Studio code", "likes": 1}]}, {"topLevelComment": {"id": "Ugwqhfdg7jn2BAoVwyR4AaABAg", "publishedAt": "2020-12-17T04:15:39Z", "author": "Nicolas Xu", "text": "this is good stuff!", "likes": 0}}, {"topLevelComment": {"id": "UgwpqCvWjbBCUE_dyy54AaABAg", "publishedAt": "2020-12-16T21:34:56Z", "author": "tea_hanks", "text": "The way you explained the time and space complexity of Fibonacci sequence just blew my mind. How is this free??? No ads?? God bless you man", "likes": 1}}, {"topLevelComment": {"id": "UgzSkOOToIZNQlj-UVN4AaABAg", "publishedAt": "2020-12-16T18:33:22Z", "author": "Gnsd.tc", "text": "Can you do a tutorial on creation of diagrams programmatically, the tree diagrams used for explanation?", "likes": 8}}, {"topLevelComment": {"id": "Ugzlp0N4EX5Jtsodwcx4AaABAg", "publishedAt": "2020-12-16T14:23:17Z", "author": "lahori ji", "text": "#My result is not right why?\n#please sea my code bellow.\n\nimport java.util.*;\r\nclass TargetSum{\r\n\t\r\n\tpublic static void main(String[] args){\r\n\t\t\r\n\t\t//Scanner sc = new Scanner(System.in);\r\n\t\tint [] a = {2,4};\r\n\t\tboolean ans = checkTargetSum(8,a);\r\n\t\tSystem.out.println(ans);\r\n\r\n\t}\r\n\t\r\n\tstatic boolean checkTargetSum(int n,int arr[]){\r\n\t\t\r\n\t\tif(n==0) {return true;}\r\n\t\tif(n<0) { return false;}\r\n\t\t\r\n\t\tfor(int i=0;i<arr.length;i++){\r\n\t\t\tint remainder = n-arr[i];\r\n\t\t\tif(checkTargetSum(remainder,arr)==true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n}", "likes": 1}}, {"topLevelComment": {"id": "Ugy3UGIeqWDszfr-yJR4AaABAg", "publishedAt": "2020-12-16T11:05:15Z", "author": "Antonin Jacob", "text": "The 53 persons who disliked this video wanted to make static programming... I guess", "likes": 0}}, {"topLevelComment": {"id": "UgzF8q-vOjXYpa7yxN94AaABAg", "publishedAt": "2020-12-16T01:30:34Z", "author": "Bassam", "text": "I don't get how O(n/2) is the same as O(n). I guess people who already know this, know this, but since I don't, anyone care to explain it to me? Thanks!", "likes": 0}, "replies": [{"id": "UgzF8q-vOjXYpa7yxN94AaABAg.9HJHZBTbuLB9HOutEjNl4J", "publishedAt": "2020-12-18T05:59:10Z", "author": "Bassam", "text": "@sai madhu kalluri Ok I get it now. Appreciate your help! Thanks!", "likes": 0}]}, {"topLevelComment": {"id": "UgwglbfskMFF9i-ynGp4AaABAg", "publishedAt": "2020-12-16T00:14:18Z", "author": "Mahdi Azar", "text": "48:40 Right - Right - Right should be 2,0 not  0,0", "likes": 0}}, {"topLevelComment": {"id": "UgzcK-njGyFg_rPEQwd4AaABAg", "publishedAt": "2020-12-15T22:33:14Z", "author": "Girava | \u0d9c\u0dd2\u0dbb\u0dc0\u0dcf", "text": "53:16 (If we consider g(1,x) or g(y,1) as a base case (because if we have only 1 row or column we have only one way) then hight can be reduced to max(m, n) rather m+n. ) this calculation is wrong. hight would be still m+n but much performant. below code will return the number of calls (time complexity) + result", "likes": 0}}, {"topLevelComment": {"id": "UgxW3qyGgnft4brdXvl4AaABAg", "publishedAt": "2020-12-15T20:10:38Z", "author": "Erwin Mulder", "text": "In the GridTraveler I would have used (1,x) and (y,1) as base cases, as there's only one way to go down a straight line.", "likes": 29}, "replies": [{"id": "UgxW3qyGgnft4brdXvl4AaABAg.9HIhwuTaepq9TUHJvEk8tE", "publishedAt": "2021-10-14T14:16:52Z", "author": "David Rebatto", "text": "I had the same idea, but as @Taniea said, you still end up computing all possible pairs.\nYou don't even save the lookup time, as the lookup occurs before the 'if' condition.", "likes": 1}, {"id": "UgxW3qyGgnft4brdXvl4AaABAg.9HIhwuTaepq9SsrsOhtuRp", "publishedAt": "2021-09-29T16:14:38Z", "author": "Taniea Das", "text": "Anyways every unique pair is getting calculated only once.", "likes": 1}, {"id": "UgxW3qyGgnft4brdXvl4AaABAg.9HIhwuTaepq9Rwh_A-KpNg", "publishedAt": "2021-09-06T07:30:12Z", "author": "jump", "text": "Same here", "likes": 0}, {"id": "UgxW3qyGgnft4brdXvl4AaABAg.9HIhwuTaepq9R7q3Gg6bYC", "publishedAt": "2021-08-17T04:03:50Z", "author": "Ritesh Patel", "text": "yeah more optimization", "likes": 1}]}, {"topLevelComment": {"id": "UgyOnL29FCwqg4Ud6Fl4AaABAg", "publishedAt": "2020-12-15T19:37:48Z", "author": "Neeraj Kulkarni", "text": "Amazing! The visualization as a tree really helps to understand DP!", "likes": 13}}, {"topLevelComment": {"id": "UgzDNV0XTRf3HSWbi2B4AaABAg", "publishedAt": "2020-12-15T19:34:13Z", "author": "Veljko Markovi\u0107", "text": "Does someone know how to do howSum problem in python ?", "likes": 0}, "replies": [{"id": "UgzDNV0XTRf3HSWbi2B4AaABAg.9HIdm7wNqaa9HKlXIsCA2Y", "publishedAt": "2020-12-16T15:20:26Z", "author": "Keshav Maheshwari", "text": "@Veljko Markovi\u0107 glad it helped \ud83d\ude00", "likes": 0}, {"id": "UgzDNV0XTRf3HSWbi2B4AaABAg.9HIdm7wNqaa9HKkbBEl_kd", "publishedAt": "2020-12-16T15:12:22Z", "author": "Veljko Markovi\u0107", "text": "@Keshav Maheshwari Thank you. I had problem with implementation of spread operator in python. Now it is clear \ud83e\udd1a", "likes": 0}, {"id": "UgzDNV0XTRf3HSWbi2B4AaABAg.9HIdm7wNqaa9HKcdlrPCr8", "publishedAt": "2020-12-16T14:02:49Z", "author": "Keshav Maheshwari", "text": "# Memoized Solution\r\nmemo = {}\r\nfinal = []\r\ndef howSum(targetSum, numbers):\r\n    #base case \n    if targetSum == 0:\r\n        return True\r\n    elif targetSum < 0:\r\n        \r\n        return False\r\n    elif targetSum in memo:\r\n        \r\n        return memo[targetSum]\r\n    else:\r\n        for element in numbers:\r\n            rem = targetSum - element\r\n            if howSum(rem, numbers):\r\n                final.append(element)\r\n                memo[targetSum] =  final\r\n                return memo[targetSum]\r\n        memo[targetSum] = None\r\n        \r\n        return memo[targetSum]", "likes": 1}]}, {"topLevelComment": {"id": "UgxJbyJO42gO1i7TtdV4AaABAg", "publishedAt": "2020-12-15T18:39:08Z", "author": "N's Watching", "text": "At 54:27 when you are computing height of the tree. Isn't it max of n,m instead of n+m. Since we are going one level down by either decreasing the row or column. In case of (2,3) height will be 3 not 2+3", "likes": 0}, "replies": [{"id": "UgxJbyJO42gO1i7TtdV4AaABAg.9HIYTjSHyiE9HLBtKgVPWI", "publishedAt": "2020-12-16T19:19:31Z", "author": "Coderbyte", "text": "The longest paths down the tree are those that reach the base case of (1,1). The shortest paths down the tree are those that reach zero along either dimension (0, X) or (X, 0).  Because of this I believe max(n, m) describes the shortest path down the tree, so it is not the worst case. Maybe you are getting a little thrown off because there is an inherent off by 1 in this, so when you count the literal height and not just the big O height, you need to account for this off by 1.\n\nSay we have nodes (n, m). If I start with a tree with root (2,3), the farthest leaves are (1,1), not (0, 0). From parent to child I may only decrease either dimension by 1. I need to eventually subtract 1 from the root's n (2) and eventually subtract 2 from the root's m (3) in order to reach a leaf of (1,1). 1 + 2 = 3, the height is 3. If you want to count the literal height of the tree then you should use the formula \"height = m + n - 2\", the -2 is there because we are off by one along m and also n. O(m + n - 2) = O (m +n). \n\nThanks for watching! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugz325YNAtz_cCm77sJ4AaABAg", "publishedAt": "2020-12-15T16:56:33Z", "author": "Marshal D Teach", "text": "Knowledge everywhere...", "likes": 1}, "replies": [{"id": "Ugz325YNAtz_cCm77sJ4AaABAg.9HIMjODEL0J9HNHRfCmf4C", "publishedAt": "2020-12-17T14:46:30Z", "author": "Marshal D Teach", "text": "@Phat guess everyone's online.. \ud83d\ude44", "likes": 0}, {"id": "Ugz325YNAtz_cCm77sJ4AaABAg.9HIMjODEL0J9HN9BunU4LQ", "publishedAt": "2020-12-17T13:34:27Z", "author": "Phat", "text": "you can't escape the knowledge nowadays...", "likes": 0}]}, {"topLevelComment": {"id": "UgwJwQd0t8zEtjV4iI54AaABAg", "publishedAt": "2020-12-15T16:30:38Z", "author": "Pajeet Singh", "text": "For C/C++ version of HowSum using Tabulation. \nhttps://youtu.be/_Nos39_jXC0", "likes": 0}}, {"topLevelComment": {"id": "Ugy-eEEUJEVAegJ--3N4AaABAg", "publishedAt": "2020-12-15T12:57:16Z", "author": "Gary Lau", "text": "Dynamic programming is the most difficult part in the programming interview, I have been working as a software developer for over 10 years and still can't grasp it.", "likes": 7}}, {"topLevelComment": {"id": "UgzF5fpLNAFG2Y9sWKt4AaABAg", "publishedAt": "2020-12-15T12:10:30Z", "author": "Alex Luy", "text": "4:30:22 dont mind me", "likes": 0}}, {"topLevelComment": {"id": "UgxhgiWtrgVMxDsLUoR4AaABAg", "publishedAt": "2020-12-15T11:47:48Z", "author": "Jens", "text": "One might add that the gridTraveler function just calculates the binomial coefficient C(n+m-2,n-1)... I leave it as an exercise to the reader to figure out why ;)", "likes": 0}}, {"topLevelComment": {"id": "Ugxs8PvoZ-BPEoxFor54AaABAg", "publishedAt": "2020-12-15T07:06:47Z", "author": "Thota Srinivas", "text": "Just in the code for traveller program using memo... we said the number of routes for m,n is same as number of routes for n,m. So, the key we check for should be m,n OR n,m and that should make the program more faster.", "likes": 0}, "replies": [{"id": "Ugxs8PvoZ-BPEoxFor54AaABAg.9HHJEoPJLS99HHK574yoIz", "publishedAt": "2020-12-15T07:14:12Z", "author": "Thota Srinivas", "text": "However, I loved his teaching. Learning a lot in depth about this topic of dynamic programming. Thanks a lot man", "likes": 0}]}, {"topLevelComment": {"id": "UgxLhkb6RZ9Pka4mcKF4AaABAg", "publishedAt": "2020-12-15T05:18:07Z", "author": "Samuel Rowe", "text": "For canConstruct, shouldn't we consider the call to indexOf()? This would make the complexity O(nm\u00b3) not O(nm\u00b2).", "likes": 0}, "replies": [{"id": "UgxLhkb6RZ9Pka4mcKF4AaABAg.9HH6nsawYx09HLCutTcEa6", "publishedAt": "2020-12-16T19:28:28Z", "author": "Samuel Rowe", "text": "@Coderbyte Hahaha :P\n\nThank you for the video. Loved it!", "likes": 0}, {"id": "UgxLhkb6RZ9Pka4mcKF4AaABAg.9HH6nsawYx09HLC3P6veRJ", "publishedAt": "2020-12-16T19:21:01Z", "author": "Coderbyte", "text": "You are right! This makes the complexity still fall into the polynomial class. If you want to avoid this you can use string.startsWith method that runs in constant time. Great catch. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugw_LZcNNnHN9mwa3d94AaABAg", "publishedAt": "2020-12-15T05:07:37Z", "author": "Saanvi Sharma", "text": "My 1st salary is gonna be yours.", "likes": 0}}, {"topLevelComment": {"id": "UgzJFFBLNdIXYEbpeeF4AaABAg", "publishedAt": "2020-12-15T03:44:36Z", "author": "Detroit Engineering", "text": "Great video!", "likes": 0}}, {"topLevelComment": {"id": "Ugykk4QRDAVHn7DOJJp4AaABAg", "publishedAt": "2020-12-15T03:35:02Z", "author": "Nathan Algren", "text": "DP uses the BrE defintion of 'programming', i.e. 'optimisation'. Basically, it's a technique to cut down repeated calculations.", "likes": 0}}, {"topLevelComment": {"id": "Ugwz1YrhUifO0_sBFxZ4AaABAg", "publishedAt": "2020-12-15T03:29:15Z", "author": "Nathan Algren", "text": "In C++, most of my memos are going to be arrays. Fast access + simple syntax", "likes": 0}}, {"topLevelComment": {"id": "UgyRw7srtUS_RlYBA954AaABAg", "publishedAt": "2020-12-14T23:59:57Z", "author": "Beth Wanjiku", "text": "You literally explained the course in a simple and legit way!! So, DP can be this easy??? \ud83c\udfc3\ud83c\udffe\u200d\u2640\ufe0f\ud83c\udfc3\ud83c\udffe\u200d\u2640\ufe0f me heading to leetcode to solve the hard DP problems!", "likes": 227}, "replies": [{"id": "UgyRw7srtUS_RlYBA954AaABAg.9HGYOaXf1Sm9X5Gds6ACo9", "publishedAt": "2022-01-12T07:15:33Z", "author": "Prasad", "text": "Either you are in FAANG or the hard DP problems got to you", "likes": 2}, {"id": "UgyRw7srtUS_RlYBA954AaABAg.9HGYOaXf1Sm9WB2F-2MAtP", "publishedAt": "2021-12-20T16:33:44Z", "author": "Devu", "text": "@Sz \ud83e\udd23\ud83e\udd23\ud83e\udd23", "likes": 3}, {"id": "UgyRw7srtUS_RlYBA954AaABAg.9HGYOaXf1Sm9VycFSIqGLM", "publishedAt": "2021-12-15T11:27:44Z", "author": "Sz", "text": "No one has ever returned from the hard DP problems", "likes": 5}, {"id": "UgyRw7srtUS_RlYBA954AaABAg.9HGYOaXf1Sm9RY59pOAQNR", "publishedAt": "2021-08-27T08:44:48Z", "author": "Prakash", "text": "@LordLoldemort7  It's best to use LMAO informal conversations because it contains the word ass. Some might consider this a swear word and take offense.", "likes": 1}, {"id": "UgyRw7srtUS_RlYBA954AaABAg.9HGYOaXf1Sm9RUySvpfA-D", "publishedAt": "2021-08-26T03:39:47Z", "author": "Toluwanimi Ajike", "text": "@Mohamed Akram Same", "likes": 0}]}, {"topLevelComment": {"id": "Ugz58wgLY3eTVzOGAwR4AaABAg", "publishedAt": "2020-12-14T23:26:40Z", "author": "Mohammed Hussein", "text": "lol what a fail tutorial even a complete noob could do this", "likes": 0}}, {"topLevelComment": {"id": "UgwJ5BWc8hctl6-bJ9N4AaABAg", "publishedAt": "2020-12-14T23:15:54Z", "author": "Raven", "text": "Would never want a job in programming, but i enjoy learning and doing my own projects in my spare time. Great video, Thank you :)", "likes": 20}, "replies": [{"id": "UgwJ5BWc8hctl6-bJ9N4AaABAg.9HGTLw-hKha9Jv1Ns-gt1p", "publishedAt": "2021-02-18T19:42:23Z", "author": "Raven", "text": "@Daniel the Maniel I love programming, been doing it for around 9 or 10yrs.. Recently ive dropped my job hours down to 30hrs a week so i can do more learning while keeping a balance with other things in my life. There are 2 main reasons why i wouldnt want a job in that field.\n\nFirstly i dont want student debt, i think its a joke. The interenet has so much to offer for self learning, and its free. It's a good time to be alive ;)\nId imagine that employers would want some sort of a certificate or formal education.\n\nThe other reason is, its a passion and a hobby to me. If i were to work for someone/corperation, i wouldnt be working on the things that excite me and wouldnt be a hobby anymore. For me, i think it would take the joy away from it. Being fixed to a screen as employment would leave me with little time to do my projects id want to do. Id want to escape the screen after finishing work not get back on it. :)", "likes": 1}, {"id": "UgwJ5BWc8hctl6-bJ9N4AaABAg.9HGTLw-hKha9JudRT86EFB", "publishedAt": "2021-02-18T16:04:25Z", "author": "007Hazmatt", "text": "As a professional software engineer, I can tell you that actually having to use dynamic programming in the real world--or at least in web development--is pretty uncommon. The most I've come in contact with DP is with tech interviews. We usually use caching, but that doesn't necessarily involve recursion.", "likes": 1}, {"id": "UgwJ5BWc8hctl6-bJ9N4AaABAg.9HGTLw-hKha9Jlg4Td8H-m", "publishedAt": "2021-02-15T04:34:20Z", "author": "JD Paul", "text": "Hey, I have a friend in CS who doesn't want to code for his own reasons.  I'd love to hear why you don't want a job in programming?", "likes": 0}]}, {"topLevelComment": {"id": "UgyLtug02ukac08z-Cx4AaABAg", "publishedAt": "2020-12-14T21:58:35Z", "author": "T C", "text": "gridTraveller doesn't solve the  [1, n > 1] or [m > 1, 1] problems. Simple fix being if n == 1 and m > 1: return m and vice versa.", "likes": 0}}, {"topLevelComment": {"id": "UgyauPq3_yjaWFEdjbR4AaABAg", "publishedAt": "2020-12-14T21:29:09Z", "author": "Ivanova", "text": "Why not include subtitle selection in your videos? , please I like your content but I do not understand them 100%, my native language is Spanish.", "likes": 0}}, {"topLevelComment": {"id": "Ugxv6bHVxnynihhNzF94AaABAg", "publishedAt": "2020-12-14T19:24:34Z", "author": "Saur", "text": "You do realize for Fibonacci (and probably others) you only need last 2 numbers, so your cache size (memoization here is basically caching, ain't it?) needs to be just 2, so you can use 2 local variables and that's it. And then optimize tail call recursion into a loop to get rid of call stack from recursion.", "likes": 0}, "replies": [{"id": "Ugxv6bHVxnynihhNzF94AaABAg.9HG2saE4uVR9HLCWVxEL-X", "publishedAt": "2020-12-16T19:25:00Z", "author": "Coderbyte", "text": "Absolutely! That would be a great constant memory solution for fib. For the sake of having extendable patterns for the further problems in a reasonable runtime, I always create a table with a size that is linearly based on the input.", "likes": 0}]}, {"topLevelComment": {"id": "Ugy8FwluWjLcZG-HwWp4AaABAg", "publishedAt": "2020-12-14T18:36:18Z", "author": "Oc Co", "text": "I\u2019m a bit confused with allconstructs complexity. The complexity is exponential is mentioned.  but using memo will reduce the number of constructions of subarrays so at the end even if you have a total of exponential arrays they were not created letter by letter. Right? You will only have m*n nodes * time to iterate and append at each node", "likes": 0}, "replies": [{"id": "Ugy8FwluWjLcZG-HwWp4AaABAg.9HFyM83moww9HLCsGi_bgt", "publishedAt": "2020-12-16T19:28:06Z", "author": "Coderbyte", "text": "The complexity is at least exponential because the arrays *are* created separately, element by element like you suggested. We know that there are definitely an exponential number of elements in the output array. Each element of the output array is a separate array that we must have created and built up (since they are all unique). -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugy9yfAcML3gk_p1kCZ4AaABAg", "publishedAt": "2020-12-14T17:33:09Z", "author": "Manu", "text": "a good teacher is not the one that makes himself look smart, but it's the one that makes his students feel smart", "likes": 8}, "replies": [{"id": "Ugy9yfAcML3gk_p1kCZ4AaABAg.9HFr7Z4lwrL9HPEqCqHqeK", "publishedAt": "2020-12-18T09:02:16Z", "author": "Kapil Khullar", "text": "I saved your line in my notepad.", "likes": 1}]}, {"topLevelComment": {"id": "UgwvMLmGByTPCAsGuml4AaABAg", "publishedAt": "2020-12-14T15:45:55Z", "author": "Vishnu V S", "text": "People who downvoted this, frigging take that back right now.", "likes": 0}}, {"topLevelComment": {"id": "UgxqSc9aF69sipAA0wB4AaABAg", "publishedAt": "2020-12-14T15:05:32Z", "author": "Seth", "text": "QUICK UPDATE: As in gridTraveler the property gridTraveler(m,n) = gridTraveler(n,m). We can set \"Key\" as     const key = ((m > n) ? (n + ',' + m) : (m + ',' + n)); So now we are storing even less item in memo obj.", "likes": 0}}, {"topLevelComment": {"id": "UgyXSNrnIR6jt4UCiWd4AaABAg", "publishedAt": "2020-12-14T14:14:07Z", "author": "Kuei-Chin Huang", "text": "Alvin is doing an amazing job explaining the complicated processes in an extremely clear way! Thank you!", "likes": 0}, "replies": [{"id": "UgyXSNrnIR6jt4UCiWd4AaABAg.9HFVLlIOyUa9HLCuhHJLtZ", "publishedAt": "2020-12-16T19:28:26Z", "author": "Coderbyte", "text": "Thanks! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgyI2vbhcatwOoiGalp4AaABAg", "publishedAt": "2020-12-14T12:35:34Z", "author": "Muhammad Musfir", "text": "I do not think i have ever taken a better programming course that this.\nThank you for such an experience.\nAlthough i am still only an hour in the video, it is awesome.", "likes": 0}}, {"topLevelComment": {"id": "UgwxZj1e0xl8Sn99Uh54AaABAg", "publishedAt": "2020-12-14T09:48:05Z", "author": "klemen komel", "text": "At 28:38, shouldn't we move the line 5 under the line 6?\n\nStupid example:\nour memo has 100000 entries. you first check those 1000000 entries even if we are checking for a simple case as 1 or 2\n\nThank you for the great tutorial!", "likes": 0}}, {"topLevelComment": {"id": "UgzYqV7iLKG8R3v_4dh4AaABAg", "publishedAt": "2020-12-14T09:35:13Z", "author": "Michael John Baco", "text": "thank for the knowledge!!!", "likes": 0}}, {"topLevelComment": {"id": "UgzRmnJawJK3b5KlKXB4AaABAg", "publishedAt": "2020-12-14T09:20:09Z", "author": "Kundan", "text": "Somebody should remake this video with JAVA", "likes": 1}, "replies": [{"id": "UgzRmnJawJK3b5KlKXB4AaABAg.9HEyhjXx5Qo9I8yktV9Lky", "publishedAt": "2021-01-05T21:56:32Z", "author": "C\u00e9sar Soto Valero", "text": "Here are the solutions for the problems in Java, if you are interested: https://www.cesarsotovalero.net/2020-12-21-dynamic-programming-classics", "likes": 0}]}, {"topLevelComment": {"id": "UgxZyPB25kZ1VI27LKx4AaABAg", "publishedAt": "2020-12-14T05:22:59Z", "author": "Ivan Semenov", "text": "The best education video I saw in my life. Alvin, thank you for your effort. Looking forward for more videos like that for another subjects as well.", "likes": 8}, "replies": [{"id": "UgxZyPB25kZ1VI27LKx4AaABAg.9HEYZer5JdN9HLCxCOyhsb", "publishedAt": "2020-12-16T19:28:47Z", "author": "Coderbyte", "text": "Thanks for the high praise! -Alvin", "likes": 2}]}, {"topLevelComment": {"id": "UgyljhrfpgJsWzJF2eF4AaABAg", "publishedAt": "2020-12-14T04:07:16Z", "author": "Jayesh Pandey", "text": "Love the video :D", "likes": 0}}, {"topLevelComment": {"id": "UgzFGHy4SfVAwq58N9V4AaABAg", "publishedAt": "2020-12-14T02:24:01Z", "author": "Chansa Chishimba", "text": "What software do you use to create your videos? Your videos are great", "likes": 1}, "replies": [{"id": "UgzFGHy4SfVAwq58N9V4AaABAg.9HEE4ss1hmE9HLD5eW_QW1", "publishedAt": "2020-12-16T19:30:04Z", "author": "Coderbyte", "text": "A combination of quicktime/OBS to record the footage. Final cut pro x to edit. Keynote for the illustrations. It was quite a bit of work, but I'm happy with how it came it too! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugw8sqPMKomCLYO23A94AaABAg", "publishedAt": "2020-12-13T23:18:02Z", "author": "Oc Co", "text": "This is awesome content! AWESOME. Thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugz3BgUB6HTw8djXpKR4AaABAg", "publishedAt": "2020-12-13T22:41:29Z", "author": "D\u00e9cio Soares", "text": "Great great video! Thank you freeCodeCamp and Coderbyte! I've only just finished the canSum problem and don't know what's ahead, but would just like to ask a question/add a comment. I don't see the point of memoizing the true cases on the canSum problem, once the function finds a true scenario it will return and won't branch out more, never finding other possible true branches, right? Thanks again!", "likes": 0}, "replies": [{"id": "Ugz3BgUB6HTw8djXpKR4AaABAg.9HDpbxMntvh9HLE-wPWLwx", "publishedAt": "2020-12-16T19:38:01Z", "author": "D\u00e9cio Soares", "text": "@Coderbyte thank you for your answer, and again for the video! Currently on the allConstruct function, great fun :D", "likes": 0}, {"id": "Ugz3BgUB6HTw8djXpKR4AaABAg.9HDpbxMntvh9HLDAZqELKY", "publishedAt": "2020-12-16T19:30:44Z", "author": "Coderbyte", "text": "Correct! Once it memoizes the first true, it would just return true all the way up the stack to the parent most level. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgybPbc1z9kpASwCt4B4AaABAg", "publishedAt": "2020-12-13T19:51:22Z", "author": "Girava | \u0d9c\u0dd2\u0dbb\u0dc0\u0dcf", "text": "1:28:46, Can someone explain why time complexity is m*n here?", "likes": 1}, "replies": [{"id": "UgybPbc1z9kpASwCt4B4AaABAg.9HDX903i6dK9Hi4Z7dUDT2", "publishedAt": "2020-12-26T01:57:13Z", "author": "Girava | \u0d9c\u0dd2\u0dbb\u0dc0\u0dcf", "text": "@Spirolli , Wow. Thank you for the detailed explanation. and your effort and time.", "likes": 0}, {"id": "UgybPbc1z9kpASwCt4B4AaABAg.9HDX903i6dK9Hb0AdAJO4N", "publishedAt": "2020-12-23T08:04:14Z", "author": "Spirolli", "text": "I didn't know how much everything made sense and thought that in order, to fully understand the answer, I had to explain both the non-memoization technique and the memoization technique.  I numbered the paragraphs to point out where I talk about certain elements.  At paragraphs 1 and 2, I talk about the non-memoization technique and, at paragraphs 3 to the end, I explain and progressively deep-dive the memoization technique.  Hope this helps.\n\n[1]\nFor the initial implementation, non-memoization technique, the problem required all nodes to be explored every time that a non-zero _target sum_ was called on.  So at each level, the number of elements in our _numbers_ array, would be called on our current _target sum_ .  So put simply, we would have *n* number of calls on our first level (n).  At our second level, we would have n^2 number of calls since we would be calling *n* times on *n* elements of the numbers array.  At the third level, n^3, since we are calling *n* times on *n* multiplied number of elements, *n* .  So on and so forth for future levels.  We would end up with, at worst, *m* levels in the case of a single decrement (i.e. the array contained 1).  That would mean the lowest level would be n^m number of elements being called.\n\n[2]\nSo in Big-O time complexity analysis, we would have O(n + n^2 + n^3 + ... + n^m).  Big-O is usually concerned with the biggest time user/waster and not concerning itself with anything less.  So our Big-O would be just O(n^m).\n\n[3]\nSo for the memoization technique, we have gained the ability to 'remember' values that have already been 'explored' in the tree.  Hence, we don't need to re-explore those values (i.e. expand sub-trees) in subsequent calls that might happen to have the same value occur in them.  If a given value is in the memo, we definitively know, whether or not, that that value will lead to the desired value 0 with the given values in the _numbers_ array.\n\n[4]\nIf you're still having trouble, I'll trace the algorithm call.  The algorithm starts for all cases, the same way, it calls the left-most branch first, in every recursive call, until it hits the base case, expands to every other branch (i.e. iterates through every value of the numbers array), returns to the most recent call and expands that level's branches.  It will expand every level as it 'bubbles' back up to the top, or until it finds true.  In the case that the given canSum _target sum_ with a given array is not possible, or returns false, it *MUST* expand every level until all unique possible combination of values are exhausted; the algorithm won't know that a _target sum_ is not possible, or false, until it iterates through all unique values and finds them not possible.  Here are some cases to check out, if you're still having trouble (drawing the trees helps out):\n\n*_target_sum_** = 7 and numbers=[1]* :\nThe tree will look like a stick, it will have 1 branch, *n* , for every level and will have 7 levels, *m* : 1 call per 7 levels. 7 x 1 = 7.\n\nNow to think of a case that doesn't work.\n\n[5]\n*_target_sum_** = 11 and numbers=[2,4]* : \nBy simple inductive reasoning, one can tell pretty quickly that the above case can not be solved.  The shape of the tree will start by expanding the left-side until it expands the 1 call to -1 and -3.  These will return False to the _target sum_ = 1 call.  This will return false to the canSum with (3) as the _target sum_ and have right branch value of -1.  This will return false to the canSum with (5) as the _target sum_ and this will bubble up all the way to the top of the initial canSum call with _target sum_ being 11.  The right branch will be 7, which would have been the left branch of the call two levels down ( 11 -> 9 -> 7).  This has already been explored and discovered to be a non-fruitful subtree to expand.  Thus, the canSum ultimately returns false.  However, the more important element to see is that when you look at each level of the now fully branched tree, you can see that there is always 2 branches at every level.  11 branches to 9 and 7, 9 branches to 7 and 5 and so on and so forth.  There will 6 levels, *m* , and 2 branches, *n* ,  at every level 6 * 2 = 12.  Though this isn't m equaling 11 like the time complexity equation would suggest (11[levels] x 2[branches] = 24 calls), when dealing with large numbers than this, the difference in value is considered trivial.  We can never really get m to equal 11 in practical terms, but it works as a theoretical limit.\n\n[6]\nOne can inductively expand the previous example to see that branches of 3 or 4, or even more, will produce 1 x n(branches) at every level.  Thus m levels will produce m x 1 x n, or m x n, recursive *calls* to canSum.", "likes": 0}]}, {"topLevelComment": {"id": "UgykiYwmoC-QKXwrl614AaABAg", "publishedAt": "2020-12-13T19:47:14Z", "author": "Girava | \u0d9c\u0dd2\u0dbb\u0dc0\u0dcf", "text": "For the space complexity, why don't you consider the size of the cache(memo)?  \ud83d\ude44", "likes": 0}}, {"topLevelComment": {"id": "UgyDzmugiHW-TvgJSQF4AaABAg", "publishedAt": "2020-12-13T18:13:39Z", "author": "aketilius", "text": "Minor comment: in gridTraveler the property gridTraveler(m,n) = gridTraveler(n,m) hasn't been used in memoization", "likes": 0}}, {"topLevelComment": {"id": "Ugyt0n-VYo-eX4usSIt4AaABAg", "publishedAt": "2020-12-13T18:12:06Z", "author": "aketilius", "text": "Very interesting video! I propose few improvements:\n- it could be useful to underline that memoization relies on hash tables, which are O(n) as well thanks to specific implementation in used languages\n- it could be fair to challenge the implementation using non recursive methods, when applicable.\nFor example fibonacci can be implemented as well in following way:\nconst fib = (n) => {\r\n  if (n<=2) return 1;\r\n  n1 = 1;\r\n  ret = 1;\r\n  while (n>2) {\r\n    tmp = n1;\r\n    n1 = ret;\r\n    ret += tmp;\r\n    n = n-1;\r\n  }\r\n\r\n  return ret;\r\n}\n\nI thinks same applies for gridTraveler", "likes": 0}}, {"topLevelComment": {"id": "UgwECvXV55aLSyfdjFF4AaABAg", "publishedAt": "2020-12-13T17:38:41Z", "author": "Rahul Deep Attri", "text": "Using JS I can code along in the browser! Loved the course and instructor \ud83e\udd18\ud83d\ude4c", "likes": 0}}, {"topLevelComment": {"id": "UgwE95D40yifFUA5hAp4AaABAg", "publishedAt": "2020-12-13T16:04:32Z", "author": "Michael John Baco", "text": "i dont get if the fib function has looping?", "likes": 0}, "replies": [{"id": "UgwE95D40yifFUA5hAp4AaABAg.9HD7Bb-7mK09HD9vgpeWa8", "publishedAt": "2020-12-13T16:28:26Z", "author": "Michael John Baco", "text": "oww i see, recursive :)", "likes": 0}]}, {"topLevelComment": {"id": "Ugzz2TjVccRI3mYpg9N4AaABAg", "publishedAt": "2020-12-13T13:07:11Z", "author": "Bittu Mondal", "text": "so high quality content.....i can't believe its free", "likes": 1}}, {"topLevelComment": {"id": "Ugy421rZ6FCeAifIJZt4AaABAg", "publishedAt": "2020-12-13T06:36:54Z", "author": "Johan Swanepoel", "text": "Thank you for this video!", "likes": 0}}, {"topLevelComment": {"id": "Ugy3mcoW83B7UUBWix14AaABAg", "publishedAt": "2020-12-13T05:46:21Z", "author": "Mohammad Ghaderibaneh", "text": "1:04:06\r\nWe have m * n different key combinations, as you said. So, space complexity is also O(m*n) not O(n + m). This is for your dictionary not memory for the recursion stack.\n\nAlthough, you can use array instead and get O(min(m, n)) in bottom-up fashion.\n\nAlso, don't you think space complexity for howSum tabulation and bestSum tabulation is O(m*n) not O(m^2)?", "likes": 0}}, {"topLevelComment": {"id": "UgzwG8Vvly5mtYFyoQN4AaABAg", "publishedAt": "2020-12-13T04:59:12Z", "author": "Narayan Swamy", "text": "__/|\\__", "likes": 0}}, {"topLevelComment": {"id": "UgwSIXNFb86SHmgBqJJ4AaABAg", "publishedAt": "2020-12-13T02:50:54Z", "author": "AIT", "text": "Can anyone tell me what's going..? I want a programmer cluster..", "likes": 0}}, {"topLevelComment": {"id": "Ugwuehv3ageVJh3LrnZ4AaABAg", "publishedAt": "2020-12-13T02:35:30Z", "author": "Ebed Kharistian", "text": "Great teacher \ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"id": "UgyCxpNVI_lXjHGa0wl4AaABAg", "publishedAt": "2020-12-12T23:32:33Z", "author": "Niels Kersic", "text": "With this method of passing the memo object to all recursive calls, you don\u2019t actually save time on ALL calls with the same parameter but only on child calls, right? So thinking about it in the tree view, you would only save time on all child nodes with the same parameters, but not on sibling nodes. Am I missing something here?", "likes": 0}}, {"topLevelComment": {"id": "Ugw9Incu11c9fimgwFJ4AaABAg", "publishedAt": "2020-12-12T23:27:05Z", "author": "Niels Kersic", "text": "This video is amazing and Alvin is a great teacher. Would love to see him explain other difficult topics too, like backtracking perhaps", "likes": 11}, "replies": [{"id": "Ugw9Incu11c9fimgwFJ4AaABAg.9HBL27Gp7ak9RFnXcXIHeC", "publishedAt": "2021-08-20T06:15:42Z", "author": "CST1992", "text": "@Coderbyte Hey coderbyte, do you have more videos on other common topics such as big O(and Omega) notations, data structures, algorithms, and design patterns?", "likes": 0}, {"id": "Ugw9Incu11c9fimgwFJ4AaABAg.9HBL27Gp7ak9HLDHPFLKP5", "publishedAt": "2020-12-16T19:31:40Z", "author": "Coderbyte", "text": "Thanks for watching! More content coming soon :). Thanks for the suggestion. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgymLTIZjARHBRVGbil4AaABAg", "publishedAt": "2020-12-12T16:30:18Z", "author": "hitansh jain", "text": "Can any one help me with bestSum memorization code in python", "likes": 0}, "replies": [{"id": "UgymLTIZjARHBRVGbil4AaABAg.9HAaLWW3Ivz9HKc5cw33pM", "publishedAt": "2020-12-16T13:58:01Z", "author": "Keshav Maheshwari", "text": "same problem.", "likes": 0}]}, {"topLevelComment": {"id": "Ugyfqq5vWX26juxCqFp4AaABAg", "publishedAt": "2020-12-12T14:44:59Z", "author": "David Nitzsche-Bell", "text": "Tiny optimization suggestion?\n\nIf the default value of memo was defined to be {0: 1, 1: 1}, then you wouldn't need the \"if n <= 2\" and so you'd have only one if statement.  Yes?", "likes": 0}}, {"topLevelComment": {"id": "Ugzwfgi6TsUTM3WptEd4AaABAg", "publishedAt": "2020-12-12T14:07:25Z", "author": "Sebin Mathew", "text": "I tried the example at 1:21:30. The example where target is 300 and the list has 7 and 14. I ran it using java on my Mac. It was not slow. It was just as quick.", "likes": 0}}, {"topLevelComment": {"id": "UgyBY941xOKm8J-WZCx4AaABAg", "publishedAt": "2020-12-12T09:26:48Z", "author": "Krati Saxena", "text": "I never thought DP can be this easy!!!! <3", "likes": 29}, "replies": [{"id": "UgyBY941xOKm8J-WZCx4AaABAg.9H9pshLY9rG9IipD-Vj4YA", "publishedAt": "2021-01-20T05:25:01Z", "author": "Light Theory LLC", "text": "Assalamualaikum brothers and sis, I am seeking Software Engineers, whom can code in Tensor flow and RNN Time series.  I am paying.. I am based in USA.. Please check out https://lighttheory.page/  or email us at info@LightTheory.tech  SALAM", "likes": 0}, {"id": "UgyBY941xOKm8J-WZCx4AaABAg.9H9pshLY9rG9I5GLGK2xwK", "publishedAt": "2021-01-04T11:21:57Z", "author": "Coding Benefits", "text": "https://youtu.be/tDW2P90WIW4\n\nIn this video I explained all features available from Coding Ninjas\n\nDo like and comments for better reach\nIf information is helpful pls share in your friends circle", "likes": 1}, {"id": "UgyBY941xOKm8J-WZCx4AaABAg.9H9pshLY9rG9I-ZCCnuEfU", "publishedAt": "2021-01-02T06:11:18Z", "author": "Lucas", "text": "@Herp Derpingson give the some examples bro. I couldn't find them", "likes": 2}, {"id": "UgyBY941xOKm8J-WZCx4AaABAg.9H9pshLY9rG9HzLfr-auch", "publishedAt": "2021-01-01T18:53:55Z", "author": "Prakhar Agarwal", "text": "@Herp Derpingson Please don't demotivate the beginners by telling them how hard it is at the start. Let them explore for themselves. \ud83d\ude00", "likes": 9}, {"id": "UgyBY941xOKm8J-WZCx4AaABAg.9H9pshLY9rG9HnaFuU_OLK", "publishedAt": "2020-12-28T05:19:09Z", "author": "Herp Derpingson", "text": "It isnt. Look at some interview questions from Uber or Amazon.", "likes": 7}]}, {"topLevelComment": {"id": "Ugwk9UxGln6t3PL62bt4AaABAg", "publishedAt": "2020-12-12T09:14:49Z", "author": "EyeInTheSky", "text": "Ahhhh why not in python :(", "likes": 1}}, {"topLevelComment": {"id": "Ugwj6qWnx6colIsYsSR4AaABAg", "publishedAt": "2020-12-12T04:11:11Z", "author": "Siva Sudharshan", "text": "Super...", "likes": 0}}, {"topLevelComment": {"id": "UgzDk6_SHwQR_GM9G3J4AaABAg", "publishedAt": "2020-12-12T03:49:36Z", "author": "ChubbyDawMe", "text": "Your voice though", "likes": 0}}, {"topLevelComment": {"id": "UgxN5wTTP60dQZP4lzl4AaABAg", "publishedAt": "2020-12-12T03:20:52Z", "author": "David Saint", "text": "For bestSum, if there's 0 in the numbers array it throws a \"max call stack size exceeded\" error", "likes": 0}}, {"topLevelComment": {"id": "UgxvtXyxZPlTZkSfqop4AaABAg", "publishedAt": "2020-12-12T01:31:29Z", "author": "prgrmrkhn", "text": "does howSum memoization work with a negative target?", "likes": 0}}, {"topLevelComment": {"id": "UgyOd__wI1t-jFFiWkt4AaABAg", "publishedAt": "2020-12-11T23:29:28Z", "author": "City Hunter", "text": "Definitely the best explanation of DP I've seen. Well visualised and explained, and I like that it builds from simple to complex. Thank you!!", "likes": 2}, "replies": [{"id": "UgyOd__wI1t-jFFiWkt4AaABAg.9H8lWdfFMoa9H8o9sJVS-W", "publishedAt": "2020-12-11T23:52:34Z", "author": "Coderbyte", "text": "Glad to hear that you enjoyed my lecture! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgxjSeOT37GL06cM34p4AaABAg", "publishedAt": "2020-12-11T22:17:19Z", "author": "Adam saraya", "text": "import random\r\n\r\ndef play():\r\n    user = input(\"What's your choice? 'r' for rock, 'p' for paper, 's' for scissors\\n\")\r\n    computer = random.choice(['r', 'p', 's'])\r\n\r\n    if user == computer:\r\n        return 'tie'\r\n\r\n    if is_win(user, computer):\r\n        return 'you won'\r\n\r\n    return 'you lost'\r\ndef is_win(player, opponent):\r\n    if (player == 'r' and opponent == 's') or (player == 's' and opponent == 'p') or (\r\n            player == 'p' and opponent == 'e'):\r\n        return True\r\n\r\nprint(play())", "likes": 1}}, {"topLevelComment": {"id": "UgwU4gEOyGUSW-9r_RJ4AaABAg", "publishedAt": "2020-12-11T20:42:36Z", "author": "Alex Luy", "text": "3:58:18 just putting my timestamp for where I can continue", "likes": 0}}, {"topLevelComment": {"id": "UgzYykiHjlL1CEDAk-B4AaABAg", "publishedAt": "2020-12-11T20:34:07Z", "author": "aayush agarwal", "text": "best dynamic programming explanation", "likes": 0}}, {"topLevelComment": {"id": "UgyPvxcQ0YKAZzdMTcl4AaABAg", "publishedAt": "2020-12-11T20:12:57Z", "author": "MAOMX ESOAX", "text": "The one time pad is now the one line pad. One line to encrypt and one line to decrypt. Written with J from www.jsoftware.com \nCopy, paste and hit return each of the following lines into the J terminal window.\n\nc =: 'abcdefghijklmnopqrstuvwxyz0123456789 '   NB. character set, length is 37\nm =: 'j from jsoftware dot com'   NB. message to encrypt\r\no =: 'programmed with J this is not java'   NB. some text used for the one time pad\nencrypt=: (37|((c i. m)+(c i. ((i.$m){o))-1)){c\ndecrypt=: ((37|((37|((c i.m)+(c i.((i.$m){o))-1))-(c i.((i.$m){o)))+1)){c\nwdinfo 'Message = ',m,LF,'OTP = ',o,LF,'Encrypted = ',encrypt,LF,'Decrypted = ',decrypt   NB. display info\n\nTry different messages in 'm' and different text in 'o'. Number of characters in 'o' needs to be more than in 'm'.", "likes": 0}}, {"topLevelComment": {"id": "UgwOvqRFc9cRDYghPER4AaABAg", "publishedAt": "2020-12-11T17:57:44Z", "author": "19EC074 - Pradeep ragul s", "text": "Bro , my dynamic programming in your  course ,the course is awesome you nalied it , but I am.trying these questions in python in same logic ... Unfortunately end up with some logical issue in some problems..I couldn't get so..\nIf you have any plateform to send my code and u can debug it and tell me where do I gone wrong when you have free time plzz..", "likes": 0}}, {"topLevelComment": {"id": "UgxCf3GQl15br0rFW7p4AaABAg", "publishedAt": "2020-12-11T16:56:21Z", "author": "kpw84u2", "text": "Fibonacci numbers start at zero and one tho. Not 1,1... ijs", "likes": 0}}, {"topLevelComment": {"id": "UgwfLAewNmv9bzd9vhV4AaABAg", "publishedAt": "2020-12-11T16:44:40Z", "author": "Ankita Prasad", "text": "instead of putting two base cases in grid travel, it can be put into one case i.e. \n\"if (m===1 || n===1): return 1;\"", "likes": 4}, "replies": [{"id": "UgwfLAewNmv9bzd9vhV4AaABAg.9H82BtGmMNQ9L5UFtdBWm3", "publishedAt": "2021-03-20T02:57:44Z", "author": "Dominic Lee", "text": "Yes. I'll do the same.", "likes": 1}]}, {"topLevelComment": {"id": "Ugxv7hMVdQddmb-d88h4AaABAg", "publishedAt": "2020-12-11T15:26:44Z", "author": "Ali Salameh", "text": "Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgwYFxgCNLab5LW5fdF4AaABAg", "publishedAt": "2020-12-11T14:10:16Z", "author": "Aman Kapoor", "text": "Beautifully explained. Thanks", "likes": 0}}, {"topLevelComment": {"id": "Ugx74F9_XO6s77c-bG14AaABAg", "publishedAt": "2020-12-11T14:04:55Z", "author": "\u0100tm\u0101r\u0101m", "text": "Isn't the tabulation method for the fibonacci unnecessarily complicated?  It can be generated like this in python:\n\ndef fib(n):\n    table = [0, 1]\n    for f in range(n):\n        table.append(table[f] + table[f + 1])\n    print(table[n])\n\nWith this I was got the 200,000th fib in 2 seconds, and the 500,000th fib number in 30 seconds. It contains over 104 thousand digits. It seems to me the solution in the video sums twice for every fib number, doubling the complexity unnecessarily, when a single sum of the previous two numbers is sufficient. Question - is the solution in the video better because it can be generalized to more problems?", "likes": 0}}, {"topLevelComment": {"id": "UgzdZKRAzxNwR32mP1h4AaABAg", "publishedAt": "2020-12-11T10:56:10Z", "author": "rudycenaronaldo", "text": "No. I don't want to be a software engineer at Google. Please leave me alone algoexpert I just wanna learn dynamic programming.", "likes": 5434}, "replies": [{"id": "UgzdZKRAzxNwR32mP1h4AaABAg.9H7QJHh1u919lMa0-F-PVZ", "publishedAt": "2023-01-26T20:31:28Z", "author": "Karlyn Finnegan", "text": "Love this", "likes": 0}, {"id": "UgzdZKRAzxNwR32mP1h4AaABAg.9H7QJHh1u919ku9g1qQcaf", "publishedAt": "2023-01-15T10:14:42Z", "author": "Mohid Meer", "text": "So you wanna be a system expert \ud83d\ude09", "likes": 0}, {"id": "UgzdZKRAzxNwR32mP1h4AaABAg.9H7QJHh1u919k1iNmCO6nC", "publishedAt": "2022-12-24T21:29:11Z", "author": "An engineer", "text": "LOL", "likes": 0}, {"id": "UgzdZKRAzxNwR32mP1h4AaABAg.9H7QJHh1u919jebHO7lVvt", "publishedAt": "2022-12-15T12:45:22Z", "author": "Bishnu Chalise", "text": "You can use brave browser to prevent yourself from those ridiculous  ads.", "likes": 0}, {"id": "UgzdZKRAzxNwR32mP1h4AaABAg.9H7QJHh1u919hgrWwH_mqz", "publishedAt": "2022-10-27T16:42:59Z", "author": "Mashal Mokarar", "text": "\ud83d\ude02\ud83d\ude02\ud83d\ude02\ud83d\ude02", "likes": 0}]}, {"topLevelComment": {"id": "Ugzv9-DMrm0dUwBN-J54AaABAg", "publishedAt": "2020-12-11T04:57:29Z", "author": "In Tom", "text": "Love your way of teaching. Could you please make a lesson about Graph Algorithm?", "likes": 0}}, {"topLevelComment": {"id": "UgyPiDqyOUafEaRmchJ4AaABAg", "publishedAt": "2020-12-10T23:00:49Z", "author": "David Nitzsche-Bell", "text": "I really love this course. you do a great job describing the problem and how it would be done upon first glance. And then you provide a case which .... makes the case for improving the algorithm. And you go through the O() calculation - very useful. \n\nThank you.", "likes": 0}}, {"topLevelComment": {"id": "UgzKZFHaxZodoJkXNud4AaABAg", "publishedAt": "2020-12-10T22:27:49Z", "author": "\u0100tm\u0101r\u0101m", "text": "howSum() can be further optimized by passing numbers sorted in reverse, even tho it does not solve bestSum()", "likes": 0}}, {"topLevelComment": {"id": "UgyIwF5NkGcV7g6H0ZN4AaABAg", "publishedAt": "2020-12-10T20:32:39Z", "author": "Igor S", "text": "Thank you! Just 1 note: In the tabulation part, you gave ready solution patterns, without explaining how you found these patterns, which is the main skill, needed for solving these kind of problems WITHOUT an instructor \ud83d\ude0a", "likes": 0}}, {"topLevelComment": {"id": "UgyyHBxL7fzKn0gNL714AaABAg", "publishedAt": "2020-12-10T19:54:39Z", "author": "ub880", "text": "1:28:10\n\"Look how fast my program finishes!\"\nFirst real user: \"let's add a 0 to the numbers array\"", "likes": 25}, "replies": [{"id": "UgyyHBxL7fzKn0gNL714AaABAg.9H5o8OSyM9b9MRjhxHXRKw", "publishedAt": "2021-04-22T14:56:12Z", "author": "Hydrargyrum", "text": "@Pakesh Chauhan Results are saved to linear data, and since we are not using any 2D data structures like 2D arrays or nested dictionaries, or nested lists, space complexity is linear. And the space complexity is actually O(2*m) which is considered O(m).", "likes": 0}, {"id": "UgyyHBxL7fzKn0gNL714AaABAg.9H5o8OSyM9b9MIH-tyTthY", "publishedAt": "2021-04-18T22:43:29Z", "author": "Pakesh Chauhan", "text": "How canSum function space complexity is O(m)? It should not be O(m*m) first m for stack call and another m for space used to save result?", "likes": 0}, {"id": "UgyyHBxL7fzKn0gNL714AaABAg.9H5o8OSyM9b9J8crkjxLcA", "publishedAt": "2021-01-30T15:16:37Z", "author": "MB Tech", "text": "I too have same question", "likes": 1}]}, {"topLevelComment": {"id": "Ugz92inl8LYqsokA5QV4AaABAg", "publishedAt": "2020-12-10T18:19:58Z", "author": "Resilient Programmer", "text": "I wish to understand and be able to explain programming like this. Thanks.", "likes": 1}}, {"topLevelComment": {"id": "UgwJ55gHmwhtNboDljZ4AaABAg", "publishedAt": "2020-12-10T15:30:31Z", "author": "Alex Kotov", "text": "Can anyone help me? When I implemented canSum on Python, I got a problem than memo saves its value for next call of function. so when I try to print 5 diffetent outcomes in one script it always returns True (since he remembers that canSum(target=7) is always true.", "likes": 0}, "replies": [{"id": "UgwJ55gHmwhtNboDljZ4AaABAg.9H5KusnVxuA9H8BbhDRRZs", "publishedAt": "2020-12-11T18:06:58Z", "author": "Alex Kotov", "text": "@Chad Winters thanks! At least now I will predict such behavior of python and know how to fix it.", "likes": 0}, {"id": "UgwJ55gHmwhtNboDljZ4AaABAg.9H5KusnVxuA9H8BRYy1_9O", "publishedAt": "2020-12-11T18:05:27Z", "author": "Alex Kotov", "text": "@Wei Ping Goh yeah I did that too but it doesnt seem right you know :D", "likes": 0}, {"id": "UgwJ55gHmwhtNboDljZ4AaABAg.9H5KusnVxuA9H7Wp4NIzNm", "publishedAt": "2020-12-11T11:53:04Z", "author": "Wei Ping Goh", "text": "I had the same problem, but parsing a blank memo during each initial call solved it:\nprint(cansum(7, [2, 3], {}))\nprint(cansum(7, [2, 4], {}))", "likes": 0}, {"id": "UgwJ55gHmwhtNboDljZ4AaABAg.9H5KusnVxuA9H6czmF9gs2", "publishedAt": "2020-12-11T03:36:27Z", "author": "Chad Winters", "text": "https://pastebin.com/B1qwPsKC", "likes": 0}]}, {"topLevelComment": {"id": "Ugw-soqi0N-FhSLW7dN4AaABAg", "publishedAt": "2020-12-10T11:53:35Z", "author": "konan william koffi", "text": "comment lui donner 13\ud83d\udc4d?", "likes": 0}}, {"topLevelComment": {"id": "UgyDvvULZ3P3Z7eArqR4AaABAg", "publishedAt": "2020-12-10T06:44:06Z", "author": "Jason Ford", "text": "It is always a treat to find content perfectly paired to one's journey in programming. For me, this content is exactly what I need. Thank you Alvin and thank you FCC for distributing! Unbelievable that this is free.", "likes": 13}}, {"topLevelComment": {"id": "Ugx3L4IxXtyy47fj73p4AaABAg", "publishedAt": "2020-12-10T06:27:29Z", "author": "michael kusdya", "text": "the fact that i can watch this for free is mind blowing", "likes": 0}}, {"topLevelComment": {"id": "Ugzp36_lye6uxCOFChZ4AaABAg", "publishedAt": "2020-12-10T05:47:42Z", "author": "Madhav", "text": "50:15 the base case could just be\n if(n==1 or m==1) \n      return 1;\nIn one row or one column, there could be only one way to travel. (^_-)", "likes": 2}}, {"topLevelComment": {"id": "Ugw7gZ-OMJYmnrdlh5F4AaABAg", "publishedAt": "2020-12-10T03:45:58Z", "author": "DSSPOA", "text": "Excellent material!!! The only thing so far that I'm not a 100% convinced is the allConstruct edge case #2, which\nreturns [[]] instead of [] @2:49:00. So, my understanding is that the initial statement is not being fulfilled in that scenario.\nLet me bring it over here for a moment: \u00a0 \n\n#2 allConstruct('', [cat, dog, mouse]) -> [[]]\n\nThe function should return a 2D array containing ALL OF THE WAYS\nthat the 'target' can be constructed by CONCATENATING elements of\nthe 'wordBank' array.\n\nIn other words, I don't think that not using a wordBank string is a valid option here, specially \nfor \"CONCATENATING elements\", according to the initial requirement. \n\nWell, maybe it's just me =) Great video anyway. I wish I had such a wonderful explanation in my college, back in the days.", "likes": 0}}, {"topLevelComment": {"id": "Ugw18nP7R1vpflfQMRR4AaABAg", "publishedAt": "2020-12-10T02:32:05Z", "author": "Muggle King", "text": "Shouldn't the space complexity of the grid travel's memoization solution be O(m*n) as you have m*n element in the memo?", "likes": 1}, "replies": [{"id": "Ugw18nP7R1vpflfQMRR4AaABAg.9H3wpSwVnTJ9HA0KOU3u5N", "publishedAt": "2020-12-12T11:06:50Z", "author": "Kamini Sabu", "text": "Yes, I too think that way. Though we are not gonna use all those values, we are still storing them in the memo for later use.", "likes": 0}]}, {"topLevelComment": {"id": "UgxtFUySTqBwEqZb7iN4AaABAg", "publishedAt": "2020-12-09T23:03:36Z", "author": "kinichi shirami", "text": "Could you please turn on auto subtitles ?", "likes": 0}}, {"topLevelComment": {"id": "UgzT6aeO7OECFMehm_d4AaABAg", "publishedAt": "2020-12-09T21:23:35Z", "author": "amone oudini", "text": "i suck at javascript, but is it really ok to write at index n+2 in an array of size n ?  (at around 3:20:37)", "likes": 0}, "replies": [{"id": "UgzT6aeO7OECFMehm_d4AaABAg.9H3OWt1A3cT9H3b6zrQ3Ci", "publishedAt": "2020-12-09T23:22:22Z", "author": "amone oudini", "text": "\u200b@LifeStoryNerd Thanks, i checked and it indeed expands the array.\nAt the end of the loop the variable table will be an array of size n+2 instead of n+1\nIt's a horrible thing to see for me, but it seems ok for js developers it seems xD\nAnyway, very interesting video, thank you !", "likes": 1}, {"id": "UgzT6aeO7OECFMehm_d4AaABAg.9H3OWt1A3cT9H3W1FMJdHW", "publishedAt": "2020-12-09T22:29:10Z", "author": "LifeStoryNerd", "text": "This is explained at some point in the video.\n\nBasically, you expand the array, i.e. n+1 is undefined and n+2 is the new value. It still works because the loop stops at the predefined length and not the array length. However, you could perform a check to see if the index is outside the length of the array if you want to.", "likes": 1}]}, {"topLevelComment": {"id": "UgwyQukQXOvA9fOWu054AaABAg", "publishedAt": "2020-12-09T19:07:06Z", "author": "Galib Ahmed Chowdhury", "text": "Great.", "likes": 0}}, {"topLevelComment": {"id": "UgwFkIFbUnJWmJ6SPF94AaABAg", "publishedAt": "2020-12-09T18:54:26Z", "author": "Gordon Fiala", "text": "I just did something like this a couple days ago and then passively addressed it with my friend LAST NIGHT. \"Personality Filter, You do work!\"", "likes": 0}, "replies": [{"id": "UgwFkIFbUnJWmJ6SPF94AaABAg.9H37SVzMlP99H38H9x_bXN", "publishedAt": "2020-12-09T19:01:37Z", "author": "Gordon Fiala", "text": "Handler languages do 90% of the work, by auto detecting for you. \nU don't need to invent a computer language.\n\nIt looks for the right X or Y so effectively, it's like water to a problem which would be fire.", "likes": 0}, {"id": "UgwFkIFbUnJWmJ6SPF94AaABAg.9H37SVzMlP99H37x8tw8rp", "publishedAt": "2020-12-09T18:58:45Z", "author": "Gordon Fiala", "text": "Character location. \nObjects are listed on a grid.\nThe 4ghtz allows u too search different libraries fast. So it doesn't matter how you list them.\nBut u run 2 programs to organize by Y and by X axis. \n\nThen, your character has a coordinate. \n\nThat coordinate is influenced by a map coordinate correspondence. \n\nSo you need to subcatagory a pre-program ready to \"return\" any results from that correspondence number. \n\nAnd then you can effectively move dynamically with impacts, like shading, play impacts, immunities etc.", "likes": 0}]}, {"topLevelComment": {"id": "Ugx1IsU4CXO_nRijgax4AaABAg", "publishedAt": "2020-12-09T18:41:55Z", "author": "Henrique Junqueira", "text": "Hi, could you tell me which app you are using to teach? Both IDE and your board...", "likes": 0}, "replies": [{"id": "Ugx1IsU4CXO_nRijgax4AaABAg.9H360nA8Rws9H8oLxnlvk9", "publishedAt": "2020-12-11T23:54:13Z", "author": "Coderbyte", "text": "Hey! Thanks for watching. I'm using VSCode as my editor and the animations are keynote. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgyWPySMUyNBoLiccTt4AaABAg", "publishedAt": "2020-12-09T17:11:37Z", "author": "Anton R", "text": "3:03:04 / 5:10:01 thanks a lot !! \nPython version :: \ndef all_construct(target: str, arr: list, memo: dict) -> list:\n    if target in memo:\n        return memo[target]\n    elif target == '':\n        return [[]]\n\n    result: list = []\n\n    for prefix in arr:\n        if target.startswith(prefix):\n            suffix: str = target.replace(prefix, '')\n            alllist: list = all_construct(suffix, arr, memo)  # return [[]]\n            # insert preffix to ech array in stack\n            list(map(lambda x: x.insert(0, prefix), alllist))\n            # spread out array \n            result += alllist\n\n    memo[target] = result\n    return result", "likes": 0}}, {"topLevelComment": {"id": "UgwjL6txGDo41sUvfYx4AaABAg", "publishedAt": "2020-12-09T15:13:52Z", "author": "Roronoa_D_Law", "text": "17:55 isn't the total number of calls 2^n + 2^(n-1) + 2^(n-2) + ... 2^0 ?", "likes": 0}, "replies": [{"id": "UgwjL6txGDo41sUvfYx4AaABAg.9H2jD0ohUIE9HIhy9lsVIl", "publishedAt": "2020-12-15T20:10:48Z", "author": "Roronoa_D_Law", "text": "@Erwin Mulder okay it was to be sure", "likes": 0}, {"id": "UgwjL6txGDo41sUvfYx4AaABAg.9H2jD0ohUIE9HIhLYKvYlH", "publishedAt": "2020-12-15T20:05:24Z", "author": "Erwin Mulder", "text": "It is, but the conclusion is the same: It scales with 2^n, hence O(2^n).", "likes": 1}]}, {"topLevelComment": {"id": "UgwFWndwg-GUebovgox4AaABAg", "publishedAt": "2020-12-09T14:45:42Z", "author": "Content Developer", "text": "Not everyone can make this plain and simple.   This guy did.   I teach this to 11-15-year-olds, and you broke it down well so I can understand, they will d understand.", "likes": 0}}, {"topLevelComment": {"id": "Ugx1JfbooWVZsB4t0Oh4AaABAg", "publishedAt": "2020-12-09T13:44:20Z", "author": "######", "text": "Do you actually need this \"memo[targetSum] = True\" at 1:27:33?  Wouldn't recursion just return True if any number in its chain is equal True?", "likes": 1}, "replies": [{"id": "Ugx1JfbooWVZsB4t0Oh4AaABAg.9H2ZyG7DWKU9H3PqA5M212", "publishedAt": "2020-12-09T21:35:05Z", "author": "Kilian", "text": "I also thought about this and i do agree we don't need the \"memo[targetSum] = True\" call there. But also obviously its not wrong. I think the idea is to follow his memoization recipe and because of that you just add the memo call there. So it's better to make this unecesary call (which doesnt hurt) instead of missing one important memo call.", "likes": 0}]}, {"topLevelComment": {"id": "UgwFZypDnocnQueyCjZ4AaABAg", "publishedAt": "2020-12-09T10:47:58Z", "author": "Shomi Khan", "text": "Best centent and explanation, i have ever seen on DP....\nI think, there is some correction... \n* In 17:55 you told that we get number of recursion call by multiplying 2 n times....\nactually there needs some correction...\nIn level n number of recursion call = 2^(n-1)\nSo the total number of recursion call = 1 + 2 + 4 + 8 +..........+ 2^(n-1) = 2^n\n\nAnd same thing goes for the graph where height of graph is m and number of call from each node is n...\nHere number of call in level n is n^(m-1)\nSo the total number of recursion call is,\n1 + n + n^2 + n^3 +..........+ n^(m-1) = ((n^m)-1)/(m-1)\nHere, big O is n^m (like you said in your video)\n\n** In bottom up DP there is a slight mistake in canConstruct, allConstruct, countConstuct tabulation...\n\nApart from these I really love this video...\nThanks a lot...", "likes": 0}}, {"topLevelComment": {"id": "Ugzi3msBIxdgyxIgfmF4AaABAg", "publishedAt": "2020-12-09T09:05:55Z", "author": "Jr", "text": "absolutely amazing", "likes": 0}}, {"topLevelComment": {"id": "UgyCPorobKAxD-1Xgp94AaABAg", "publishedAt": "2020-12-09T07:23:16Z", "author": "Zeljko Dakic", "text": "Amazing content and insight. Thank you.", "likes": 0}}, {"topLevelComment": {"id": "Ugz9E7oUjzVTyLGQbil4AaABAg", "publishedAt": "2020-12-09T02:52:31Z", "author": "\u5468\u97e9", "text": "At around 21:00 you can not remove the half on the exponent. O(2^(n/2)) is infinitesimal with respect to O(2^n).", "likes": 4}}, {"topLevelComment": {"id": "Ugz_c1AyuybSdLRNdkp4AaABAg", "publishedAt": "2020-12-09T02:24:47Z", "author": "Pajeet Singh", "text": "For C++ version of CountConstruct:\nhttps://www.youtube.com/watch?v=R0O820ncWlQ", "likes": 0}}, {"topLevelComment": {"id": "UgxXBFIy1Wa7FBdEf6h4AaABAg", "publishedAt": "2020-12-09T00:24:20Z", "author": "talhameral", "text": "Can anybody show me their Java solution to the allConstruct Memoization ? I'd really appreciate that.", "likes": 0}, "replies": [{"id": "UgxXBFIy1Wa7FBdEf6h4AaABAg.9H18PsWjRvx9I8yyKp2_Ee", "publishedAt": "2021-01-05T21:58:22Z", "author": "C\u00e9sar Soto Valero", "text": "Sure, here are the solutions for all the problems implemented in Java, if you are interested: https://www.cesarsotovalero.net/2020-12-21-dynamic-programming-classics", "likes": 0}]}, {"topLevelComment": {"id": "Ugx1RltM4EpWopy_vBN4AaABAg", "publishedAt": "2020-12-08T23:42:25Z", "author": "Marce Origoni", "text": "59:23\n\nActually I think there is the same ways for the grid with sizes mxn and nxm so If you check If the key mxn and also changing the order nxm is on the memo is faster right? and probably less memory is used for the memo.", "likes": 0}}, {"topLevelComment": {"id": "UgzxxRO4XtyjE5Ep0xR4AaABAg", "publishedAt": "2020-12-08T23:29:43Z", "author": "Marce Origoni", "text": "39:07\n\njust math lol, then you get there is \n\n(m+n-2)!/(n-1)!(m-1)! ways. Using memoization you can make some good enough algorithm. \n\nn-1 = moves you have to do vertically\n\nm-1 = moves you have to do horizontally.\n\nthen you just have to calculate the ways you can arrange them. that is the total permutations divided by the ways you can arrange the m-1 horizontal moves and n-1 vertical ones.", "likes": 0}}, {"topLevelComment": {"id": "UgxmW9WoDEts_DqlFhx4AaABAg", "publishedAt": "2020-12-08T22:00:26Z", "author": "Borny", "text": "this guy is a mdfkin hero", "likes": 0}}, {"topLevelComment": {"id": "UgxU58126Idvx3JkBMh4AaABAg", "publishedAt": "2020-12-08T21:37:41Z", "author": "David Nitzsche-Bell", "text": "1:01:46 Didn't you want to take advantage of the fact that the node \"1,2\" is the same as \"2,1\"?", "likes": 7}, "replies": [{"id": "UgxU58126Idvx3JkBMh4AaABAg.9H0qLI-dLTC9QSwLTGa_uq", "publishedAt": "2021-07-31T12:11:25Z", "author": "Ahnaf Tanjid", "text": "@R Bisht i blv no, i guess for bigger grid, this kind of transpose grid may arrive and caching that result up would make sense.", "likes": 0}, {"id": "UgxU58126Idvx3JkBMh4AaABAg.9H0qLI-dLTC9IYM0NccV0D", "publishedAt": "2021-01-15T18:29:31Z", "author": "David Nitzsche-Bell", "text": "@R Bisht I'm not talking about the initial inputs, I'm talking about the tree with nodes. Listen to 55:15 again where he says \"If you really think about it, asking the number of ways to travel through a 1x2 grid is the same as number of ways to travel through a 2x1 grid. You're just flipping the rows and the columns. The total number of ways should be exactly the same.\"", "likes": 1}, {"id": "UgxU58126Idvx3JkBMh4AaABAg.9H0qLI-dLTC9H2bI5pjJfq", "publishedAt": "2020-12-09T14:04:39Z", "author": "Komagb", "text": "Yes, I think there should be one more memo check, for n, m", "likes": 4}, {"id": "UgxU58126Idvx3JkBMh4AaABAg.9H0qLI-dLTC9H2NKN1nbRK", "publishedAt": "2020-12-09T11:53:53Z", "author": "R Bisht", "text": "The case doesn't work every time, as inputs can be anything, not necessary it will be a square, it could be a rectangle. if the input is (1,2) then there will be NO {2,1}", "likes": 0}]}, {"topLevelComment": {"id": "Ugyplr--sT6OMad_tth4AaABAg", "publishedAt": "2020-12-08T20:33:18Z", "author": "sana cher", "text": "57:45 what is that datatype of Key?", "likes": 0}, "replies": [{"id": "Ugyplr--sT6OMad_tth4AaABAg.9H0iyoajR9-9IYOJrVAYlE", "publishedAt": "2021-01-15T18:49:39Z", "author": "David Nitzsche-Bell", "text": "It's a string.", "likes": 0}]}, {"topLevelComment": {"id": "UgxZa5ykLneyaj_JHbh4AaABAg", "publishedAt": "2020-12-08T18:07:18Z", "author": "Alena Soloveva", "text": "Hi, Alvin! I really appreciate the course, it is amazing\nBut i have a question, why are you using objects instead of the arrays? at least for the grid traveler i think it would simplify the things a bit. May be it is about space complexity, i don't know.", "likes": 0}, "replies": [{"id": "UgxZa5ykLneyaj_JHbh4AaABAg.9H0TGOSU7w09HLDaUAExyP", "publishedAt": "2020-12-16T19:34:25Z", "author": "Coderbyte", "text": "Thanks for watching! For scenarios where the keys of your memo need to be a type other than nonnegative integers, arrays won't be as compatible to store the memo. If your keys are just nonnegative integers, then a array as the memo will be fine and have an equivalent space complexity. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgzmeeoYmt9a-68MriB4AaABAg", "publishedAt": "2020-12-08T18:02:40Z", "author": "David Nitzsche-Bell", "text": "47:21 You have a node labeled \"0,0\" but it's actually \"2,0\"", "likes": 6}}, {"topLevelComment": {"id": "Ugzj4Nv2wDG1ZtRxmrJ4AaABAg", "publishedAt": "2020-12-08T17:54:50Z", "author": "Lightwatch", "text": "This video is amazing! For the grid traveler memoization, should the result of a call should be stored in the reverse of the key as well (e.g, memo[m,n] = result and memo[n,m] = result)? I only ask because it seems implied from the diagram in this section, but is not included in the code. Thank you!", "likes": 0}, "replies": [{"id": "Ugzj4Nv2wDG1ZtRxmrJ4AaABAg.9H0Rq433ZvI9HLDk0haXVq", "publishedAt": "2020-12-16T19:35:43Z", "author": "Coderbyte", "text": "Right on! I forgot to implement that little detail, but luckily it doesn't effect the Big O complexity regardless. Add/checking for the inverse key would simply halve the number of \"unique\" keys. O(x/2) = O(x).    -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgzKXSvLRzdzqf-fK4d4AaABAg", "publishedAt": "2020-12-08T15:18:37Z", "author": "Pajeet Singh", "text": "2:46:27 Try adding \"f\" to list of strings and see the results.", "likes": 0}}, {"topLevelComment": {"id": "UgwMPUYgHFFcla3te714AaABAg", "publishedAt": "2020-12-08T14:11:25Z", "author": "Ngala Talla", "text": "The best, clean, concise  and clear explanation of steps to solve  these complex programming problems. Thanks men.", "likes": 1}, "replies": [{"id": "UgwMPUYgHFFcla3te714AaABAg.9H02GnUG3ZX9HLDqkhpviq", "publishedAt": "2020-12-16T19:36:38Z", "author": "Coderbyte", "text": "Glad to hear you found some clarity in my lecture! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgwjZlALZu4XJVjZlkd4AaABAg", "publishedAt": "2020-12-08T13:58:13Z", "author": "vremennonado", "text": "gridTraveler: if, for example, node (1,2) is in essence the same as (2,1), why are we memoizing and retrieving the value with the key \"1,2\" only?  I think the value we've calculated for \"1,2\" should also be memoized with key \"2,1\", and we should check our memo object for the \"direct\" and \"reversed\" key every time. Or did I get something wrong?", "likes": 0}}, {"topLevelComment": {"id": "Ugza08gnLLS7NQGN1Yx4AaABAg", "publishedAt": "2020-12-08T13:38:53Z", "author": "David Saint", "text": "Illuminati 5:30 fib(666)", "likes": 0}}, {"topLevelComment": {"id": "UgyRO3RdheGqlRZ-oll4AaABAg", "publishedAt": "2020-12-08T13:23:06Z", "author": "Rohit Kharsan", "text": "1:32:21", "likes": 0}}, {"topLevelComment": {"id": "UgyPrSwankusxH8WgAJ4AaABAg", "publishedAt": "2020-12-08T12:01:25Z", "author": "Arihant Hirawat", "text": "love you brother for the best material to prepare. hope for further videos from you.", "likes": 0}}, {"topLevelComment": {"id": "UgzGSrvvk6-fPjUyu154AaABAg", "publishedAt": "2020-12-08T09:26:28Z", "author": "DimkadDd", "text": "what language do you use  for the presentation?", "likes": 0}}, {"topLevelComment": {"id": "UgxaYOkmETXSVVYNEht4AaABAg", "publishedAt": "2020-12-08T09:19:45Z", "author": "Vinay", "text": "I am using Python...\nAnd I am currently on canSum memoization\nAnd I have some problem\nPls help me\ud83d\ude4f\ud83c\udffc\ud83d\ude4f\ud83c\udffc\ud83d\ude4f\ud83c\udffc\n\nOpen comments and reply for the problem", "likes": 0}, "replies": [{"id": "UgxaYOkmETXSVVYNEht4AaABAg.9H-WtV4qlFM9HQ2dddmBas", "publishedAt": "2020-12-18T16:34:56Z", "author": "Ahmad SALEH", "text": "@Wei Ping Goh Great Solved my issue too !", "likes": 0}, {"id": "UgxaYOkmETXSVVYNEht4AaABAg.9H-WtV4qlFM9HKK4UEK3mJ", "publishedAt": "2020-12-16T11:11:50Z", "author": "Vinay", "text": "@Wei Ping Goh thank You\nIt actually works...\ud83e\udd17\ud83e\udd17\ud83e\udd17\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d", "likes": 0}, {"id": "UgxaYOkmETXSVVYNEht4AaABAg.9H-WtV4qlFM9H7WAPf0aRi", "publishedAt": "2020-12-11T11:47:22Z", "author": "Wei Ping Goh", "text": "There is nothing wrong with your code, it\u2019s just that when you call canSum in the same session, the memo isn\u2019t cleared although you did not parse the argument. You can print the value of memo before each return statement to observe the changes. To make sure you get the correct answer for each new targetSum/numbers set, you can parse in an empty memo argument to force initialising a blank memo, i.e.,\nprint(cansum(7, [2, 3], {}))\nprint(cansum(7, [2, 4], {}))", "likes": 2}, {"id": "UgxaYOkmETXSVVYNEht4AaABAg.9H-WtV4qlFM9H-ZGlYBbPu", "publishedAt": "2020-12-08T09:40:32Z", "author": "Vinay", "text": "Pls Also tell me where can I ask the problem....to get the solution", "likes": 0}, {"id": "UgxaYOkmETXSVVYNEht4AaABAg.9H-WtV4qlFM9H-Z9v9bx_S", "publishedAt": "2020-12-08T09:39:36Z", "author": "Vinay", "text": "For eg:\nprint(canSumMN (7,[2,3]))\nprint(canSumMN(7, [5,3,4,7]))\nprint(canSumMN(7,[2,4]))\nprint(canSumMN(8,[2,3,5]))\nprint(canSumMN ( 300, [7,14]))\n\nthis series is giving:\nTrue\nTrue\nTrue\nTrue\nTrue", "likes": 0}]}, {"topLevelComment": {"id": "UgxIriQVnBx8vn9gkCl4AaABAg", "publishedAt": "2020-12-08T08:55:04Z", "author": "Passionate Programmer", "text": "38:50", "likes": 0}}, {"topLevelComment": {"id": "UgyoEEmDnad-SWy9zwZ4AaABAg", "publishedAt": "2020-12-08T08:45:30Z", "author": "David Nitzsche-Bell", "text": "21:29 \"li-near\"? It's \"li-nee-ur\".", "likes": 0}}, {"topLevelComment": {"id": "UgzUSuC4J5Y0c8whGdB4AaABAg", "publishedAt": "2020-12-08T08:04:13Z", "author": "Anton R", "text": "1:48:15 / 5:10:01   hi , first of all thanks for all code it's great !   this is my code in Python \nhttps://codeshare.io/anEpo3\n the memo option not working !!!   any help ? for me its always return None <-> null", "likes": 0}, "replies": [{"id": "UgzUSuC4J5Y0c8whGdB4AaABAg.9H-OFKbFKtq9H-WCHmMmD0", "publishedAt": "2020-12-08T09:13:42Z", "author": "Anton R", "text": "found the problem . tnx :\n\ndef get_options_memo(target: int, arr: list, memo=dict) -> list:\r\n    if target in memo:\r\n        return memo[target]\r\n    elif target == 0:\r\n        return []\r\n    elif target < 0:\r\n        return None\r\n\r\n    for i in arr:\r\n        target_r = target - i\r\n\r\n        option = get_options_memo(target_r, arr, memo)\r\n        if option != None:\r\n            option.append(i)\r\n            memo[target] = option\r\n            return memo[target]\r\n\r\n    memo[target] = None\r\n    return None", "likes": 0}]}, {"topLevelComment": {"id": "UgxXhPMJqOKdIwGTrQJ4AaABAg", "publishedAt": "2020-12-08T05:35:29Z", "author": "In Tom", "text": "High quality lesson \ud83e\udd18", "likes": 0}}, {"topLevelComment": {"id": "Ugx90Yv4hzdHbvYcsYN4AaABAg", "publishedAt": "2020-12-08T05:25:25Z", "author": "Jujujuju Bobokdok", "text": "At 22:00 -> O(lib) should be fastest and O(dib) should be slowest, isn't it??", "likes": 0}}, {"topLevelComment": {"id": "Ugz7QesU11IMj0KAGN14AaABAg", "publishedAt": "2020-12-08T03:33:32Z", "author": "Pajeet Singh", "text": "For anyone looking for C++ version\nhttps://www.youtube.com/watch?v=tKKG_9h2Xrk", "likes": 0}}, {"topLevelComment": {"id": "UgyzUZUIImYqpYI5qaJ4AaABAg", "publishedAt": "2020-12-08T03:31:23Z", "author": "Tejasvi", "text": "BEST VIDEO on YOUTUBE for SURE", "likes": 0}}, {"topLevelComment": {"id": "UgxCwpci2RaUROwDva14AaABAg", "publishedAt": "2020-12-07T23:40:04Z", "author": "S.J A", "text": "time 57:53 ==> actually GridTraveler(m,n)==GridTraveler(n,m) so we can use :  const key=m+n;//sumOfThem   instead using const key=m+','+n;       but good explaining. thank you.", "likes": 0}, "replies": [{"id": "UgxCwpci2RaUROwDva14AaABAg.9GzUYq_6QEX9H58mnHFvXd", "publishedAt": "2020-12-10T13:44:33Z", "author": "S.J A", "text": "@akupython you right .I focused on 3+2==2+3 and totally forget to think about the way you mentioned. thank you.", "likes": 0}, {"id": "UgxCwpci2RaUROwDva14AaABAg.9GzUYq_6QEX9H55UEBitVr", "publishedAt": "2020-12-10T13:15:40Z", "author": "akupython", "text": "I can't work out how m+n would work...\n2+3 = 5.... 3+2 =5 ... ok easy... both are 3 paths.\n4+1 = 5.... but this only has 1 path.\n\n3+3 = 6... 6 paths.\n4+2 = 6... 4 paths.", "likes": 0}]}, {"topLevelComment": {"id": "Ugw5HHbN7eAI2W-kap14AaABAg", "publishedAt": "2020-12-07T22:02:29Z", "author": "Versole", "text": "For canSum Memoization, I have rewritten that Javascript code to java: \n\npublic static boolean canSumMemo(int target, int[] array, Map<Integer, Boolean> memo)\r\n\t{\r\n\t\tif(memo.containsKey(target))\r\n\t\t{\r\n\t\t\treturn memo.get(target);\r\n\t\t}\r\n\t\t\r\n\t\tif (target == 0) return true;\r\n\t\tif (target < 0) return false;\r\n\t\t\r\n\t\tfor (int num : array)\r\n\t\t{\r\n\t\t\tint remainder = target - num;\r\n\t\t\tif (canSumMemo(remainder, array, memo) == true)\r\n\t\t\t\t{\r\n\t\t\t\tmemo.put(target, true);\r\n\t\t\t\treturn true;\r\n\t\t\t\t};\r\n\t\t}\r\n\t\tmemo.put(target, false);\r\n\t\treturn false;\r\n\t}", "likes": 1}}, {"topLevelComment": {"id": "UgzmqtJphL3AkeBmHSR4AaABAg", "publishedAt": "2020-12-07T19:04:07Z", "author": "sourabh yadav", "text": "https://www.youtube.com/watch?v=mP8my7ddZ24&list=PLF83ziD7ADaZFz7vxJ3GG-kGmlVM-pK6q&index=12", "likes": 0}}, {"topLevelComment": {"id": "Ugw_su-KbTCPMOl1E8p4AaABAg", "publishedAt": "2020-12-07T16:20:06Z", "author": "Mark Landgraf", "text": "while(True) {output \"Right?\"}", "likes": 1}}, {"topLevelComment": {"id": "Ugxxm21aSKLjlR5-FSh4AaABAg", "publishedAt": "2020-12-07T15:20:37Z", "author": "Coderbyte", "text": "Hey programmers! Alvin here. Hope that you are finding this course useful. I had a blast making it. Remember to keep drawing diagrams before you write the code, whether it be the tree or the table. For me, once I learned to slow down and  methodically trace things through a sketch, solving DP problems became much more manageable;  dare I say, fun.\n\nCheck out the Coderbyte channel for more data structure and algorithm videos, including a full guide to Big O: https://www.youtube.com/channel/UCOJtQcnBnIy4LERo6vkrItg \n\nPractice what you learned with challenges here: https://coderbyte.com/challenges \n\nIf you'd like to follow me personally, you can find my personal channel here: https://www.youtube.com/channel/UCilIG8V10ZGXaLHxvEa_UfA\n                                                                                                                                                                                                                                                                                   -Alvin", "likes": 2}}, {"topLevelComment": {"id": "UgzTqjJOj5Rv94b83wN4AaABAg", "publishedAt": "2020-12-07T15:11:17Z", "author": "Zihan Bayeed", "text": "Here's to beautiful ways of thinking. Hoping to see this kind of videos in the future. Thanks a lot.", "likes": 1}}, {"topLevelComment": {"id": "Ugzz-U0U6uN8omyskTx4AaABAg", "publishedAt": "2020-12-07T14:34:31Z", "author": "Ankit Rai", "text": "thank you for this video! I'll forever be grateful to you for this.", "likes": 4}}, {"topLevelComment": {"id": "Ugw9rqwNFK7uVDViMRh4AaABAg", "publishedAt": "2020-12-07T14:20:35Z", "author": "santosh joshi", "text": "God bless you guys freeCodeCamp.org", "likes": 0}}, {"topLevelComment": {"id": "UgyK0VJWVU94BtcHYQp4AaABAg", "publishedAt": "2020-12-07T13:45:50Z", "author": "\u77f3\u5f18\u7fca", "text": "HI ,my name is joe I my major is computer science and our course is going to teach this .can you talk about Fully Parenthesized Product\r of Matrices", "likes": 3}}, {"topLevelComment": {"id": "Ugx35a4EoSVZbLY1Hah4AaABAg", "publishedAt": "2020-12-07T13:11:20Z", "author": "Rakib max", "text": "can anyone tell me which editor he is using!", "likes": 0}}, {"topLevelComment": {"id": "UgzIPIBbzdqZDau5QC94AaABAg", "publishedAt": "2020-12-07T12:52:10Z", "author": "Jason Gerstorff", "text": "This is just excellent teaching. Subbed to support the great content.", "likes": 2}}, {"topLevelComment": {"id": "UgzikxmZXXaVpC3CWsR4AaABAg", "publishedAt": "2020-12-07T11:48:19Z", "author": "Lalit Kumar", "text": "The content is awesome, Kudos to Alvin and FCC!\nA query:  at 01:45:00 Alvin computes the complexity of howSum Brute force algo to be O(n^m * m), \nbut we starts returning array from first targetSum = 0 node, there is no array operation before it. Also, no additional tree is explored after 0 node, from there we just keep returning adding an element to the array at each parent node. Since max depth of call tree is m, the cost of copying that array will be : 1 + 2 + 3 + ... m\n=> (m^2 + m) / 2 => O(m^2)\nTime complexity:  O(n^m + m^2)\nCompared to the exponent term, the square term seems insignificant\nTherefore I can simply write - Time: O(n^m)\n\nam  I missing something?", "likes": 0}}, {"topLevelComment": {"id": "UgzbpnKstlwRl56VkRx4AaABAg", "publishedAt": "2020-12-07T07:10:45Z", "author": "abhishek suryavanshi", "text": "Hi Everyone,\r\nCan anyone please help me in finding out the nth term for fibonacci sequence when N is very large in C++\r\nI have tried the below approach,but I'm not able to find exact solution.\r\n\r\n#include <iostream>\nusing namespace std;\r\ntypedef long long int ll;\r\n// Function to compute F raise to power n-2.\r\n\r\nvoid multiply(ll a[3][3], ll b[3][3])\r\n{\r\n// Creating an auxiliary matrix to store elements\r\n// of the multiplication matrix\r\nll mul[3][3];\r\nfor (ll i = 0; i < 3; i++)\r\n{\r\nfor (ll j = 0; j < 3; j++)\r\n{\r\nmul[i][j] = 0;\r\nfor (ll k = 0; k < 3; k++)\r\nmul[i][j] += a[i][k]*b[k][j];\r\n}\r\n}\r\n\r\n// storing the multiplication result in a[][] \r\nfor (ll i=0; i<3; i++) \r\n    for (ll j=0; j<3; j++) \r\n        a[i][j] = mul[i][j];  // Updating our matrix \r\n}\r\nll power(ll F[3][3], ll n)\r\n{\r\nll M[3][3] = {{1,1,1}, {1,0,0}, {0,1,0}};\r\n\r\n// Multiply it with initial values i.e with \r\n// F(0) = 0, F(1) = 1, F(2) = 1 \r\nif (n==1) \r\n    return F[0][0] + F[0][1]; \r\n\r\npower(F, n/2); \r\n\r\nmultiply(F, F); \r\n\r\nif (n%2 != 0) \r\n    multiply(F, M); \r\n\r\n// Multiply it with initial values i.e with \r\n// F(0) = 0, F(1) = 1, F(2) = 1 \r\nreturn F[0][0] + F[0][1] ; \r\n}\r\n\r\n// Return n'th term of a series defined using below\r\n// recurrence relation.\r\n// f(n) is defined as\r\n// f(n) = f(n-1) + f(n-2) + f(n-3), n>=3\r\n// Base Cases :\r\n// f(0) = 0, f(1) = 1, f(2) = 1\r\nll findNthTerm(ll n)\r\n{\r\n\r\nll F[3][3] = {{1,1,1}, {1,0,0}, {0,1,0}} ; \r\n\r\n//Base cases \r\nif(n==0) \r\n    return 0; \r\nif(n==1 || n==2) \r\n    return 1; \r\n\r\nreturn power(F, n-2); \r\n}\r\nint main()\r\n{\r\nll n = 49;\r\n\r\ncout << findNthTerm(n);\r\n\r\nreturn 0;\r\n}\r\n\r\nMy ouptput for N=49->3122171529233\r\n\r\nF40 102334155\r\nF41 165580141\r\nF42 267914296\r\nF43 433494437\r\nF44 701408733\r\nF45 1134903170\r\nF46 1836311903\r\nF47 2971215073\r\nF48 4807526976\r\nF49 7778742049\r\n\r\nThanks", "likes": 0}}, {"topLevelComment": {"id": "UgytAMPSn-7qaDEJbsB4AaABAg", "publishedAt": "2020-12-07T05:47:17Z", "author": "Michael Erwin", "text": "My non recursive solution to fib:\n\nfunction fib(n) {\r\n    let k = [], f = 0;\r\n    for(let i=0; i<=n; i++) {\r\n        if (i < 2) f = i;\r\n        else f = k[i-1] + k[i-2];\r\n        k.push(f);\r\n    }\r\n    return f;\r\n}\r\nconsole.log(fib(6));\r //8\nconsole.log(fib(7));\r //13\nconsole.log(fib(8));\r //21\nconsole.log(fib(50)); //12586269025", "likes": 0}}, {"topLevelComment": {"id": "Ugw_WdZoVJkd8jSJ66t4AaABAg", "publishedAt": "2020-12-07T05:06:09Z", "author": "Coty Hamilton", "text": "In gridTraveler I think you missed sorting m and n before creating the key or comparing to the inverse: (2,3) vs (3,2), it wouldn't change time complexity, but you mentioned earlier how those would produce the same value.", "likes": 1}, "replies": [{"id": "Ugw_WdZoVJkd8jSJ66t4AaABAg.9GxV4Eik_f79GyXaklWZSo", "publishedAt": "2020-12-07T14:47:26Z", "author": "Shreyansh Agarwal", "text": "It will affect in average case complexity. Kindly check https://github.com/shreyansh96/dynamic-programming for my solutions to these problems.", "likes": 0}]}, {"topLevelComment": {"id": "UgyI8PNz9o-SP5yK2Ih4AaABAg", "publishedAt": "2020-12-07T04:47:43Z", "author": "\u4f55\u6cf0\u826f", "text": "What is the vscode theme?", "likes": 1}}, {"topLevelComment": {"id": "UgxwWzSk6P60s0-T17F4AaABAg", "publishedAt": "2020-12-07T04:24:41Z", "author": "bertobertoberto3", "text": "Very high quality, well done!", "likes": 0}}, {"topLevelComment": {"id": "UgwVADJ82LFXljLIVxR4AaABAg", "publishedAt": "2020-12-07T01:52:27Z", "author": "Alejo Rabirog", "text": "Thanks bro. I just feel like I unlocked a new super power :)", "likes": 7}}, {"topLevelComment": {"id": "UgyYZQKz_NIYLzaxoRN4AaABAg", "publishedAt": "2020-12-07T00:32:19Z", "author": "Jeremy Blanchard", "text": "15 min in and I'm feeling like fib(50) right about now.", "likes": 8}}, {"topLevelComment": {"id": "UgxTra_CEQjnyLL8I-F4AaABAg", "publishedAt": "2020-12-06T23:37:59Z", "author": "Yuri Aps", "text": "In 59:24 shouldnt he checks if (m,n) is equal to (n,m)?", "likes": 0}}, {"topLevelComment": {"id": "UgzAJnPivwLaI-qAJs54AaABAg", "publishedAt": "2020-12-06T23:28:09Z", "author": "Yuri Aps", "text": "Thanks so much for this.... in 53:57 shouldnt time complexity be Max(m,n)?", "likes": 4}, "replies": [{"id": "UgzAJnPivwLaI-qAJs54AaABAg.9GwtOf3sfHl9J0BkgW8hrn", "publishedAt": "2021-01-27T08:37:04Z", "author": "Yuri Aps", "text": "@Kyle Uyehara well done man", "likes": 1}, {"id": "UgzAJnPivwLaI-qAJs54AaABAg.9GwtOf3sfHl9HD3IQBcL-O", "publishedAt": "2020-12-13T15:30:30Z", "author": "Ismail Khan", "text": "yea I also got the same idea, because we are decreasing one dimension at a time it should be either 2^m times or 2^n times. Thus for worst case 2^max(m,n)", "likes": 0}]}, {"topLevelComment": {"id": "UgzXc3FzIzx-3nSZNl14AaABAg", "publishedAt": "2020-12-06T22:15:19Z", "author": "Grater", "text": "this tutorial explains the spirit. good one <3", "likes": 0}}, {"topLevelComment": {"id": "UgzzMsvzVFjp76vyC5F4AaABAg", "publishedAt": "2020-12-06T18:49:46Z", "author": "Gaurav Mahajan", "text": "Grid travel problem - memoized space complexity should be O(m*n) . We should consider memo object spaces?", "likes": 0}}, {"topLevelComment": {"id": "UgyKuQ2iw3q0SmcHZGh4AaABAg", "publishedAt": "2020-12-06T18:43:22Z", "author": "James Hines", "text": "This is the first standing ovation I've given to a YouTube video.", "likes": 221}}, {"topLevelComment": {"id": "UgyNjCpc7JZtjYPeJiF4AaABAg", "publishedAt": "2020-12-06T17:48:35Z", "author": "Shreyansh Agarwal", "text": "I have converted the solutions to the problems in Python. Feel free to check - https://github.com/shreyansh96/dynamic-programming and provide feedback.\nPlease like this so that others can also benefit. TIA", "likes": 1}}, {"topLevelComment": {"id": "Ugz-s56-8c3hsxxwoFh4AaABAg", "publishedAt": "2020-12-06T16:00:41Z", "author": "Luke Michals", "text": "Thanks for the great content! \nOut of curiosity, what software do you use to create the visualizations (ex: 33:44)", "likes": 1}, "replies": [{"id": "Ugz-s56-8c3hsxxwoFh4AaABAg.9Gw5BJRUbgu9H8oYDuYukU", "publishedAt": "2020-12-11T23:55:53Z", "author": "Coderbyte", "text": "Hey Luke, thanks for watching. I made the animations with keynote. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgzmviOtZSXczwcNLv14AaABAg", "publishedAt": "2020-12-06T15:42:30Z", "author": "Ariel Volovik", "text": "1:00:00 he didn't check if (1,2) == (2,1), right?", "likes": 0}}, {"topLevelComment": {"id": "UgzfXe8XDcHY3Md1VHB4AaABAg", "publishedAt": "2020-12-06T15:18:46Z", "author": "Sumit Saha", "text": "In the grid traveler problem using memoization, the time and space complexity is both O(N*M). at 1:04:14, the space complexity shows O(N+M). Since the total no. of unique keys in your map is going to be N*M, not N+M. Please correct me if I am wrong. @Coderbyte\nSimilarly due to the memo object, the space complexity increase to O(n*m) for canSum problem as shown at 1:29:26\nAt 4:27:01 you said we need to take the length of the word from the word bank and look ahead but ideally it should have been character by character check, to check if the substring matches then do look ahead else no.", "likes": 0}}, {"topLevelComment": {"id": "UgxxZ3BA6QrxNJciqU94AaABAg", "publishedAt": "2020-12-06T15:13:39Z", "author": "Aditya Tiwari", "text": "Already did those problems using JAVA and trust me you are a saviour!", "likes": 1}, "replies": [{"id": "UgxxZ3BA6QrxNJciqU94AaABAg.9Gw-nqynjGX9IBcu-Otpn4", "publishedAt": "2021-01-06T22:43:15Z", "author": "talhameral", "text": "@C\u00e9sar Soto Valero You are a savior Sir ! Thank you so much", "likes": 0}, {"id": "UgxxZ3BA6QrxNJciqU94AaABAg.9Gw-nqynjGX9I8z-tR69y7", "publishedAt": "2021-01-05T21:58:43Z", "author": "C\u00e9sar Soto Valero", "text": "@talhameral Here are the solutions to all the problems implemented in Java, if you are interested: https://www.cesarsotovalero.net/2020-12-21-dynamic-programming-classics", "likes": 0}, {"id": "UgxxZ3BA6QrxNJciqU94AaABAg.9Gw-nqynjGX9H0jwdbMRYP", "publishedAt": "2020-12-08T20:41:45Z", "author": "talhameral", "text": "Hi , Do you have answer to all problems in Java. For some of them I cant translate JS code into Java. Thanks", "likes": 1}]}, {"topLevelComment": {"id": "UgzeiyMNXOGVarm0RrB4AaABAg", "publishedAt": "2020-12-06T14:21:26Z", "author": "kokoinmars", "text": "Thanks for this video Alvin. In the grid traveler question, you forgot to memoize the n,m scenario.", "likes": 2}}, {"topLevelComment": {"id": "UgxbxK_inQDUedkUFaN4AaABAg", "publishedAt": "2020-12-06T13:57:40Z", "author": "Sravani Katasani", "text": "can anyone explain how we took key value as m+','+n to store in dictionary.", "likes": 1}, "replies": [{"id": "UgxbxK_inQDUedkUFaN4AaABAg.9Gvs6MKm_m49GxnQXibRep", "publishedAt": "2020-12-07T07:55:13Z", "author": "Sravani Katasani", "text": "@Alejo Rabirog Yeah.\nThank you so much \ud83d\ude0a", "likes": 0}, {"id": "UgxbxK_inQDUedkUFaN4AaABAg.9Gvs6MKm_m49Gxg_EEXFuc", "publishedAt": "2020-12-07T06:55:22Z", "author": "Alejo Rabirog", "text": "@Sravani Katasani It seems that both keys are stored anyway. There was not an implementation in the code to reduce the memo to only one key (like the example you gave).\nTherefore there is a key \"16,2\" and a key \"2,16\" stored in memo which has tha same value. Hence there might be an extra step missing in the code to make it even faster.", "likes": 1}, {"id": "UgxbxK_inQDUedkUFaN4AaABAg.9Gvs6MKm_m49GxPMXYO0H8", "publishedAt": "2020-12-07T04:16:13Z", "author": "Sravani Katasani", "text": "@Alejo Rabirog the idea of storing is the we can get both values if one of them is stored.\nis the key=\"2,16\"==\"16,2\"", "likes": 0}, {"id": "UgxbxK_inQDUedkUFaN4AaABAg.9Gvs6MKm_m49GxPF4cYQ4i", "publishedAt": "2020-12-07T04:15:12Z", "author": "Sravani Katasani", "text": "@Alejo Rabirog I am confused about how we  can get 16,2 grid value from 2,16.\nthey are equal ,but how get it from the memo", "likes": 0}, {"id": "UgxbxK_inQDUedkUFaN4AaABAg.9Gvs6MKm_m49GxP6pjZRqa", "publishedAt": "2020-12-07T04:14:04Z", "author": "Sravani Katasani", "text": "@Alejo Rabirog Hey,thank you so much", "likes": 0}]}, {"topLevelComment": {"id": "UgzMbQy-x0qgWjlOGoh4AaABAg", "publishedAt": "2020-12-06T13:10:19Z", "author": "Sebin Mathew", "text": "No book can explain DP this well and believe me I have tried!", "likes": 40}, "replies": [{"id": "UgzMbQy-x0qgWjlOGoh4AaABAg.9GvmgUlEhC19Iip9rU8zfA", "publishedAt": "2021-01-20T05:24:36Z", "author": "Light Theory LLC", "text": "Assalamualaikum brothers and sis, I am seeking Software Engineers, whom can code in Tensor flow and RNN Time series.  I am paying.. I am based in USA.. Please check out https://lighttheory.page/  or email us at info@LightTheory.tech  SALAM", "likes": 0}]}, {"topLevelComment": {"id": "UgxKxPHd-MP3l6YEmKN4AaABAg", "publishedAt": "2020-12-06T12:20:36Z", "author": "Vivek More", "text": "Very good video. In grid traveler though, the key should be created in a way that it's similar for fn(2,3) and fn(3,2)", "likes": 0}}, {"topLevelComment": {"id": "Ugxkw4FNQtrutcs_nWl4AaABAg", "publishedAt": "2020-12-06T12:20:07Z", "author": "Bharath Deva", "text": "Please upload videos with esubs!", "likes": 0}}, {"topLevelComment": {"id": "UgyaTsq5LFqupEZeGfR4AaABAg", "publishedAt": "2020-12-06T11:55:29Z", "author": "Vladimir", "text": "Quality spent time while watching this tutorial, Thank you :D", "likes": 4}}, {"topLevelComment": {"id": "UgyYPEMdr-GVroYzKHB4AaABAg", "publishedAt": "2020-12-06T11:54:30Z", "author": "Rajani Kushwah", "text": "canSum solution is wrong i tried ............code is wrong you can check with canSum(8,[2,4]) .........you forgot to pass updated array  after subtraction", "likes": 0}}, {"topLevelComment": {"id": "UgwbA9vjIY7cH2GUWzV4AaABAg", "publishedAt": "2020-12-06T11:30:12Z", "author": "DeepSpace", "text": "46:00 You don't even need the 0 base-case. It's enough that the left number is 1 then you already know the answer is 1. In other words, if your grid is a \"horizontal line\" there is only one way to get to the end (keep walking right). Similarly, if the right number is 1 then there is only one way to get to the end (keep walking down).", "likes": 0}}, {"topLevelComment": {"id": "UgwS1x_QmHq4A1fawM94AaABAg", "publishedAt": "2020-12-06T11:12:44Z", "author": "SHArK K", "text": "Thanku", "likes": 0}}, {"topLevelComment": {"id": "UgwVkC-GsrprlsgbQkd4AaABAg", "publishedAt": "2020-12-06T10:56:20Z", "author": "Karim Abbassi", "text": "Hi, I am trying to translate the bestsSum memoization algorithm from js to cpp but i am not able to do it. Can anybody help me?\nEdit: Solved", "likes": 4}, "replies": [{"id": "UgwVkC-GsrprlsgbQkd4AaABAg.9GvYMDO8UC29HT2lBh0ELX", "publishedAt": "2020-12-19T20:33:41Z", "author": "Endrit Hasani", "text": "@Burhanuddin Merchant\u00a0 Thank you so much!\ud83d\udc4d", "likes": 0}, {"id": "UgwVkC-GsrprlsgbQkd4AaABAg.9GvYMDO8UC29H-evOaAcN2", "publishedAt": "2020-12-08T10:38:39Z", "author": "Burhanuddin Merchant", "text": "I'm having some trouble translating the howSum into cpp ,can you help me out? Here is my code :         \n\n \u00a0\n#include<iostream>\n\u00a0#include<vector>\n\u00a0#include<map>\nusing\u00a0namespace\u00a0std;\n\nmap<long\u00a0long,\u00a0vector<long\u00a0long>>\u00a0memo;\nvoid\u00a0initialize_memo(long\u00a0long\u00a0m)\n{\n\u00a0\u00a0\u00a0\u00a0for\u00a0(long\u00a0long\u00a0i\u00a0=\u00a00;\u00a0i\u00a0<\u00a0m;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector<long\u00a0long>\u00a0v;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memo.insert({i+1,v});\n\u00a0\u00a0\u00a0\u00a0}\n}\n\nvector<long\u00a0long>\u00a0howSum(long\u00a0long\u00a0n,long\u00a0long\u00a0*arr,long\u00a0long\u00a0m){\n\u00a0\u00a0\u00a0\u00a0if(memo[n].size()!=0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0memo[n];\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if(n==0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector<long\u00a0long>\u00a0res;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.push_back(0);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0res;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0if(n<0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector<long\u00a0long>\u00a0res;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.push_back(-1);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0res;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0for\u00a0(long\u00a0long\u00a0i\u00a0=\u00a00;\u00a0i\u00a0<\u00a0m;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0long\u00a0long\u00a0remainder\u00a0=\u00a0n\u00a0-\u00a0arr[i]\u00a0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0vector<long\u00a0long>\u00a0remainderRes\u00a0=\u00a0howSum(remainder,arr,m);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(remainderRes[0]==0){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0remainderRes.push_back(arr[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0memo[n]\u00a0=\u00a0remainderRes;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\u00a0memo[n];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0vector<long\u00a0long>\u00a0res;\n\u00a0\u00a0\u00a0\u00a0res.push_back(-1);\n\u00a0\u00a0\u00a0\u00a0memo[n]\u00a0=\u00a0res;\n\u00a0\u00a0\u00a0\u00a0return\u00a0memo[n];\n}\nint\u00a0main(){\n\u00a0\u00a0\u00a0\u00a0const\u00a0long\u00a0long\u00a0n\u00a0=\u00a02;\n\u00a0\u00a0\u00a0\u00a0const\u00a0long\u00a0long\u00a0m\u00a0=300;\n\u00a0\u00a0\u00a0\u00a0long\u00a0long\u00a0a[n]\u00a0=\u00a0{7,14};\n\u00a0\u00a0\u00a0\u00a0initialize_memo(m);\n\u00a0\u00a0\u00a0\u00a0vector<long\u00a0long>\u00a0res\u00a0=\u00a0howSum(m,\u00a0a,\u00a0n);\n\u00a0\u00a0\u00a0\u00a0if(res[0]==-1){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout\u00a0<<\u00a0\"No\u00a0possible\u00a0Solution!!\\n\";\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0else{\n\u00a0\u00a0\u00a0\u00a0long\u00a0long\u00a0size\u00a0=\u00a0(long\u00a0long)\u00a0res.size();\n\u00a0\u00a0\u00a0\u00a0cout\u00a0<<\u00a0\"Result\u00a0:\u00a0\";\n\u00a0\u00a0\u00a0\u00a0for\u00a0(long\u00a0long\u00a0i\u00a0=\u00a01;\u00a0i\u00a0<\u00a0size;i++){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cout\u00a0<<\u00a0res[i]<<\"\u00a0\"\u00a0;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0return\u00a00;\n}\n\n\n\r\nThankyou so much in advance!\nEdit : Solved, the code above is the corrected one.", "likes": 2}]}, {"topLevelComment": {"id": "Ugy5Vu1n_u8aUSyKi9h4AaABAg", "publishedAt": "2020-12-06T10:53:15Z", "author": "Sriram Kailasam", "text": "This is absolutely fantastic content!", "likes": 0}}, {"topLevelComment": {"id": "Ugye4iIVubtqSm6aJZx4AaABAg", "publishedAt": "2020-12-06T10:43:56Z", "author": "Vatsala Javaraiah", "text": "Thank you. Please do videos  on the greedy  method and divide and conquer as well", "likes": 0}}, {"topLevelComment": {"id": "Ugx6AgphCgZc10dwCPN4AaABAg", "publishedAt": "2020-12-06T09:54:06Z", "author": "Kamal Kamal Azmi", "text": "Definitely one of the best instructors I've ever known. Thank you sir", "likes": 16}}, {"topLevelComment": {"id": "Ugyfq3HXtIqQzPocnVl4AaABAg", "publishedAt": "2020-12-06T09:47:12Z", "author": "LeetCode Simplified", "text": "Had I searched for \"dynamic programming\" two days earlier, this video wouldn't even have been uploaded to youtube. The timing couldn't be better!", "likes": 19}}, {"topLevelComment": {"id": "UgwFKThgNcXPQ0tKizl4AaABAg", "publishedAt": "2020-12-06T08:24:33Z", "author": "PK CC", "text": "This is the best DP course I ever seen on youtube.", "likes": 0}}, {"topLevelComment": {"id": "UgzgYlxKxFY9WaDMmeF4AaABAg", "publishedAt": "2020-12-06T08:03:15Z", "author": "Rahul Goswami", "text": "Undoubtedly one of the best learning video on DP problems. If possible please post a video on Knapsack problems too.", "likes": 0}}, {"topLevelComment": {"id": "UgwUAUATbCrgmwOzN0N4AaABAg", "publishedAt": "2020-12-06T07:40:13Z", "author": "Dev Simplified", "text": "54:00 how is the height n+m , if we add 2+3 = 5 but the height is only 4, can someone explain please?", "likes": 0}, "replies": [{"id": "UgwUAUATbCrgmwOzN0N4AaABAg.9GvBupbkpp79H-BhAHZGnl", "publishedAt": "2020-12-08T06:14:33Z", "author": "Dev Simplified", "text": "@NS got it thanks", "likes": 0}, {"id": "UgwUAUATbCrgmwOzN0N4AaABAg.9GvBupbkpp79H-8UO-UKxO", "publishedAt": "2020-12-08T05:46:28Z", "author": "NS", "text": "Height of a tree = no of nodes + 1.", "likes": 1}, {"id": "UgwUAUATbCrgmwOzN0N4AaABAg.9GvBupbkpp79H-7DojKM2o", "publishedAt": "2020-12-08T05:35:28Z", "author": "Dev Simplified", "text": "@NS but if you see the highlighted path , it  has 4 nodes only. So even if start from 0 then it would be 0,1,2,3, but as he said m+n , then 2+3  is not equal to 4", "likes": 0}, {"id": "UgwUAUATbCrgmwOzN0N4AaABAg.9GvBupbkpp79Gzk8sV3b5L", "publishedAt": "2020-12-08T02:05:04Z", "author": "NS", "text": "0-4 counting for height starts from 0", "likes": 0}]}, {"topLevelComment": {"id": "UgxsC8y6oDRGaMuUpY94AaABAg", "publishedAt": "2020-12-06T07:29:17Z", "author": "amit patel", "text": "Awesome stuff.", "likes": 0}}, {"topLevelComment": {"id": "Ugwz-LZ3sgDObMNbfWl4AaABAg", "publishedAt": "2020-12-06T03:20:39Z", "author": "Jim Shtepa", "text": "53:07 n+m results in 5 not in 4, am I missing something? in other words height of the tree is 4 (i.e. 4 levels of nodes) not 5 while n+m is 5 not 4. could someone please help to clarify this point? In general the course is great, instructor is doing phenomenal job in explaining such difficult areas in programming. freecodecamp team, thank you for making this course available for free!", "likes": 1}, "replies": [{"id": "Ugwz-LZ3sgDObMNbfWl4AaABAg.9GujCfbwJ349Hd0ZkgwYkQ", "publishedAt": "2020-12-24T02:46:09Z", "author": "Jim Shtepa", "text": "@Spirolli thank you for detailed answer", "likes": 0}, {"id": "Ugwz-LZ3sgDObMNbfWl4AaABAg.9GujCfbwJ349HcFcfO2DyU", "publishedAt": "2020-12-23T19:38:31Z", "author": "Spirolli", "text": "Technically, the height of the tree is only 3.  The counting of the height of a tree starts at level 0.  The height usually represents the *depth* that you are going 'down' the tree (or 'up', depending on how you want to visually represent the tree); so, technically the branch section is where you actually count the 'levels'.  The height, starting from a 0 counter, helps you to determine the maximal number of nodes that exist at a given 'depth' of a tree given the max branches, *n* , and the depth, *m* .\n\nSo, in the case of your initial question, the technical answer is 3.    The reason being is that, even though the values of the gridTraveler are 2 and 3, we have defined the end point, or desired point to be (1,1), because (0,0), (1,0) and (0,1) represent an abstractly impossible grid (i.e. we can't have a grid of 0 rows or 0 columns).  So the technical equation would be ( m - _m0_ ) + ( n - _n0_ ) ( with _m0_ and _n0_ representing our desired end point).  So, plugging in, we would get (2 - 1) + (3 - 1) = 1 + 2 = 3.  If we defined our endpoint at (0,0) instead, the tree he plotted out would have to go down *2* more levels in order to complete, and we would have 5 for m + n, because _m0_ and _n0_ would be both zero in the equation I used above.\n\nThe reason that he left it *m + n* is because big-O notation is usually concerned with general equations that give a reasonable ballpark for the time complexity of the algorithm, usually tending toward non-optimal/non-favorable conditions for the completion of the algorithm.  Making our endpoint (1,1), rather than (0,0) shaves off very little in the grand scheme of things, especially for large grids, and *n+m* is close enough.", "likes": 1}]}, {"topLevelComment": {"id": "UgwjxBEIYJxLZCFxehF4AaABAg", "publishedAt": "2020-12-06T00:37:47Z", "author": "Mart\u00edn D\u00edaz", "text": "Hi! Any chance of captions/subtitles for the future? Even the automatic ones help :)", "likes": 0}}, {"topLevelComment": {"id": "UgyfOhutunk8fCjF0Cx4AaABAg", "publishedAt": "2020-12-05T23:15:08Z", "author": "Wanderlust073", "text": "Anyone know what app he is using to draw tree structures?", "likes": 0}}, {"topLevelComment": {"id": "Ugxk7kzW-0zOnGvHcpJ4AaABAg", "publishedAt": "2020-12-05T22:56:06Z", "author": "B D", "text": "The best explaination and diagrams EVER. thank you!", "likes": 7}, "replies": [{"id": "Ugxk7kzW-0zOnGvHcpJ4AaABAg.9GuFw24tu0u9H8oTOT0lAH", "publishedAt": "2020-12-11T23:55:14Z", "author": "Coderbyte", "text": "glad to hear that you enjoyed the content! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugy7coBGUMrgIsGoBUZ4AaABAg", "publishedAt": "2020-12-05T22:12:05Z", "author": "Yichi Zhang", "text": "Great course!", "likes": 0}}, {"topLevelComment": {"id": "UgxjGXadyYQkI6Zcojd4AaABAg", "publishedAt": "2020-12-05T21:41:04Z", "author": "matt unlu", "text": "https://www.coderbyte.com/  does work! please update the link at description", "likes": 0}}, {"topLevelComment": {"id": "UgzwQ1N-u8Qz52Hb9EV4AaABAg", "publishedAt": "2020-12-05T21:30:47Z", "author": "srinath dv", "text": "A very good teacher, thanks!", "likes": 0}}, {"topLevelComment": {"id": "UgxPlLMpV_SLR90FMLp4AaABAg", "publishedAt": "2020-12-05T21:23:10Z", "author": "Artur Paredes", "text": "On the canSum memoization, if you put a 0 in the beggining of the array it will create the stackOverflow error, don\u00b4t forget to add that condition to your code! And the video is awesome thank you!!!", "likes": 0}}, {"topLevelComment": {"id": "UgxlF5yLTX1RUo28HHR4AaABAg", "publishedAt": "2020-12-05T20:59:58Z", "author": "Ian", "text": "shouldnt it be O(n) space complexitiy at 1:28:57?", "likes": 0}}, {"topLevelComment": {"id": "UgwW9zwO_-gtmLzzv1h4AaABAg", "publishedAt": "2020-12-05T20:57:01Z", "author": "sa sd", "text": "The space complexity for dynamic grid traveller solution should be O(n*m) because that's what would be in memo, the stack size O(n+m) will be less, right?", "likes": 1}}, {"topLevelComment": {"id": "UgzCW_aVgdxEE-IvBMt4AaABAg", "publishedAt": "2020-12-05T20:56:36Z", "author": "MegaZaki777", "text": "What type of software you're using to make theses animations ??", "likes": 1}}, {"topLevelComment": {"id": "Ugyk3KuhXYUmxVofBbZ4AaABAg", "publishedAt": "2020-12-05T20:24:09Z", "author": "Against NAZO!", "text": "So, let's solve the Hanoi-Tower! ^^", "likes": 1}}, {"topLevelComment": {"id": "Ugz_H2doOSBRuY00UTZ4AaABAg", "publishedAt": "2020-12-05T20:22:11Z", "author": "Mark Pascual", "text": "don't look before you leap just let recursion do it's thing :D", "likes": 5}}, {"topLevelComment": {"id": "UgzGRJbJ3eNCmaa3c-F4AaABAg", "publishedAt": "2020-12-05T20:19:51Z", "author": "Akash g krishnan", "text": "Thanks Alvin.. such high quality content for free is truely a blessing. Thanks for making this v\u00ecdeo.. grateful to stumble herre", "likes": 0}, "replies": [{"id": "UgzGRJbJ3eNCmaa3c-F4AaABAg.9Gtz2bgwW7L9GuDohZZKYr", "publishedAt": "2020-12-05T22:37:37Z", "author": "Coderbyte", "text": "Glad to hear that you found it useful! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgxdiS2viz9tHxxFTUB4AaABAg", "publishedAt": "2020-12-05T20:03:27Z", "author": "koomooboo", "text": "I don't understand why console.log(canSum(7, [2, 3]))  = true???", "likes": 1}, "replies": [{"id": "UgxdiS2viz9tHxxFTUB4AaABAg.9GtxAZ-lG_A9H7FqW68QCf", "publishedAt": "2020-12-11T09:24:42Z", "author": "Wei Ping Goh", "text": "2+2+3=7 therefore can sum", "likes": 1}, {"id": "UgxdiS2viz9tHxxFTUB4AaABAg.9GtxAZ-lG_A9GysDHa7377", "publishedAt": "2020-12-07T17:56:20Z", "author": "Varun Gupta", "text": "i too need help in understanding the same", "likes": 0}]}, {"topLevelComment": {"id": "UgyaxtZUodNc7_gFfht4AaABAg", "publishedAt": "2020-12-05T19:54:36Z", "author": "Aeg", "text": "A very small little teacher in one corner", "likes": 0}}, {"topLevelComment": {"id": "UgyRBRx5m3JwddF0HYd4AaABAg", "publishedAt": "2020-12-05T19:49:21Z", "author": "Joseph Little", "text": "watched many dynamic programming videos and haven't been able to wrap my head around it.  This is after doing multiple toy problems (fib, climbing stairs, knap sack) and still not getting it.  This video has helped me understand so much.  The mix of in depth verbal instruction and drawn out graphics is perfect.", "likes": 0}}, {"topLevelComment": {"id": "UgyKCPok_xiqPRmYa3p4AaABAg", "publishedAt": "2020-12-05T19:19:36Z", "author": "Stephen James", "text": "the default memo object for fib could be {'1': 1, '2': 1}", "likes": 17}, "replies": [{"id": "UgyKCPok_xiqPRmYa3p4AaABAg.9Gts9MGLqA99HF-Nmrxjjf", "publishedAt": "2020-12-14T09:34:46Z", "author": "Michael John Baco", "text": "yes but he just make the solution more save time", "likes": 0}, {"id": "UgyKCPok_xiqPRmYa3p4AaABAg.9Gts9MGLqA99H0HWbCMQk2", "publishedAt": "2020-12-08T16:24:39Z", "author": "Stephen James", "text": "@hardXcoreminecraft No, but would make the function slightly simpler", "likes": 1}, {"id": "UgyKCPok_xiqPRmYa3p4AaABAg.9Gts9MGLqA99H0HJkWXB4d", "publishedAt": "2020-12-08T16:22:53Z", "author": "hardXcoreminecraft", "text": "that wouldn't change the time complexity", "likes": 0}]}, {"topLevelComment": {"id": "UgyD0r1X1yOEiLmBTgh4AaABAg", "publishedAt": "2020-12-05T18:34:13Z", "author": "Anon Ymous", "text": "This is very good, but why not memoize the false values in the canSum,bestSum etc?", "likes": 0}}, {"topLevelComment": {"id": "UgxTAzKUddI9T88R5sN4AaABAg", "publishedAt": "2020-12-05T18:22:48Z", "author": "Abhinav Mishra", "text": "What a blessing", "likes": 0}}, {"topLevelComment": {"id": "UgzIWQizl9rM4oIMxjN4AaABAg", "publishedAt": "2020-12-05T17:38:45Z", "author": "Ivan", "text": "How is space complexity staying the same when you literally have to use additional memory for memoization?", "likes": 2}, "replies": [{"id": "UgzIWQizl9rM4oIMxjN4AaABAg.9GtgbhVp_f39Gx9WSqEfiB", "publishedAt": "2020-12-07T01:57:46Z", "author": "Alejo Rabirog", "text": "With the memo you are actually reducing the tree branches by a lot.", "likes": 0}, {"id": "UgzIWQizl9rM4oIMxjN4AaABAg.9GtgbhVp_f39GuDb8pI9gZ", "publishedAt": "2020-12-05T22:35:46Z", "author": "Coderbyte", "text": "Big O complexities are simplified by dropping any constant factors. For example O(7*n) = O(n). Take our brute force fib, it used O(n) space from the call stack. When we memoize fib, the additional memo object will store roughly n keys; if we add the O(n) from the call stack and O(n) from the memo, we get O(2*n). Simplifying gives O(n). Hope that clarifies. - Alvin", "likes": 5}, {"id": "UgzIWQizl9rM4oIMxjN4AaABAg.9GtgbhVp_f39GuAK7ZyMrR", "publishedAt": "2020-12-05T22:07:06Z", "author": "Reussunased", "text": "I think it is because after the function returns, the memo object created in the function is destroyed ; so even if at each recursive call a memo object is created, actually there's just 1 unique memo object effectively created in memory, while the other ones are destroyed.\nExcuse me if my explanations arent good  x)", "likes": 1}]}, {"topLevelComment": {"id": "UgwVuiKr3U2fBReQcGV4AaABAg", "publishedAt": "2020-12-05T17:34:45Z", "author": "Romano Adler", "text": "This one of the best courses I have seen about DP.", "likes": 0}, "replies": [{"id": "UgwVuiKr3U2fBReQcGV4AaABAg.9Gtg9P_krgc9GuDfunyaOK", "publishedAt": "2020-12-05T22:36:25Z", "author": "Coderbyte", "text": "Stoked that you enjoyed it! -Alvin", "likes": 3}]}, {"topLevelComment": {"id": "UgzcThA6ALJXyYOfZet4AaABAg", "publishedAt": "2020-12-05T17:23:34Z", "author": "T\u1ea5n Ho\u00e0ng Tr\u1ecdng", "text": "I need sub huh:((((", "likes": 0}}, {"topLevelComment": {"id": "UgyEj5Hf6jWD5jtAxXR4AaABAg", "publishedAt": "2020-12-05T17:10:31Z", "author": "peter barter", "text": "Tomorrow masterclass by interview bit link\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=66015e572a1a", "likes": 0}}, {"topLevelComment": {"id": "Ugxzjay7qzJk-GbdWfh4AaABAg", "publishedAt": "2020-12-05T16:53:15Z", "author": "Yann Hamonou", "text": "can I ask about the first example with a fib function?\nIn python, you do not need to return the memo with the recursive function as it is appended independently after the first call.\nIs it semantics or am I being silly? (noob here)\nThanks", "likes": 0}}, {"topLevelComment": {"id": "Ugxdb5Tal5iXDwtXB1F4AaABAg", "publishedAt": "2020-12-05T16:15:28Z", "author": "Norberto C\u00e1ceres", "text": "Alvin is a scholar and a gentleman", "likes": 0}}, {"topLevelComment": {"id": "UgyXwZ2acxT2oJ72Q_N4AaABAg", "publishedAt": "2020-12-05T16:09:17Z", "author": "Zac Ball", "text": "The content is so good I was actually able to push through the 10 bergillion Right. Right. Right. Right. Right. Right. Right. Right. Right. Right? Right. Right. Right. Right. Right. Right. Right. Right? Right. Right Right. Right? Right. Right?", "likes": 1}}, {"topLevelComment": {"id": "UgwSfl_Uv1fQaDF7cJx4AaABAg", "publishedAt": "2020-12-05T15:47:45Z", "author": "Jay Punekar", "text": "Awesome Explanation! Keep it up!", "likes": 0}}, {"topLevelComment": {"id": "Ugz0KfioxGz7tQT8jtN4AaABAg", "publishedAt": "2020-12-05T15:40:22Z", "author": "Anjum Latif", "text": "Thank you for Quality contents.", "likes": 0}}, {"topLevelComment": {"id": "UgwK1CCBuq7xzoHON-x4AaABAg", "publishedAt": "2020-12-05T15:28:42Z", "author": "Duy Tran", "text": "This is gold mine", "likes": 0}}, {"topLevelComment": {"id": "Ugxo6z10MqVfewaiQVh4AaABAg", "publishedAt": "2020-12-05T14:22:45Z", "author": "PANKAJ KUMAR", "text": "That's being sad....HAHAHA", "likes": 0}}, {"topLevelComment": {"id": "UgwelqL9l-uETBzagR14AaABAg", "publishedAt": "2020-12-05T14:19:17Z", "author": "Faheem Ahmad Official", "text": "please do this in FLUTTER or DART and C# too", "likes": 0}, "replies": [{"id": "UgwelqL9l-uETBzagR14AaABAg.9GtKmoBRmOe9OHrn4FZhlh", "publishedAt": "2021-06-07T11:57:12Z", "author": "Juha Kaarlas", "text": "It seems YT does not let me post links. I have added a GitHub link to C# implementations and unit tests on my About Page.", "likes": 0}, {"id": "UgwelqL9l-uETBzagR14AaABAg.9GtKmoBRmOe9OHrMsvlWw1", "publishedAt": "2021-06-07T11:53:29Z", "author": "Juha Kaarlas", "text": "C# here (work in progress but all implemented problems have matching unit tests): https://github.com/juhakaarlas/DotnetDynamicProgramming/tree/main/", "likes": 0}]}, {"topLevelComment": {"id": "Ugz6NH6KX9HjthtjE6R4AaABAg", "publishedAt": "2020-12-05T13:57:10Z", "author": "Praveen Upadhyay", "text": "the fact that he is using js for dynamic programming is unique", "likes": 0}, "replies": [{"id": "Ugz6NH6KX9HjthtjE6R4AaABAg.9GtIFpc1wRt9GtN-e41HWq", "publishedAt": "2020-12-05T14:38:39Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgzqSx6cZdGBg9DuaNR4AaABAg", "publishedAt": "2020-12-05T13:31:19Z", "author": "Ariel Papuga", "text": "I have a question about simplification at 20:55. Correct me if im wrong but for me 2^n = 2^(n/2) * 2^(n/2) so how can O(2^(n/2)) equals to O(2^n) ??", "likes": 0}, "replies": [{"id": "UgzqSx6cZdGBg9DuaNR4AaABAg.9GtFIP2TgC79HfVIfC-dxN", "publishedAt": "2020-12-25T01:53:11Z", "author": "huizhe zhang", "text": "I think he is wrong. You cannot take out the constant in the exponent. 2^(n/2) = (sqrt 2) ^n. Power with different base belongs to a different complexity class.", "likes": 0}]}, {"topLevelComment": {"id": "UgwfZnvQECN1FCyQzTV4AaABAg", "publishedAt": "2020-12-05T13:18:14Z", "author": "Aar\u00f3n Argotte L\u00f3pez", "text": "<3", "likes": 0}}, {"topLevelComment": {"id": "UgzwCMWRTJrCoHX4yA54AaABAg", "publishedAt": "2020-12-05T12:53:11Z", "author": "hitansh jain", "text": "Very good explanation .your channel is providing good videos for free. Even some paid courses cant explain this good", "likes": 0}}, {"topLevelComment": {"id": "UgyL--x9JOHHK133fud4AaABAg", "publishedAt": "2020-12-05T12:52:54Z", "author": "Karthikeswar Saravanan", "text": "I believe we can just use howSum solution even for the bestsum just by sorting the input numbers in descending order", "likes": 0}, "replies": [{"id": "UgyL--x9JOHHK133fud4AaABAg.9GtAu3rrcfP9GtOvCVWbZe", "publishedAt": "2020-12-05T14:55:23Z", "author": "Coderbyte", "text": "Not quite. Depending on the values in this array, that strategy may not lead to the best sum. For example, what if I wanted to generate 8 using elements [5, 4, 1]? The answer is [4,4] and not [5,1,1,1]. This problem cannot be solved greedily, meaning that a locally optimal choice (reducing the sum the most now) does not lead to the globally optimal solution (using the least numbers in the long term). Hope that helps. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugx-u7Hlt9rf1C15WL94AaABAg", "publishedAt": "2020-12-05T11:27:56Z", "author": "Taha Ahmed", "text": "I am here to ask one thing I am practicing programming with javascript for past 2 months i want to ask that  some of my mentors says don't see the solution and don't see videos to solve programming problem do on your own if you want to be a programmer  so i am sure here are some good programmer who can tell me what should i do i am not good at probloem solving on my own i look at solution then try to come up with my own solution and tried to see whats happening in program am i on a correct path", "likes": 0}}, {"topLevelComment": {"id": "Ugzga2G8k6daWTVIxgJ4AaABAg", "publishedAt": "2020-12-05T08:58:40Z", "author": "Anas Adeel Allawala", "text": "This teacher is by far my favourite and helped my understand dynamic programming through quality visuals and explanations", "likes": 0}, "replies": [{"id": "Ugzga2G8k6daWTVIxgJ4AaABAg.9Gsl5R0fhPO9GtNJ-BOTWE", "publishedAt": "2020-12-05T14:41:18Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwUkR_-Ll6fCKTtB0N4AaABAg", "publishedAt": "2020-12-05T08:15:28Z", "author": "Ranajoy Saha", "text": "I just had a suggestion for gridTravelar() with and without using memoization. We know that if the grid size is 1x2 (1 row and 2 cols ) if we take just 1 step right, we can reach the goal. Similarly for a grid size of 2x1 (2 rows and 1 col), if we take just 1 step down, we can reach the goal. So, wouldn't it be better if we added gridTravelar(1,2) and gridTravelar(2,1) as a base case too, which returns the value of 1, which would cut down on many recursive function calls as well as memo / array accesses?", "likes": 0}, "replies": [{"id": "UgwUkR_-Ll6fCKTtB0N4AaABAg.9Gsg91Y4jAQ9GtlwwvFZrM", "publishedAt": "2020-12-05T18:25:20Z", "author": "Ranajoy Saha", "text": "@Coderbyte Okay, okay understood. Thank you very much for replying!", "likes": 0}, {"id": "UgwUkR_-Ll6fCKTtB0N4AaABAg.9Gsg91Y4jAQ9GtQpSDCeli", "publishedAt": "2020-12-05T15:12:05Z", "author": "Coderbyte", "text": "You could indeed do that like I mention in the sketch for gridTraveler. However,  I don't believe it affects the big o complexity since doing so would only affect it by some factor of 1/2. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgxynsNxBgbtrM-0UEZ4AaABAg", "publishedAt": "2020-12-05T07:21:13Z", "author": "Power Man", "text": "Any one implementing in python, please share the code for bestsum", "likes": 0}, "replies": [{"id": "UgxynsNxBgbtrM-0UEZ4AaABAg.9Gs_wjjse079GtNU6J_KUk", "publishedAt": "2020-12-05T14:42:49Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgxMQX6Bunb-7tr2quh4AaABAg", "publishedAt": "2020-12-05T06:18:03Z", "author": "Nabeel Hasan", "text": "freecodecamp is the biggest gift ever send by God, We love U", "likes": 4}, "replies": [{"id": "UgxMQX6Bunb-7tr2quh4AaABAg.9GsTi9fsYj09H0q5KBMgAo", "publishedAt": "2020-12-08T21:35:30Z", "author": "Asanda", "text": "It's made by very impressive people not God.", "likes": 0}]}, {"topLevelComment": {"id": "Ugw8t1n6nT2KW1_Lb6V4AaABAg", "publishedAt": "2020-12-05T05:47:43Z", "author": "\u1036 \u1036", "text": "Nice", "likes": 0}}, {"topLevelComment": {"id": "UgwvnhcrIeWWYKyAoTx4AaABAg", "publishedAt": "2020-12-05T05:18:10Z", "author": "Glenn", "text": "what language is this in? I understand it but don't recognize where", "likes": 0}, "replies": [{"id": "UgwvnhcrIeWWYKyAoTx4AaABAg.9GsMrVL9pws9GsZGKAYFBO", "publishedAt": "2020-12-05T07:06:33Z", "author": "Glenn", "text": "@Ankit Shaw thanks, I learned js way back 5 years ago, and that's why I felt like I recognized it from somewhere", "likes": 0}, {"id": "UgwvnhcrIeWWYKyAoTx4AaABAg.9GsMrVL9pws9GsRR2yWj_E", "publishedAt": "2020-12-05T05:58:06Z", "author": "Ankit Shaw", "text": "js", "likes": 1}]}, {"topLevelComment": {"id": "UgzEowW-YA-wBt2CoHZ4AaABAg", "publishedAt": "2020-12-05T04:30:10Z", "author": "desmon destroy", "text": "please speech in french", "likes": 0}}, {"topLevelComment": {"id": "Ugw2yMQr8ElmbOu4M694AaABAg", "publishedAt": "2020-12-05T03:33:26Z", "author": "Keng Th\u1ebf", "text": "Amazing, good job man!", "likes": 0}}, {"topLevelComment": {"id": "UgxXPlaf2moyCR1v1DR4AaABAg", "publishedAt": "2020-12-05T03:27:16Z", "author": "Mike Mack", "text": "Let us all win this race of knowledge to foster free educational like this tutor and create a world with less misconceptions.", "likes": 0}, "replies": [{"id": "UgxXPlaf2moyCR1v1DR4AaABAg.9GsAAEFt3gf9GtNaudqagx", "publishedAt": "2020-12-05T14:43:53Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgzfwKAESA8IUcDlVkF4AaABAg", "publishedAt": "2020-12-05T03:19:07Z", "author": "Venkatesh27", "text": "Thank you for doing this in JavaScript, because there is no such  course like this, more video please", "likes": 1}, "replies": [{"id": "UgzfwKAESA8IUcDlVkF4AaABAg.9Gs9Eb8uvC99GtNQwAZ6yU", "publishedAt": "2020-12-05T14:42:23Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "Ugz3S4OauebhX6zGU354AaABAg", "publishedAt": "2020-12-05T03:10:26Z", "author": "\u89c1\u518d", "text": "memorization mispelling", "likes": 0}, "replies": [{"id": "Ugz3S4OauebhX6zGU354AaABAg.9Gs8EwfKgpU9H2b4ZAFFTf", "publishedAt": "2020-12-09T14:02:48Z", "author": "Srujan Bharadwaj", "text": "It's not memorization. A simple google search will give you the answer..", "likes": 0}]}, {"topLevelComment": {"id": "UgwZ8ILJiLMUWUL7j_t4AaABAg", "publishedAt": "2020-12-05T01:52:21Z", "author": "Erik Awwad", "text": "Hey thank you so much, this really helped me get past dynamic programming.", "likes": 2}, "replies": [{"id": "UgwZ8ILJiLMUWUL7j_t4AaABAg.9Gs-J4VCt129GtN9FlNrVr", "publishedAt": "2020-12-05T14:39:58Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgyxuAh0Q51BwuYgp6B4AaABAg", "publishedAt": "2020-12-05T01:14:07Z", "author": "Georgi U", "text": "Wow! This should have been one of those boring academic classes, but I just can't stop watching. It gets to show how important a teacher is.", "likes": 1}, "replies": [{"id": "UgyxuAh0Q51BwuYgp6B4AaABAg.9Grvw-G_Baq9GtNJz_yNpz", "publishedAt": "2020-12-05T14:41:26Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgzcACt07cbxS7qcLsN4AaABAg", "publishedAt": "2020-12-05T01:10:14Z", "author": "ilas Ilas", "text": "Hi why is 38:26 not 2n-1? thanks", "likes": 1}}, {"topLevelComment": {"id": "UgwOaL6enb71tbodDIt4AaABAg", "publishedAt": "2020-12-05T01:05:18Z", "author": "Jack Windensky", "text": "I don't understand how you dervied \"m * n possible combinations\" at 1:03:43. I feel like most of the following problems use that same idea to analyze the time complexity when optimized with memoization. Also at 2:38:01, ignoring the m caused by iterating the string, it was optimized from O(n^m) -> O(n*m)  yet again.", "likes": 0}, "replies": [{"id": "UgwOaL6enb71tbodDIt4AaABAg.9GruvVl2aOw9Gx7uj6u5NG", "publishedAt": "2020-12-07T01:43:44Z", "author": "Jack Windensky", "text": "@Coderbyte The part that was tripping me up was that some things would be double counted. For example: n=3, m=4\r\n\r\n[1,1]\r\n[1,2]\r\n[1,3]\r\n[1,4]\r\n[2,1]\r\n[2,2]\r\n*[2,3]*\r\n[2,4]\r\n[3,1]\r\n*[3,2]*\r\n[3,3]\r\n[3,4]\r\n\r\nThe nodes [2,3] and [3,2] show up twice even though they should only be counted once (because gridTrveler(2,3) == gridTrveler(3,2)) meaning it would be less than O(n*m).\r\nBut now I'm remembering that O(n*m) is still a valid answer because you can think of it as an upper-bound even though for almost all inputs it would be less than that. (At least that's how I'm understanding it).\r\n\r\nP.S. This video is really helpful and thanks for taking the time to reply!", "likes": 0}, {"id": "UgwOaL6enb71tbodDIt4AaABAg.9GruvVl2aOw9GtQNHbuB-K", "publishedAt": "2020-12-05T15:08:06Z", "author": "Coderbyte", "text": "Hey Jack let me try to clarify - Here I am referring to the number of different ways we could call gridTraveler(m,n). By using memoization, we are storing every unique pair of arguments as keys in the object. For example, let's say that I had 2 options for m (call them a, b), and 3 options for n (call them 1,2,3). All combinations of these [m,n] are:\n\n[a,1]\n[a,2]\n[a,3]\n[b,1]\n[b,2]\n[b,3]\n\nA total of 6 unique pairs (2 * 3). In general, the number of pairs is m * n. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgzGt_NTRVTZt6cbNw54AaABAg", "publishedAt": "2020-12-05T00:54:19Z", "author": "ilas Ilas", "text": "Why is n/2 the same as n pls can someone explain?", "likes": 1}, "replies": [{"id": "UgzGt_NTRVTZt6cbNw54AaABAg.9GrtexLQ70V9GuFLnR9y25", "publishedAt": "2020-12-05T22:51:01Z", "author": "Tito Kris", "text": "The 2 is considered to be a constant,  as it increases it tends towards 1, that is n/n = 1", "likes": 0}]}, {"topLevelComment": {"id": "UgwKv3YqDsno0DK8eUV4AaABAg", "publishedAt": "2020-12-05T00:52:32Z", "author": "Kristian Javier Aguirre Torres", "text": "Thank you.", "likes": 0}}, {"topLevelComment": {"id": "UgxYrOcCHaEKH2KF-k14AaABAg", "publishedAt": "2020-12-05T00:33:49Z", "author": "Tomer Shmaya", "text": "While it counts the same to n+m, the original time complexity (and height of tree) for gridTraveler(n,m) without memoization is n+m-1", "likes": 0}}, {"topLevelComment": {"id": "UgzHaUhU8c_Fw3xBpSN4AaABAg", "publishedAt": "2020-12-04T22:48:14Z", "author": "yoosuf siddiqui", "text": "Amazing content I couldn\u2019t find a detailed course regarding data structures and algorithms except that I had to pay. This is great explanations and free ! Gems!", "likes": 0}, "replies": [{"id": "UgzHaUhU8c_Fw3xBpSN4AaABAg.9GrfEWcFHU09GxSBjV9Jpt", "publishedAt": "2020-12-07T04:40:57Z", "author": "Sonu Kumar Keshri", "text": "@yoosuf siddiqui welcome, sir", "likes": 0}, {"id": "UgzHaUhU8c_Fw3xBpSN4AaABAg.9GrfEWcFHU09GvabUeZEsZ", "publishedAt": "2020-12-06T11:24:46Z", "author": "yoosuf siddiqui", "text": "@Sonu Kumar Keshri hey thanks a lot appreciate it !!", "likes": 1}, {"id": "UgzHaUhU8c_Fw3xBpSN4AaABAg.9GrfEWcFHU09GtN0uX_-hm", "publishedAt": "2020-12-05T14:38:49Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "Ugy0ZdwZGN1Gvi2cT0V4AaABAg", "publishedAt": "2020-12-04T21:56:53Z", "author": "\u0421\u0435\u0440\u0433\u0456\u0439 \u0413\u043b\u0443\u0448\u043a\u043e\u0432\u0441\u044c\u043a\u0438\u0439", "text": "4:05:42 [...table[i],num] will make copy of table[i], but you can use [table[i],num]. Then you can flatten those arrays only on request so you will pay only o(m) only for 1 call for flatten.", "likes": 0}}, {"topLevelComment": {"id": "UgyR7t_-krAXr96wccN4AaABAg", "publishedAt": "2020-12-04T21:33:33Z", "author": "sk", "text": "Alvin is the MAN! This is so great to see.", "likes": 0}, "replies": [{"id": "UgyR7t_-krAXr96wccN4AaABAg.9GrXgatNxuq9Grpi0AMaOR", "publishedAt": "2020-12-05T00:19:46Z", "author": "Coderbyte", "text": "thanks terry -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugwdjzk9d_1TIWH5Coh4AaABAg", "publishedAt": "2020-12-04T21:25:14Z", "author": "\u0421\u0435\u0440\u0433\u0456\u0439 \u0413\u043b\u0443\u0448\u043a\u043e\u0432\u0441\u044c\u043a\u0438\u0439", "text": "2:38:26 slice doen't cost o(N) (it costs o(1), so not m**2, but m), because there is no allocation of new string. Strings are immutable (arrays are mutable), when you take substring it's just view inside original string. Even if it's will be not true for js, this trick can be implemented in C.", "likes": 0}}, {"topLevelComment": {"id": "UgxsXOisUYvu-57Nqc54AaABAg", "publishedAt": "2020-12-04T21:23:57Z", "author": "Mwaniki Mwaniki", "text": "Damn. Quincy Larson's newsletter brought me here.", "likes": 13}, "replies": [{"id": "UgxsXOisUYvu-57Nqc54AaABAg.9GrWaFxg2FW9GtMy4k0rVL", "publishedAt": "2020-12-05T14:38:18Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwWEqB21zulqcBwtKV4AaABAg", "publishedAt": "2020-12-04T21:21:39Z", "author": "\u0421\u0435\u0440\u0433\u0456\u0439 \u0413\u043b\u0443\u0448\u043a\u043e\u0432\u0441\u044c\u043a\u0438\u0439", "text": "2:34:15 target.indexOf(word) === 0 is not effective. It will search all positions of word, return index and then compare to 0, but you need only target.startsWith(word)", "likes": 0}}, {"topLevelComment": {"id": "UgxqsV7dpD3ix9n7oNR4AaABAg", "publishedAt": "2020-12-04T19:59:48Z", "author": "Brian Wylie", "text": "Great video. Certainly one of the best instructors I've seen.", "likes": 0}, "replies": [{"id": "UgxqsV7dpD3ix9n7oNR4AaABAg.9GrMxtysOOo9GtNgN1Fszy", "publishedAt": "2020-12-05T14:44:37Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgxqsV7dpD3ix9n7oNR4AaABAg.9GrMxtysOOo9GrptnhnvUc", "publishedAt": "2020-12-05T00:21:23Z", "author": "Coderbyte", "text": "Thanks for watching. Stoked that you found value in my lecture! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgzoblZ26Dnu8fmimVp4AaABAg", "publishedAt": "2020-12-04T19:58:12Z", "author": "Ruwan Wlr", "text": "Wow thanks.", "likes": 0}}, {"topLevelComment": {"id": "UgyiuyOlW0K2j9_6Bnh4AaABAg", "publishedAt": "2020-12-04T19:27:36Z", "author": "Souravendra Krishna Deb", "text": "doing god's work", "likes": 0}, "replies": [{"id": "UgyiuyOlW0K2j9_6Bnh4AaABAg.9GrJH-mr25U9GtNtqq5l5B", "publishedAt": "2020-12-05T14:46:28Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgxP44vgAR2S6yCEQMd4AaABAg", "publishedAt": "2020-12-04T19:22:00Z", "author": "Pajeet Singh", "text": "So you wanna be software engineer at Google? Go to algoexpert dot io, pick a question, read the promt....stfu", "likes": 0}}, {"topLevelComment": {"id": "UgyA9FAPysuy_dlHz8J4AaABAg", "publishedAt": "2020-12-04T19:15:13Z", "author": "Mounika", "text": "Before  I thought I would never be able to solve problems using dynamic programming , but now  I have  a lot more confidence. Thank you for this amazing video\ud83d\ude01", "likes": 15}, "replies": [{"id": "UgyA9FAPysuy_dlHz8J4AaABAg.9GrHrMmqFWs9GtMktxvyl4", "publishedAt": "2020-12-05T14:36:30Z", "author": "Sonu Kumar Keshri", "text": "Hey join this for more stuffs\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 1}]}, {"topLevelComment": {"id": "UgyOo4bnXUHuM2KO7lZ4AaABAg", "publishedAt": "2020-12-04T18:29:37Z", "author": "Siu Tung Ng", "text": "Anyone know the leetcode equivalent of gridTraveler memoization problem?", "likes": 0}}, {"topLevelComment": {"id": "UgyB7xDagRcDiC_WuaV4AaABAg", "publishedAt": "2020-12-04T18:05:58Z", "author": "David Chen", "text": "This guy is going to be invited to my wedding.", "likes": 5340}, "replies": [{"id": "UgyB7xDagRcDiC_WuaV4AaABAg.9Gr9w8tcUDZ9a8Vn0Hge0k", "publishedAt": "2022-04-22T23:31:10Z", "author": "Andile", "text": "Good luck!! Have that tough pre conversation w/ your friendly family lawyer.", "likes": 0}, {"id": "UgyB7xDagRcDiC_WuaV4AaABAg.9Gr9w8tcUDZ9_eNlOO8XvI", "publishedAt": "2022-04-10T21:24:35Z", "author": "Mancha ", "text": "\ud83d\ude02", "likes": 0}, {"id": "UgyB7xDagRcDiC_WuaV4AaABAg.9Gr9w8tcUDZ9YfoIWS3bpF", "publishedAt": "2022-02-20T17:41:37Z", "author": "Ekwonwa Henry", "text": "Best response ever\ud83d\ude05\ud83d\ude05", "likes": 0}, {"id": "UgyB7xDagRcDiC_WuaV4AaABAg.9Gr9w8tcUDZ9XusChBG1ME", "publishedAt": "2022-02-01T17:33:00Z", "author": "Avichal Kumar", "text": "In day Or night", "likes": 0}, {"id": "UgyB7xDagRcDiC_WuaV4AaABAg.9Gr9w8tcUDZ9XqtVVxowvp", "publishedAt": "2022-01-31T04:27:20Z", "author": "Ritika Kapoor", "text": "@Fred P yeah, right! \ud83d\ude02", "likes": 0}]}, {"topLevelComment": {"id": "UgwizhLqiAEVhEaU3T14AaABAg", "publishedAt": "2020-12-04T18:00:14Z", "author": "Sourik Prakash Kabi", "text": "Hey can someone help me with an issue?\nWhen I'm trying to run my code, the canSum memorization one, once it's getting canSum(7,[5,3,4,7]) True rest all the test cases after that including the 300 once are also giving output True, but if I'm commenting that line and then running the code again, the 300 one is giving False.\n\nThe thing is that while running multiple canSum function calls at once as shown in the video, if output of one function call is true rest all the function calls are also giving True.\n\nThe code I've written is correct, I've checked it many times.", "likes": 0}, "replies": [{"id": "UgwizhLqiAEVhEaU3T14AaABAg.9Gr9H7SZbPW9GsQi7pDmB9", "publishedAt": "2020-12-05T05:51:50Z", "author": "Sourik Prakash Kabi", "text": "@Coderbyte thank you for helping out, Alvin!\nPlease provide some tutorials on other algorithms like backtracking", "likes": 1}, {"id": "UgwizhLqiAEVhEaU3T14AaABAg.9Gr9H7SZbPW9GsD2vhQ0Lg", "publishedAt": "2020-12-05T03:52:29Z", "author": "Mounika Durga", "text": "@Sourik Prakash Kabi Yes, I am using Python and I have no idea how to implement that memo object in other languages like C, Java. In python I am using dictionary for that purpose.", "likes": 0}, {"id": "UgwizhLqiAEVhEaU3T14AaABAg.9Gr9H7SZbPW9GrsAwt7gNG", "publishedAt": "2020-12-05T00:41:20Z", "author": "Coderbyte", "text": "Sounds like some data is persisting between top level calls. If you are using Python , then you may want to watch out for Python only instantiating your option arguments once *per function definition* and not *per function call*.  This is a notorious gotcha when it comes to Python (https://docs.python-guide.org/writing/gotchas/) -Alvin", "likes": 2}, {"id": "UgwizhLqiAEVhEaU3T14AaABAg.9Gr9H7SZbPW9GrJh6tmnfQ", "publishedAt": "2020-12-04T19:31:17Z", "author": "Sourik Prakash Kabi", "text": "@Mounika Durga are you using Python?", "likes": 0}, {"id": "UgwizhLqiAEVhEaU3T14AaABAg.9Gr9H7SZbPW9GrJ4vj2obl", "publishedAt": "2020-12-04T19:25:56Z", "author": "Mounika Durga", "text": "I have also got the same problem.\nIf i give the function calls like this::\nprint(canSum(300, [14, 7]))\r\nprint(canSum(300, []))\nIt is giving the output  as True and True. But it should give True and False\nIf I commented the first line then it is giving False(correct one).", "likes": 0}]}, {"topLevelComment": {"id": "Ugw9b7U0y6IATeOk8lV4AaABAg", "publishedAt": "2020-12-04T17:48:12Z", "author": "Spencer Knight", "text": "this channel likes reading my mind", "likes": 0}, "replies": [{"id": "Ugw9b7U0y6IATeOk8lV4AaABAg.9Gr7u-YQmir9GtNX7IwT-D", "publishedAt": "2020-12-05T14:43:13Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgxCycA6-wSh1R8OJil4AaABAg", "publishedAt": "2020-12-04T17:40:20Z", "author": "mentorE", "text": "wow,  thanks for this one.", "likes": 0}}, {"topLevelComment": {"id": "UgyGzi170w2YYfsTEex4AaABAg", "publishedAt": "2020-12-04T17:38:47Z", "author": "fip", "text": "Are there some prerequisites to this course ?", "likes": 0}, "replies": [{"id": "UgyGzi170w2YYfsTEex4AaABAg.9Gr6p6H9tpr9GrqtVjkQiF", "publishedAt": "2020-12-05T00:30:05Z", "author": "Coderbyte", "text": "You should be comfortable with recursion and some basics of big o analysis first. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgwWsQH9Kc40DV0NjWN4AaABAg", "publishedAt": "2020-12-04T17:14:10Z", "author": "Wayne", "text": "just what i needed", "likes": 0}}, {"topLevelComment": {"id": "UgyLRZWlQHksm3bcdP54AaABAg", "publishedAt": "2020-12-04T17:06:35Z", "author": "Ford", "text": "Wonderful, this is what I've been looking for. Thanks \ud83d\udc93", "likes": 2}}, {"topLevelComment": {"id": "UgxgDolzhgraOv3_60B4AaABAg", "publishedAt": "2020-12-04T17:03:10Z", "author": "Avi W.", "text": "Excellent instructor and a great explanation of some complex concepts.", "likes": 0}, "replies": [{"id": "UgxgDolzhgraOv3_60B4AaABAg.9Gr2kBGlX8G9Grpn99QdJN", "publishedAt": "2020-12-05T00:20:28Z", "author": "Coderbyte", "text": "glad to hear that you found my perspective useful! thanks for watching. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugx_76tQ1f_zzFfUipR4AaABAg", "publishedAt": "2020-12-04T16:55:34Z", "author": "aman", "text": "The gridTraveler should be able to be sped up further by checking if the reverse of 'key' if also present in memo. \nIf \"1,2\" is in memo we want it to be used for gridTraveler(2,1) also.", "likes": 0}, "replies": [{"id": "Ugx_76tQ1f_zzFfUipR4AaABAg.9Gr1sZVITj_9GtZE-qOTii", "publishedAt": "2020-12-05T16:25:28Z", "author": "aman", "text": "@Coderbyte yes thanks \ud83d\udc4d", "likes": 0}, {"id": "Ugx_76tQ1f_zzFfUipR4AaABAg.9Gr1sZVITj_9GtQtfvHjzN", "publishedAt": "2020-12-05T15:12:39Z", "author": "Coderbyte", "text": "You could indeed do that like I mention in the sketch for gridTraveler. However,  I don't believe it affects the big o complexity since doing so would only affect it by some factor of 1/2. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgySOkhEwUcDrYBQko54AaABAg", "publishedAt": "2020-12-04T16:42:04Z", "author": "sudeep batchu", "text": "thank you  for making me understand dp", "likes": 0}}, {"topLevelComment": {"id": "UgyIVtTmQLKreVoQyQ14AaABAg", "publishedAt": "2020-12-04T15:49:25Z", "author": "Power Man", "text": "is there any way to do the best some in python?.  tried but it is showing \"None object has no len()\".  Can anyone help me to implement the best sum in python.", "likes": 0}, "replies": [{"id": "UgyIVtTmQLKreVoQyQ14AaABAg.9GqvJ1e7RkE9GtNzoRarK0", "publishedAt": "2020-12-05T14:47:17Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot regarding this problem and other major things \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwPi7USCS8ZjPcXJSZ4AaABAg", "publishedAt": "2020-12-04T15:35:21Z", "author": "saptarsi saha", "text": "Can we have one on recursion?", "likes": 1}, "replies": [{"id": "UgwPi7USCS8ZjPcXJSZ4AaABAg.9Gqth00TKQz9HL7uGa67eY", "publishedAt": "2020-12-16T18:44:41Z", "author": "Ismail Khan", "text": "check his channel coderbyte its there", "likes": 0}]}, {"topLevelComment": {"id": "UgxVVz4opq3zzTPSnfJ4AaABAg", "publishedAt": "2020-12-04T14:42:11Z", "author": "Subhadeep Chowdhury", "text": "It will be good to have videos to improve competitive programming", "likes": 0}, "replies": [{"id": "UgxVVz4opq3zzTPSnfJ4AaABAg.9GqnbZ-6jcr9GtNhQyLBZC", "publishedAt": "2020-12-05T14:44:46Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "Ugz5sHX3Y6sdUJE6Dz94AaABAg", "publishedAt": "2020-12-04T14:24:12Z", "author": "Vishal B", "text": "Please introduce closed captioning.", "likes": 0}}, {"topLevelComment": {"id": "Ugyg-k7GpnGDUF1VYDF4AaABAg", "publishedAt": "2020-12-04T14:11:44Z", "author": "\u0110\u0103ng Tr\u1ea7n H\u1ea3i", "text": "Nice.", "likes": 0}}, {"topLevelComment": {"id": "UgxdrvbdSD6V1WXm6JJ4AaABAg", "publishedAt": "2020-12-04T13:47:44Z", "author": "MOVIE MANIA", "text": "PLZ guys plz make more videos on this topic and use python next time...\nBTW It was really helpful \nThank you :)", "likes": 0}, "replies": [{"id": "UgxdrvbdSD6V1WXm6JJ4AaABAg.9GqhNkMVsPr9GtNwU16_gc", "publishedAt": "2020-12-05T14:46:49Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgzrbsRDG0gbDyrkVPl4AaABAg", "publishedAt": "2020-12-04T13:27:50Z", "author": "Carl Justine Mosquida", "text": "Woahhhh", "likes": 0}}, {"topLevelComment": {"id": "UgzoIR9aABKF1Bs6oTR4AaABAg", "publishedAt": "2020-12-04T13:25:17Z", "author": "Rvsns Sriram", "text": "I it was in my hands You would get a Nobel !!", "likes": 1}, "replies": [{"id": "UgzoIR9aABKF1Bs6oTR4AaABAg.9GqeoN9X5z-9GtN6RcCmnC", "publishedAt": "2020-12-05T14:39:35Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42, save your Nobel now\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgxqRl1BYP0JDgZxRzN4AaABAg", "publishedAt": "2020-12-04T12:54:41Z", "author": "Nico Robin", "text": "Are there Some prerequisites required before dynamic programming?", "likes": 1}, "replies": [{"id": "UgxqRl1BYP0JDgZxRzN4AaABAg.9GqbJI_CK1W9GtOAHvKZAe", "publishedAt": "2020-12-05T14:48:51Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot finding the answers\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgxqRl1BYP0JDgZxRzN4AaABAg.9GqbJI_CK1W9Grqb6i79LJ", "publishedAt": "2020-12-05T00:27:34Z", "author": "Coderbyte", "text": "I'd say recursion as well as some big o understanding. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgxDFCNjsFWhePIzhVJ4AaABAg", "publishedAt": "2020-12-04T12:39:38Z", "author": "Viren Lakum", "text": "Isn't there a 4th way for 2*3 grid traveler -> down - right - up - right -down ?", "likes": 0}, "replies": [{"id": "UgxDFCNjsFWhePIzhVJ4AaABAg.9Gq_a2eeE0O9Grq14RXDxp", "publishedAt": "2020-12-05T00:22:31Z", "author": "Coderbyte", "text": "Ah, the problem says we may only move down or right, not up or left. Hope that clarifies. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgyLQYq8BISD6GPUuGR4AaABAg", "publishedAt": "2020-12-04T09:57:56Z", "author": "fatihak1982", "text": "Shouldn't the space complexity of memoized version of grid traveller be O(M\u00d7N)? You are saving each combination in the memo object.", "likes": 0}}, {"topLevelComment": {"id": "UgweolbvdZMFMTMs3sR4AaABAg", "publishedAt": "2020-12-04T09:14:24Z", "author": "sushil chauhan", "text": "First time I am able to understand dynamic programming. Tree structure makes it so easy to understand.", "likes": 2}, "replies": [{"id": "UgweolbvdZMFMTMs3sR4AaABAg.9GqD5r3iQy19GtNODRL5mt", "publishedAt": "2020-12-05T14:42:00Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "Ugye1GgtbxpHguzTLjx4AaABAg", "publishedAt": "2020-12-04T08:11:25Z", "author": "Joaquim Menezes", "text": "I saw this guy in APP ACADEMY \ud83d\udcaf\ud83d\udd25\ud83d\udd25\ud83d\udd25\ud83d\ude0d", "likes": 5}, "replies": [{"id": "Ugye1GgtbxpHguzTLjx4AaABAg.9Gq5t_PDccJ9GrpaEiAVgq", "publishedAt": "2020-12-05T00:18:43Z", "author": "Coderbyte", "text": "can't get rid of me -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugz7B5d47mrH_pJwAm14AaABAg", "publishedAt": "2020-12-04T08:02:43Z", "author": "Ashwin", "text": "FreeCodeCamp knew AlgoExpert was a pain in the ass so let's kill them once and for all!!!", "likes": 0}}, {"topLevelComment": {"id": "UgxAwVlE9NNyMDQao_F4AaABAg", "publishedAt": "2020-12-04T07:24:03Z", "author": "Chang You", "text": "Thanks a lot!! If every long tutorial also has subtitles it will be even better!", "likes": 0}, "replies": [{"id": "UgxAwVlE9NNyMDQao_F4AaABAg.9Gq0Tf-Ssut9GtNZC9kfhN", "publishedAt": "2020-12-05T14:43:30Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwwbSsy738KjBMZJ5N4AaABAg", "publishedAt": "2020-12-04T07:22:29Z", "author": "Versole", "text": "22 minutes and I'm loving this video and instructor.", "likes": 4}, "replies": [{"id": "UgwwbSsy738KjBMZJ5N4AaABAg.9Gq0I9Mhnx69GtNSVWIlxP", "publishedAt": "2020-12-05T14:42:35Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgwwbSsy738KjBMZJ5N4AaABAg.9Gq0I9Mhnx69GrpSrveSpc", "publishedAt": "2020-12-05T00:17:34Z", "author": "Coderbyte", "text": "Glad to hear you are enjoying it! Thanks for the comment. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgwTUw8i40e3z6GUOiZ4AaABAg", "publishedAt": "2020-12-04T05:51:37Z", "author": "Roshen Roy", "text": "For gridTraveler problem,you missed one thing .You haven't implemented checks for (m,n) and (n,m).eg (2,3) and (3,2) are the same.your key only checks one.", "likes": 0}, "replies": [{"id": "UgwTUw8i40e3z6GUOiZ4AaABAg.9GpqtZvCgjX9GrqXAZCsGC", "publishedAt": "2020-12-05T00:26:54Z", "author": "Coderbyte", "text": "Ah yes, I didn't implement that bit in my code.  It's a fair optimization to make. However, it won't effect the Big O time complexity because we would only be dividing the number of keys by 2. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgzJZQRY3-OLIRZ4C4t4AaABAg", "publishedAt": "2020-12-04T05:37:41Z", "author": "NEErajj VeRma", "text": "Nothing is great like Freecodecamp on YouTube for us (developers & beginners)\u2665\ufe0f\ud83d\udc4d\ud83d\ude09\n\nEdits: Not Only OpenSource but most Valuable Content & Knowledge from all over the world for new generation developers towards great mankind in technology. \ud83d\udcaf", "likes": 1}}, {"topLevelComment": {"id": "UgzsAIM_1Blc2OEOuyh4AaABAg", "publishedAt": "2020-12-04T05:14:52Z", "author": "Zeus Jean", "text": "please add subtitules ...", "likes": 1}, "replies": [{"id": "UgzsAIM_1Blc2OEOuyh4AaABAg.9GpmgVXV_LZ9GtO2O6o0mg", "publishedAt": "2020-12-05T14:47:46Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgyUvkrm18nDtEMHk8J4AaABAg", "publishedAt": "2020-12-04T04:44:55Z", "author": "IamAeone", "text": "Oh I love this guy! When I hear \"let's look at the tree\"... Mmmm", "likes": 0}, "replies": [{"id": "UgyUvkrm18nDtEMHk8J4AaABAg.9GpjG5lJ7qv9Grp3_9XUqY", "publishedAt": "2020-12-05T00:14:07Z", "author": "Coderbyte", "text": "It's all about visualizing it! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugyi6MelTjjIA9TGvu54AaABAg", "publishedAt": "2020-12-04T04:35:29Z", "author": "wilson emmanuel", "text": "22:15 Sandwich Theory in DP\ud83d\ude05\ud83d\ude05", "likes": 5}, "replies": [{"id": "Ugyi6MelTjjIA9TGvu54AaABAg.9GpiB1UuN189GroGk9VxcJ", "publishedAt": "2020-12-05T00:07:10Z", "author": "Coderbyte", "text": "I love that term! I'll have to borrow that. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgxgsxRNVVhYgTZsAop4AaABAg", "publishedAt": "2020-12-04T04:12:38Z", "author": "Aditya Tiwari", "text": "Where were you when I was majoring in CS :p", "likes": 1}, "replies": [{"id": "UgxgsxRNVVhYgTZsAop4AaABAg.9GpfZdQhPNr9Gsdnvxw6ke", "publishedAt": "2020-12-05T07:54:58Z", "author": "Jathin S", "text": "Xd", "likes": 0}]}, {"topLevelComment": {"id": "UgxLRu9VWDBRRz4HRQV4AaABAg", "publishedAt": "2020-12-04T03:30:29Z", "author": "Todd YahuShua", "text": "7/1/11 From The Lord, Our God and Savior\nThe Word of The Lord Spoken to Timothy\nFor All Those Who Have Ears to Hear\n\n\nThus says The Lord God of Israel: The Days of Noah are here, the Day of The Lord has come in; and behold, the Great and Dreadful Day is very near!...\n\nTherefore hear the Word of The Lord, O peoples of the earth, and gain wisdom: Are not the mountains risen up at the Word of My mouth? Do not the highest peaks break through the clouds at My command? Are not the depths carved out by My knowledge, and the seas filled according to My will? Who causes the clouds to gather together and bring forth rain? Who calls forth the wind from its place and stirs up the hurricane? Who speaks to the horrible mountain, causing it to burst forth, to spew its fervent heat? It is I who has done it, The One who formed it, The One who causes to be! My children, look upon the stars, upon the whole of the heavens, consider the vastness thereof, and know: YAH has spoken it into being, YAHUWAH caused it to be! \nBehold, I have spread out life like a blanket, and caused it to multiply in all the earth; life fills every corner! And still mankind seeks out its beginnings and longs to know its source, asking in vain, \u201cWhere did I come from, and why are we here? From what source did all this life come, and how did it get here? What is the beginning, and how will it end?\u201d \nBlind and hard-hearted generation, deceived and ignorant peoples, foolish children, LIFE HAS A NAME! The Beginning and The End has walked among you! The Source and The Reason is here, and shall also come in great power and glory! From Him did you come forth, and to Him must you return, all you, His beloved. Behold, His names are many and wonderful![1] That which He is has no end, for as I AM so also is He! The Father and The Son are one, and our name, one - YAHUSHUA-YAHUWAH!\n\n\nIn the beginning was The Word, and The Word \nWas with God, and The Word was God;\nThe same was in the beginning with God...\n\nThrough Him all things came into being, \nAnd nothing in all creation was made apart from Him...\n\nIn Him was life, and The Life was the light of men;\nThe Light shines in the darkness, \nAnd the darkness shall not overcome it...\n\nAnd behold, The Word became flesh...\n\n\nImmanu El!\n\nhttps://www.thevolumesoftruth.com/The_One_Worthy_of_All_Praise", "likes": 0}}, {"topLevelComment": {"id": "UgzcJy-7BHEFtdOOhKl4AaABAg", "publishedAt": "2020-12-04T02:22:24Z", "author": "Li Zhi", "text": "any video channel from this great instructor?", "likes": 0}, "replies": [{"id": "UgzcJy-7BHEFtdOOhKl4AaABAg.9GpTxJimA8F9Grr86PYzhj", "publishedAt": "2020-12-05T00:32:13Z", "author": "Coderbyte", "text": "you can check out more of my data structure and algorithm videos on the coderbyte channel: https://www.youtube.com/channel/UCOJtQcnBnIy4LERo6vkrItg\nif you'd like to follow me personally here's my personal channel https://www.youtube.com/channel/UCilIG8V10ZGXaLHxvEa_UfA\nThanks for watching! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugzngak6sJGM_nN_wiN4AaABAg", "publishedAt": "2020-12-04T01:51:11Z", "author": "Anthony Phan", "text": "I liked the video before it plays", "likes": 0}}, {"topLevelComment": {"id": "Ugzik7nGkGr--SgIOXl4AaABAg", "publishedAt": "2020-12-04T00:54:51Z", "author": "Alex Noble", "text": "This is the best. I checked out coderbyte and was looking to see if there are more videos like this. Does anyone know if they are the same quality?", "likes": 0}, "replies": [{"id": "Ugzik7nGkGr--SgIOXl4AaABAg.9GpJw0ZAGYP9GtNLD2Wcgm", "publishedAt": "2020-12-05T14:41:36Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgxMdYmbClUx832K-Ah4AaABAg", "publishedAt": "2020-12-04T00:26:34Z", "author": "Md Sultan Altamash Ali", "text": "Oh my . Interviewer once asked me \" what do you not know \" . Answer was Dynamic programming. But it is time to get some skills now ;) Thank you for uploading this tutorial", "likes": 0}, "replies": [{"id": "UgxMdYmbClUx832K-Ah4AaABAg.9GpGgw8RWSz9GtN3HFwTLI", "publishedAt": "2020-12-05T14:39:09Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwKqlxA3jDtpYs1HlB4AaABAg", "publishedAt": "2020-12-04T00:07:54Z", "author": "Quentin Doret", "text": "Amazing content. Extremely clear and well explained. Much wow", "likes": 1}, "replies": [{"id": "UgwKqlxA3jDtpYs1HlB4AaABAg.9GpEZAd8Msv9GtNH0-Fk-E", "publishedAt": "2020-12-05T14:41:01Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgwKqlxA3jDtpYs1HlB4AaABAg.9GpEZAd8Msv9GroeplXkCX", "publishedAt": "2020-12-05T00:10:36Z", "author": "Coderbyte", "text": "Very thank you. -Alvin", "likes": 2}]}, {"topLevelComment": {"id": "UgzOpZiQpid85aXwIGx4AaABAg", "publishedAt": "2020-12-03T23:43:13Z", "author": "Sunny", "text": "39:19 this is a O(n) or O(1) depending what factorial calculator you use.\n\nThe mathematical solution is (n+m)!/n!m!, but since your usual answer checker will give values to which answers will not exceed the int(or unsigned long long int), just make a predefined array of factorials to i believe 32! or something(whatever n is that n! > 2^63). Then its happy happy O(1) from then on.", "likes": 1}, "replies": [{"id": "UgzOpZiQpid85aXwIGx4AaABAg.9GpBjK2V-oz9GpCKOrB8Wq", "publishedAt": "2020-12-03T23:48:24Z", "author": "Sunny", "text": "note: 21! > 2^63.\nvar fac = [1, 1, 2, 6, 24, ...] will utterly shatter this problem.", "likes": 0}]}, {"topLevelComment": {"id": "UgxBYqJsWOViQJ9Aoux4AaABAg", "publishedAt": "2020-12-03T23:42:06Z", "author": "Kevin A", "text": "I'm watching this at 11.30pm after a long day ...trying my best to wrap my head around it. Anyone able to point me in the direction of any good resources for recursion and complexity analysis? I think getting to grips with those two topics will put me on solid grounding to better understand Alvin's lessons. PS Thanks for this amazing resource freeCodeCamp \u2764\ufe0f", "likes": 0}, "replies": [{"id": "UgxBYqJsWOViQJ9Aoux4AaABAg.9GpBb8XYy4c9GrsOC7CSbl", "publishedAt": "2020-12-05T00:43:09Z", "author": "Coderbyte", "text": "Stick with it! We have videos on both recursion and big O on our channel (https://www.youtube.com/channel/UCOJtQcnBnIy4LERo6vkrItg) . Thanks for watching. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugz-EEP2EQbjPEpnRuF4AaABAg", "publishedAt": "2020-12-03T23:14:00Z", "author": "Omar", "text": "How is dynamic programming related to algos and ds?", "likes": 1}, "replies": [{"id": "Ugz-EEP2EQbjPEpnRuF4AaABAg.9Gp8ON6HZwj9GtNnWdXabb", "publishedAt": "2020-12-05T14:45:36Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot finding every details regarding this\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "Ugz-EEP2EQbjPEpnRuF4AaABAg.9Gp8ON6HZwj9Gpy4h_FMCW", "publishedAt": "2020-12-04T06:54:26Z", "author": "Prabu Natarajan", "text": "its a subset of problems like divide & conquer & greedy.", "likes": 2}]}, {"topLevelComment": {"id": "UgwWQ33vpozupUuy8k14AaABAg", "publishedAt": "2020-12-03T23:12:34Z", "author": "Erick", "text": "Why all this information it is free ?", "likes": 0}, "replies": [{"id": "UgwWQ33vpozupUuy8k14AaABAg.9Gp8DuA7pHN9GtO18BhY8f", "publishedAt": "2020-12-05T14:47:36Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgzMgrP71Q8BxSnqtV54AaABAg", "publishedAt": "2020-12-03T23:11:09Z", "author": "mare meaxi", "text": "WOW Alvin !!!  The best teacher ever !!! Learning Ruby at App Academy with him is amaizing!!!", "likes": 12}, "replies": [{"id": "UgzMgrP71Q8BxSnqtV54AaABAg.9Gp83XPsdlO9HtuEwAxdok", "publishedAt": "2020-12-30T16:09:14Z", "author": "Mohd Fayaq", "text": "@Coderbyte You're amazing!", "likes": 0}, {"id": "UgzMgrP71Q8BxSnqtV54AaABAg.9Gp83XPsdlO9GrpCeZ9y8z", "publishedAt": "2020-12-05T00:15:21Z", "author": "Coderbyte", "text": "Thanks for watching :) -Alvin", "likes": 3}]}, {"topLevelComment": {"id": "UgzWS7fbMLRrIoRY8yZ4AaABAg", "publishedAt": "2020-12-03T22:18:22Z", "author": "Kirolls Sabri", "text": "Wow sounds great video \u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"id": "UgzP2UDFl8TssDFhgnp4AaABAg", "publishedAt": "2020-12-03T21:23:11Z", "author": "Sleros", "text": "The first thing I'm gonna do when I get a job is to donate to FCC. I've learned so much from their content on YouTube and tutorials on their website.", "likes": 734}, "replies": [{"id": "UgzP2UDFl8TssDFhgnp4AaABAg.9GowhmjzQKB9YvmmBEGmAq", "publishedAt": "2022-02-26T22:36:11Z", "author": "Web Knowledge", "text": "@Pupper Gump lol", "likes": 1}, {"id": "UgzP2UDFl8TssDFhgnp4AaABAg.9GowhmjzQKB9WsJIureTCW", "publishedAt": "2022-01-06T21:09:24Z", "author": "Pupper Gump", "text": "I'm not sure if the Federal Commissions Committee needs any more money than they already have.", "likes": 7}, {"id": "UgzP2UDFl8TssDFhgnp4AaABAg.9GowhmjzQKB9TUi_5kM5C5", "publishedAt": "2021-10-14T18:23:44Z", "author": "Kwamina Essuah Mensah", "text": "Same!", "likes": 1}, {"id": "UgzP2UDFl8TssDFhgnp4AaABAg.9GowhmjzQKB9PNvGz9GiPN", "publishedAt": "2021-07-04T16:54:28Z", "author": "Hari Krishnan", "text": "That's the spirit! People like you are the reason why we all can have nice things!", "likes": 3}, {"id": "UgzP2UDFl8TssDFhgnp4AaABAg.9GowhmjzQKB9LukTDkcCu-", "publishedAt": "2021-04-09T10:08:37Z", "author": "Aaron Sun", "text": "Update us!!", "likes": 0}]}, {"topLevelComment": {"id": "Ugx5WYtt3sswkx2OySl4AaABAg", "publishedAt": "2020-12-03T21:22:13Z", "author": "sorry", "text": "\ud83d\ude4f\ud83d\ude4f\ud83d\ude4f\ud83d\udc4d\ud83c\udf4f\ud83c\udf50\ud83c\udf53\u2665\ufe0f\u2665\ufe0f\ud83d\udcaf", "likes": 0}}, {"topLevelComment": {"id": "Ugw_NSj1emQEc472Sjx4AaABAg", "publishedAt": "2020-12-03T21:15:58Z", "author": "Kit Walker", "text": "This was so much fun. Didn't realise when 5 hrs went by, very very helpful. I really liked Alvin's style of teaching. Thanks guys. \u270c\ufe0f\ud83d\ude0a\ud83d\udc4f\ud83d\udc4f\ud83d\udc4f", "likes": 1}, "replies": [{"id": "Ugw_NSj1emQEc472Sjx4AaABAg.9GovswiTUuK9GtNMPND2HN", "publishedAt": "2020-12-05T14:41:46Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 1}, {"id": "Ugw_NSj1emQEc472Sjx4AaABAg.9GovswiTUuK9GrobjbZyu_", "publishedAt": "2020-12-05T00:10:11Z", "author": "Coderbyte", "text": "Glad to hear that you found some value in it! -Alvin", "likes": 2}]}, {"topLevelComment": {"id": "Ugx9YxICgL1k4cGZEGd4AaABAg", "publishedAt": "2020-12-03T20:16:07Z", "author": "Andrei Mircia", "text": "Totally unrelated but, does anyone know the name of that color theme? It looks very good.", "likes": 0}, "replies": [{"id": "Ugx9YxICgL1k4cGZEGd4AaABAg.9Gop1ZRsBFL9GroXwWqL1w", "publishedAt": "2020-12-05T00:09:31Z", "author": "Coderbyte", "text": "I recorded this one using monokai pro w/ the machine filter (https://monokai.pro/vscode) . One of my faves! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgyhQDUcwBb3rx3tVGN4AaABAg", "publishedAt": "2020-12-03T19:55:38Z", "author": "julio fils", "text": "Very , very good stuff well explain", "likes": 0}}, {"topLevelComment": {"id": "UgzS_o8y8e7egs_KKlF4AaABAg", "publishedAt": "2020-12-03T19:33:16Z", "author": "Jeremiah Moore", "text": "Great instructor! fcc continues to impress me! Don't forget to donate, they really deserve it!", "likes": 0}, "replies": [{"id": "UgzS_o8y8e7egs_KKlF4AaABAg.9Gok7iiAX6F9GrpYdOKqX6", "publishedAt": "2020-12-05T00:18:21Z", "author": "Coderbyte", "text": "Thanks for watching! I'm glad you enjoyed my perspective on the topic. -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgzHv0eJoajZEc5D5t94AaABAg", "publishedAt": "2020-12-03T18:55:12Z", "author": "KhanDoor", "text": "Fantastic content!!!", "likes": 0}}, {"topLevelComment": {"id": "UgzHUy-TFA25tjat0jR4AaABAg", "publishedAt": "2020-12-03T18:54:37Z", "author": "yassin raki", "text": "this course fell from heaven !!!", "likes": 0}}, {"topLevelComment": {"id": "Ugz2zPyPCKmX2xqkvVt4AaABAg", "publishedAt": "2020-12-03T18:52:21Z", "author": "HARRIS LAM", "text": "Quick questions: so stack space=space complexity, which means where the computer stores the result of some calculation in memory... is that correct? Also, in big O notation, why is it that multiplicative constants are ignored? When relating to algebra, the difference between \"n\" and \"5n\" it's pretty significant in terms of slope, but for time complexity O(n)=O(5n)...", "likes": 0}, "replies": [{"id": "Ugz2zPyPCKmX2xqkvVt4AaABAg.9GofRzR0rEz9GrrkUzksGA", "publishedAt": "2020-12-05T00:37:35Z", "author": "Coderbyte", "text": "It's the nature of big o analysis. We care about the runtime as the size of the input approaches infinity. Constant terms like 2 * or 5 * become negligible as we scale to infinity. We have a 2 part course about Big O (https://www.youtube.com/watch?v=HfIH3czXc-8) . Thanks for watching! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgxFHFQjOv6wT7kMgUp4AaABAg", "publishedAt": "2020-12-03T18:41:21Z", "author": "aman", "text": "40 min in and I like it already. Just one question - what are the benefits of passing memo as a parameter at 31:00 rather than having a global scope object? It's pretty neat in JS but might not be always possible in other languages.", "likes": 0}, "replies": [{"id": "UgxFHFQjOv6wT7kMgUp4AaABAg.9GoeBSTQkkT9GsFvRt0wec", "publishedAt": "2020-12-05T04:17:32Z", "author": "aman", "text": "@Coderbyte indeed it is! Thank you! I left another comment regarding checking of the reverse of 'key' for gridTraveler, can you check it?", "likes": 0}, {"id": "UgxFHFQjOv6wT7kMgUp4AaABAg.9GoeBSTQkkT9GrrPYSbBWu", "publishedAt": "2020-12-05T00:34:35Z", "author": "Coderbyte", "text": "Typically I like to avoid global variables in the namespace. If your language does not support optional arguments, then I think the move would be to create a main function that creates the memo object and passes it into a helper function that performs the recursion. Hope that is helpful! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "UgwI4LUmyU9cBXHlHE14AaABAg", "publishedAt": "2020-12-03T18:32:41Z", "author": "al-amin hamadi", "text": "Very usefully", "likes": 0}}, {"topLevelComment": {"id": "UgyqZ8kYONJdwC6fkV54AaABAg", "publishedAt": "2020-12-03T18:10:08Z", "author": "Asadullah Aziz", "text": "Thanks Thanks A lot freecodecamp and Alvin for this Awesome course on Dynamic programming. I needed this a lot.", "likes": 1}, "replies": [{"id": "UgyqZ8kYONJdwC6fkV54AaABAg.9GoabplUWJ99GrqAre5kg4", "publishedAt": "2020-12-05T00:23:51Z", "author": "Coderbyte", "text": "We hope you find it useful! -Alvin", "likes": 1}]}, {"topLevelComment": {"id": "Ugx1sBFDjD7_d1DMPFt4AaABAg", "publishedAt": "2020-12-03T18:00:18Z", "author": "Luke Lam", "text": "Oh my god, you guys are doing work of god. I was thinking about learning to do this and you have this video right away, that\u2019s why I support you guys.", "likes": 1}, "replies": [{"id": "Ugx1sBFDjD7_d1DMPFt4AaABAg.9Go_UlBYn_U9GtNdFQWitu", "publishedAt": "2020-12-05T14:44:12Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgyrbdKps4rRduEhASh4AaABAg", "publishedAt": "2020-12-03T17:49:53Z", "author": "Aravindh Ravi", "text": "Been waiting for this", "likes": 0}}, {"topLevelComment": {"id": "Ugzj0yiKWTpfxExvfNl4AaABAg", "publishedAt": "2020-12-03T17:45:38Z", "author": "and is the in for it but so", "text": "wow nice", "likes": 0}}, {"topLevelComment": {"id": "UgxE2kCE3FuUFqgHqKF4AaABAg", "publishedAt": "2020-12-03T17:35:46Z", "author": "Dhia Hassen", "text": "I am now creating an anki reminder flashcards collection for this video , for my own use , get back to take it later i will post the link here", "likes": 4}, "replies": [{"id": "UgxE2kCE3FuUFqgHqKF4AaABAg.9GoXg1oNwA09I3r3gOE2ZD", "publishedAt": "2021-01-03T22:13:08Z", "author": "Dhia Hassen", "text": "@Eucalypticus I think it is spaghetti though , I have all reasons to think so", "likes": 0}, {"id": "UgxE2kCE3FuUFqgHqKF4AaABAg.9GoXg1oNwA09HSx_Ff9VmA", "publishedAt": "2020-12-19T19:39:37Z", "author": "Salem Ouail", "text": "Thanks mate", "likes": 0}, {"id": "UgxE2kCE3FuUFqgHqKF4AaABAg.9GoXg1oNwA09GpD3AUQRs_", "publishedAt": "2020-12-03T23:54:47Z", "author": "Dhia Hassen", "text": "these are the anki cards https://ankiweb.net/shared/info/1125453417\nyou can use them to memoirize this video after a while to make sure you don't forget dynamic programming", "likes": 5}]}, {"topLevelComment": {"id": "Ugy8h-UCdtO371RDiZF4AaABAg", "publishedAt": "2020-12-03T17:30:33Z", "author": "Disha Gupta", "text": "Literally needed it\ud83d\ude0d", "likes": 0}}, {"topLevelComment": {"id": "UgyfCvo2QlH89hGKsNF4AaABAg", "publishedAt": "2020-12-03T17:24:43Z", "author": "FRONTRU - Web Tutorials", "text": "I'm the only one when I go to the video immediately put the like automatically?", "likes": 20}, "replies": [{"id": "UgyfCvo2QlH89hGKsNF4AaABAg.9GoWQBx6DAz9Gobq4sc5MA", "publishedAt": "2020-12-03T18:20:49Z", "author": "Gamedev Looped", "text": "noyou are not  , just do that for my channel too haha", "likes": 1}]}, {"topLevelComment": {"id": "Ugz6b2RKqFLYHM3SR3d4AaABAg", "publishedAt": "2020-12-03T17:18:00Z", "author": "Sanketh B. K", "text": "https://www.youtube.com/c/CoderbyteDevelopers.  Link to his YouTube channel so that you can support him.", "likes": 3}}, {"topLevelComment": {"id": "UgxC-sQ8qxg7JbwFvZR4AaABAg", "publishedAt": "2020-12-03T17:09:48Z", "author": "MickeY", "text": "Appreciating this course so much!!!", "likes": 1}, "replies": [{"id": "UgxC-sQ8qxg7JbwFvZR4AaABAg.9GoUhtWwD_y9GtNVNxlRgg", "publishedAt": "2020-12-05T14:42:59Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgweZB28qe7YNkq8wj94AaABAg", "publishedAt": "2020-12-03T17:03:29Z", "author": "Boris", "text": "6:17 you can hear the fans kicking in for recursive fib(50)", "likes": 39}, "replies": [{"id": "UgweZB28qe7YNkq8wj94AaABAg.9GoTzcqr6wV9H7FQaEISZM", "publishedAt": "2020-12-11T09:21:02Z", "author": "Umar", "text": "@Martin Harkai That's worse than what I've expected :(. I wish you all the best", "likes": 0}, {"id": "UgweZB28qe7YNkq8wj94AaABAg.9GoTzcqr6wV9H7AmrfeyMh", "publishedAt": "2020-12-11T08:40:31Z", "author": "Martin Harkai", "text": "@Umar yeah it really sucks,  you cant browse stackoverflow and code in your notepad at the same time:(", "likes": 0}, {"id": "UgweZB28qe7YNkq8wj94AaABAg.9GoTzcqr6wV9H7AMZtIJXy", "publishedAt": "2020-12-11T08:36:48Z", "author": "Umar", "text": "rip to all those who cant open more than 1 chrome tab o7 idk how you guys feel but its probably really sad", "likes": 0}, {"id": "UgweZB28qe7YNkq8wj94AaABAg.9GoTzcqr6wV9H4gyhBOIs4", "publishedAt": "2020-12-10T09:32:46Z", "author": "bishnu das", "text": "@Martin Harkai can feel the pain", "likes": 0}, {"id": "UgweZB28qe7YNkq8wj94AaABAg.9GoTzcqr6wV9H0t2fX_JWs", "publishedAt": "2020-12-08T22:01:21Z", "author": "Borny", "text": "@Martin Harkai now thats a bruh moment", "likes": 3}]}, {"topLevelComment": {"id": "UgyDab_q2Zu1TynUn6J4AaABAg", "publishedAt": "2020-12-03T17:00:00Z", "author": "CodeAndCurious", "text": "Thank you so much freecodecamp for this course I wanted a course like this", "likes": 0}, "replies": [{"id": "UgyDab_q2Zu1TynUn6J4AaABAg.9GoTa6H-U5d9GtNFfZdrF4", "publishedAt": "2020-12-05T14:40:50Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwX9pqiS-C4cMZLScJ4AaABAg", "publishedAt": "2020-12-03T16:54:49Z", "author": "Shiva Manhar", "text": "freecodecamp is always post useful videos .", "likes": 0}, "replies": [{"id": "UgwX9pqiS-C4cMZLScJ4AaABAg.9GoT-E1Ie7T9GtO7yAdoPZ", "publishedAt": "2020-12-05T14:48:31Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgykxCUeuAkRqGsZbB54AaABAg", "publishedAt": "2020-12-03T16:53:18Z", "author": "Ziyak Jehangir", "text": "I am a total noob to dynamic programming. I plan on completing this course within the next 5 days (1 hour a day). Hopefully I\u2019ll at least understand the concept of dynamic programming by the end.", "likes": 2}, "replies": [{"id": "UgykxCUeuAkRqGsZbB54AaABAg.9GoSp6UctHd9GtO4rml1kv", "publishedAt": "2020-12-05T14:48:06Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot regarding interviews on dynamic programming \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgykxCUeuAkRqGsZbB54AaABAg.9GoSp6UctHd9GoXjGZxFQM", "publishedAt": "2020-12-03T17:36:12Z", "author": "Heavydirtysoul", "text": "1) if you sit and watch through the video without taking extra efforts and extra help from outworld materials you won't understand a thing. \ni.e. the first given problem needs knowlege of recursion etc. if you really want to understand some concepts you've got to spent some more time than 5 hours of watching.\n2) if you won't repeat some similar learning/tasks about those concepts in near future a couple of times - you will surely forget this. \nBut if you really need this knowlege and ready to commit to learning, you will have some results for sure.\nP.S. this way I remind it for myself, but enyone can cosider it as well :)", "likes": 0}]}, {"topLevelComment": {"id": "Ugz2VNrczXEzDtrs6xZ4AaABAg", "publishedAt": "2020-12-03T16:34:46Z", "author": "whalid Mahabub", "text": "Carry on brother... \nYour's contents are very helpful for us", "likes": 0}}, {"topLevelComment": {"id": "UgwSeM4-IzR5DM4xB5t4AaABAg", "publishedAt": "2020-12-03T16:34:25Z", "author": "The CS Content", "text": "I also do videos about programming!\ud83d\ude01", "likes": 0}}, {"topLevelComment": {"id": "Ugx25WvG8HU3s4WT41x4AaABAg", "publishedAt": "2020-12-03T16:33:01Z", "author": "Parsa KamaliPour", "text": "OMG Thank you, I really needed this * ___ *", "likes": 0}, "replies": [{"id": "Ugx25WvG8HU3s4WT41x4AaABAg.9GoQVVlWI-j9GtNBnuNOn1", "publishedAt": "2020-12-05T14:40:19Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "Ugyh1co2r6TTEiKSxkd4AaABAg", "publishedAt": "2020-12-03T16:26:11Z", "author": "A K", "text": "I really enjoyed these! Thank you.", "likes": 0}, "replies": [{"id": "Ugyh1co2r6TTEiKSxkd4AaABAg.9GoPiRprBYF9GtNPwb1l0L", "publishedAt": "2020-12-05T14:42:15Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "Ugx3qFk4-jGQjQjo4Xp4AaABAg", "publishedAt": "2020-12-03T16:11:48Z", "author": "Compton", "text": "Thank you very much! :)", "likes": 0}}, {"topLevelComment": {"id": "Ugy257qIqRbgyPm_4IZ4AaABAg", "publishedAt": "2020-12-03T16:06:31Z", "author": "Education AK", "text": "Which IDE is it?", "likes": 0}, "replies": [{"id": "Ugy257qIqRbgyPm_4IZ4AaABAg.9GoNTRa3Zpc9GrrCQ4bApW", "publishedAt": "2020-12-05T00:32:48Z", "author": "Coderbyte", "text": "I used VSCode! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgyGjVZ1Q-EYwjaVpQx4AaABAg", "publishedAt": "2020-12-03T16:06:07Z", "author": "Roshan Bhattad", "text": "Yeah that's what I am waiting for", "likes": 0}}, {"topLevelComment": {"id": "UgzvIu78rQ44dmF8g_d4AaABAg", "publishedAt": "2020-12-03T16:04:14Z", "author": "tecHSonic", "text": "just wanted this", "likes": 0}}, {"topLevelComment": {"id": "UgzbXog6kHq0PjrPF8t4AaABAg", "publishedAt": "2020-12-03T16:00:54Z", "author": "\u6f58Kiet", "text": "I gotta use my mind to transfer it to python though. Very nice course. Love algo", "likes": 2}, "replies": [{"id": "UgzbXog6kHq0PjrPF8t4AaABAg.9GoMpHNDAac9GtNAIZZH4D", "publishedAt": "2020-12-05T14:40:06Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgzPxNSQpEVJqNjXWEp4AaABAg", "publishedAt": "2020-12-03T15:53:51Z", "author": "Shiva", "text": "Thank you so much for this video.", "likes": 0}}, {"topLevelComment": {"id": "UgxtTRq8mu6Ku5isYt54AaABAg", "publishedAt": "2020-12-03T15:52:05Z", "author": "Tahir Ahmed T", "text": "3:50 fibonacci series starts with 0 and 1", "likes": 4}, "replies": [{"id": "UgxtTRq8mu6Ku5isYt54AaABAg.9GoLogiyb8U9Grqoa2gpjH", "publishedAt": "2020-12-05T00:29:24Z", "author": "Coderbyte", "text": "That's a valid way to define the fib sequence as well. The 0th number is 0, the 1st is 1, the 2nd is 1. They both generate the same sequence. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "UgyU4_GpDwkfI_UIigx4AaABAg", "publishedAt": "2020-12-03T15:43:37Z", "author": "Khyn Antoque", "text": "Quality content \u0f3c \u3064 \u25d5_\u25d5 \u0f3d\u3064 as always", "likes": 0}}, {"topLevelComment": {"id": "UgzsEvcQweCFQKyAwsd4AaABAg", "publishedAt": "2020-12-03T15:34:18Z", "author": "Amit \ud83e\udd72", "text": "Good for Competitive Programming", "likes": 0}}, {"topLevelComment": {"id": "UgzAvYuIMEsnSz2rcyJ4AaABAg", "publishedAt": "2020-12-03T15:30:34Z", "author": "Rohit", "text": "Needed this badly, however would have preferred if it weren't in JS :(", "likes": 32}, "replies": [{"id": "UgzAvYuIMEsnSz2rcyJ4AaABAg.9GoJM5PwQgd9GvWly_uevd", "publishedAt": "2020-12-06T10:42:31Z", "author": "_oskr", "text": "That could maybe be a good thing. Learn it and try to implement it in your language.", "likes": 0}, {"id": "UgzAvYuIMEsnSz2rcyJ4AaABAg.9GoJM5PwQgd9GtNDFpYt3R", "publishedAt": "2020-12-05T14:40:31Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgzAvYuIMEsnSz2rcyJ4AaABAg.9GoJM5PwQgd9GtLKfjYXaH", "publishedAt": "2020-12-05T14:24:03Z", "author": "Rohit", "text": "@simon dungeon I have been re-implementing the same algos in c, it's working out fine but since I was not familiarized to js it took a bit of time to grasp the syntax such as passing the memo hash table in the argument, which confused me in the beginning. It's all good now though.", "likes": 2}, {"id": "UgzAvYuIMEsnSz2rcyJ4AaABAg.9GoJM5PwQgd9GtL3Zq1G_i", "publishedAt": "2020-12-05T14:21:43Z", "author": "Rohit", "text": "@Geeky Programmer that's implied my man, ofcourse I'm grateful.", "likes": 0}, {"id": "UgzAvYuIMEsnSz2rcyJ4AaABAg.9GoJM5PwQgd9GqB5Bt2tsW", "publishedAt": "2020-12-04T08:56:50Z", "author": "simon dungeon", "text": "Try to grasp the algorithms and concepts - your preferable programming language has those codes already in some forums \ud83d\udd96", "likes": 0}]}, {"topLevelComment": {"id": "UgzyZJ_m8PSfkW3tJwd4AaABAg", "publishedAt": "2020-12-03T15:29:11Z", "author": "animegeek96", "text": "I am not sure why I am here. This topic is pretty interesting but for getting a job, it is soo unnecessary when you don't want to work for big tech companies (in most countries except USA there are no big tech companies). It is far more interesting what you are able to program and not something like this.. sure everything is important and there is a reason why there is need for this kind of stuff (time effiency, Big O notation and that crap), but I would rather look for a specific project and program it instead of learning how certain things work you won't use anyways ever. Just my opinion", "likes": 1}}, {"topLevelComment": {"id": "UgzMPXqrpNeO5yHfLAZ4AaABAg", "publishedAt": "2020-12-03T15:29:05Z", "author": "Calvin T", "text": "Damn this guy was the instructor for app academy. His explanations actually put me on the track to understanding this crazy world of code. So glad he's back on the scene!!!", "likes": 320}, "replies": [{"id": "UgzMPXqrpNeO5yHfLAZ4AaABAg.9GoJBBeDOuy9I-H_bQqYPb", "publishedAt": "2021-01-02T03:37:21Z", "author": "Shekhar Neupane", "text": "@Coderbyte completely off-topic question if you don't mind: What microphone are you using?", "likes": 1}, {"id": "UgzMPXqrpNeO5yHfLAZ4AaABAg.9GoJBBeDOuy9HGdSiBKaSV", "publishedAt": "2020-12-15T00:52:57Z", "author": "Willson Mock", "text": "@B Q is there a video link for his data structures and programming videos?", "likes": 2}, {"id": "UgzMPXqrpNeO5yHfLAZ4AaABAg.9GoJBBeDOuy9GtMcCndBjr", "publishedAt": "2020-12-05T14:35:19Z", "author": "Sonu Kumar Keshri", "text": "Hey join this guys\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 1}, {"id": "UgzMPXqrpNeO5yHfLAZ4AaABAg.9GoJBBeDOuy9GrpY1j6V4O", "publishedAt": "2020-12-05T00:18:16Z", "author": "Calvin T", "text": "@Coderbyte ooooo you just got a new sub.", "likes": 2}, {"id": "UgzMPXqrpNeO5yHfLAZ4AaABAg.9GoJBBeDOuy9GrpGSQZ0Bt", "publishedAt": "2020-12-05T00:15:52Z", "author": "Coderbyte", "text": "we meet again! thanks for watching -Alvin", "likes": 23}]}, {"topLevelComment": {"id": "UgznOoJhU9Q1hhFcLGd4AaABAg", "publishedAt": "2020-12-03T15:25:56Z", "author": "Posterized Soul", "text": "Just turn on ads on your videos.\n\n*We are fine as long as we get to learn for free on youtube.*", "likes": 266}, "replies": [{"id": "UgznOoJhU9Q1hhFcLGd4AaABAg.9GoIp7Hp0nO9MGfjBTjghp", "publishedAt": "2021-04-18T07:49:46Z", "author": "Aryan Kumar", "text": "@The NEW One ok ok", "likes": 0}, {"id": "UgznOoJhU9Q1hhFcLGd4AaABAg.9GoIp7Hp0nO9MGe-ByJfq3", "publishedAt": "2021-04-18T07:34:37Z", "author": "The NEW One", "text": "Don't put ideas in their head.", "likes": 1}, {"id": "UgznOoJhU9Q1hhFcLGd4AaABAg.9GoIp7Hp0nO9Kxnc8Praeu", "publishedAt": "2021-03-16T18:02:31Z", "author": "Abhishekgouda H", "text": "@M 3  I have Brave, your premium at free", "likes": 0}, {"id": "UgznOoJhU9Q1hhFcLGd4AaABAg.9GoIp7Hp0nO9JzQhI3KBOe", "publishedAt": "2021-02-20T12:40:35Z", "author": "Alphabets, Alphabets", "text": "@Sherlock Holmes With your deductive skills, I thought that you would've found out about uBlock Origin is.", "likes": 0}, {"id": "UgznOoJhU9Q1hhFcLGd4AaABAg.9GoIp7Hp0nO9JpZyQHLDxA", "publishedAt": "2021-02-16T16:49:10Z", "author": "Sayush Kamat", "text": "I use brave browser lpl", "likes": 1}]}, {"topLevelComment": {"id": "UgxNsLLKYzhz6BgsLVV4AaABAg", "publishedAt": "2020-12-03T15:22:20Z", "author": "Anfechtung-143BGB", "text": "This is the best explanation of dynamic Programming i have ever seen so far. Would have saved me hours of studying back when i was trying to understand the concept.\nThis is really high quality educational material", "likes": 6}, "replies": [{"id": "UgxNsLLKYzhz6BgsLVV4AaABAg.9GoIPpWZD8Y9GtMurgBNrL", "publishedAt": "2020-12-05T14:37:52Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}, {"id": "UgxNsLLKYzhz6BgsLVV4AaABAg.9GoIPpWZD8Y9Grp0SxgNw4", "publishedAt": "2020-12-05T00:13:41Z", "author": "Coderbyte", "text": "Thanks! -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugwwei-Rlb78qhALxIh4AaABAg", "publishedAt": "2020-12-03T15:17:45Z", "author": "MARVEL D CREATOR", "text": "For Premium script , Nulled Script , and Technology based Ebook + Course , And Installation Of codecanyon Projects \nPlease Visit our Website \ud83d\udc47\nhttps://codeall.store\n\nFor live installation on AnyDesk pls contact me on whatsapp +2348114315863", "likes": 0}}, {"topLevelComment": {"id": "Ugw2AQhbL21fVIlJTwx4AaABAg", "publishedAt": "2020-12-03T15:16:36Z", "author": "Kalapita", "text": "finally no hindi <3", "likes": 1}}, {"topLevelComment": {"id": "UgwOcrlNPC46Tf3IE3B4AaABAg", "publishedAt": "2020-12-03T15:15:21Z", "author": "Abdusamad Abdusattorov", "text": "Thanks very much....\nI just loved the way you explain things", "likes": 0}, "replies": [{"id": "UgwOcrlNPC46Tf3IE3B4AaABAg.9GoHbdnC_zz9GrqegO0rsk", "publishedAt": "2020-12-05T00:28:03Z", "author": "Coderbyte", "text": "Glad to hear you found it insightful. Thanks for watching. -Alvin", "likes": 0}]}, {"topLevelComment": {"id": "Ugz3T_CAKx8UN2cTC3x4AaABAg", "publishedAt": "2020-12-03T15:10:38Z", "author": "Aykut", "text": "Thank you for your nice upload", "likes": 0}}, {"topLevelComment": {"id": "UgytsVi04o_w-AnElnt4AaABAg", "publishedAt": "2020-12-03T15:09:14Z", "author": "USMAN MUNIR", "text": "This video is awesome for practice algorithms \ud83d\udc93 thanks freecodecamp", "likes": 0}}, {"topLevelComment": {"id": "Ugz9khkAL7yF7IRMWE94AaABAg", "publishedAt": "2020-12-03T15:07:54Z", "author": "Hasan Saleh", "text": "Thank you very much i need it  a lot #freecodecamp", "likes": 0}}, {"topLevelComment": {"id": "UgwUXZKEd7UkZ5nJ4hp4AaABAg", "publishedAt": "2020-12-03T15:06:32Z", "author": "lowercasecat", "text": "AMAZING content. Thank you so much.", "likes": 0}}, {"topLevelComment": {"id": "Ugy-WKck2uioANAJnWZ4AaABAg", "publishedAt": "2020-12-03T15:06:28Z", "author": "1:00", "text": "JUST WHAT WE NEEDED", "likes": 0}}, {"topLevelComment": {"id": "Ugyj_jJBX3DFTtvWndN4AaABAg", "publishedAt": "2020-12-03T15:05:57Z", "author": "Code With Tomi", "text": "Great course", "likes": 0}}, {"topLevelComment": {"id": "UgwdkzmmJY1l1HQjpgd4AaABAg", "publishedAt": "2020-12-03T15:04:31Z", "author": "Ravikant Mishra", "text": "I was searching and I got it", "likes": 0}, "replies": [{"id": "UgwdkzmmJY1l1HQjpgd4AaABAg.9GoGNH_KjY39GtNv-nKlQu", "publishedAt": "2020-12-05T14:46:37Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwMdPb9l6iznF8xqph4AaABAg", "publishedAt": "2020-12-03T15:03:59Z", "author": "Sinister Strange", "text": "Seems good to me will watch this tomorrow", "likes": 0}}, {"topLevelComment": {"id": "UgxBoqBq6IRTxPerCDx4AaABAg", "publishedAt": "2020-12-03T15:01:54Z", "author": "Aditya Zine", "text": "\ud83d\ude4f", "likes": 1}}, {"topLevelComment": {"id": "UgwZC0PmHoIin7ifgIZ4AaABAg", "publishedAt": "2020-12-03T15:00:17Z", "author": "Habibul Rahman", "text": "Thank you \ud83d\ude0a", "likes": 0}}, {"topLevelComment": {"id": "Ugy41YC4Z-LfvzDoJah4AaABAg", "publishedAt": "2020-12-03T14:59:23Z", "author": "Rahul Ranjan", "text": "Python?", "likes": 1}}, {"topLevelComment": {"id": "Ugya5p92Rc8tuMbg7np4AaABAg", "publishedAt": "2020-12-03T14:57:06Z", "author": "EmEm MeMe", "text": "He said \"Language  of your choice\"\n\nMe: C++ ?", "likes": 20}, "replies": [{"id": "Ugya5p92Rc8tuMbg7np4AaABAg.9GoFWwx71969GoWUyeztVg", "publishedAt": "2020-12-03T17:25:22Z", "author": "Heavydirtysoul", "text": "@saif khan the examples in the video are in JS already", "likes": 1}, {"id": "Ugya5p92Rc8tuMbg7np4AaABAg.9GoFWwx71969GoJOID09Kx", "publishedAt": "2020-12-03T15:30:52Z", "author": "saif khan", "text": "@freeCodeCamp.org Javascript?", "likes": 0}, {"id": "Ugya5p92Rc8tuMbg7np4AaABAg.9GoFWwx71969GoJIbdQ8l0", "publishedAt": "2020-12-03T15:30:05Z", "author": "\u0905\u0923\u094d\u0935\u093e\u092f\u0941\u0935\u0930\u0940\u0935\u0930\u094d\u0924", "text": "@Kevin Isac sure python can be used, in fact python is more easy to implement.\nBut in terms of performance I think it'd be slower than others", "likes": 2}, {"id": "Ugya5p92Rc8tuMbg7np4AaABAg.9GoFWwx71969GoIC_J5ZON", "publishedAt": "2020-12-03T15:20:31Z", "author": "Kevin Isac", "text": "@freeCodeCamp.org can you give some list of programming languages for dynamic programming", "likes": 0}, {"id": "Ugya5p92Rc8tuMbg7np4AaABAg.9GoFWwx71969GoI9Jlm5wa", "publishedAt": "2020-12-03T15:20:05Z", "author": "Kevin Isac", "text": "@freeCodeCamp.org can we use python", "likes": 1}]}, {"topLevelComment": {"id": "UgyCZdfSng_yQGAZTvh4AaABAg", "publishedAt": "2020-12-03T14:56:27Z", "author": "Ved Singh", "text": "Please make a course on Algorithms using python please \nIf already please guys send me link", "likes": 2}, "replies": [{"id": "UgyCZdfSng_yQGAZTvh4AaABAg.9GoFSDODLgn9GoGvuY06xZ", "publishedAt": "2020-12-03T15:09:22Z", "author": "Ved Singh", "text": "@freeCodeCamp.org thanks buddy", "likes": 1}, {"id": "UgyCZdfSng_yQGAZTvh4AaABAg.9GoFSDODLgn9GoFnNHLd0l", "publishedAt": "2020-12-03T14:59:28Z", "author": "freeCodeCamp.org", "text": "This may be what you are looking for: https://www.youtube.com/watch?v=p65AHm9MX80", "likes": 2}]}, {"topLevelComment": {"id": "UgytyaDefwKf891OPOp4AaABAg", "publishedAt": "2020-12-03T14:55:47Z", "author": "The Coding Odyssey", "text": "this channel provides so much value for free its insane!", "likes": 1}}, {"topLevelComment": {"id": "UgyoFrcNNaOp78FzHER4AaABAg", "publishedAt": "2020-12-03T14:55:18Z", "author": "Soumadip Banerjee", "text": "Beautiful \u2764\ufe0f", "likes": 1}}, {"topLevelComment": {"id": "Ugz2GYfhI0NhLTx3e2F4AaABAg", "publishedAt": "2020-12-03T14:55:13Z", "author": "\u0905\u0923\u094d\u0935\u093e\u092f\u0941\u0935\u0930\u0940\u0935\u0930\u094d\u0924", "text": "Yes yes yes I've been waiting for it", "likes": 1}}, {"topLevelComment": {"id": "UgyJHujjPalWdl_dSvd4AaABAg", "publishedAt": "2020-12-03T14:55:04Z", "author": "Kelvin Makau", "text": "I'm sure this will be so helpful. Thank you", "likes": 0}}, {"topLevelComment": {"id": "UgyxWki8vsoJk7wpnLx4AaABAg", "publishedAt": "2020-12-03T14:54:38Z", "author": "Balmiki Shah", "text": "Best programme  website", "likes": 0}}, {"topLevelComment": {"id": "UgzPXR1dmrnEFSW2owN4AaABAg", "publishedAt": "2020-12-03T14:54:10Z", "author": "hugh mungus", "text": "help someoen sent me the link to this", "likes": 0}, "replies": [{"id": "UgzPXR1dmrnEFSW2owN4AaABAg.9GoFBVF37Dp9GtNeEYPwoQ", "publishedAt": "2020-12-05T14:44:20Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgwAl74TREzfx8CoX3V4AaABAg", "publishedAt": "2020-12-03T14:54:08Z", "author": "Bulya Hakimi", "text": "nothing special but this is the 15th comment", "likes": 0}}, {"topLevelComment": {"id": "UgxT8JEVb12EyrDJcJh4AaABAg", "publishedAt": "2020-12-03T14:54:02Z", "author": "Vivek Kumar", "text": "Please upload course on Data structures and algorithms", "likes": 0}, "replies": [{"id": "UgxT8JEVb12EyrDJcJh4AaABAg.9GoFAUR76r59GoFz1e4eqU", "publishedAt": "2020-12-03T15:01:04Z", "author": "freeCodeCamp.org", "text": "Here are a few:\nhttps://www.youtube.com/watch?v=zg9ih6SVACc\nhttps://www.youtube.com/watch?v=RBSGKlAvoiM", "likes": 0}]}, {"topLevelComment": {"id": "Ugx_EcocypF7skYr02N4AaABAg", "publishedAt": "2020-12-03T14:53:09Z", "author": "Keerthan Ugrani", "text": "Was waiting for this \ud83d\ude2d\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"id": "UgxH-B1tS8Ji3vPbVb54AaABAg", "publishedAt": "2020-12-03T14:52:59Z", "author": "Aman Cuber", "text": "getting a video exclusively for \"dynamic programming\" got me on cloud 9 :)", "likes": 25}, "replies": [{"id": "UgxH-B1tS8Ji3vPbVb54AaABAg.9GoF2ogkw-P9IipC9R4ivq", "publishedAt": "2021-01-20T05:24:55Z", "author": "Light Theory LLC", "text": "Assalamualaikum brothers and sis, I am seeking Software Engineers, whom can code in Tensor flow and RNN Time series.  I am paying.. I am based in USA.. Please check out https://lighttheory.page/  or email us at info@LightTheory.tech  SALAM", "likes": 0}, {"id": "UgxH-B1tS8Ji3vPbVb54AaABAg.9GoF2ogkw-P9IipBkaj_PP", "publishedAt": "2021-01-20T05:24:51Z", "author": "Light Theory LLC", "text": "I like your Logo", "likes": 0}, {"id": "UgxH-B1tS8Ji3vPbVb54AaABAg.9GoF2ogkw-P9GtMssZH884", "publishedAt": "2020-12-05T14:37:35Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}, {"topLevelComment": {"id": "UgxaERqQZx8Vo2Y2TJx4AaABAg", "publishedAt": "2020-12-03T14:52:54Z", "author": "Sherzod Tursunov", "text": "You best of the best thanks \nUZBEKISTAN", "likes": 1}}, {"topLevelComment": {"id": "UgziY0FJUF8YljwafS94AaABAg", "publishedAt": "2020-12-03T14:52:52Z", "author": "Lelouch no Requiem", "text": "Quality content from Quality Teachers,that too for free!!\u2764\ufe0f\u2764\ufe0f", "likes": 701}, "replies": [{"id": "UgziY0FJUF8YljwafS94AaABAg.9GoF1vQs-Xn9Ka3jAoCik3", "publishedAt": "2021-03-07T12:50:15Z", "author": "Jirayu Vijjakajohn", "text": "@Cedric Villani well they got to make money somehow", "likes": 1}, {"id": "UgziY0FJUF8YljwafS94AaABAg.9GoF1vQs-Xn9Iw-m8QHy1P", "publishedAt": "2021-01-25T08:16:12Z", "author": "Cedric Villani", "text": "Did you say free?? Because I count 16 ADs they placed in the video", "likes": 1}, {"id": "UgziY0FJUF8YljwafS94AaABAg.9GoF1vQs-Xn9Iip2cUrxDK", "publishedAt": "2021-01-20T05:23:36Z", "author": "Light Theory LLC", "text": "Assalamualaikum brothers and sis, I am seeking Software Engineers, whom can code in Tensor flow and RNN Time series.  I am paying.. I am based in USA.. Please check out https://lighttheory.page/  or email us at info@LightTheory.tech  SALAM", "likes": 0}, {"id": "UgziY0FJUF8YljwafS94AaABAg.9GoF1vQs-Xn9HZvzZFqdsP", "publishedAt": "2020-12-22T12:40:25Z", "author": "\u0905\u0923\u094d\u0935\u093e\u092f\u0941\u0935\u0930\u0940\u0935\u0930\u094d\u0924", "text": "@Neeraj Kale I can't still fathom that scam is still running", "likes": 4}, {"id": "UgziY0FJUF8YljwafS94AaABAg.9GoF1vQs-Xn9HPIgayq1ul", "publishedAt": "2020-12-18T09:35:54Z", "author": "Neeraj Kale", "text": "Someone tell this to WhiteHatJr ppl", "likes": 4}]}, {"topLevelComment": {"id": "UgwJBA9ePr2JKAWg_M14AaABAg", "publishedAt": "2020-12-03T14:52:12Z", "author": "Yash Trivedi", "text": "Thank you very much, I was starting dp and you just made a video on it.", "likes": 3}}, {"topLevelComment": {"id": "Ugw0hE87qNPL3QQ8z4d4AaABAg", "publishedAt": "2020-12-03T14:52:11Z", "author": "First name Last name", "text": "Literally wanted video,\nThank you fcc!!", "likes": 3}}, {"topLevelComment": {"id": "UgzzLj_d44Hp0I26elJ4AaABAg", "publishedAt": "2020-12-03T14:52:05Z", "author": "Md Nazmul Hossain", "text": "Hmmm... Interesting !!!", "likes": 0}}, {"topLevelComment": {"id": "Ugwye5FKt4qRO1KwUuZ4AaABAg", "publishedAt": "2020-12-03T14:51:59Z", "author": "Debug With Shubham", "text": "Sir actually I am using python any problem to learn DP?", "likes": 2}, "replies": [{"id": "Ugwye5FKt4qRO1KwUuZ4AaABAg.9GoEwUaCA2R9GoG2vsCnsQ", "publishedAt": "2020-12-03T15:01:44Z", "author": "Debug With Shubham", "text": "@freeCodeCamp.org thanks for replying sir", "likes": 0}, {"id": "Ugwye5FKt4qRO1KwUuZ4AaABAg.9GoEwUaCA2R9GoFAY_dluu", "publishedAt": "2020-12-03T14:54:02Z", "author": "freeCodeCamp.org", "text": "This course teaches general principles that apply to any programming language. Although the language used in the video is JavaScript.", "likes": 4}]}, {"topLevelComment": {"id": "UgxHZzAngKSWeM0vIm94AaABAg", "publishedAt": "2020-12-03T14:51:53Z", "author": "Arpan Codes", "text": "Preparing for my interview... Thanks for this \u2764\ufe0f", "likes": 1}, "replies": [{"id": "UgxHZzAngKSWeM0vIm94AaABAg.9GoEvkdtDPx9GoMdry3biu", "publishedAt": "2020-12-03T15:59:20Z", "author": "Arpan Codes", "text": "@Aya Bc thanks a lot \u2764\ufe0f", "likes": 0}]}, {"topLevelComment": {"id": "UgwWtHJQIYOksZuqLyp4AaABAg", "publishedAt": "2020-12-03T14:51:44Z", "author": "Papi San", "text": "How is there one view already and it\u2019s only been seconds.", "likes": 3}, "replies": [{"id": "UgwWtHJQIYOksZuqLyp4AaABAg.9GoEug-hDkt9GrWtKCFUMO", "publishedAt": "2020-12-04T21:26:33Z", "author": "Mwaniki Mwaniki", "text": "@Chimaobi Amanchukwu lmaooooo\ud83d\ude02\ud83d\ude02\ud83d\ude02", "likes": 0}, {"id": "UgwWtHJQIYOksZuqLyp4AaABAg.9GoEug-hDkt9GpLkO7SdBT", "publishedAt": "2020-12-04T01:10:44Z", "author": "Chimaobi Amanchukwu", "text": "@Teemee do you want a tutorial on how to do this?", "likes": 0}, {"id": "UgwWtHJQIYOksZuqLyp4AaABAg.9GoEug-hDkt9Gp85pQ9HKs", "publishedAt": "2020-12-03T23:11:28Z", "author": "Teemee", "text": "@Chimaobi Amanchukwu How TF did you reply an hour before the comment tho", "likes": 0}, {"id": "UgwWtHJQIYOksZuqLyp4AaABAg.9GoEug-hDkt9GoFieeQ1gD", "publishedAt": "2020-12-03T14:58:50Z", "author": "Chimaobi Amanchukwu", "text": "Sorry man that was me", "likes": 1}]}, {"topLevelComment": {"id": "UgzN834TceqiCA-ONdt4AaABAg", "publishedAt": "2020-12-03T14:51:40Z", "author": "liviu mircea", "text": "Wow ...just what I needed", "likes": 1}}, {"topLevelComment": {"id": "Ugz1MoeOTGPpLHXu8tB4AaABAg", "publishedAt": "2020-12-03T14:51:36Z", "author": "nipanko", "text": "First\ud83d\udc4d\ud83d\udc4d", "likes": 1}}, {"topLevelComment": {"id": "UgyKyJtRE_B7dqUckvF4AaABAg", "publishedAt": "2020-12-03T14:51:34Z", "author": "Moms Simple Recipeis", "text": "You are so graet", "likes": 1}}, {"topLevelComment": {"id": "UgzNkbVGMQAjuD6p7ol4AaABAg", "publishedAt": "2020-12-03T14:51:21Z", "author": "APPUZ FF", "text": "First like \ud83e\udd70\u2764\u2764", "likes": 2}}, {"topLevelComment": {"id": "UgxbYKGVb6zsOInaQnZ4AaABAg", "publishedAt": "2020-12-03T14:50:59Z", "author": "Prometheus", "text": "Sweet", "likes": 1}}, {"topLevelComment": {"id": "Ugwb2eBQLDZbOFZfDi94AaABAg", "publishedAt": "2020-12-03T14:50:58Z", "author": "APPUZ FF", "text": "\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d", "likes": 2}}, {"topLevelComment": {"id": "UgyhPbJE865qqEpTgQt4AaABAg", "publishedAt": "2020-12-03T14:50:55Z", "author": "Chimaobi Amanchukwu", "text": "Awe yeah this is what I\u2019ve been wait for", "likes": 38}, "replies": [{"id": "UgyhPbJE865qqEpTgQt4AaABAg.9GoEohsvWg-9GtMwdDvn9H", "publishedAt": "2020-12-05T14:38:06Z", "author": "Sonu Kumar Keshri", "text": "Hey join this , it will help you a lot \ud83d\ude42\n\nhttps://www.scaler.com/event/coding-interviews-dynamic-programming?rcy=1&rce=f6cd5eeb1984", "likes": 0}]}]}