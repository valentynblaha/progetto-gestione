{"video": {"id": "KOVc5o5kURE", "title": "Mediator Design Pattern - Beau teaches JavaScript", "description": "The Mediator Design Pattern is a pattern that provides a central authority through which the different components of an application may communicate. See an example of this pattern in JavaScript.\n\n\ud83d\udcbb Code: https://codepen.io/beaucarnes/pen/XRRjKL?editors=0012\n\n\ud83d\udd17 More info: http://www.dofactory.com/javascript/mediator-design-pattern\n\n\ud83d\udc26 Beau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Tutorials Playlists\u2b50\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nRead great tech articles at https://medium.freecodecamp.com", "duration": "PT5M9S", "likes": "428", "views": "22095"}, "comments": [{"topLevelComment": {"author": "nathnolt", "text": "But why? What problem does this solve? How and when should I use this and what alternatives are there and why is this one better? Right now it's a useless piece of code.", "likes": 1}}, {"topLevelComment": {"author": "Ankit Mehrotra", "text": "Awesome Beau..Your videos and teaching is too good..", "likes": 0}}, {"topLevelComment": {"author": "Sunit Katkar", "text": "Very nicely explained.", "likes": 0}}, {"topLevelComment": {"author": "Giuseppe Montanaro", "text": "I didn't really see the difference between this and the pubsub. Can anyone explain the main differences? TO me the look really similar...", "likes": 0}, "replies": [{"author": "Giuseppe Montanaro", "text": "@Mauricio Farias Dziedzinski thank you. Very exhaustive \u263a", "likes": 0}, {"author": "Mauricio Farias Dziedzinski", "text": "You can say that the pubsub event bus is a mediator, but a mediator is not an event bus (or a pubsub in general).\n\nUsing the video's code example, you can see that the chatroom acts as a mediator by directly calling the \"receive\" method of every participant. The participant calls its \"send\" method which will use the chatroom's \"send\" method to call all of the other participants \"receive\" method. This way participants don't need to store any information about other participants, the chatroom (mediator) will be responsible for mediating this communication.\n\nIn the pubsub pattern we always have an event bus taking care of all events and handlers that are registered to it, and it is also a mediator. The difference is that the pubsub is done specifically to deal with events, where an object can subscribe to any event with a handler, and another completely different object can also subscribe to an event or fire one that was subscribed by other objects. Objects have no idea of how many other objects are subscribed to the event they are firing (just like participants have no idea of other participants in the chat room), and also objects have no idea of who's firing the event they're subscribing to. The responsibility of the event bus (mediator) is to properly handle these events by calling the proper callbacks attached to them.\n\nAnd the observer pattern, which can also be confusing in the middle of these, is almost the same as the pubsub (pubsub is actually derived from the subscriber pattern), the difference being that while using pubsub we have a very loose coupling between objects due to the event bus being the one handling all the events, and in the observer pattern we have a tight coupling because the observer object always knows about the subject it's observing to (exactly how we do natively using the DOM API to listen to elements events).", "likes": 0}]}, {"topLevelComment": {"author": "Mr Valdes", "text": "Exactly the same example from Brad Traversy udemy course for the pattern.", "likes": 0}, "replies": [{"author": "Mr Valdes", "text": "@freeCodeCamp.org i see, thanks", "likes": 0}, {"author": "freeCodeCamp.org", "text": "Must have both gotten from https://www.dofactory.com/javascript/mediator-design-pattern", "likes": 1}]}, {"topLevelComment": {"author": "Chriss123", "text": "Awesome tutorial - Thanks.", "likes": 0}}, {"topLevelComment": {"author": "Fredo Corleone", "text": "This is how various NICs communicate in a subnet", "likes": 0}}, {"topLevelComment": {"author": "allo", "text": "Very helpful!", "likes": 0}}, {"topLevelComment": {"author": "Jama", "text": "hey guys, I have to develop three design patterns to mobile app, If I use this code, do you think they can find it as an act of plagarism?", "likes": 0}}, {"topLevelComment": {"author": "Cyril ViXP", "text": "Looks like the less flexible implementation of Observer pattern", "likes": 1}, "replies": [{"author": "wakamoto1105", "text": "I was thinking the same thing... I know this is from 2 years ago, but I think the difference could be in an observer pattern, the update function is called on the observable (obs.update(), then all subscribers gets notified and handle), but here the equivalent is send, which is called on the subscribers (user.send())", "likes": 0}]}, {"topLevelComment": {"author": "Zen Waichi", "text": "you are bad at managing your youtube channel. You should keep the videos in your playlist in chronological order with the oldest at the smallest index so they can be watched one after the other", "likes": 7}, "replies": [{"author": "Zen Waichi", "text": "bump...", "likes": 0}]}, {"topLevelComment": {"author": "comc39", "text": "Is the mediator the same thing as the dispatcher in the flux architecture?", "likes": 1}}, {"topLevelComment": {"author": "Priyanshu Jindal", "text": "So the redux pattern is similar/subset of the mediator design pattern?", "likes": 1}, "replies": [{"author": "Ksee", "text": "Redux is like the sub pub pattern but it also holds the global state of the application , also the reducers can have some logic and manipulate the state as well, so it\u2019s a little more robust pubsub pattern. The mediator pattern is also called the observer pattern. There is a difference between the mediator pattern and the observer pattern go look it up", "likes": 0}, {"author": "Priyanshu Jindal", "text": "thanks to clarify that", "likes": 0}, {"author": "Sa\u0161a Tatar", "text": "I think it's more of a combination of the mediator and the publish/subscribe pattern.", "likes": 0}]}, {"topLevelComment": {"author": "Koty Wong", "text": "I liked this one", "likes": 1}, "replies": [{"author": "Lionel T.", "text": "I liked that one and this one too!", "likes": 1}]}, {"topLevelComment": {"author": "Hendra Wijaya Djiono", "text": "Good example :)", "likes": 1}}, {"topLevelComment": {"author": "FunfailDigital", "text": "Awesome!!", "likes": 1}}, {"topLevelComment": {"author": "Oliver Mensah", "text": "Excellent work", "likes": 1}}, {"topLevelComment": {"author": "Raul Melo", "text": "Excellent!", "likes": 1}}, {"topLevelComment": {"author": "ViZiO Music", "text": "Awesome video keep it up!", "likes": 0}}]}