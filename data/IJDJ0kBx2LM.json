{"video": {"id": "IJDJ0kBx2LM", "title": "Recursion in Programming - Full Course", "description": "Recursion is a powerful technique that helps us bridge the gap between complex problems being solved with elegant code. Within this course, we will break down what recursion is, why you would and wouldn\u2019t want to use it and look at a variety of examples for how it can be used.\n\nWe\u2019ll break down recursion with all sorts of data-structures, animations, debugging and call-stack analysis to get a deeper understanding to these principles.\n\nThe code is written in Java, but the principles are agnostic to any language. \n\n\u270f\ufe0f This course was developed by The Simple Engineer. Find him online:\n\ud83d\udd17 https://youtube.com/TheSimpleEngineer\n\ud83d\udd17 https://www.patreon.com/thesimpleengineer\n\n\u2b50\ufe0f Course Contents \u2b50\ufe0f\n\u2328\ufe0f (0:00:00) Introduction\n\u2328\ufe0f (0:00:42) What Is Recursion?\n\u2328\ufe0f (0:00:50) Explaining Recursion via ATM Analogy\n\u2328\ufe0f (0:04:56) Explaining Recursion via Essay Revision Analogy\n\u2328\ufe0f (0:06:22) Summarizing What Recursion Is\n\u2328\ufe0f (0:07:15) Why & Why Not Recursion\n\u2328\ufe0f (0:10:57) Understanding The Call Stack\n\u2328\ufe0f (0:11:32) Call Stack Analogy\n\u2328\ufe0f (0:16:35) Recursion With Strings Introduction\n\u2328\ufe0f (0:16:50) String Reversal Explanation\n\u2328\ufe0f (0:20:47) String Reversal Call Stack Animation\n\u2328\ufe0f (0:22:59) Palindrome Explanation\n\u2328\ufe0f (0:25:46) Palindrome Call Stack Animation\n\u2328\ufe0f (0:27:46) Recursion With Numbers\n\u2328\ufe0f (0:28:02) Decimal To Binary Explanation\n\u2328\ufe0f (0:31:12) Decimal To Binary Code & Debug\n\u2328\ufe0f (0:34:33) Sum of Natural Numbers Explanation\n\u2328\ufe0f (0:36:17) Sum of Natural Numbers Code & Debug\n\u2328\ufe0f (0:38:51) Divide & Conquer Algorithms\n\u2328\ufe0f (0:39:27) Binary Search Animation & Explanation\n\u2328\ufe0f (0:43:50) Fibonacci Explanation\n\u2328\ufe0f (0:45:54) Fibonacci Animation\n\u2328\ufe0f (0:49:07) Merge Sort Explanation & Animation\n\u2328\ufe0f (0:53:21) Merge Sort Code & Debug\n\u2328\ufe0f (1:09:36) Linked Lists\n\u2328\ufe0f (1:09:49) Linked List Reversal Animation\n\u2328\ufe0f (1:14:48) Linked List Code & Debug\n\u2328\ufe0f (1:19:52) Merge Two Sorted Linked Lists Animation\n\u2328\ufe0f (1:25:53) Merge Two Sorted Linked Lists Code & Debug\n\u2328\ufe0f (1:29:02) Trees\n\u2328\ufe0f (1:29:14) Insert Value Into Binary Search Tree Animation\n\u2328\ufe0f (1:31:32) Insert Value Into Binary Search Tree Code Walkthrough\n\u2328\ufe0f (1:33:43) Insert Value Into Binary Search Tree Call Stack Animation\n\u2328\ufe0f (1:35:11) Print All Leaf Nodes Explanation\n\u2328\ufe0f (1:37:02) Print All Leaf Nodes Code & Debug\n\u2328\ufe0f (1:41:09) Graphs\n\u2328\ufe0f (1:41:21) Depth-First Search Animation\n\u2328\ufe0f (1:42:58) Depth-First Search Code Walkthrough\n\u2328\ufe0f (1:45:38) Recursion Optimizations\n\u2328\ufe0f (1:45:44) Memoization & Caching\n\u2328\ufe0f (1:47:59) Tail-Call Recursion\n\u2328\ufe0f (1:50:48) Conclusion\n\n\ud83c\udf89 Thanks to our Champion and Sponsor supporters:\n\ud83d\udc7e Wong Voon jinq\n\ud83d\udc7e hexploitation\n\ud83d\udc7e Katia Moran\n\ud83d\udc7e BlckPhantom\n\ud83d\udc7e Nick Raker\n\ud83d\udc7e Otis Morgan\n\ud83d\udc7e DeezMaster\n\ud83d\udc7e Treehouse\n\ud83d\udc7e AppWrite\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news", "duration": "PT1H51M36S", "likes": "17715", "views": "626060"}, "comments": [{"topLevelComment": {"author": "Ryan Schachte", "text": "Hey everyone! \ud83d\udc4b. I\u2019m stoked to share some knowledge on recursion through FCC. Feel free to reach out or connect with me if you have questions!", "likes": 487}, "replies": [{"author": "thunderboltofflammingwisdom", "text": "\ud83d\udc96", "likes": 0}, {"author": "jorriffhdhtrsegg", "text": "Thanks! I was getting confused during Jovian's DSA course for python Clears a lot up that previously wasn't explained well, if it had been at all, and doesn't seem to matter than its Java either", "likes": 0}, {"author": "Ryan Schachte", "text": "@Pavan Yerra hello", "likes": 0}, {"author": "Pavan Yerra", "text": "HI", "likes": 0}, {"author": "Pramod Necromancer", "text": "Thankyou soooo much for wt an amazing videos your providing \u2764\ufe0f", "likes": 0}]}, {"topLevelComment": {"author": "Muntasir Mahmud Saif", "text": "on 26:48\n\npseudocode for other language\n\nfunction isPalindrome(str) {\nif (str.length < 2) {\n        return true;\n    }\n\n    if (firstCharacter(str) === lastCharacter(str)) {\n        return isPalindrome(middleCharacters(str));\n    }\n\n    return false;\n}", "likes": 0}}, {"topLevelComment": {"author": "Pablo Escaida", "text": "Awesome! Thank you so much for the course !\ud83d\ude00", "likes": 0}}, {"topLevelComment": {"author": "Eric Noguchi", "text": "Thanks for the great content! It covers so many different areas of software development.", "likes": 7}}, {"topLevelComment": {"author": "Mark Lord", "text": "This is what the education system needs.  Well-put-together courses that are accessible to anyone with a computer.  I'm sure you'll continue to get likes and subscriptions well into the future because of this gem.  Well done.", "likes": 4}}, {"topLevelComment": {"author": "James", "text": "This is amazing.  Thank you!", "likes": 0}}, {"topLevelComment": {"author": "Austen Williams", "text": "so basically solving a problem backwards in smaller steps.", "likes": 0}}, {"topLevelComment": {"author": "Galib Mahim", "text": "Very nicely explained. Well for me The ATM example quite describes in on itself what recursion is then the stack memory that computer has explains why it works like last task to the first.\nAgain very good. Appreciate\u2764", "likes": 0}}, {"topLevelComment": {"author": "Yagan_Dawn", "text": "What a great tutorial!", "likes": 0}}, {"topLevelComment": {"author": "Dima M.", "text": "okay, you all telling that you understood recursion and all of this.\nbut let's appreceate the man for finally explain us why Stack Overflow is Stack Overflow :D", "likes": 1}}, {"topLevelComment": {"author": "Chintan Gandhi", "text": "Palindrome example is incorrect.", "likes": 0}}, {"topLevelComment": {"author": "Nick Vries de", "text": "Very clear. Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Obada Alhomsi Altawil", "text": "great i love your explantaion \nwhat is the name of your theme at vs code", "likes": 0}}, {"topLevelComment": {"author": "idc20627", "text": "Im surprised factorial wasn't amongst one of the examples. This resource plus the MIT lecture on youtube regarding recursion has cemented this tool for. On to the next tool!", "likes": 0}}, {"topLevelComment": {"author": "jorriffhdhtrsegg", "text": "Good to know i can read Java then. Being a Python user just add curly brace and semicolons haha", "likes": 0}}, {"topLevelComment": {"author": "cangozpinar", "text": "Hi, does anyone know how do they create the animations in the video ?", "likes": 0}}, {"topLevelComment": {"author": "Atul Dubey", "text": "Universe class explanation :)", "likes": 0}}, {"topLevelComment": {"author": "Abdur Rahman", "text": "58:00", "likes": 0}}, {"topLevelComment": {"author": "Abdur Rahman", "text": "41:00", "likes": 0}}, {"topLevelComment": {"author": "pew", "text": "This stuff good", "likes": 0}}, {"topLevelComment": {"author": "pew", "text": "16:58 start", "likes": 0}}, {"topLevelComment": {"author": "NAVEED KHAN", "text": "Thanks", "likes": 1}}, {"topLevelComment": {"author": "khashayar shayesteh", "text": "Great training, but I don't know where i can download the codes in the video?", "likes": 0}}, {"topLevelComment": {"author": "Afghans Music Home", "text": "hey thank you so much it was very useful and finally i got it", "likes": 0}}, {"topLevelComment": {"author": "Charles", "text": "\"I get an error\nAnd that error is a STACK OVERFLOW\"\n\nFreecodecamp 2021 15:34", "likes": 1}}, {"topLevelComment": {"author": "Henry", "text": "the voice \ud83d\ude0f", "likes": 0}}, {"topLevelComment": {"author": "Aditya Alshi", "text": "(0:39:27) Binary Search Animation & Explanation\n\npublic static int FindinArray(int[] A, int x){\r\n        if(A.length == 0 || x > A[A.length-1]){\r\n            return -1;\r\n        }\r\n        if(A[A.length - 1] == x){\r\n            return A.length - 1;\r\n        }\r\n        int mid = A.length /2;\r\n        if(mid == 0){\r\n            return -1;\r\n        }\r\n\r\n        if(A[mid -1] >= x){\r\n            return FindinArray(Arrays.copyOfRange(A,0, mid), x);\r\n        }\r\n        else{\r\n            return mid + FindinArray(Arrays.copyOfRange(A,mid, A.length-1), x);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args){\r\n        int y = FindinArray(new int[]{-1,0,4,5,6,8,11,12,15}, 15);\r\n        System.out.println(y);\r\n    }", "likes": 0}}, {"topLevelComment": {"author": "Ahmed ELMawrdy", "text": "Ryan, thanks a lot", "likes": 0}}, {"topLevelComment": {"author": "Abdalla Ismail", "text": "what is the name of the extension that prints the value of each step in debugging mode?", "likes": 0}}, {"topLevelComment": {"author": "\u0632\u064a\u0646 \u0627\u0644\u062f\u064a\u0646", "text": "i think the decimal to binary function miss the case when 0 is the number to be converted,in that case the function will return \"\" instead of \"0\".\nanyways thanks for the video!", "likes": 0}}, {"topLevelComment": {"author": "Owen Lie", "text": "I cannot keep up at 'Merge Sort Code & Debug'. I already tried to rewatch it many times, but I still don't understand.", "likes": 0}, "replies": [{"author": "Sabu", "text": "same bro", "likes": 0}]}, {"topLevelComment": {"author": "Advaith Sahasranamam", "text": "This. is.... BEAUTIFUL. ABSOLUTELY BEAUTIFUL LIKE DAMN. Why isn't anyone teaching like this guy?\nHats off to you!", "likes": 1}}, {"topLevelComment": {"author": "Jasmine", "text": "So does the follow video on backtracking no longer exist? No link?", "likes": 0}}, {"topLevelComment": {"author": "Jasmine", "text": "It took me about 5 replays to for the linked list reversal to click. But when I had my \"ah ha\" moment... chef's kiss! \ud83d\ude1aAmazing!", "likes": 0}}, {"topLevelComment": {"author": "Aya", "text": "Great tutorial, thanks!!\ncan you please post the link to the video mentioned in the \"What NEXT? \" 1:50:48", "likes": 0}}, {"topLevelComment": {"author": "Nirikshan Kumar", "text": "is this the full recursion video????????", "likes": 0}}, {"topLevelComment": {"author": "rockrpyt", "text": "anyone know what IDE he is using? I really like the debug feature and its simplicity", "likes": 0}}, {"topLevelComment": {"author": "WKDS Coding", "text": "Could you do one on GLSL and OpenGL?", "likes": 0}}, {"topLevelComment": {"author": "Mohamed Gad", "text": "on *39:39* ,  when you calculate the mid you should add the ( left ) value to the calculations", "likes": 0}}, {"topLevelComment": {"author": "Haruka", "text": "I am mind blown. I almost never use recursion because it felt so alien to me, I've done everything in for loops, while loops, etc, but mostly for loops. \nI've never seen so little lines of code typed for something very very complex! This makes me rethink how I program. Rather than seeing what's in front of me, but taking a step back, identifying a pattern, using that pattern flow to your advantage, adjust the course of the river and viola you've done it.", "likes": 7}}, {"topLevelComment": {"author": "astr0", "text": "me trying to follow with C, oh lets first implement that substr thing xD", "likes": 0}}, {"topLevelComment": {"author": "Common Man", "text": "You guys are god to poor students", "likes": 0}}, {"topLevelComment": {"author": "Rudedude", "text": "Awesome video! Does anyone know that name of the song at 0:32?", "likes": 0}}, {"topLevelComment": {"author": "saalim24", "text": "Thank you!", "likes": 1}}, {"topLevelComment": {"author": "siddharth paigwar", "text": "Completed :)", "likes": 0}}, {"topLevelComment": {"author": "Kyi Win Thein", "text": "How to overcome maximum recursion limit  997 times  in python  and other programming languages?", "likes": 0}}, {"topLevelComment": {"author": "Sheraz Khan", "text": "@Ryan Schachte at the very end you mentioned about Algorithmic Mental Models for backtracking. Has this video been released?", "likes": 0}}, {"topLevelComment": {"author": "Sheraz Khan", "text": "Print All Leaf Nodes solution doesn't need if conditions on line 8 and 10. Base condition is guarding against nulls so no need to check it again.", "likes": 0}}, {"topLevelComment": {"author": "Sheraz Khan", "text": "Great great beginning of video. Very nice explanation of what recursion is and how to think in recursion. Liked how the code is explained using graphics which helps understand what the code is doing. But, it'd have been great if no code was displayed for any given problem first and discuss what can we do to solve the problem. That's what's the most challenging part. Take Merging Sorted Link List example. The code was shows right away and we are walked through what the code is doing. I think more interesting part would have been to discuss the approach and then come up with a solution. \nBut I must say that this video so far is the best in explaining Recursion.", "likes": 0}, "replies": [{"author": "me", "text": "Leyton", "likes": 0}]}, {"topLevelComment": {"author": "Daniele Santos", "text": "Thanks!", "likes": 1}}, {"topLevelComment": {"author": "UnitedWay", "text": "Progress:\n\n--> 34:32\n\n--> 1:29:10", "likes": 1}}, {"topLevelComment": {"author": "A S Shivam", "text": "https://www.youtube.com/watch?v=xeMcWN_5qK4\n\nThis is awesome!! Clear all your doubts about Recursion and master it in just 15 minutes!! \nWatch now!!", "likes": 0}}, {"topLevelComment": {"author": "A K M Zahidul Islam", "text": "Just wonderful!  A brilliant teacher who is wholeheartedly passionate and industrious about teaching. Result? You watch this.", "likes": 0}}, {"topLevelComment": {"author": "Live2Code", "text": "Thanks for the content presentend here; very clear, excellent explanation very great examples!", "likes": 0}}, {"topLevelComment": {"author": "ADITYA", "text": "using relative analogies and debugger to explain call stuck made it easy for me understand,Thanks simple Engineer", "likes": 0}}, {"topLevelComment": {"author": "A S Shivam", "text": "https://www.youtube.com/watch?v=xeMcWN_5qK4\n\nTo learn Recursion in Python, watch the video on this link", "likes": 0}}, {"topLevelComment": {"author": "\u848b\u82b3\u6797", "text": "fortnite", "likes": 0}}, {"topLevelComment": {"author": "Tirupati Rao", "text": "This is simple and crystal clear to start with. Dn,t underestimate as it is long video.it\u2019s 200% wort", "likes": 0}}, {"topLevelComment": {"author": "Timmy Higgins", "text": "Oh Christ, far too complicated", "likes": 0}}, {"topLevelComment": {"author": "Kamruz Zaman", "text": "Great video, helps explain recursion clearly using good examples and diagrams. I use it to help teach recursion in my A level CS classes. I recommend trying to implement the examples in code (I used Python) to help better understand the examples. The instructor also uses a good clear tone of voice with the right amount of pace so it is easy to follow the explanations.", "likes": 0}, "replies": [{"author": "Ryan Schachte", "text": "Thanks!", "likes": 0}]}, {"topLevelComment": {"author": "Besher Khayat", "text": "This is what amazing content is...but I think there is a mistake in the palindrome code...in the recursive call I think we should use str. length()-2 instead of str. length()-1", "likes": 2}, "replies": [{"author": "Besher Khayat", "text": "@Saurav Tiru ok thank you bro", "likes": 0}, {"author": "Saurav Tiru", "text": "@Besher Khayat in JS it excludes the last index", "likes": 0}, {"author": "Besher Khayat", "text": "@DESI EnGineer no it does..at least in c++", "likes": 1}, {"author": "DESI EnGineer", "text": "substring () doesn't include the last index", "likes": 0}, {"author": "Tamir B", "text": "Possibly it\u2019s because the substring goes from 1 to str.length -1 where str.length-1 is not included", "likes": 0}]}, {"topLevelComment": {"author": "ibrahim jamil", "text": "explaination of code is kind of messy and unclear at merge sort and linked list", "likes": 0}}, {"topLevelComment": {"author": "Dexman", "text": "Thanks to the simple engineer now that I really understand what recursion is all about. You really made my day today :)", "likes": 0}}, {"topLevelComment": {"author": "Mamdouh Aiesh", "text": "in order to be important in this world you have to understand the most difficult concepts not the easiest ones and you think you are awesome at this point", "likes": 0}}, {"topLevelComment": {"author": "Jason Reviews TECH", "text": "funny how i understand recursion through programming but can't explain it. It just excutes itself.", "likes": 0}}, {"topLevelComment": {"author": "Christian Chapoco", "text": "Thank you for this", "likes": 0}}, {"topLevelComment": {"author": "Stanley Ogada Chinedu", "text": "I love this guy! Honestly Recursion is the hardest concept in programming (In my opinion!). I have being able to solve the palindrome challenge on my own. I know palindrome is easy but I'm happy I can do this after watching the first few lessons. \ud83e\udd0c\ud83c\udffe\u2764\ud83d\ude02", "likes": 4}}, {"topLevelComment": {"author": "Si G", "text": "So well explained. Thank you", "likes": 0}}, {"topLevelComment": {"author": "Rebelious", "text": "Thanks, thanks!  Can anyone help me to find the link for the next session? Backtracking advance?", "likes": 0}, "replies": [{"author": "Rebelious", "text": "https://www.youtube.com/watch?v=A80YzvNwqXA&list=RDCMUC8butISFwT-Wl7EV0hUK0BQ&index=5 Found it", "likes": 0}]}, {"topLevelComment": {"author": "Devon K", "text": "Good lord - are all the courses on your website really free of charge ??? If so - I'm going to INHALE all these courses!", "likes": 0}}, {"topLevelComment": {"author": "cqin kam", "text": "The notion of recursion reminds me of an episode of Rick and Morty, about Mr. Meeseeks completing Jerry's task.", "likes": 0}}, {"topLevelComment": {"author": "Lily H", "text": "I wish this tutorial had more graphics, like Alvin's graph and binary tree tutorials. Recursion topics definitely need more visuals than Staring at a terminal.", "likes": 0}}, {"topLevelComment": {"author": "MYLARAM Venkatesh", "text": "Can you please provide code", "likes": 0}}, {"topLevelComment": {"author": "MYLARAM Venkatesh", "text": "There are no words to praise you about your explanation and content, Really Mind blowing for me, Super content thank you man", "likes": 10}}, {"topLevelComment": {"author": "z x", "text": "BEST LECTURE EVER!!", "likes": 0}}, {"topLevelComment": {"author": "ZER0", "text": "In the beginning when I started learning programming I didn't think recursion is that much important but when I started to learn DSA. I figured it out recursion is the soul of DSA and now I am learning, I have crossed 1:30 hr video and it has been so much fun and easy to grab. The tutor is really good ...", "likes": 8}, "replies": [{"author": "Ru", "text": "1:30:00", "likes": 0}, {"author": "A C", "text": "Agreed man, the worst thing I've done was trying to attempt tree, graph and linkedlist problems without a complete understanding of recursion.", "likes": 1}]}, {"topLevelComment": {"author": "David Walker", "text": "Excellent. Recursion has always been a mental twister for me. Trying to master it now, to make it a normal part of my thought processes when developing. Very informative, easy to follow. Thanks!", "likes": 2}}, {"topLevelComment": {"author": "Xed", "text": "what ide is he using?", "likes": 0}, "replies": [{"author": "Ryan Schachte", "text": "VScode", "likes": 0}]}, {"topLevelComment": {"author": "Wajahat Naqvi", "text": "Which IDE is that?", "likes": 0}}, {"topLevelComment": {"author": "Andrew Perotti", "text": "Thanks for the vid, I've had a hard time with recursion and this is really helping.", "likes": 0}}, {"topLevelComment": {"author": "Abu Dujana", "text": "Thanks for this, really appreciate it.", "likes": 0}}, {"topLevelComment": {"author": "Andile Mkhize", "text": "As a noob I am trying to wrap my head around around recursion. I feel as though theoretically I understand it. basically you find the base case which is the smallest piece of the problem to which you already know the answer to the problem. Each time you call the function you move down the stack as the function calls itself until you hit the base case thereafter all the return values for the previous calls become evident. which means we move back up the stack. The problem is that I'm struggling to understand it when it is implemented. for example with a function that has a list and an integer (which represents an index point where the list will stop summing the numbers prior to and including it). How do I move down the list with each function call and would the index number be my base case. I found this piece of code which I slightly modified for my own problem, but I don't understand the solution fully. \n\ndef sum_list(integer_list, stop_index):\r\n    if len(integer_list) == 1:\r\n        return integer_list[0]\r\n    return integer_list[0] + sum_list(integer_list[1:stop_index])\r\n    \r\n    \r\n        \r\n      \r\n\r\n\r\nprint(sum_list([5,6,7,8,9]))", "likes": 0}, "replies": [{"author": "Saurav Tiru", "text": "My interpretation for your problem, might defer in python!\n\nfunction recursiveSum(arr) {\n  if(arr.length < 2) return arr[0]\n  let calcSum = arr[0] + arr[1]\n  arr = arr.slice(2)\n  arr.splice(0,0, calcSum)\n  return recursiveSum(arr)\n}\n\nconst arr = [1,2,3,4,5,6,7,8,9,10]\nconst sum = recursiveSum(arr)", "likes": 0}]}, {"topLevelComment": {"author": "sathish raja", "text": "Simply awesome", "likes": 0}}, {"topLevelComment": {"author": "Perez Shealtiel", "text": "Very nice illustrations. Thank you.", "likes": 0}}, {"topLevelComment": {"author": "P\u00e9riades", "text": "Where have you been all my life", "likes": 0}}, {"topLevelComment": {"author": "JO", "text": "how does the value of the index pointing at the chars within the string increment ??", "likes": 0}}, {"topLevelComment": {"author": "Oren Li", "text": "Great video!", "likes": 0}}, {"topLevelComment": {"author": "GOOD BOY", "text": "29:40", "likes": 1}}, {"topLevelComment": {"author": "GOOD BOY", "text": "23:12", "likes": 1}}, {"topLevelComment": {"author": "GOOD BOY", "text": "15:40", "likes": 1}}, {"topLevelComment": {"author": "GOOD BOY", "text": "7:24", "likes": 1}}, {"topLevelComment": {"author": "Music Melody", "text": "0:39:27 if(left>right-1) is the correct answer because if we write code(left>right) and give input 20 is not in array the loop can run again and again show the Error!!\ud83d\udc4c", "likes": 1}}, {"topLevelComment": {"author": "Joel Osei-Asamoah", "text": "Great video, helped a lot!", "likes": 0}}, {"topLevelComment": {"author": "Aslan", "text": "Very clear and simple explanations! Great job!", "likes": 0}}, {"topLevelComment": {"author": "Rahul Hatwal", "text": "Thank you Ryan you made it so easy to understand recursion :-)", "likes": 0}}, {"topLevelComment": {"author": "Melkior Wiseman", "text": "Useful recursive sentences:\nYour ancestors are your father and your mother and all of their ancestors.\nYour descendants are your sons and your daughters and all of their descendants.\nYou're welcome. :)", "likes": 0}}, {"topLevelComment": {"author": "Ian Simmons", "text": "Help a noob anyone? First example reverseString throws stackoverflow exception. Is something missing or should code work as is shown in the video? Thanks", "likes": 1}, "replies": [{"author": "Ian Simmons", "text": "Swapped out base case for  _  if(input.length <= 1) return input; _  That fixed it.", "likes": 1}]}, {"topLevelComment": {"author": "AlkhilJohn", "text": "These guys deserve an award :)", "likes": 0}}, {"topLevelComment": {"author": "Madhubala Jayakumaran", "text": "Thanks Ryan and FreeCodeCamp for this!!", "likes": 0}}, {"topLevelComment": {"author": "Sylvain Brunerie", "text": "All these examples look super interesting, but I just want to point out that tail-call recursion optimization is super important to know, even though it\u2019s kinda briefly mentioned here. Really sad that\u2019s it\u2019s mostly not supported in JS yet. Have a look at Elm if you want to safely use recursion in the browser :)", "likes": 2}}, {"topLevelComment": {"author": "Kernix", "text": "Does anyone have JavaScript versions of the functions? I tried to do string reversal, palindromes, and number to binary and they all failed. I would like to see some working examples so that I can better understand recursion.", "likes": 2}, "replies": [{"author": "Wahid Kamruddin", "text": "@Kernix of course man no problem good luck!", "likes": 0}, {"author": "Kernix", "text": "@Wahid Kamruddin Thanks! I'll try to apply that to the other examples.", "likes": 0}, {"author": "Wahid Kamruddin", "text": "Since this worked palindromes and dec to binary should also work", "likes": 0}, {"author": "Wahid Kamruddin", "text": "String reversal function in JS:\n\nfunction string_reversal(string)\r\n{\r\n\tif (string == \"\")\r\n  {\r\n  \treturn \"\"\r\n  }\r\n  \r\n  return string_reversal(string.slice(1)) + string[0]\r\n}\n\n\r\n\r\nconsole.log(string_reversal(\"hello\"))", "likes": 0}, {"author": "Wahid Kamruddin", "text": "I recreated this in python so this should also work in javascript since the concepts are the same but ill try to look into it", "likes": 0}]}, {"topLevelComment": {"author": "Ankit Jain", "text": "First wants to thank you for this amazing video, \n\ni am trying the example as it is from video. What I am doing wrong here?\n\n// Merge Sort\n    public static void mergeSort(int[] data, int start, int end) {\n\n        if(start < end) {\n            int mid = (start + end) /2;\n\n            mergeSort(data, start , mid);\n            mergeSort(data, mid + 1, end);\n\n            merge(data, start, mid, end);\n        }\n    }\n\n    private static void merge(int[] data, int start, int mid, int end) {\n\n        // build temporary array to avaoid modifying original contents\n\n        int[] temp = new int[end - start + 1];\n\n        int i = start;\n        int j = mid +1;\n        int k = 0;\n\n        while (i <= mid && j<=end) {\n            if (data[i] <= data[j]) {\n                temp[k++] = data[i++];\n                /*temp[k] = data[i];\n                i++;\n                k++;*/\n            } else {\n                temp[k++] = data[j++];\n            }\n\n//            Add the rest of the value from the left sub array into the result\n            while (i <= mid) {\n                temp[k++] = data[i++];\n            }\n\n            // Add the rest of the value from the right sub array into the result\n            while (j<=end) {\n                temp[k++] = data[j++];\n            }\n\n            for (i = start; i<=end; i++) {\n                data[i] = temp[i-start];\n            }\n\n\n         }\n\n\n        for (int i1 = 0; i1 < data.length; i1++) {\n            System.out.print(data[i1]);\n            System.out.print(\", \");\n        }\n        System.out.println(\"again\");\n\n\n    }\n\nwhat is the mistake here .. I am printing all sort response after merge method , this is what i am getting\n System.out.println(\"-----Merge sort------\");\n\nint[] inputMergeSort = new int[] {-1, 20, 10, 40, 20, -5, 16};\n\nmergeSort(inputMergeSort, 0, inputMergeSort.length -1);\nSystem.out.println(\"Stop merge Sort\");\n\n\n-----Merge sort------\n-1, 20, 10, 40, 20, -5, 16, again\n-1, 20, 10, 40, 20, -5, 16, again\n-1, 20, 10, 40, 20, -5, 16, again\n-1, 20, 10, 40, -5, 20, 16, again\n-1, 20, 10, 40, -5, 20, 16, again\n-5, -1, 20, 10, 40, 20, 16, again\nStop merge Sort", "likes": 0}}, {"topLevelComment": {"author": "Ifeanyi Okonkwo", "text": "Merge sort is way simpler than the way u explained it.", "likes": 0}}, {"topLevelComment": {"author": "Ne", "text": "int[] temp = new int{end  - start + 1]; why we need the + 1; part wouldn't [end - start] be enough", "likes": 0}}, {"topLevelComment": {"author": "Chess Player", "text": "your video was great but your bad choice of the language gave me trouble", "likes": 0}}, {"topLevelComment": {"author": "Jyothish Sebastian", "text": "Thank you !", "likes": 0}}, {"topLevelComment": {"author": "Ifeanyi Okonkwo", "text": "How do u get the values returned in memory. Still trying to wrap my head around that", "likes": 0}}, {"topLevelComment": {"author": "Ahmed Ibrahim Hassan", "text": "wow", "likes": 0}}, {"topLevelComment": {"author": "Rebecca", "text": "What is the extension that you use in VS code? I would love to analyze my code by having the variables visible.", "likes": 3}, "replies": [{"author": "Ryan Schachte", "text": "Just the built in debugger", "likes": 0}]}, {"topLevelComment": {"author": "Gregory Wilson", "text": "Marty Stepp used the same counting analogy to teach recursion:  great approach", "likes": 0}}, {"topLevelComment": {"author": "Esca Meredoff", "text": "Abdul Bari C++ https://www.youtube.com/watch?v=XxvmKRVmVr4&list=PL0x1zsLFiXsy62_l3Oum0nzyGM5VPkNyK", "likes": 0}}, {"topLevelComment": {"author": "Michiel de Ruyter", "text": "Did a Google search for \"recursion\",  thanks Google I think I get it now.", "likes": 0}, "replies": [{"author": "Michiel de Ruyter", "text": "For some reason my comment  is auto removed immediately after I post it?", "likes": 0}]}, {"topLevelComment": {"author": "Raymond", "text": "I learnt everything from the thumbnail lmao", "likes": 1}}, {"topLevelComment": {"author": "Paul Komini", "text": "2:48  Is old lady racist ?", "likes": 0}}, {"topLevelComment": {"author": "Amith M", "text": "I think there's an error in check palindrome.. 26:00\nWhile calling it should be 1 and input.length()-2...\nPlease clear my doubt", "likes": 0}}, {"topLevelComment": {"author": "Jean-Francois Desrosiers", "text": "Been coding since 1997: recursion is good for academic purposes but almost everytime I saw it in a product, it was a source of bugs due to usage of stack above limits, which limits are very difficult to guess. Each f call is on stack.", "likes": 26}, "replies": [{"author": "Ryan Schachte", "text": "@Julio Lopes Definitely good to evaluate why and when it's a good choice to use it. 3x slower on modern day systems for small amounts of data is negligible. Think 5 nanoseconds vs 15 nanoseconds. However, on large datasets, recursion will of course be slower. Cheers! Nice work on investigating the performance.", "likes": 0}, {"author": "Julio Lopes", "text": "I tried using the decimal to Binary example at 31:14 in a for loop and in the recursion way he showed, and tried to use the function for big numbers like pow (99, 99), it worked but recursion executed 3 times slower than the for loop, and increasing the number, to pow(99,150) I get a stack error. \nSo, I won't use this at my work at all. Only in case I might need to use with something related to graph.", "likes": 1}, {"author": "Samarth Ahuja", "text": "I would suggest not to simply nullify the topic. Yes, you won't use it much but it's great for concept building. FYI, I recently used Recursion in my project. I was bulding a component to show hierarchy using Tree-grid.", "likes": 0}, {"author": "Ryan Schachte", "text": "There are definitely trade-offs. In some of my professional work, we've dealt with data structures that are tree and graph-based (ie. graph databases and the algorithms that need to be built around the data) where traversals are inherently more elegant and easily understood via recursion, whereas the iterative counterpart is a mess and often impossible to conceptualize with loops. The risk is memory, but when the bounds are understood, you can make an informed decision more appropriately. This is also true with a lot of taxonomy work when you're dealing with schemas, for example (trees).", "likes": 4}]}, {"topLevelComment": {"author": "Tekle Ayele", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Muhammad Aariz Marzuq", "text": "1:10, why does this remind me of whiteboard crypto tho?", "likes": 0}}, {"topLevelComment": {"author": "Evan Childs", "text": "Great refresher for interview practice!", "likes": 0}}, {"topLevelComment": {"author": "Robin Hill", "text": "hello this is awesome great work =) have a nice day", "likes": 0}}, {"topLevelComment": {"author": "On Hiatus", "text": "How does tail recursion work?", "likes": 0}}, {"topLevelComment": {"author": "Jeremy Hofmann", "text": "I\u2019m going to make a video about this video but only if someone makes a video of someone else making a video out of my video.", "likes": 0}}, {"topLevelComment": {"author": "Mandeep sharma", "text": "Thank you, thanks alot", "likes": 0}}, {"topLevelComment": {"author": "Rajen Shrestha", "text": "Thanks to this video", "likes": 0}}, {"topLevelComment": {"author": "Sajjad Zaheer", "text": "To Understand Recursion , one should Understand Recursion", "likes": 0}}, {"topLevelComment": {"author": "Ryan Greenberg", "text": "Every time I take this course it feels like I've taken it before.", "likes": 1}}, {"topLevelComment": {"author": "John Paul Buce", "text": "Did you mean: _recursion_", "likes": 0}, "replies": [{"author": "Michiel de Ruyter", "text": "Did you mean: recursion", "likes": 0}]}, {"topLevelComment": {"author": "Goran Fazlic", "text": "Thanks for this explanation of recursion. I finally understood recursion the way I should and how to use it. Good examples\ud83d\udc4d", "likes": 2}}, {"topLevelComment": {"author": "Shivansh Mishra", "text": "This vedio has been removed from my call stack \ud83d\ude00\ud83d\ude00", "likes": 1}}, {"topLevelComment": {"author": "calmchess 04", "text": "You should delete this video and instead of recursion simply use a for loop with the number of slots of the call stack as the conditional part of the for loop. That way when the stack is finished processing the iterations stop. It is very unusual to actually use recursion. I think the last time I thought of it was when common lisp was a popular language.", "likes": 0}}, {"topLevelComment": {"author": "Dhakar Dhakar", "text": "Nah. Could have explained it in much simpler concept. 5min.", "likes": 0}}, {"topLevelComment": {"author": "varun aggarwal", "text": "hi, at 26:40, in IsPalindrome() function I tried making it in c# with exact same logic but it was giving me wrong output , so I modified it instead of return isPalindrome(input.substring(1,input.Length()-1)); I used return isPalindrome(input.Substring(1,input.Length - 2)); then it performed perfectly, anyone faced similar issue?", "likes": 0}}, {"topLevelComment": {"author": "Ferndalien", "text": "Recursive:\nre-kers-ive  prefix re - repeated,\n                    suffix - ive having the nature of\n                    curse - to invoke the wrath of a deity or to express feelings with an expletive\nexample: \"all my code is recursive when I'm debugging it.\"", "likes": 0}}, {"topLevelComment": {"author": "suresh chaudhari", "text": "34:00 43:05 recursion debuging", "likes": 0}}, {"topLevelComment": {"author": "Ru\u017cal", "text": "1:35", "likes": 0}}, {"topLevelComment": {"author": "Evan", "text": "Totally agree with that \"...seem like you're always going back to the beginning\" and hopefully don't go back to the beginning after watch this. lol", "likes": 0}}, {"topLevelComment": {"author": "DW Ethiopia", "text": "Is it more common for engineers to think recursive algorithms are simpler to come up with it? For me, I find the iterative solution to be more intuitive.", "likes": 0}, "replies": [{"author": "DW Ethiopia", "text": "@Ryan Schachte Thanks Ryan! Your teaching style is amazing!", "likes": 0}, {"author": "Ryan Schachte", "text": "That's a great question. Iteration usually comes first due to the intuitive nature of _most_ problems you can encounter. When delving into data modeling where the underlying structure is a tree or a graph or similar nested data structure, recursion excels. In my work in modeling network-based systems through a graph, iteration would have never worked for us due to the high complexity of the structure.", "likes": 1}]}, {"topLevelComment": {"author": "Xander Mattuwus [Kyokrow Kirigiri]", "text": "What application is he using to look at the call stack? At 33:57", "likes": 0}}, {"topLevelComment": {"author": "Shankar Ghimire", "text": "Thank you so much Ryan for sharing your knowledge with the world!\nVery amazing content and explanation! :)", "likes": 6}}, {"topLevelComment": {"author": "Slurpee Sauce", "text": "Makes programming way more fun thank you", "likes": 1}}, {"topLevelComment": {"author": "justin mathew", "text": "How is true propagating in racecar example?", "likes": 0}}, {"topLevelComment": {"author": "Chewbacca", "text": "The best Recursion Video available on internet.\nThanks for making the video.", "likes": 0}}, {"topLevelComment": {"author": "Sivanandam", "text": "Sir, You killed me @4:12 , I cannot forgive you for that, I\u2019ll just love you.", "likes": 0}}, {"topLevelComment": {"author": "Arun Kumar", "text": "I just realised that I do recursion when learning only to end up with a stackoverflow of browser tabs ;)", "likes": 2}}, {"topLevelComment": {"author": "ketan muttha", "text": "Awesome video. Learnt a lot", "likes": 0}}, {"topLevelComment": {"author": "Manouchehr Jalayer", "text": "Well designed, well presented\nSuper Helpful\n\nThank you", "likes": 0}}, {"topLevelComment": {"author": "Carlos Harris", "text": "How did you guys get VS Code to show the call stack. My call stack is empty?", "likes": 0}}, {"topLevelComment": {"author": "Sarvesh Mishra", "text": "Please tell the extension name used while debugging that shows value in the code editor while moving line by line at time 33:00", "likes": 0}}, {"topLevelComment": {"author": "Junaid De Villiers", "text": "Great lecture\ud83d\ude0a just wanted to point out that at the palindrome exercise on line number 9 when you call the method again shouldn't the parameter be (input.substring(1, input. Length() -2); because input.length-1 won't change the substring", "likes": 6}, "replies": [{"author": "VEngEAnCE", "text": "It's about how the substring method works for the current programming language. In JS for example, the second parameter is exclusive to the index-based count.", "likes": 1}, {"author": "Linda Whitfield", "text": "Only the beginning of the substring is inclusive. Length() - 2 would not be included. It should be length() -1 to get the second to last character.", "likes": 0}, {"author": "yosef silberg", "text": "Totally agree", "likes": 0}, {"author": "Junaid De Villiers", "text": "Keep in mind I'm working with c# not java, just wanted to point it out incase it helps someone", "likes": 2}]}, {"topLevelComment": {"author": "saravanan m", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Kar Tech", "text": "which code editor is being used here?", "likes": 0}}, {"topLevelComment": {"author": "Leo", "text": "To understand recursion you need to first understand recursion.", "likes": 2}}, {"topLevelComment": {"author": "Yasin Herken", "text": "You are absolutely amazing , i could not understand in the past it , but right now i understand logic of recursive ,thank youuu.", "likes": 0}}, {"topLevelComment": {"author": "Christopher Mitchell", "text": "You know, when I first started out with the self-taught path, I was told \"GO TO FREE CODE CAMP, they are GREAT\". And I didn't listen. I've seen many many MANY tutorials after 2.5 years of this (awesome) journey, and I gotta say.... reeaalllllllyy wish I had listened. You guys ROCK! It is incredibly rare to find a tutorial that can even try to keep up with the quality of learning your channel/org offers. It is smooth and concise and most importantly, accurate. Thanks for the content, and I will always lead those who are curious to your doorstep first.  <3 <3 <3", "likes": 3}, "replies": [{"author": "L", "text": "@Mire soman thanks. It was an autocorrect I didn't catch. I fixed it.", "likes": 0}, {"author": "Mire soman", "text": "@L What does it mean to be incompletely agree?", "likes": 0}, {"author": "L", "text": "In a paid bootcamp right now and I completely agree.", "likes": 0}]}, {"topLevelComment": {"author": "Karma_Kar", "text": "So recursion basically is the definition of insanity.", "likes": 0}}, {"topLevelComment": {"author": "jesus cruz", "text": "I graduated with a BS in computer science and I swear recursion has always been tricky for me but im going to master it even if I have to spend weeks solving multiple leet code recursion problems. Thanks for the video definetly helped me review :)", "likes": 2}, "replies": [{"author": "Rajkumar Meena", "text": "L \ud83d\ude00", "likes": 0}, {"author": "Rajkumar Meena", "text": "Loo loo ppl", "likes": 0}, {"author": "Rajkumar Meena", "text": "PL l \ud83d\ude02\ud83d\ude02", "likes": 0}, {"author": "Rajkumar Meena", "text": "L", "likes": 0}, {"author": "Rajkumar Meena", "text": "L \ud83d\ude02l", "likes": 0}]}, {"topLevelComment": {"author": "C21_3087 Momitul Hoque", "text": "Thank you so so so much !!!\nIt's been a hard week for me trying to figure out what recursion\nactually is, and suddenly your Video poops up !!!!!!\nyou should be my collage professor man it was awesome learning from this video \nkeep it up !!\n#include <stdio.h>\nint fun(int n)\n{\n    if(n==0){\n        return n;\n    }\n    fun(n-1);\n    printf(\"I love Recursion\\n\");\n}\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    fun(n);\n    \n\n    return 0;\n}", "likes": 0}}, {"topLevelComment": {"author": "Raj", "text": "This tutorial helping me a lot with recursion. Thank you for the hard work.", "likes": 0}}, {"topLevelComment": {"author": "Inactive Account", "text": "I'm a little confused as to how the function executes the return statement. I know that \"hello\".substring(1) will display \"ello\"  & I know that hello.charAt(0) will display \"h\"; ...but wouldn't  -> return  reverse(\"hello\".substring(1)) + \"hello\".charAt(0)  <---  this give us a value similar to this here -> ? \"ello h\", \"llo e\", \"lo l\", \"o l\" \"o\"  ... or does the return statement NOT actually return the name(parameter), but rather the value given outside of it? such as in this case: each iteration of \"hello\".charAt(0)", "likes": 0}}, {"topLevelComment": {"author": "Shorts Stack", "text": "What does fun2 represent?\r\nint fun(int x, int y)\r\n{\r\n\tif (y == 0) return 0;\r\n\treturn (x + fun(x, y-1));\r\n}\r\n\r\nint fun2(int a, int b)\r\n{\r\n\tif (b == 0) return 1;\r\n\treturn fun(a, fun2(a, b-1));\r\n}\r\nA. AB\r\nB.A^B\r\nC.B^A\r\nD. A+ A^B\r\nif you like the question subscribe my channel\n\n\n\n\n\n\n\n\n\n\n\n\n\nAns: C", "likes": 0}}, {"topLevelComment": {"author": "Harshal Hirpara", "text": "Thank you for such visually apt video..", "likes": 0}}, {"topLevelComment": {"author": "T", "text": "Well done mate! Better than a so called  \"UK Top University\"", "likes": 1}}, {"topLevelComment": {"author": "Ric Ric", "text": "This is an absolute gem!!! \ud83d\udc95\ud83d\udc8e Thank you!!!!\ud83d\udc95", "likes": 0}}, {"topLevelComment": {"author": "atanu mallik", "text": "super", "likes": 0}}, {"topLevelComment": {"author": "close to thee", "text": "Prolog's loop is solely implemented using recursion. So it's impossible to learn Prolog without understanding recursion", "likes": 0}}, {"topLevelComment": {"author": "Deepak Singh", "text": "Amazing tutorial...always had trouble visualising recursive calls.", "likes": 0}}, {"topLevelComment": {"author": "v naveen kumar", "text": "the first statement itself changed my entire perception, towards recursion.", "likes": 1}, "replies": [{"author": "Ric Ric", "text": "Right \ud83d\ude02\ud83d\ude02 It was a nice pun", "likes": 0}]}, {"topLevelComment": {"author": "Saket Modi", "text": "Extremely high quality content. Solving the problem before watching the sol will help more though.", "likes": 0}}, {"topLevelComment": {"author": "B AC", "text": "Like many other comments, the simplistic breakdowns of recursion in this video help make sense of this topic for even the most confused.  I thoroughly enjoyed this video and wish this could get bumped up for more of the world to see!", "likes": 6}}, {"topLevelComment": {"author": "Jonathan Caldwell", "text": "I am so very glad you guys, or guy, put this together. I really felt like my head was going to explode. I'm watching it again.... just one thought so far, a few mins in your evaluating for binary.... can you confirm that this would _not_ be the most efficient way to convert to binary but that this is just an example? My brain is sort of stuck on why, if ultimately the computer is using binary underneath, would using a recursive function be used to evaluate binary. (I don't know what the 'correct' answer would be, other than I'd expect there to be a way to simply dump the variable _as_ binary rather than trying to \"find\" binary.) does that make sense?", "likes": 0}, "replies": [{"author": "Jonathan Caldwell", "text": "I think what really gets me is that the animation for binary is completely wrong... i think your are suppose to REVERSE all the numbers, but it looks like they just go to the closest end state... i.e. the last 1 should go to the top, not to the middle and the first 0 should go to position 7 not position 4, etc... it took me a couple times to figure out that this was suppose to be in _reverse_.... which is sort of important for the example as reverse is often how items are added recursively", "likes": 0}]}, {"topLevelComment": {"author": "Nahid Hasan", "text": "With this channel, I can't think my university life", "likes": 0}}, {"topLevelComment": {"author": "The amatuer", "text": "What a video! This is much easier to understand than the CS course I'm taking. Thank you, The Simple Engineer.", "likes": 0}}, {"topLevelComment": {"author": "Ali R", "text": "Thank you!", "likes": 0}}, {"topLevelComment": {"author": "Aniket tiwari", "text": "Hey there, just want to know is it a good approach to use global variables in recursive problems.", "likes": 1}}, {"topLevelComment": {"author": "Mariem el berriri", "text": "Thank you", "likes": 0}}, {"topLevelComment": {"author": "Rio stark", "text": "Really impressive", "likes": 0}}, {"topLevelComment": {"author": "sam sunny", "text": "If you know how to use recursion you are making use of a computer to solve problems else you will solve the problem and implement it using a computer.", "likes": 0}}, {"topLevelComment": {"author": "David Battle", "text": "Very clear presentation.  A bit on the long side, but I was able to fast forward through the last bits because the pattern had become so familiar it was easy to follow.", "likes": 1}}, {"topLevelComment": {"author": "\u041b\u0438\u043b\u0438\u044f \u0420\u0430\u0444\u0438\u043a\u043e\u0432\u0430", "text": "Please if anyone knows what IDEA he uses for coding>", "likes": 0}}, {"topLevelComment": {"author": "modolief", "text": "Best opening line ever!!", "likes": 0}}, {"topLevelComment": {"author": "Jason King", "text": "I feel like the first 5 minutes of this video helped me understand recursion better than my CS classes in college. I ended up switching tracks away from CS because I couldn't wrap my head around recursion and trees...", "likes": 32}, "replies": [{"author": "BF Flyer", "text": "You cannot understand trees or graphs without recursion. It takes some practice, but becomes quite intuitive once you wrap your head around it.", "likes": 1}]}, {"topLevelComment": {"author": "Flow Adapt Execute", "text": "18:36 you mean more efficient ? Why lazier, I would think making something less complicated using less energy is not lazy. It\u2019s smarter. J/s #flowadaptexecute", "likes": 0}}, {"topLevelComment": {"author": "9 4", "text": "Mark", "likes": 1}}, {"topLevelComment": {"author": "Hitika gahalot", "text": "Thank you very much sir \ud83d\ude4f\ud83c\udffb", "likes": 0}, "replies": [{"author": "abhi Ram", "text": "at 25:56 \nhe wrote return isPalindrome(input.substring(1,input.length()-1);\ncan you help me understand that line.\nmy doubt is:\n          for the first recursion we check for first \"r\" and last \"r\"\n           but for second recursion we have to check for input.length()-2 that is \"a\" but input.length()-1 implies \"r\"\ncan you explain how that works\ud83d\ude03\ud83d\ude03", "likes": 0}]}, {"topLevelComment": {"author": "BURADA PRAVEEN", "text": "really awesome   thooooop", "likes": 0}}, {"topLevelComment": {"author": "Praveen Vasu", "text": "Really awesome", "likes": 0}}, {"topLevelComment": {"author": "Alan Rodriguez", "text": "Great Content!!", "likes": 0}}, {"topLevelComment": {"author": "Abhi", "text": "def print_tree(self):\r\n        if self.root:\r\n            self._print_tree(self.root)\r\n        else:\r\n            return 'Empty Tree'\r\n    \r\n    def _print_tree(self, curr_node):\r\n        if curr_node:\r\n            self._print_tree(curr_node.left)\r\n            print (str(curr_node.data))\r\n            self._print_tree(curr_node.right)\n\nMy implementation of the print function for a binary tree", "likes": 0}}, {"topLevelComment": {"author": "Francheska Richardson", "text": "This is such a comprehensive course. I understood recursion better than i ever thought I would. THANK YOU!", "likes": 1}}, {"topLevelComment": {"author": "C S", "text": "how did both( first letter and last letter ) get out with -1 ..at Time:26:32  .. how does line number 9 works?", "likes": 0}}, {"topLevelComment": {"author": "Reaper Merc", "text": "0:00 \"When learning about recursion, it can seem like you are going back to the beginning\" XDXDXD\nWhy is no one talking about this neat pun", "likes": 121}, "replies": [{"author": "Laurin Neff", "text": "They should've also made the clip play a second time", "likes": 5}, {"author": "Vivek Puurkayastha", "text": "Same thought here ... :smile:", "likes": 2}]}, {"topLevelComment": {"author": "RK", "text": "At 1:46:00 it should be memoizedCache.put(0,0) not (0,1). putting (0,1) will give you a completely wrong answer.", "likes": 0}}, {"topLevelComment": {"author": "Prashant Sedhain", "text": "Gold alert \ud83d\udea8", "likes": 0}}, {"topLevelComment": {"author": "Abhi", "text": "def bi(n):\r\n    if n<=0:\r\n        return '0'\r\n    return bi(n//2) + str(n%2)\n\nalternate py code for getting binary values.", "likes": 0}}, {"topLevelComment": {"author": "jauntung stimerburg", "text": "https://youtu.be/IxLNPofCHoI", "likes": 0}}, {"topLevelComment": {"author": "LOKESH PANDEY", "text": "The iterative solutions was going through my mind for all the problems here except the graphs problems. Understood the concept of recursion, well explained.", "likes": 1}}, {"topLevelComment": {"author": "LOKESH PANDEY", "text": "@The Simple Engineer, First of all thank you for such detail knowledge. I have a question whenever a base condition is hit we stop making recursive calls and then method calls in stack keeps executing and gets popped out of the stack memory one by one. My question is once we hit the base condition and now there is no more method calls, so when we execute the first method call in the stack, how does the process know like it doesn't have to call the method again and has to execute it and popped it out of the stack memory ?\n\nFor e.g., Your example when we do string reversal, now the base condition is if string is empty then no need of method call, but once we hit that base condition there is a method on stack (reverseString(\"o\") + \"l\"), how does the process know that it has to execute that method and pop out rather than making another method call ? Because this method reverseString(\"o\") + \"l\" looks like another call instead of executing it and popping it out of memory.\nLet me know if my question is clear because I know the wordings might be little confusing.", "likes": 1}, "replies": [{"author": "_\u2014-", "text": "Hi Lokesh, If I'm not wrong you are actually questioning multiple things here but imagination is necessary to understand inherent functionalities or its for sure that you'll lose track of actual learnings. When you do recursive call the current pointer or address of the instruction before recursive call will be stored on an Auxiliary stack (OS takes care of this functionality).Now when a return statement is struck it automatically (OS) executes the instructions which are waiting (Whose addresses were stored).", "likes": 1}]}, {"topLevelComment": {"author": "Mohmmad Hannoun", "text": "Great teacher!!", "likes": 0}}, {"topLevelComment": {"author": "Abhinav Srivastava", "text": "Decimal to binary code has a bug for decimal = 0 as initial value. \n\nIt will return empty string. \n\nThe correct exit condition should be:\nif(decimal == 0)\n    return result.length == 0 ? \"0\" : result;", "likes": 0}}, {"topLevelComment": {"author": "aadil42", "text": "Amazing!!! please do more videos like this. These kinds of videos help to strengthen problem-solving skills.\nNext topic suggestion -> iterative solution and tabulation", "likes": 0}}, {"topLevelComment": {"author": "YY Irang93", "text": "Thank you for this awesome explanation", "likes": 0}}, {"topLevelComment": {"author": "atul kumar", "text": "Really superb, Thanks for sharing this", "likes": 0}}, {"topLevelComment": {"author": "Chris Agbemabiese", "text": "head.next.next = head; still confuses me", "likes": 0}}, {"topLevelComment": {"author": "Arya Rai", "text": "Don't waste money for paid courses. \nNow a days on YouTube there are plenty of courses with quality and free of cost\nDon't learn coding with paid courses", "likes": 0}}, {"topLevelComment": {"author": "Dylan", "text": "Is anyone using this for python??", "likes": 0}}, {"topLevelComment": {"author": "patto2k", "text": "Nobody:\nThis guy: \u201cNool\u201d", "likes": 0}}, {"topLevelComment": {"author": "Snehashish Ghosh", "text": "The way in which the lecture has been made is awesome... From the smallest of concepts to advanced concepts. I enjoyed learning.", "likes": 51}}, {"topLevelComment": {"author": "Prakash", "text": "2:57 Lol, you foget to count the kid on the shoulder on the man", "likes": 0}}, {"topLevelComment": {"author": "Inspirational Quotes", "text": "there is a mistake in Palindrome the method should be \nreturn isPalindrome(input.Substring(1, input.Length -2));", "likes": 3}, "replies": [{"author": "Aaron Schooley", "text": "@brianpwnsjustin He's using Java. Your observation still holds.", "likes": 1}, {"author": "brianpwnsjustin", "text": "It's not wrong. subString in javascript doesn't include the actual index for the second parameter.", "likes": 0}]}, {"topLevelComment": {"author": "Karim K.", "text": "To understand recursion, you must understand recursion.", "likes": 3}}, {"topLevelComment": {"author": "HIMANSHU WAGHMARE", "text": "Thanks", "likes": 0}}, {"topLevelComment": {"author": "Will Reynolds", "text": "Man thank you so much for your explanations of how recursive calls work on the call stack, and then also how to interpret the call stack through debugging. This cleared up so much confusion for me!", "likes": 29}}, {"topLevelComment": {"author": "Ahmed Bello", "text": "Thank you so much for the video. This is the best explanation I've got on recursion after several books and YouTube videos. The analogy where people were waiting in a queue (for ATM) is in my view what set my mind free on how to go about recursion. Now I know how and why a problem is attacked recursively. \nCheers from me!", "likes": 7}}, {"topLevelComment": {"author": "Joseph Xavier", "text": "Wow, thank you so much for the very clear, concise and recursive explanation of the basic concepts of recursion. \nThe base case was: \"I perfectly understood\".\nThank you!", "likes": 1}}, {"topLevelComment": {"author": "Chhavimani Choubey", "text": "yes this fucking video was needed by many people like me who still doesn't understand recursion and have no idea how to contemplate this.", "likes": 1}}, {"topLevelComment": {"author": "shayak ghosh", "text": "Can anyone share c++ code for decimal to binary, please.", "likes": 0}}, {"topLevelComment": {"author": "Tanvir Ahmed", "text": "This is better than an in-n-out burger", "likes": 0}}, {"topLevelComment": {"author": "Carl Johnson", "text": "Can the debugging have a branch on hover which expands the statement values as a modal hover to an ordered list which can further subdivide the objects into their own trees, highlighting the current value of the statement's array of evaluations? perhaps you could even support connecting the dots between the objects, their current value state and define the value each is supposed to have at the connection for a given constraint(value, sequence, other object) such that the IDE can suggest where the error or problem(s) to the goal are and some fixes which will get you there? Kind of like a machine learning to user interface model in training each other...;-)", "likes": 0}}, {"topLevelComment": {"author": "Uday Pratap Singh", "text": "Which software are you using of making such awesome animated videos", "likes": 0}}, {"topLevelComment": {"author": "Andrew Grini", "text": "I'm happy to understand this knowledge. Big thanks", "likes": 0}}, {"topLevelComment": {"author": "Andrei Stasevich", "text": "Huge gratitude for sharing your knowledge. You are doing great work for people all around the world", "likes": 1}}, {"topLevelComment": {"author": "\u96f2\u6c34\u7985\u5fc3", "text": "The cover is vivid....", "likes": 0}}, {"topLevelComment": {"author": "Ira Gideon Kane", "text": "Awesome!!!!!!!!!!", "likes": 0}}, {"topLevelComment": {"author": "meher shrishti nigam", "text": "**Merge Sort Code in C++ using vectors**\n\nvector <int> merge(vector <int> data, int start, int mid, int end)\r\n{\r\n    // build temp array\r\n    vector <int> temp(end - start + 1);\r\n    int i(start), j(mid + 1), k(0);\r\n    while(i <= mid && j <= end)\r\n    {\r\n        if(data[i] <= data[j])\r\n        {\r\n            temp[k] = data[i];\r\n            i++;\r\n            k++;\r\n        }\r\n        else\r\n        {\r\n            temp[k] = data[j];\r\n            j++;\r\n            k++;\r\n        }\r\n    }\r\n\r\n    while (i <= mid)\r\n    {\r\n        temp[k] = data[i];\r\n        k++;\r\n        i++;\r\n    }\r\n\r\n    while (j <= end)\r\n    {\r\n        temp[k] = data[j];\r\n        k++;\r\n        j++;\r\n    }\r\n\r\n    for(i = start; i <= end; i++)\r\n    {\r\n        data[i] = temp[i-start];\r\n    }\r\n    return data;\r\n}\r\nvector <int> mergeSort(vector <int> data, int start, int end)\r\n{\r\n    if(start < end)\r\n    {\r\n        int mid = (start + end) / 2;\r\n        data = mergeSort(data, start, mid);\r\n        data = mergeSort(data, mid+1, end);\r\n        data = merge(data, start, mid, end);\r\n    }\r\n    return data;\r\n}", "likes": 2}}, {"topLevelComment": {"author": "Tr\u00e2n Nguy\u1ec5n", "text": "Thanks a bunch", "likes": 0}}, {"topLevelComment": {"author": "Tr\u00e2n Nguy\u1ec5n", "text": "Thank you very much", "likes": 0}}, {"topLevelComment": {"author": "Tr\u00e2n Nguy\u1ec5n", "text": "Aw thank you so much", "likes": 0}}, {"topLevelComment": {"author": "Tr\u00e2n Nguy\u1ec5n", "text": "Oh thank you", "likes": 0}}, {"topLevelComment": {"author": "Phani Kishan", "text": "You know what, kowtow to FreeCodeCamp. You are a bunch of insane selfless altruistic monsters.", "likes": 0}}, {"topLevelComment": {"author": "Dmitri Cherleto", "text": "Why do we evaluate the left side of the fibonaccci first?", "likes": 1}, "replies": [{"author": "Rohit Dubey", "text": "Because we've written fib(n-1) + fib(n-2), so fib(n-1) will naturally be the first recursive function being called. If we had written it the other way then fib(n-2) would have become the left side and the first one to be evaluated.", "likes": 0}]}, {"topLevelComment": {"author": "Sharmila Thirumurugan", "text": "when u say memoization it sounds like ur saying memorisation but pronouncing it as 'memowisation\ud83e\udd7a' and now I can't un-hear it lol", "likes": 0}}, {"topLevelComment": {"author": "Reo\u30ec\u30aa", "text": "This is really a very nice explanation. Thank you for making this video.", "likes": 2}}, {"topLevelComment": {"author": "jar jar binks", "text": "At https://youtu.be/IJDJ0kBx2LM?t=1598 this time can someone explain how he shrunk the input string? As in shouldnt the call at the end be input.length() -2  ?", "likes": 1}, "replies": [{"author": "jar jar binks", "text": "nvm got it. Wasnt all that informed with java syntax", "likes": 0}]}, {"topLevelComment": {"author": "jorge bautista", "text": "What a useful video, thanks.", "likes": 0}}, {"topLevelComment": {"author": "Mohamed Osama", "text": "I don't know java, Is this gonna be useful to me", "likes": 0}}, {"topLevelComment": {"author": "Nikolas Freitas", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Riya Shetye", "text": "please make video on dynamic programming", "likes": 0}}, {"topLevelComment": {"author": "Siddhant Misal", "text": "One of the best channel \ud83d\udd25", "likes": 1}}, {"topLevelComment": {"author": "Tristan Hurley", "text": "shocking", "likes": 0}}, {"topLevelComment": {"author": "Fake Account", "text": "A simpler way to convert binary to decimal is something like:\n\nstring dec_to_bin(int n){\n  if(n == 1 or n == 0)\n    return string(n)\n  return(dec_to_bin(n//2) + string(n%2)\n}\n\nit is based on the fact that dec_to_bin(n) = dec_to_bin(n//2) + n % 2, (where \"+\" means concatenation, not arithmetic sum)", "likes": 0}}, {"topLevelComment": {"author": "suzie medic", "text": "Why does he return -1 on line 3 in the binary search? Is it cus A[0] is -1?", "likes": 0}, "replies": [{"author": "Saugat Poudel", "text": "No he's using a negative index to denote that the value being searched for was not found in the array.\nWhen calling the function he can check \nif (binarySearch([1,2,3,4],0,3,10) == -1){\n//code to denote value was not found and what to do next\n}\n\nIf a value exists in the array the returned index will always be positive. So by returning a negative index, we can check if a value doesn't exist in the array.", "likes": 0}]}, {"topLevelComment": {"author": "Shivam Bhosle", "text": "Right when I thought I know recursion", "likes": 0}}, {"topLevelComment": {"author": "K D", "text": "Extremely valuable, and awesome video; thanks for the great content The Simple Engineer!!!", "likes": 1}}, {"topLevelComment": {"author": "Ridham Suhagiya", "text": "wow lovely course !!!", "likes": 0}}, {"topLevelComment": {"author": "PSP PoKs", "text": "Thank's Now I Understand Recursion Thanks @The Simple Engineer", "likes": 0}}, {"topLevelComment": {"author": "Yilmaz Durmaz", "text": "it was a nice tutorial with codes. but there is a little bug in the code for printing a tree: \"you forgot to print the node's own value\".\n\n- print the left\n- print node itself  <- this one is missing\n- print the right", "likes": 0}}, {"topLevelComment": {"author": "Tube X", "text": "Will u make an iteration next videos ?", "likes": 0}}, {"topLevelComment": {"author": "MG98", "text": "Make more  this type of video\ud83d\udc4d\ud83c\udffb\ud83d\ude2c for other topics", "likes": 0}}, {"topLevelComment": {"author": "Yungxix", "text": "Thanks for putting this out", "likes": 1}}, {"topLevelComment": {"author": "Mo's Tech Room", "text": "how did you do the snazzy animations ?", "likes": 1}}, {"topLevelComment": {"author": "REBHU ROY", "text": "In 1.5 you said is start < end ( it should be true right) al though its great Informative video love this", "likes": 0}}, {"topLevelComment": {"author": "Devang Anuragi", "text": "Amazing Course!", "likes": 0}}, {"topLevelComment": {"author": "Giga Chad", "text": "Best video on recursion!!", "likes": 1}}, {"topLevelComment": {"author": "Ankit shrivastava", "text": "what a timing, I am just finishing the last section of freecodecamp js DSand Algo certification and I feel like there should be a separate section on recursion, here it is...thanks a lot", "likes": 11}, "replies": [{"author": "Avijeet Kumar", "text": "yeah same here", "likes": 0}]}, {"topLevelComment": {"author": "ytube", "text": "Beautiful & Neat.", "likes": 0}}, {"topLevelComment": {"author": "Dawud", "text": "Great course, very clear and informative with excellent visual walk throughs. Any news on what the time frame is for the Backtracking course?", "likes": 6}, "replies": [{"author": "Ryan Schachte", "text": "Working on the blueprint now! It will be posted to my channel when it's out.", "likes": 3}]}, {"topLevelComment": {"author": "Hello World", "text": "Never a valid reason to use recursion. Any other standard loop is better.", "likes": 0}}, {"topLevelComment": {"author": "Kiran Lata", "text": "Thanks for this Amazing content.", "likes": 0}}, {"topLevelComment": {"author": "Jendrik", "text": "Really helpful content! But I have a question: in the binary search section, you start your function with the if condition \"left > right...\" why is this needed? I'm replicating the functions in python and it doesnt change anything if I omit this part (and I cant figure out, how left should be bigger than right)", "likes": 1}, "replies": [{"author": "Jendrik", "text": "@A. Sebastian Rolando Thanks! Makes sense now", "likes": 1}, {"author": "A. Sebastian Rolando", "text": "Try searching for a number that is not in your array...", "likes": 3}]}, {"topLevelComment": {"author": "T\u00edn Ph\u1ea1m", "text": "I wish when i study, the time stop. That way I can learn everything :((", "likes": 1}, "replies": [{"author": "Darui", "text": "@T\u00edn Ph\u1ea1m be a great human being and everything else will just fall in place. :) \n\nFarewell and Godspeed.", "likes": 1}, {"author": "T\u00edn Ph\u1ea1m", "text": "@Darui Thanks for encourage me. I'm learing to improve myself. Hope I will become great developer in the future", "likes": 0}, {"author": "Darui", "text": "@T\u00edn Ph\u1ea1m There will always be more things to learn. As levels of abstraction increase, newer things emerge. As you learn these newer things, you manifest higher abstractions from them. So on and so forth.\n\nYou would be chasing phantoms with this desire. \n\nAppropriate question to ask is, to what end? And to which utility am I learning? \n\nEven If you could stop time and learn everything you ever wanted to, what then? \n\nI suspect you enjoy the process of learning itself, not its outcome. Your thrill is in climbing the learning curve. \n\nAnd if thats the case, there is no point in being gloomy about not being able to learn everything. \n\nJust learn everyday, and you will be fulfilled.", "likes": 0}, {"author": "T\u00edn Ph\u1ea1m", "text": "@Darui I just wish. Because there are so many things to learn :((. But I just have 1 life", "likes": 1}, {"author": "Darui", "text": "if the time stops, you will stop with it. \n\nmaybe the time stops at every moment for infinitely long duration,\n\nbut we never find out because it appears continuous to us", "likes": 0}]}, {"topLevelComment": {"author": "Puneeth Satwik Vemula", "text": "Please do a course on backtracking.", "likes": 0}}, {"topLevelComment": {"author": "Adon Bush", "text": "This channel is so helpful! Thank you so much!!!", "likes": 0}}, {"topLevelComment": {"author": "SuperSaiyan", "text": "The explanation is elegant and awesome! Top notch work", "likes": 1}}, {"topLevelComment": {"author": "Kailash Ram", "text": "one of the best explanations of recursion - \n\nhttps://www.youtube.com/watch?v=IJDJ0kBx2LM", "likes": 0}}, {"topLevelComment": {"author": "Aditi Kulkarni", "text": "recursion my coding demon...\ud83d\ude2d\ud83d\ude2d\ud83d\ude2d must overcome this one\ud83d\ude11\ud83d\ude1e\ud83e\udd2f", "likes": 0}}, {"topLevelComment": {"author": "Jairo Santos", "text": "Thank you very much \ud83d\udc96\ud83d\udc96\ud83d\udc96\ud83d\udc96", "likes": 0}}, {"topLevelComment": {"author": "Jay Chandran", "text": "Cool video and even cooler animations! Which software was used for the animations?", "likes": 0}}, {"topLevelComment": {"author": "Rajath R Pai", "text": "I see what you did there with the thumbnail. Nicely done! :-)", "likes": 0}}, {"topLevelComment": {"author": "100% ENTERTAINMENT", "text": "Hello freecodecamp, \nAmazing video! Also I have a request for HTML, CSS and JS, Can you please make a tutorial on how to make a CPS(clicks per second) test and hhow to customize it?\nThanks in advance", "likes": 0}, "replies": [{"author": "Vs Sm", "text": "@100% ENTERTAINMENT It means you've never bothered to look for ones. Besides, there are tons of great books.", "likes": 1}, {"author": "100% ENTERTAINMENT", "text": "@Vs Sm None of the ones I have seen are with such explanation that I can customize", "likes": 0}, {"author": "Vs Sm", "text": "Ask for google search techniques first. \ud83d\ude02", "likes": 1}]}, {"topLevelComment": {"author": "SURO BLEDEK channel", "text": "Great sharing \ud83d\udc4d", "likes": 1}}, {"topLevelComment": {"author": "Yigang Meng", "text": "for no reason I just love recursion. maybe it is designed to be simple", "likes": 4}}, {"topLevelComment": {"author": "Kleiver Perez", "text": "Thank you very much, FreeCodeCamp", "likes": 0}}, {"topLevelComment": {"author": "Wei Jun Xia", "text": "Lol was just stuck googling today on the recursion section in JS Tutorial", "likes": 4}}, {"topLevelComment": {"author": "SoyCiro!", "text": "Thanks FCC!! You're awesome! \n\nDoes anyone know if the programming language used was Java? Or maybe Kotlin?", "likes": 3}, "replies": [{"author": "SoyCiro!", "text": "@Ryan Schachte Thank you!!", "likes": 0}, {"author": "Ryan Schachte", "text": "Java", "likes": 2}]}, {"topLevelComment": {"author": "Njul", "text": "Excellent video, very good demonstrations.", "likes": 1}}, {"topLevelComment": {"author": "Firdous Aslam", "text": "this chanel is responsible for soo many people's career OMG", "likes": 1}}, {"topLevelComment": {"author": "MarkBlackRain", "text": "Thank you, I'm leaning C and I'm struggling a lot with data structures", "likes": 0}, "replies": [{"author": "Juan Vitor", "text": "@MarkBlackRain He means discrete math.", "likes": 1}, {"author": "Vs Sm", "text": "@MarkBlackRain The university one.", "likes": 1}, {"author": "MarkBlackRain", "text": "@Vs Sm math? what kind of math? arithmetic? calculus? lineal algebra?", "likes": 0}, {"author": "Vs Sm", "text": "Start with Math, then data structure will be nothing.", "likes": 0}]}, {"topLevelComment": {"author": "ZaNNe", "text": "It's so satisfying to drag the screen left and rigth if ur on a phone, like damn", "likes": 1}, "replies": [{"author": "ZaNNe", "text": "@Sherlock Holmes like the video time bar thingy", "likes": 0}, {"author": "Sherlock Holmes", "text": "Which one?\n\nI find that zoom in and out satisfying", "likes": 0}]}, {"topLevelComment": {"author": "Arpad Toth", "text": "This is why windows getting slower and slower", "likes": 0}}, {"topLevelComment": {"author": "Cool Song", "text": "Excellent lecture. very helpful for every developer thanks sir \u2763\ufe0f", "likes": 2}}, {"topLevelComment": {"author": "KameHameHuy Le", "text": "Golden Experience Requiem", "likes": 0}}, {"topLevelComment": {"author": "Shreyas KUlkarni", "text": "whenever I need free code camp, they just upload the topic I want to learn....\ud83d\ude0a", "likes": 1}, "replies": [{"author": "Vs Sm", "text": "You are quite behind then.", "likes": 0}]}, {"topLevelComment": {"author": "Bruno Papa", "text": "Guys, try out my recursion tree visualizer project. I talk about it in my last video.", "likes": 2}}, {"topLevelComment": {"author": "Piyush Mahapatra", "text": "This is the closest I could get to invent a time loop.", "likes": 13}}, {"topLevelComment": {"author": "Digvijay Singh", "text": "A whole course of recursion. Awesome", "likes": 3}}, {"topLevelComment": {"author": "Kevin Escobedo", "text": "To understand recursion, you must first understand recursion", "likes": 1}}, {"topLevelComment": {"author": "Raunak Mitra", "text": "The ATM analogy was very elegant.\u2764\ufe0f", "likes": 43}}, {"topLevelComment": {"author": "Edis", "text": "Is it normal to feel overwhelmed by merge sort, I can understand most things but merge sort seems so intimidating", "likes": 1}, "replies": [{"author": "Ryan Schachte", "text": "I think the confusion around merge sort is absolutely normal. That's one of the complex divide and conquer algorithms that takes a while to digest, but once you get it, you really get it. Hope the animation in the video and code walkthrough helps you!", "likes": 0}]}, {"topLevelComment": {"author": "Krishnansh Agarwal", "text": "is there a course on recursion in PYTHON ?", "likes": 3}, "replies": [{"author": "Vs Sm", "text": "What is the difference? \ud83d\ude02", "likes": 0}, {"author": "Rachad El Moutaouaffiq", "text": "it doesn't quite matter, you can follow even if you don't understand the programming language,\nI don't speak JAVA but still I'm able to follow with him without issues, in fact it can be a bonus since you will have to follow him + build the algorithm your own using .Py", "likes": 4}]}, {"topLevelComment": {"author": "MD", "text": "Please hire a good looking woman instead of this guy....", "likes": 2}}, {"topLevelComment": {"author": "Insist", "text": "awesomeeeeeeeeeeeeeeeeeeeeeeee", "likes": 0}}, {"topLevelComment": {"author": "Chukwuma Ohuabunwa", "text": "I am so happy there's a video on this topic. Like I Google it everytime I am to use it", "likes": 0}}, {"topLevelComment": {"author": "hmm", "text": "And when the world need them most they are back", "likes": 0}}, {"topLevelComment": {"author": "Nze Ndereya", "text": "Thank you so much free code camp.", "likes": 1}}, {"topLevelComment": {"author": "Sanuja Methmal", "text": "Thanks a lot. These kind of videos are so rare. Please consider more videos on functional programming design patterns", "likes": 17}}, {"topLevelComment": {"author": "Noel Hdez", "text": "Broooooo. Literally you read my mind!!", "likes": 1}}, {"topLevelComment": {"author": "suman pokhrel", "text": "I am just starting DSA , and u just dropped a gem , thank you so much \ud83e\udd1f\ud83e\udd1f", "likes": 5}}, {"topLevelComment": {"author": "duy Nguyen", "text": "i truly appreciated your awesome free tutorial videos", "likes": 1}}, {"topLevelComment": {"author": "Kingkor Roy Tirtho", "text": "Recursion is awesome", "likes": 0}, "replies": [{"author": "Kingkor Roy Tirtho", "text": "Recursions are awesome", "likes": 0}, {"author": "Kingkor Roy Tirtho", "text": "Recursion is awesome", "likes": 0}, {"author": "Kingkor Roy Tirtho", "text": "Recursion is awesome", "likes": 0}, {"author": "Kingkor Roy Tirtho", "text": "Recursion is awesome", "likes": 0}, {"author": "Kingkor Roy Tirtho", "text": "Recursion is awesome", "likes": 0}]}, {"topLevelComment": {"author": "Amitabha", "text": "Cool! :)", "likes": 0}}, {"topLevelComment": {"author": "Ankit Raj", "text": "this is what I am waiting for...\u2026. you deserve more than 100billion like and share...\u2026. I am grateful for these kind of awesome videos...\u2026..", "likes": 1}}, {"topLevelComment": {"author": "Jaime Perez", "text": "Excellent! You guys put out excellent stuff.   Like it so much.   \ud83d\udc4f", "likes": 0}}, {"topLevelComment": {"author": "Yazzuk", "text": "perfect timing", "likes": 0}}, {"topLevelComment": {"author": "C", "text": "But is recursion bad for memory usage?", "likes": 1}, "replies": [{"author": "sam", "text": "Yes it\u2019s bad .", "likes": 0}]}, {"topLevelComment": {"author": "Muhammad Nour Hereh", "text": "how much  \"1st view\" are there?", "likes": 0}}, {"topLevelComment": {"author": "pravat Yadav", "text": "Google algo needs to put this video on top when searching for recursion", "likes": 28}, "replies": [{"author": "thrashGr00ve", "text": "Change your region to USA in youtube settings :D", "likes": 1}, {"author": "3WAYS2", "text": "Yeah", "likes": 0}]}, {"topLevelComment": {"author": "dukas", "text": "Wait I thought stack overflow was the name of a website?", "likes": 1}, "replies": [{"author": "Muhammad Nour Hereh", "text": "it is.", "likes": 0}]}, {"topLevelComment": {"author": "Prasun Kumar", "text": "Every time I am in search for a topic, FCC comes with a video. Thank You FCC for your efforts.", "likes": 5}}, {"topLevelComment": {"author": "Pranjal Prasad", "text": "Thank you so much! God bless!", "likes": 0}}, {"topLevelComment": {"author": "Rachad El Moutaouaffiq", "text": "its shameful that people are actually disliking such videos ...", "likes": 27}, "replies": [{"author": "Ojas Dighe", "text": "@Jason King bruh", "likes": 4}, {"author": "Jason King", "text": "@Insist Looping...", "likes": 0}, {"author": "Dawid G\u00f3ra", "text": "@Jason King everyone who thinks like that shouldn't be a programmer", "likes": 1}, {"author": "Insist", "text": "@Jason King what is better than it?", "likes": 0}, {"author": "Jason King", "text": "Recursion is a bullshit technique....", "likes": 0}]}, {"topLevelComment": {"author": "Nishant Banjade", "text": "Can you read my mind\nJust thought of learning recursion\nGoodbye world for few days \nI am gonna master recursion", "likes": 0}, "replies": [{"author": "shubham kumar", "text": "bro ,please share the practice experience and resources  on recursion", "likes": 0}]}, {"topLevelComment": {"author": "mohit singh parmar", "text": "your channel is life savior", "likes": 0}}, {"topLevelComment": {"author": "Soumyadeep Paul", "text": "Bomb has been dropped in this channel again.Thanks \u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Rishi Raj", "text": "\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"author": "Mr. Paul", "text": "Finally", "likes": 0}}, {"topLevelComment": {"author": "Adnan", "text": "Recursion", "likes": 0}}, {"topLevelComment": {"author": "Aviral", "text": "\"To understand recursion you need to first understand recursion\" :D\n\nofc not made by me,", "likes": 59}, "replies": [{"author": "Qi Li", "text": "this is a recursion dead lock", "likes": 0}, {"author": "sdiaz814", "text": "@thrashGr00ve no one likes a joke hipster", "likes": 0}, {"author": "thrashGr00ve", "text": "That's the most cliche computer nerd joke", "likes": 1}, {"author": "Rachad El Moutaouaffiq", "text": "xdd", "likes": 0}]}, {"topLevelComment": {"author": "Danny Hunn", "text": "This video shouldn't have an end because there is no base case!!!!", "likes": 0}}, {"topLevelComment": {"author": "Sportee Gamer", "text": "Awesome sir you make it easy and understandable Thank you Team FreeCodeCamp\ud83e\udd70\ud83e\udd70\ud83e\udd70", "likes": 1}}, {"topLevelComment": {"author": "Georg Plaz", "text": "not want to size shame anyone, but judging from the thumbnail, your stack size is not very big \ud83d\ude2c", "likes": 0}}, {"topLevelComment": {"author": "Dawn Ripper", "text": "The video is almost 2 hours long and came out less than 20 minutes ago, but there's already 31 comments, 329 likes, and 3 dislikes. The dislikers are especially trashy.", "likes": 8}, "replies": [{"author": "vinny142", "text": "I take it you are new to youtube?", "likes": 2}]}, {"topLevelComment": {"author": "JOK AKECH", "text": "Which programming language are you using to explain the examples", "likes": 0}, "replies": [{"author": "A. Sebastian Rolando", "text": "It seems to be Java.", "likes": 0}]}, {"topLevelComment": {"author": "sunnyfriday b", "text": "AWESOME! This channel is the best", "likes": 0}}, {"topLevelComment": {"author": "Manu Pandu", "text": "In python also?", "likes": 0}, "replies": [{"author": "Vs Sm", "text": "What is the difference? \ud83d\ude02", "likes": 0}]}, {"topLevelComment": {"author": "integrate", "text": "\u2665\ufe0f\u2665\ufe0f\u2665\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "Aman Tiwari", "text": "Finally my favourite topic is here thanks fcc", "likes": 1}}, {"topLevelComment": {"author": "Abiraj Rajendran", "text": "I was struggling with thinking and understanding recursion for the past few days,,,, and here it is,! \u2764\ufe0f", "likes": 0}}, {"topLevelComment": {"author": "aanupama rani", "text": "Dou_bt", "likes": 2}}, {"topLevelComment": {"author": "ISSAC NEWTON", "text": "I sometimes feel guilty as i dont pay any fees to them and yet dont have time to study all this things :(", "likes": 248}, "replies": [{"author": "Prashant Mulay", "text": "strongly agree...", "likes": 0}, {"author": "A S Shivam", "text": "https://www.youtube.com/watch?v=xeMcWN_5qK4\n\nThis is awesome!! Clear all your doubts about Recursion and master it in just 15 minutes!! \nWatch now!!", "likes": 0}, {"author": "Chris", "text": "@Utkarsh Kukreti I wish I could do that", "likes": 0}, {"author": "Ferhat BEZTOUT", "text": "Isaac Newton what're you doing in the 21th century ?", "likes": 1}, {"author": "Digvijay Singh", "text": "Don't lie. I know newton's a genius", "likes": 2}]}, {"topLevelComment": {"author": "Luxcium", "text": "I ended up using a for loop inside of my recursive function so yeah I am not sure if it would be better for me to defer that task to an auxiliary function!!!", "likes": 3}, "replies": [{"author": "Sanuja Methmal", "text": "One aspect of recursions is avoiding for loops. So if u gonna use for loops anyway, just write normal functions.", "likes": 1}]}, {"topLevelComment": {"author": "Varasampath Borra", "text": "Its gonna be \ud83d\udd25\ud83d\udd25 thank you", "likes": 0}}, {"topLevelComment": {"author": "Luxcium", "text": "I have been looking for that during the night\u2026", "likes": 0}}, {"topLevelComment": {"author": "Vlog sisita_deep mind", "text": "Hey bro. Can you tell me where and how i can start to learn hacking pleas.??", "likes": 2}, "replies": [{"author": "Vlog sisita_deep mind", "text": "@Hollywood Sprite that's why I lost in that .", "likes": 0}, {"author": "Hollywood Sprite", "text": "They have a 12hr course on ethical hacking lmao", "likes": 1}]}, {"topLevelComment": {"author": "\u062f\u064a\u0644\u064a \u0645\u0627\u0631\u062a\u0631 Dili martr", "text": "Wow \ud83e\udd29", "likes": 0}}, {"topLevelComment": {"author": "Pratik Sharma", "text": "11th", "likes": 0}}, {"topLevelComment": {"author": "dry humor", "text": "Kinda early", "likes": 0}}, {"topLevelComment": {"author": "Amrit Singh", "text": "First, I've always wanted to know about this. And here you are!!", "likes": 22}, "replies": [{"author": "Tibetten Balls", "text": "You ever suqq on it and later repent for your sins?", "likes": 0}]}, {"topLevelComment": {"author": "Bhavya Aggarwal", "text": "1st view", "likes": 0}}, {"topLevelComment": {"author": "BHUVAN GAMER", "text": "Hi sir", "likes": 2}}, {"topLevelComment": {"author": "Luxcium", "text": "Third (I think)\u2026", "likes": 0}}, {"topLevelComment": {"author": "Mohammed Nawaz", "text": "First person to be here", "likes": 0}}, {"topLevelComment": {"author": "Parag Naik", "text": "Much needed", "likes": 2}}, {"topLevelComment": {"author": "Subrat Das", "text": "\u2764", "likes": 0}}, {"topLevelComment": {"author": "Padlux", "text": "I love your vids", "likes": 1}}, {"topLevelComment": {"author": "Ahmad Waheed", "text": "First view", "likes": 0}}, {"topLevelComment": {"author": "\u062d\u06d5\u062c\u06cc - 7EJI\ud83d\udc73\u200d\u2642\ufe0f", "text": "Good luck", "likes": 0}}, {"topLevelComment": {"author": "Parag Naik", "text": "Finally", "likes": 0}}]}