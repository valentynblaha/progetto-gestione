{"video": {"id": "1JsJx1x35c0", "title": "Closures - Beau teaches JavaScript", "description": "Closures are an important concept in JavaScript and other programming languages. Learn the basics of closures in this video!\n\nCode: \n\ud83d\udd17 http://codepen.io/beaucarnes/pen/ZLLqLR?editors=0012\nMore info:\n\ud83d\udd17 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\n\ud83d\udd17 https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.nu14obibk\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nFollow us on twitter: https://twitter.com/freecodecamp\nLike us on Facebook: https://www.facebook.com/freecodecamp\nFollow Quincy on Quora: https://www.quora.com/Quincy-Larson", "duration": "PT4M48S", "likes": "1525", "views": "70353"}, "comments": [{"topLevelComment": {"author": "Vahe Aslanyan", "text": "Wow, just spend at least the past 2 hours trying to understand closures watching a few 20+ minute videos, reading up, etc.\n\nThis video is literally the shortest content out of any of them but it is the only one that is clear and logical and it definitely helped me understand closures.\n\nThank you!", "likes": 0}}, {"topLevelComment": {"author": "Rob Tangled", "text": "The only problem I notice with Beau's teaching method is that he goes from 20km/h to 150km/h in one second. If you try to play it at 0.75x, sometimes it will feel too slow, but if you play it at 1x, he speaks too fast 30% of the time.", "likes": 1}}, {"topLevelComment": {"author": "Dmitri K", "text": "so, the private variable in the parent container function is modified by the child container function?\nEx.\nfunction parentFunction() {\n\tlet counter = 0\n  function childFunction() { \n  \tconsole.log(\"counter\",counter)\n  \tconsole.log(\"counter increment\",counter+=1)\n  }\n  return childFunction\n}\n\nlet result = parentFunction()\nresult()\nresult()\nresult()", "likes": 0}}, {"topLevelComment": {"author": "Scott Smyth", "text": "Great explanation thanks!", "likes": 0}}, {"topLevelComment": {"author": "min11benja - Blog", "text": "It's when a function or variable has access to other variables within the scope or the environment it was created in. They are sometimes used to emulate private methods. Which can only be called by other methods in the same class. Since JS does not have a native way of doing this.", "likes": 0}, "replies": [{"author": "min11benja - Blog", "text": "I got this somewhere else : What is closure? It is where an inner function has access to the outer enclosing functions variables. \r\nA closure has access to basically 3 scope chains, its own scope variables, the outer functions variables, and the global variables.", "likes": 0}]}, {"topLevelComment": {"author": "Abdullah Gumel", "text": "So basically it's like a character in a sandbox game having access to all the stuff in their environment they exist within", "likes": 0}}, {"topLevelComment": {"author": "ulTimateLokal", "text": "ugh my brain hurts.", "likes": 0}}, {"topLevelComment": {"author": "neahnderthal", "text": "would greatly appreciate if you talk louder instead of adjusting my speaker every time :(", "likes": 0}}, {"topLevelComment": {"author": "Christian Fall", "text": "Uh. What!?", "likes": 0}}, {"topLevelComment": {"author": "CentrumSaiyan", "text": "Thanks, I have watched several great tutorial channels and yet, closure is still something i'm not confident talking about.", "likes": 0}}, {"topLevelComment": {"author": "Ken Skversky", "text": "Way too confusing of a presentation", "likes": 0}}, {"topLevelComment": {"author": "Bulldawg", "text": "Yes, one of the better explanations I've come across, too ... Concise, too ...", "likes": 0}}, {"topLevelComment": {"author": "#hashtagTrends", "text": "Thank you!", "likes": 0}}, {"topLevelComment": {"author": "Grahfx", "text": "It looks like a class emulation no ? You just instantiate an object called counter that has a property privateCounter and 3 methods in it.", "likes": 0}}, {"topLevelComment": {"author": "Ashton Christopher", "text": "Dude...you cant use jargon with beginners.  This was terrible", "likes": 0}}, {"topLevelComment": {"author": "SWARM DESIGN SOLUTIONS", "text": "this is by far the best video - thanks", "likes": 0}}, {"topLevelComment": {"author": "Bilja M", "text": "Thank you! I was really confused by closures.", "likes": 0}}, {"topLevelComment": {"author": "Oleg P", "text": "I finally understand!", "likes": 0}}, {"topLevelComment": {"author": "J Brabec", "text": "Awesome example! This helped me a ton when you related it to an object-oriented class with private data and public and protected functions", "likes": 2}}, {"topLevelComment": {"author": "ouf cena", "text": "var counter = (function() { \n  var privateCounter = 0;\n  function changeBy(val) {\n    privateCounter += val;\n  }\n  return {\n    increment: function() {\n      changeBy(1);\n    },\n    decrement: function() {\n      changeBy(-1);\n    },\n    value: function() {\n      return privateCounter;\n    }\n  };\n})();\nconsole.log(counter.value()); //returns 0\ncounter.increment();\ncounter.increment();\nconsole.log(counter.value()); //returns 2\ncounter.decrement();\nconsole.log(counter.value()); //returns 1", "likes": 1}, "replies": [{"author": "ouf cena", "text": "Local variables say \"That's you can't see me!\" John Cena!", "likes": 1}, {"author": "ouf cena", "text": "How to use closures?\n1- Declare a variable which is gonna be considered a small program part inside your big program.\n2- Assign a value to it equals to a function wrapped inside (parentheses) and followed by ();\nNow, consider the inner code of the function to be a new code (program).", "likes": 1}, {"author": "ouf cena", "text": "Why bother using closures?\nWhenever you need to have some local variables available & accessible only for a certain statements (lines of code).", "likes": 1}, {"author": "ouf cena", "text": "Since I'm a robot, I'll translate this code for humans!\n1- There is a variable named counter stores a nested function.\n2- But the function is inside parentheses and ended with ();\nThis means the function will call itself (its definition) so, it'll run automatically which changes the entire code to the following:\n3- JS will say \"Ok, lads! We got a variable named privateCounter and it's been initialized to 0;\"\n    JS Commander says \"And as for the 2nd statement looks like got us a function named changeBy which has 1 parameter which requires a variable as an input and about what this function does (what's it for?) The point of it is simply to add the value of the input variable passed as an argument to the old variable pal there with the name of privateCounter, but sir! It's already been assigned a value of 0. Does this mean? Exactly soldier! There will be a new value which equals the old one which is zero and the new value passed as an input argument of a variable. Is that clear, soldier?! Yes, sir! And for the rest of new code, jump into the next point!\".\n4- The variable counter is no longer stores a function, but what it returns which is an object which      \n    has three functions called methods as they are attached to an object.\n     var counter = {\n       increment: function() {\n         changeBy(1);\n       },\n       decrement: function() {\r\n         changeBy(-1);\r\n       },\r\n       value: function() {\r\n         return privateCounter;\r\n       }\n     };", "likes": 1}]}, {"topLevelComment": {"author": "Stanislav Coros", "text": "this is complete mess explanation. ... That second attempt.", "likes": 3}}, {"topLevelComment": {"author": "MistaJones89", "text": "Thanks for this, this helped give me a little more clarity with one of the lessons I'm learning in JavaScript on udemy. Liked and subscribed.", "likes": 0}}, {"topLevelComment": {"author": "Ashwin Raju", "text": "You are awesome!", "likes": 0}}, {"topLevelComment": {"author": "Kylie Staraway", "text": "Maybe you should tell people that whatever is in the closures will be stored there even many new lines away.", "likes": 1}}, {"topLevelComment": {"author": "Dan T", "text": "still confused as all hell. you're glossing over subjects and not going over it thoroughly. GO MORE SLOWLY AND STEP BY STEP BY STEP BY STEP BY STEP. Amazes me how much CS skips steps when by nature it is all about logical steps", "likes": 10}}, {"topLevelComment": {"author": "Renan Alves", "text": "3:04 Access", "likes": 0}}, {"topLevelComment": {"author": "Pan Nihto", "text": "I do understand closures (or at least I think I do) but that's a horrible explanation", "likes": 0}}, {"topLevelComment": {"author": "Henry", "text": "Super helpful and straight to the point! Thanks a lot for sharing.", "likes": 0}}, {"topLevelComment": {"author": "Osama Abbas", "text": "Good tutorial about closure. thanks", "likes": 0}}, {"topLevelComment": {"author": "Cristian Gabriel", "text": "Well you always manage to explain it the way I can understand it.  So to everyone else, we all learn different! for me Beau is the way..", "likes": 3}}, {"topLevelComment": {"author": "Kifayat Msd", "text": "After writing JavaScript code for the last couple of years now I understand what exactly is javascript closure. You made my day bro. Thanks alot.", "likes": 1}}, {"topLevelComment": {"author": "Ghosid", "text": "Great explanation of IIFS + Closures. /neededthat", "likes": 0}}, {"topLevelComment": {"author": "Morty Jr", "text": "Private methods in Java:\n\n\nprivate void printSomething() {\n     System.out.println(\"I'm better\");\n}\n\n\nPrivate methods in JavaScript:\n\n\nThis video", "likes": 0}}, {"topLevelComment": {"author": "ebiekem", "text": "Mehn, JavaScript is hard...", "likes": 0}}, {"topLevelComment": {"author": "Raregamer", "text": "Hi I am a little confused on how the privateCounter variable isn't getting destroyed and starting from 0 again every time counter is called,  and is able to actually keep track of the count, as if it was a global variable.  Is it that the variable counter is actually storing that information and doesn't destroy the values?", "likes": 0}}, {"topLevelComment": {"author": "Sebastian", "text": "coming from Java this behavior is quite odd, but ok, i guess xD", "likes": 0}, "replies": [{"author": "Brandon Chapman", "text": "Agreed. This is a clear example of js rushed creation. A design mistake", "likes": 0}]}, {"topLevelComment": {"author": "SANJEET kumar", "text": "This is what I can NEVER understand and I never know why?  I feel like I should better die.", "likes": 0}, "replies": [{"author": "freeCodeCamp.org", "text": "Just keep trying and you will eventually get it! Try starting at the beginning of the free curriculum at www.freecodecamp.org.", "likes": 0}]}, {"topLevelComment": {"author": "Ko Komi", "text": "You get it simple, and you still get it well done.", "likes": 0}}, {"topLevelComment": {"author": "gas-powered-crusader", "text": "that example is ripped straight from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures :)", "likes": 0}}, {"topLevelComment": {"author": "Emile Wamsteker", "text": "So far, this is one of the best descriptions of closures I've come across.  However, when you explain closures, it's worth doing a brief review of function syntax.  I think what confuses most people about closures is the return statement of the outer function, what exactly is being returned.  Most people believe the return statement is returning what is evaluated in the inner function, when, in fact, it is returning the function itself along with its lexical scope.  Note, that in the return statement, the displayName function does not have a set of parentheses following it. Remember that a function without parentheses is the function itself -- all of its syntax, instructions, lexical scope-- and NOT the value of the evaluated function, as most people might think.  In this example, when the inner function is passed to the global scope, it gets stored to a variable in much the same manner as a function expression. As with a function expression, to invoke it, you place parentheses after it to call its respective function, and it evaluates.  I've have yet to see anyone explain this in a video.  Their is an assumption that the viewer already understands this concept.  The problem with learning closures is that by the time a student gets to them, they are so used to the syntax of function declarations, that they take them for granted and probably do not realize that only the function name is used in the return statement, and not a function call.", "likes": 54}, "replies": [{"author": "Nwokporo Chukwuebuka", "text": "Well said. I agree with all you have said", "likes": 0}, {"author": "coli wong", "text": "Emile, thinking that you maybe explain more clearly and some people may not know how function is called in stack. Actually after finishing of calling a function, all of which are destroyed.But a new copy of that survives in the surrounding environment. That is why we can use it later.", "likes": 0}, {"author": "Olutobi Ogunsola", "text": "I will get this concept someday.", "likes": 2}]}, {"topLevelComment": {"author": "\uc18c\uc11c\ub9ad::\uc18c\uc11c\ud22c\uc790\ud074\ub7fd", "text": "I logged in to say thank you. Gosh I finally understand what closures are. Wait, do I really???? lol", "likes": 8}, "replies": [{"author": "Osama Abbas", "text": "a man once said you won't get closure even if you think you've completely got it!", "likes": 0}]}, {"topLevelComment": {"author": "Dos Taquitos", "text": "I am still confused but less confused than after my 30min lecture + activities on this.  Thank you for being an excellent teacher!", "likes": 1}}, {"topLevelComment": {"author": "Sourand Bitter", "text": "So just to make sure, in the second example there is no garbage collection on the environment the returned object is because that returned object references everything that is in it? How does this example compare to an ES6 class, or for the private part, classes on Typescript?", "likes": 0}}, {"topLevelComment": {"author": "Comfortable Frequency", "text": "Just had a break through.\n\n Thank you.", "likes": 0}}, {"topLevelComment": {"author": "Pulp Free Press", "text": "Clearly explained. Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Regular", "text": "This is some trick stuff. Thanks for the explanation though, its a bit more clear to me.", "likes": 0}}, {"topLevelComment": {"author": "Anas U", "text": "closures ? hard", "likes": 2}}, {"topLevelComment": {"author": "Z S", "text": "Thanks for the great video and tutorial. This is how I like to think of closures. Please feel free to correct me if my understanding of some concepts aren't correct as I'm just learning about closures myself.\n\n/*\nThe closure of a function is the function(s) its enclosed in and the inner function(s) has access to the variables defined in those closures even after those functions are no longer on the execution stack. Paste and run the below in Google Chrome console and drill down into the scopes to check the closures out. In the below example the inner function is enclosed in speak function hence it's closure is the function speak. If speak itself was within another outer function then inner function has TWO closures the speak function as well as the outer one enclosing speak.\n*/\n\nfunction speak(greeting)\n{\n    var inner = function (name)\n    {\n      console.log(greeting + \" \" + name);\n    }\n\n     return inner\n }\n\nvar theGreeting = speak(\"Hello\");\n\nconsole.log(theGreeting(\"Adam\"));\nconsole.dir(theGreeting);", "likes": 2}, "replies": [{"author": "aj_schwifty", "text": "Z S I don\u2019t know why but your extremely short paragraph was the best explanation I\u2019ve ever gotten of closures lol. It\u2019s given ME closure *badum tss*", "likes": 1}]}, {"topLevelComment": {"author": "Vin\u00edcius", "text": "Thank you, that was an awesome explanation!!", "likes": 0}}, {"topLevelComment": {"author": "T Antill", "text": "Thanks for the example!", "likes": 0}}, {"topLevelComment": {"author": "Bob Sutton", "text": "Thanks for the example.  It was an eye-opener.  \n\nHowever, this appeared to reveal a bug in Firefox's JavaScript engine.  The open curly bracket MUST be on the same line as the \"return\" statement.  If one follows my bracketing convention, where the bracket is placed on the following line, the engine generates an error.  However, if the object being returned is placed in a variable first, which is then returned, it works regardless of where the opening bracket is located.", "likes": 0}, "replies": [{"author": "Alessandro Yorba", "text": "I'm not sure if that's a bug. When the the file is read at runtime, javascript engines will automatically insert semi-colons to the end of each line. So I believe it placed that semicolon right after your return keyword, ultimately ending the function and returning \"Undefined\"", "likes": 2}]}, {"topLevelComment": {"author": "Woodshadow", "text": "A month in on this stuff and I am still completely lost", "likes": 49}, "replies": [{"author": "Hong Frank", "text": "u r not alone.", "likes": 2}, {"author": "e u", "text": "2 years now how u doin lmao", "likes": 26}, {"author": "Eli P.", "text": "You should try to understand what a Scope is first and then tackle Closures. This is my recommendation to you. :)", "likes": 7}, {"author": "Beau Carnes", "text": "Have you tried going through the JavaScript training on freecodecamp.com? Also, I'm releasing the videos sort of out of order but by the end of this month I will have a complete basic javascript course that you can then watch in order.", "likes": 4}]}]}