{"video": {"id": "bK7I79hcm08", "publishedAt": "2017-03-19T19:32:07Z", "title": "Queues & Priority Queues - Beau teaches JavaScript", "description": "Queues are a first-in first-out data structure. Also learn about priority queues.\n\n\ud83d\udd17 Code: http://codepen.io/beaucarnes/pen/QpaQRG?editors=0012\n\ud83d\udd17 More info: https://www.safaribooksonline.com/library/view/learning-javascript-data/9781783554874/ch04.html\n\nBeau Carnes on Twitter: https://twitter.com/carnesbeau\n\n\u2b50JavaScript Playlists\u2b50\n\u25b6Data Structures and Algorithms: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ\n\u25b6JavaScript Basics: https://www.youtube.com/playlist?list=PLWKjhJtqVAbk2qRZtWSzCIN38JC_NdhW5\n\u25b6Design Patterns: https://www.youtube.com/playlist?list=PLWKjhJtqVAbnZtkAI3BqcYxKnfWn_C704\n\u25b6ES6: https://www.youtube.com/playlist?list=PLWKjhJtqVAbljtmmeS0c-CEl2LdE-eR_F\n\u25b6Clean Code: https://www.youtube.com/playlist?list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh\n\n-\nWe're busy people who learn to code, then practice by building projects for nonprofits. Learn Full-stack JavaScript, build a portfolio, and get great references with our open source community.\n\nJoin our community at https://freecodecamp.com\nRead great tech articles at https://medium.freecodecamp.com", "duration": "PT6M39S", "likes": "488", "views": "38734"}, "comments": [{"topLevelComment": {"id": "Ugx6vy5eKukiJ2fIx0l4AaABAg", "publishedAt": "2022-12-29T11:46:16Z", "author": "\u0414\u0435\u043d\u0438\u0441 \u041a\u043e\u0447\u0435\u0432", "text": "Great video, thank you!", "likes": 0}}, {"topLevelComment": {"id": "UgyN-Bz1R4CH8cLkbh94AaABAg", "publishedAt": "2022-09-30T07:58:52Z", "author": "Rajat Pratap Singh", "text": "for peek in queue: \n\nqueue[queue.length]", "likes": 0}}, {"topLevelComment": {"id": "Ugyn3PvTUG45Jd6IzjJ4AaABAg", "publishedAt": "2022-08-19T06:47:25Z", "author": "DuoDecillion", "text": "Isn't the splice inside the for loop of the enqueue function to make it O(n^2)?. And I think you could make the dequeue function O(1), if you use pop() instead of shift which is O(n), just changing the condition on the enqueue function to be element[1] > collection[i][1] etc.", "likes": 0}, "replies": [{"id": "Ugyn3PvTUG45Jd6IzjJ4AaABAg.9eu7WUR8C4i9ifV6I57o5Q", "publishedAt": "2022-11-21T00:30:32Z", "author": "Isabelle Giuong", "text": "the splice is to insert into the correct spot. The shift is to remove from the front (queues remove from front), pop() will remove from the back, so it's not what you want in this case.", "likes": 0}]}, {"topLevelComment": {"id": "Ugx3_IseKe-H518I-xp4AaABAg", "publishedAt": "2022-03-04T06:35:38Z", "author": "Oplaflafla", "text": "thx, very useful to know how to implement priority queues in js", "likes": 0}}, {"topLevelComment": {"id": "UgxHAzMsrouwjI3OAjp4AaABAg", "publishedAt": "2021-11-11T01:57:12Z", "author": "YAHUAH'S son & friend", "text": "Always remember to repent of your sins (sin is transgression of YAHUAH The Father In Heaven\u2019s LAW: Genesis, Exodus, Leviticus, Numbers, & Deuteronomy) And Have Belief On Yahusha The Messiah. HE Died and Rose three days later so that you can be forgiven of your sins! \n\nHE Loves you! Come to HIM\ud83d\ude42\ud83d\ude42\ud83d\ude42\ud83d\ude42\ud83d\ude42\ud83d\ude42", "likes": 0}}, {"topLevelComment": {"id": "UgxANnXZuTiy9pzbd7F4AaABAg", "publishedAt": "2021-06-20T08:09:03Z", "author": "Mohaiminul Hasan", "text": "Thanks. This helped me with my pathfinding visualizer. But during enqueue I compared current priority > iterated priority. I guess it has something to do with min-heap / max-heap.  Once I made that change pathfinding was faster than DFS in my grid.", "likes": 0}}, {"topLevelComment": {"id": "Ugx_MqZFHdBbax1puBt4AaABAg", "publishedAt": "2021-02-11T22:27:11Z", "author": "Naman Gupta", "text": "Shift method works like a charm for removing first element from the array.", "likes": 0}}, {"topLevelComment": {"id": "UgxCwFBAnxjDJkIg21l4AaABAg", "publishedAt": "2020-12-29T23:10:36Z", "author": "Fadi", "text": "For the enqueue method, instead of using a for loop and writing all that code, you can push the element into the collection array and then sort it in ascending order:\n\nthis.enqueue = function(element) {\r\n\tthis.collection.push(element);\r\n\tthis.collection.sort((a, b) => a[1] - b[1]);\r\n}", "likes": 1}, "replies": [{"id": "UgxCwFBAnxjDJkIg21l4AaABAg.9Hs4fBkVa1z9eFnDfhcrGH", "publishedAt": "2022-08-03T05:32:29Z", "author": "renetchi", "text": "using sort will be O(n log n) \nusing the for loop in the video will be O(n)", "likes": 0}]}, {"topLevelComment": {"id": "Ugz6rF3QHyjTpDsmCv54AaABAg", "publishedAt": "2020-02-04T03:11:58Z", "author": "Dzenis H.", "text": "Concise and practical, love it \ud83d\udc4f", "likes": 1}}, {"topLevelComment": {"id": "Ugxd7GL3Vr-0poXpk_V4AaABAg", "publishedAt": "2020-01-17T04:16:30Z", "author": "Shayn Hacker", "text": "How do I dynamically assign priority to data being sent into the array/collection array instead of it being hard-coded like how you have it in the video?", "likes": 0}}, {"topLevelComment": {"id": "UgwtGSI46Bj_-I1b92h4AaABAg", "publishedAt": "2019-09-14T17:04:11Z", "author": "israel meza", "text": "if you remove form the beginning of an array the  complexity is  O(n) if you remove from a linked list it is O(1). Does this mean that for coding interviews I have to implement my own linked list queue?", "likes": 1}, "replies": [{"id": "UgwtGSI46Bj_-I1b92h4AaABAg.8zs3XW2pCUU9-HiNDzVgQO", "publishedAt": "2019-09-25T01:30:02Z", "author": "ScientificBEST", "text": "It doesn't have to be a linked list in the strict sense. You can certainly implement it in a more efficient way using linked list semantics.", "likes": 0}]}, {"topLevelComment": {"id": "Ugw4wJjiwwzbhn2BE2B4AaABAg", "publishedAt": "2019-01-02T19:27:16Z", "author": "Charlie Kim", "text": "for this.enqueue function isn't line 41: if(this.isEmpty()) a bit redundant since we would just be doing the same thing in line 52?  If collection is empty, then var added will remain false since the If-statement in the for-loop would never evaluate to true and therefore the element would be pushed onto collections.\n\nAre we just checking for the empty array right away so in the case where the array is empty we could just stop the function early?  Does this help performance or something?", "likes": 1}}, {"topLevelComment": {"id": "UgzfMcBxu_w0WDxOGI54AaABAg", "publishedAt": "2018-06-29T18:45:16Z", "author": "Vishnu B", "text": "http://interviewhelperphpjs.co/binary-treemax-heap-priority-queue-and-implementation-using-javascript/427/", "likes": 0}}, {"topLevelComment": {"id": "UgydEuuWurXdig6HSwF4AaABAg", "publishedAt": "2018-04-25T00:29:20Z", "author": "Tushar Chhibber", "text": "Anyone please correct me if I am wrong, when we are running a loop to check for priorities... lets say this is the sample collections [ ['a', 4], ['b', 3], ['c', 2]] and I want to add ['d', 1]. If we run look from i = 0 to collection.length with if condition of element[1] < collection[i][1], we will end up with  [ ['d', 1], ['a', 4],  ['b', 3], ['c', 2]], but if we run with if condition of element[1] > collection[i][1], we will get [ ['a', 4],  ['b', 3], ['c', 2], ['d', 1] ] ....", "likes": 0}}, {"topLevelComment": {"id": "UgwDLvk5Pi6n4aiX3qp4AaABAg", "publishedAt": "2018-03-16T19:09:04Z", "author": "Jason Jay Nulla", "text": "In the priority queue, why not use index as the priority? Then each index has a collection and just check if it's empty or not instead of looping through all the elements?", "likes": 1}, "replies": [{"id": "UgwDLvk5Pi6n4aiX3qp4AaABAg.8dro-clMy2S8wKbGQhp0Jw", "publishedAt": "2019-06-18T18:20:05Z", "author": "pagnito", "text": "@Pankaj Agham i suppose you can check if given index has an item and if so place the new item next to it?", "likes": 1}, {"id": "UgwDLvk5Pi6n4aiX3qp4AaABAg.8dro-clMy2S8tlJ0kZD9La", "publishedAt": "2019-04-15T22:56:28Z", "author": "Pankaj Agham", "text": "then how you tackle the items with similar priorities?", "likes": 0}, {"id": "UgwDLvk5Pi6n4aiX3qp4AaABAg.8dro-clMy2S8izBFlffkeX", "publishedAt": "2018-07-21T22:32:39Z", "author": "FiredForFighting", "text": "Jason Nulla yes I was thinking this same thing", "likes": 0}]}, {"topLevelComment": {"id": "Ugz3Qv0Xd25U4yDkjWB4AaABAg", "publishedAt": "2018-01-12T03:45:19Z", "author": "Acad\u00e9mie R\u00e9paration", "text": "I didn't get collection.splice(i, 0, element) in PriorityQueue.enqueue('cedar', 2)\nIs not element[0] and not just element, because enqueue have 2 parameters in an array?\nEDIT: I got it, bc he's adding the priority too...\nNice implementation", "likes": 1}, "replies": [{"id": "Ugz3Qv0Xd25U4yDkjWB4AaABAg.8bIwChuKZZs8zShRlU5Bz3", "publishedAt": "2019-09-04T11:22:10Z", "author": "Deepak Kumar Mohanty", "text": "@xavier i got confused while adding splice. the i value was suppose to be 2 and it should insert at 2nd index\nCould you explain it? please", "likes": 0}]}, {"topLevelComment": {"id": "Ughvi3owJ_h3R3gCoAEC", "publishedAt": "2017-06-11T10:36:29Z", "author": "Bijay Timilsina", "text": "The simple code along with the soft voice makes it so easy and quick to understand these things. Just a tip: You can put the collection with array of items on a side window or as comments beside the line of code that you are currently explaining so it's easy to see the code along with collection ( eg. the part where you do colletion[ i ] [1]). Not a big thing, but human brain's algorithm is bit slow in searching memory queues (pun intended), especially for beginners. Thank you Beau, you are AWESOME and please keep sharing. Have a nice day :)", "likes": 6}}, {"topLevelComment": {"id": "UggVSyyTthY-kXgCoAEC", "publishedAt": "2017-05-10T22:46:08Z", "author": "Jay P", "text": "The enqueue function here is linear. If you use a heap as the storage, you will have logarithmic enqueue/dequeue functions. Using a heap, you can still maintain FIFO within a given priority level by performing a secondary comparison to an \"epoch\" or \"addedAt\" parameter.", "likes": 7}}]}