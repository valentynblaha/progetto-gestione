{"video": {"id": "Mo4vesaut8g", "title": "Big O Notation - Full Course", "description": "This course will teach you how to understand and apply the concepts of Big O Notation to Software Engineering. Big-O notation is a way to describe how long an algorithm takes to run or how much memory is used by an algorithm.\n\n\u270f\ufe0f This course was developed by selikapro. Check out his channel: https://www.youtube.com/channel/UC5UgemAz061hkjTFHOfxNpg\n\ud83d\udd17 Twitter: https://twitter.com/selikapro\n\ud83d\udd17 Instagram: https://www.instagram.com/selikapro\n\n\u2b50\ufe0f Course Contents \u2b50\ufe0f\n\u2328\ufe0f (0:00:00) Intro\n\u2328\ufe0f (0:00:39) What Is Big O?\n\u2328\ufe0f (0:07:08) O(n^2) Explanation\n\u2328\ufe0f (0:14:06) O(n^3) Explanation\n\u2328\ufe0f (0:26:29) O(log n) Explanation Recursive\n\u2328\ufe0f (0:31:12) O(log n) Explanation Iterative\n\u2328\ufe0f (0:36:08) O(log n) What Is Binary Search?\n\u2328\ufe0f (0:41:30) O(log n) Coding Binary Search\n\u2328\ufe0f (0:58:12) O(n log n) Explanation\n\u2328\ufe0f (1:02:50) O(n log n) Coding Merge Sort\n\u2328\ufe0f (1:17:04) O(n log n) Merge Sort Complexity Deep Dive\n\u2328\ufe0f (1:28:06) O(2^n) Explanation With Fibonacci\n\u2328\ufe0f (1:36:02) O(n!) Explanation\n\u2328\ufe0f (1:47:19) Space Complexity & Common Mistakes\n\u2328\ufe0f (1:55:53) End\n\n\ud83c\udf89 Thanks to our Champion and Sponsor supporters:\n\ud83d\udc7e Wong Voon jinq\n\ud83d\udc7e hexploitation\n\ud83d\udc7e Katia Moran\n\ud83d\udc7e BlckPhantom\n\ud83d\udc7e Nick Raker\n\ud83d\udc7e Otis Morgan\n\ud83d\udc7e DeezMaster\n\ud83d\udc7e Treehouse\n\ud83d\udc7e AppWrite\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://freecodecamp.org/news", "duration": "PT1H56M16S", "likes": "14924", "views": "375278"}, "comments": [{"topLevelComment": {"author": "Enzo Guerra", "text": "Must say that thats the best tutorial related to the subject!!!", "likes": 0}}, {"topLevelComment": {"author": "Y", "text": "This is the one video that finally helped me to understand big O", "likes": 0}}, {"topLevelComment": {"author": "Dhanshyam Kamath", "text": "good explanation.", "likes": 0}}, {"topLevelComment": {"author": "Cristi Code", "text": "How do you jump to definition in Vim with Coc like you did at 43:36?", "likes": 0}}, {"topLevelComment": {"author": "Isaac Udofia", "text": "This really helped in my exam on design and analysis of algorithm. Nice and clear explaination\ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"author": "Daniel Sierra", "text": "Really thanks for the help!", "likes": 0}}, {"topLevelComment": {"author": "DD", "text": "01:20:11 \nAm i hungry ? Replay... Oh well no, it was you.", "likes": 0}}, {"topLevelComment": {"author": "YuNan Chen", "text": "What is your keyboard\uff1f it seem be very nice", "likes": 0}}, {"topLevelComment": {"author": "J R", "text": "I have a question regarding the O(log n) code, \njust this tho \n\nFunction logFunc(n){\n                 if(n==0) return \u201eDone\u201c;\n                   n = Math.floor( n / 2);\n                     return logFunc( n );\n}\n\nAt the third Iteration the function stops at 1 not at 0,\nso why isnt it\n\nif (n == 1) return \u201eDone\u201c;   ?\n\n\ud83d\ude0a", "likes": 0}}, {"topLevelComment": {"author": "Luka Maleti\u0107", "text": "The explanation of the O(log n) complexity is really bad. After doing iteration you simply put the log in the brackets and start proving that log2(8) equals 3. You should have gone in another direction and get the log through the numbers, or use more difficult code examples...", "likes": 0}}, {"topLevelComment": {"author": "Ved Arovski", "text": "O(log n) makes sense when log n is an integer. Otherwise, my brain gets screwed.", "likes": 0}}, {"topLevelComment": {"author": "Oz Sariyildiz", "text": "This is the best Big O Notation video I have ever seen.", "likes": 0}}, {"topLevelComment": {"author": "jagadeesh kumar", "text": "if people lik u guys exist, thn we can learn anything", "likes": 0}}, {"topLevelComment": {"author": "Barry Campbell Costantini", "text": "Very good!", "likes": 0}}, {"topLevelComment": {"author": "DTDelaw", "text": "7/2 is 3.5 according to math.floor 4 becomes your mid, not 5 confused me the entire explanation of logn", "likes": 0}}, {"topLevelComment": {"author": "Don't bother", "text": "Anyone want to explain the O(n^3) to me? I get it mathematically ( that's intuitive to algebra) but i don't quite get the explanation.  Why is K the only iteration that is incrementing. Is it because the way it is nested? I just don't get why I and J don't increment. Also, even if i don't understand, doesn't mean I'm not trying to grasp the concept. I just believe i am missing something.  Starts at like 20:30", "likes": 0}}, {"topLevelComment": {"author": "Santosh Palli", "text": "Thank you so much for very detailed explanation.", "likes": 0}}, {"topLevelComment": {"author": "Luis Carrillo", "text": "Studying for my computer science midterm. Great video helped me a lot!", "likes": 3}, "replies": [{"author": "Mihnea", "text": "Studying this for my national Olympiad \u2620", "likes": 0}]}, {"topLevelComment": {"author": "Moments with Manisha.", "text": "Best explanation for time complexity calculation. Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Abdur Rahman", "text": "22-09-2022(completed)", "likes": 0}}, {"topLevelComment": {"author": "Eric Knudstrup", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Mauricio Alcal\u00e1", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "cate", "text": "ty", "likes": 0}}, {"topLevelComment": {"author": "Jawwaad Sabree", "text": "", "likes": 0}}, {"topLevelComment": {"author": "Hritik mishra", "text": "Thanks for such awesome lectures. Please upload some more lectures on Time and space complexity", "likes": 0}}, {"topLevelComment": {"author": "juiceD\u00e9Lemon", "text": "this guy uses vim. i trust him", "likes": 0}}, {"topLevelComment": {"author": "muhammad sauood", "text": "thankyou", "likes": 0}}, {"topLevelComment": {"author": "Yu Zhuang", "text": "I love how you detailed the deep dive part of merge array. I'm a python beginner and I'm not good at recursive prgoraming, this video helps me alot, thank you\u2764", "likes": 0}}, {"topLevelComment": {"author": "\u1d18\u1d07\u1d1b\u1d07\u0280'\u1d18\u1d00\u0274\u6ce2\u5409", "text": "In the 'common mistake', what if I passed  'a' and 'b' with the same value, will it be O(n)  as well as O(n^2)? (sorry for a bad english)", "likes": 0}}, {"topLevelComment": {"author": "Benjamin Hammonds", "text": "Great video. Thanks! Took awhile but well worth it.", "likes": 0}}, {"topLevelComment": {"author": "Owais Shaikh", "text": "This is the best big o notation course. Everything is explained very well. Thanks.", "likes": 0}}, {"topLevelComment": {"author": "hi\u1ebfu hu\u1ef3nh", "text": "i really love you, thank you so much,  from the bottom of my heart", "likes": 0}}, {"topLevelComment": {"author": "Hwa Lee", "text": "\ud83d\ude4b I have a question on 30:59, with the code < if (n === 0) return \u201cDone\u201d; > How does this line take care of logFunc(1)? n is not 0 in this case, so will it return logFunc(1/2)?", "likes": 0}}, {"topLevelComment": {"author": "TheRealOne 78", "text": "Thx", "likes": 0}}, {"topLevelComment": {"author": "Sibulele Mboyi", "text": "You are so vague about  O( log n). Why are we saying log in the 1st place?", "likes": 0}}, {"topLevelComment": {"author": "Jason Zeng", "text": "Great video explaining it. Very easy to understand from the visual examples.", "likes": 0}}, {"topLevelComment": {"author": "AroicX", "text": "best 2 hours i have spent on any course at all now i can say i understand the Big O notation", "likes": 0}}, {"topLevelComment": {"author": "Bhavik Bhate", "text": "What a fantastic explanation", "likes": 0}}, {"topLevelComment": {"author": "Ebenezer Adedotun", "text": "This guy really did a great job... Thanks so much for this", "likes": 0}}, {"topLevelComment": {"author": "Random Person", "text": "31:02 why is n === 0 ?? i think it should be 1\nEDIT: got it the 1 will be divided again which will be rounded down to 0 . but doesn't this add an extra level", "likes": 0}}, {"topLevelComment": {"author": "Ted Fitzpatrick", "text": "Question: can we notate an algorithm as O(log n) \"logarithmic time complexity\" if each internal iteration doesn't halve the work, but still reduces it (for example, by a third each iteration)?", "likes": 1}, "replies": [{"author": "Dade Miller", "text": "I was about to asking the same question, strange that there is not an explenation for that in the video. Thank you anyway for this free content :)", "likes": 0}]}, {"topLevelComment": {"author": "David James", "text": "The description is wrong.  Big O notation does NOT tell you how long an algorithm will take to run, rather it tells you how the speed \"scales\" relative to a change in the size of input.  For example, for a n^2 bubblesort algorithm, if the observed time on input size x is 1 second of runtime, then if the input size in changed to 2x, it is likely the runtime will increase to 4 seconds (not to 2 seconds).  That is assuming it doesn't change from worst case to best case with the 2 different size inputs.  Let's say random numbers for both to be fair.", "likes": 1}}, {"topLevelComment": {"author": "David James", "text": "My girlfriend had many \"big O\"s so I notated them in my notebook so I remember what she likes.  I would classify her as O(69). I use an insertion algorithm on her but she thinks of me more as a quickie sort.  A ha ha.", "likes": 1}}, {"topLevelComment": {"author": "Jayanta Samaddar", "text": "1:15:30 - \n(i) Actually in the merge function (helper for mergeSort), you can exit the while loop earlier, instead of using &&, you can use || (OR) instead because you are presuming to use two sorted arrays as the function arguments anyway (otherwise, the two-way merge will not work). What that means is, if any one of these arrays are already part of the final merged Array (i.e. we have traversed through at least one of the two arrays, that means we can simply concat the other array which still has elements not added to the merged Array, to the end of it, without any further thought).\n\n(ii) The concat method can be used like this instead of two concats.\n\n```\nconst merge = (arr1, arr2) => {\n  let i = 0;\n  let j = 0;\n  const mergedArr = [];\n\n  while (i < arr1.length || j < arr2.length) {\n    if (arr1[i] < arr2[j]) mergedArr.push(arr1[i++]);\n    else mergedArr.push(arr2[j++]);\n  }\n\n  return mergedArr.concat(arr1.slice(i), arr2.slice(j));\n};\n```", "likes": 2}, "replies": [{"author": "morrae", "text": "If you use OR you can get out of range for one of the arrays.", "likes": 0}]}, {"topLevelComment": {"author": "Nat S", "text": "Great video. Thanks a lot!", "likes": 0}}, {"topLevelComment": {"author": "Jeremiah Nji", "text": "Such a precise description of each time complexity and well organized. Ty so much!", "likes": 0}}, {"topLevelComment": {"author": "Chan Nyein Tun", "text": "function logn(n){\nwhile(n!=0){\n    n=Math.floor(n/4);\n}   \n}\n\nlogn(18);\n\nI still do not understand log n. What if it is divided by 4 instead of 2. In my example, the iteration happens three times. But , log(18) gets 4.169. Can anyone explain that please?", "likes": 0}}, {"topLevelComment": {"author": "Hannibaal Bar\u00e7a", "text": "Math analysis try to figure out big O can do in Algorithm.", "likes": 0}}, {"topLevelComment": {"author": "Veysel Basbaydar", "text": "the best O notation tutorial !!!!!!!!!!!!", "likes": 0}}, {"topLevelComment": {"author": "GrandPy", "text": "What would be the big O notation for sleepsort? So mainthread -> thread(item)\nIn thread:\nsleep(item)\nlist.append(item)", "likes": 0}}, {"topLevelComment": {"author": "PINTU RAJ", "text": "At time 1:53:07 min why we are ignoring 2 (ie writing O(n) instead of O(2n) ) of two same size iteration while in case of 2  different size iteration we consider both (ie O(a+b) why not O(max(a, b)) as said in next example after that", "likes": 0}}, {"topLevelComment": {"author": "HumdrumSnail10", "text": "U should've used Python instead  of JavaScript. It is easier and any coder from any coding language background could have understood it. But still, Very good video", "likes": 1}}, {"topLevelComment": {"author": "Ahmed elfeky", "text": "Great", "likes": 0}}, {"topLevelComment": {"author": "HellenTorres\ud83e\udd29", "text": "I love this explanation, thank you so much \u2764", "likes": 0}}, {"topLevelComment": {"author": "Nipuni Kaveesha", "text": "Thank you", "likes": 0}}, {"topLevelComment": {"author": "Zehani Mohamed Youssef", "text": "you guys made a mistake explaining the recursive O(Log n) function; \nThe condition should be: \nif(i<=n){\"end\"};\nso that when (n==1)  the function stops \nfor example: \nwhen n==2 \u2192 n/2 \u2192 n==1 \u2192 Func(1) \u2192 \"end\" \n- \nOn the other hand ;\nif(n==0) {\"end\"} \nthat condition requires another level of division / recursion / goes a level deeper\nwhich means it's O( Log(n+1) )\nBut since we ignore constants ( we ignore the + 1 )  it becomes O ( Log n ) \nBut you guys forgot to explain this", "likes": 0}}, {"topLevelComment": {"author": "Gloryson Horace", "text": "I like your explanation, sir. Very clear and precise", "likes": 0}}, {"topLevelComment": {"author": "xedfr __", "text": "Thanks a lot!", "likes": 0}}, {"topLevelComment": {"author": "Ultraempoleon", "text": "1:26:41", "likes": 0}}, {"topLevelComment": {"author": "as epsilon", "text": "Why the base is always 2?", "likes": 0}}, {"topLevelComment": {"author": "Ryan Olsen", "text": "Thank you for this info! I really appreciate the help", "likes": 0}}, {"topLevelComment": {"author": "Nick St", "text": "Thank you for this! Is there another algorithms focused course that describes all the {np-hard, np-complete} stuff?", "likes": 0}, "replies": [{"author": "Nick St", "text": "@Rubem Pacelli Didnt watch it. Thats why i asked. To see of i should watch it or not.", "likes": 0}, {"author": "Rubem Pacelli", "text": "Does this video not cover it? I was expecting that. . .", "likes": 0}]}, {"topLevelComment": {"author": "Vivek Acharya", "text": "Thank you so much!!  Its very easy and understandable. Awesome :)", "likes": 0}}, {"topLevelComment": {"author": "Uche Ajoku", "text": "Nice. The illustrations made understanding the big-O concept very easy. Thank you.", "likes": 0}}, {"topLevelComment": {"author": "Don Longwood", "text": "What's happening", "likes": 0}}, {"topLevelComment": {"author": "freeyourmind", "text": "Nice vid bro thanks for the lesson", "likes": 0}}, {"topLevelComment": {"author": "Teuingeuy Hayangmeulitreuk", "text": "function logn(n) {\n    while(n > 1) {\n        n = Math.floor(n / 3);\n    }\n}\n\nthis algorithm big O notation is O(log3(n)).  Am i right?", "likes": 0}}, {"topLevelComment": {"author": "Ayaz ...", "text": "What will be the complexity of this..?\n\nfor (int i = 0; i < SIZE - 1; i++)\n\t{\n\t\tif (array[i] > array[i + 1])\n\t\t{\n\t\t\tswap(array[i], array[i + 1]);\n\t\t\ti = -1;\n\t\t}\n\t}", "likes": 0}}, {"topLevelComment": {"author": "Tho Huynh", "text": "sound to me that you're using a topre keyboard during MergeSort implementation", "likes": 0}}, {"topLevelComment": {"author": "Yusoof Ali", "text": "This is the best video i have found so far for understanding big O notations! Thank you.", "likes": 0}}, {"topLevelComment": {"author": "Emmanuel Mtali", "text": "Great content!\ud83d\ude0e", "likes": 0}}, {"topLevelComment": {"author": "andrew beef", "text": "great video , love from india <3", "likes": 0}}, {"topLevelComment": {"author": "Mithil Mehta", "text": "Trust me this is the best video for understanding O notation I have ever watched.", "likes": 0}}, {"topLevelComment": {"author": "Everything", "text": "Runtime complexity Search vs Access operation\n\r\nHi so I have been going over Big O but had a question about the access and search operation within Data Structures. I'm aware that search is basically iteration through a Data Structure and access in the context of arrays would be something like array[3] to access specific part of the array, I just wanted to verify am I accurate in my assessment and does the example I have for other Data Structures accurate when it comes to access operation access data structures example:\r\n\r\n// Array Access O(1)\r\narr[3]\r\n\r\n// linked list access O(n)\r\nhead.next.next.next.value\r\n\r\n// tree access O(log n)\r\nroot.left.right.left.value\r\n\r\n// graph access not sure about runtime in terms of access\r\nnode.id\r\nnode.edge[2]\r\nnode.edge[2].id\r\nnode.edge", "likes": 0}}, {"topLevelComment": {"author": "Philippe Parisot", "text": "Thank you so much for this video! Desperately needed it!", "likes": 0}}, {"topLevelComment": {"author": "Space Wad", "text": "Nothing was glossed over. Everything was explained so well. Great job man!!", "likes": 0}}, {"topLevelComment": {"author": "Michele Smaldone", "text": "1:20:12 lol", "likes": 0}}, {"topLevelComment": {"author": "Andr\u00e9 Ulle", "text": "Thank you so much for your explanation! It was really helpful!", "likes": 0}}, {"topLevelComment": {"author": "Joseph Sanjivi", "text": "This is teaching at its finest!", "likes": 1}}, {"topLevelComment": {"author": "Mo Music", "text": "Great simplifications and visualizations ! Good job man . Thanks a lot.", "likes": 0}}, {"topLevelComment": {"author": "MeEstYou YouEstMe", "text": "Watching in 2x speed, hmmm let me try to watch it at normal speed.... Accidently hits 0.75x speed... Omggg this guy is sooooo boring lol sorry i'm an idiot, it was just as interesting at normal so now i'm going to watch at .25x to learn to be more patient.", "likes": 0}}, {"topLevelComment": {"author": "Brahim Benzarti", "text": "the worst..", "likes": 0}}, {"topLevelComment": {"author": "Lemonjuice Stand", "text": "This is great. I'm going to talk about it more in my videos.", "likes": 0}}, {"topLevelComment": {"author": "Ty", "text": "Had to rewind at 1:20:15 to make sure it wasn't my stomach grumbling lol.. Great video super informative!!", "likes": 1}}, {"topLevelComment": {"author": "Just One Good Trade", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Jackson Quinn", "text": "Guys, I think we should draw a square...", "likes": 1}}, {"topLevelComment": {"author": "Turtle Code Shorts", "text": "Hey, I've posted +100 free programming videos. \ud83d\ude02\r\nFree tutorial \ud83d\udc49 https://www.youtube.com/c/TurtleCode/videos/?sub_confirmation=1", "likes": 0}}, {"topLevelComment": {"author": "Jay Cee", "text": "Wish I had this source available 3 yrs ago. This is taught so well I had to watch it!", "likes": 0}}, {"topLevelComment": {"author": "Nikunj Sanghavi", "text": "Very clear and informative session :)", "likes": 0}}, {"topLevelComment": {"author": "Codezama Coding Labs", "text": "Hats off to you bro. Wonderful job \ud83d\udc4f.", "likes": 0}}, {"topLevelComment": {"author": "Collins Adom Baffour", "text": "Awesome tutorial !!!", "likes": 1}}, {"topLevelComment": {"author": "The Beaver Kidd", "text": "I've looked at so many videos trying to find a person who explained it easiest and quickly and somehow the nearly 2 hour long video is the only one that did both of those", "likes": 0}}, {"topLevelComment": {"author": "DIABLO BEATS", "text": "if ur a computer science freshman  and u dumb asf in maths !  let's cry together", "likes": 0}}, {"topLevelComment": {"author": "Jouricarver", "text": "brilliant video", "likes": 0}}, {"topLevelComment": {"author": "Den", "text": "1:06:57 It's confusing. We can do simpler:\nconst rightArr = arr.slice(middleIndex);\nIt means to start from middleIndex till the end of the array.", "likes": 0}}, {"topLevelComment": {"author": "Shakaib Hassan", "text": "Best", "likes": 0}}, {"topLevelComment": {"author": "crystal hard", "text": "thanks I had some confusion with big O notation now all cleared", "likes": 0}}, {"topLevelComment": {"author": "dan", "text": "31:12", "likes": 0}}, {"topLevelComment": {"author": "Brancu Alexandru", "text": "EDIT: n^2 means n squared.\n  Here is a better explanation for O(n^2) for anyone who didn't understand the one in the video. For loop is a O(n) operation. A for loop inside a for loop is also a O(n) operation. The inner loop iterates as many times as the other loop iterates, so n*n, which is O(n*n). And n*n = n^2.\nEDIT 2: n^3 is just n*n*n", "likes": 35}, "replies": [{"author": "Samuel O'Dan", "text": "@Brancu Alexandru that means there\u2019s potential for it to be a better explanation, not that it already is, right?", "likes": 0}, {"author": "bolarinwa oreoluwa", "text": "@Brancu Alexandru hmmm \ud83e\udd14\nDidn't see it this way till now\n\nThanks \u263a\ufe0f\ud83d\udc4d", "likes": 2}, {"author": "Brancu Alexandru", "text": "@Samuel O'Dan A different perspective can be a much better perspective depending on the person observing it.", "likes": 2}, {"author": "Samuel O'Dan", "text": "I\u2019m curious about what made you think this was a better explanation. To me, it\u2019s just another explanation.", "likes": 4}]}, {"topLevelComment": {"author": "Jo\u00e3o Pedro Zanlorensi Cardoso", "text": "Excellent course! Thank you.", "likes": 0}}, {"topLevelComment": {"author": "Luka Cerrutti", "text": "1:27:14 All this \"MergeSort\" algorithm analysis is not taking in consideration the time complexity of the in-built functions (for example, Array.prototype.slice() is being used to slice the array in two based on the middle index, and this happens log n times)\nAs far as I've researched (and yes it's kinda obvious), the time complexity of those methods are not constant (well, kinda depending on the used parameters; I would say, as the slice() is used in the merge function to get the none merged values, the in-built method may be done to avoid a loop if detecting the index passed as parameter is the same as the last array's index in the case there is just one element rest to merge). Still & anyways, should I consider those functions when calculating algorithm's complexity?\ncheers from Argentina \u2764", "likes": 1}}, {"topLevelComment": {"author": "Jan Bebendorf", "text": "The constants insignificance towards n=infinity isn't the real reason they get cancelled out even though it's a neat explanation because our brain always forgets what we were actually searching for. We are not searching for the actual speed of the algorithm but just how it scales. Constant time expressions are the only ones that can instantly be cancelled out without even considering them as they don't depend on n and will therefore never contribute to the scaling, only the actual speed. I think the addition operator is the most confusing part for beginners because it's not arithmetic addition and more defined like the max function and n+n=n (n being a Landau expression) doesn't feel quite right. When it comes to actual programming people also often forget about the complexity of library functions they are calling and assume each function call to be O(1).", "likes": 0}}, {"topLevelComment": {"author": "Monty Ferguson", "text": "This is what I'm currently learning in college and needed someone to break it down for me. Thanks \ud83d\udc4d", "likes": 4}}, {"topLevelComment": {"author": "abouhiba azou", "text": "thank you", "likes": 0}}, {"topLevelComment": {"author": "Selvakumar Mohan", "text": "Very good and clear explanation, sorted many of the questions I had in mind. Thanks.", "likes": 1}}, {"topLevelComment": {"author": "Nova No Skillz", "text": "Been up since 5am\u2026 it 10pm and i just found this, i have to watch it now\u2026 wish me luck.", "likes": 0}}, {"topLevelComment": {"author": "Ivan Pazyuk", "text": "Best explaining  I have seen", "likes": 0}}, {"topLevelComment": {"author": "takobaba", "text": "whats that vim with all the syntax and colors and everything?", "likes": 0}}, {"topLevelComment": {"author": "Jan Bermudez", "text": "How do you give the terminal and vim the pastel colors?", "likes": 0}}, {"topLevelComment": {"author": "Terry Schmidt", "text": "Stomach gurgling at 1:20:10 was fun", "likes": 2}, "replies": [{"author": "__________________________________________________", "text": "lol, It may happen", "likes": 0}]}, {"topLevelComment": {"author": "Terry Schmidt", "text": "And then k increments, and we draw another cube", "likes": 0}}, {"topLevelComment": {"author": "David", "text": "And that, ladies and gentlemen, is how you teach Big O.  Thanks!", "likes": 0}}, {"topLevelComment": {"author": "S.A.M.", "text": "*Cast in the name of God, Ye Not Guilty*", "likes": 0}}, {"topLevelComment": {"author": "Abhishek kaul", "text": "Can I use this video if I know python", "likes": 0}}, {"topLevelComment": {"author": "BakaDemi", "text": "so many mistakes during the coding parts", "likes": 0}}, {"topLevelComment": {"author": "G971King", "text": "Thank you so much for this fantastic video.", "likes": 0}}, {"topLevelComment": {"author": "Naman Gupta", "text": "Awesome video!!", "likes": 0}}, {"topLevelComment": {"author": "youssef galal", "text": "Such a nice guy and i loved this tutorial so much , it's so different", "likes": 0}}, {"topLevelComment": {"author": "James Earlywine", "text": "What software do you use for the blackboarding?  I like it.", "likes": 0}}, {"topLevelComment": {"author": "acfasj", "text": "how to visualize O(n^4)?", "likes": 0}, "replies": [{"author": "acfasj", "text": "@Viha Shah then O(n^5)?", "likes": 0}, {"author": "Viha Shah", "text": "bunch of 3d cubes with respect to time.", "likes": 0}]}, {"topLevelComment": {"author": "Mr. Paul", "text": "best explainer!!", "likes": 0}}, {"topLevelComment": {"author": "Mandi Haase", "text": "Thank you so much for this video! I finally have a good base understanding of how to calculate Big O~ Your explanations were wonderful. I have a question - what tool do you use to write with on the screen and also have the code snippet on the screen?", "likes": 1}}, {"topLevelComment": {"author": "DeveloperByTheGraceOf JESUS", "text": "I am the only one who thinks this man has master vim \ud83d\ude31\ud83d\ude02\ud83d\udd25 anyway great content.", "likes": 0}}, {"topLevelComment": {"author": "TroubleShoot", "text": "Make more videos of theta and omega too!", "likes": 0}}, {"topLevelComment": {"author": "Luke.f. Evarretta", "text": "1:20:11 That boi hungry", "likes": 0}}, {"topLevelComment": {"author": "Mr. Dummy", "text": "Insanely simple and precise", "likes": 0}}, {"topLevelComment": {"author": "\u015eair", "text": "why are you screaming at the begginng mate?", "likes": 0}}, {"topLevelComment": {"author": "Aarav Ruparel", "text": "Is this in JavaScript?", "likes": 0}, "replies": [{"author": "Chet Atkins", "text": "Yeah", "likes": 0}]}, {"topLevelComment": {"author": "M4N1", "text": "<3 Was helpful learning Big O", "likes": 0}}, {"topLevelComment": {"author": "UnderPressureGr", "text": "the O(n squared) and O(n cubed) were the worst explanaation I have ever seen!", "likes": 0}}, {"topLevelComment": {"author": "sz Tz", "text": "Very good job explaining this", "likes": 1}}, {"topLevelComment": {"author": "CODEX", "text": "What software did he use for the explanations?", "likes": 1}}, {"topLevelComment": {"author": "Fathi Omer", "text": "What programming language is used in this curse?", "likes": 0}}, {"topLevelComment": {"author": "Jongin Choi", "text": "Thank you very much.", "likes": 0}}, {"topLevelComment": {"author": "RAJGOPAL PUVVADA", "text": "Can you Make a video on time and space complexity topic please", "likes": 0}}, {"topLevelComment": {"author": "Unavoidable Xll", "text": "13.08 he really mess up on row and column for i j", "likes": 1}, "replies": [{"author": "Unavoidable Xll", "text": "how come you guys didnt find out.............", "likes": 0}]}, {"topLevelComment": {"author": "RTX MAX", "text": "I do not like the explanation you gave for the O(LOG2 N) notation. I know the focus is on calculating the Big O notation but the examples should cover at least 2 cases where the second case is a complex program compared to the first example and secondly the mathematics behind 2^^3 should be explained that A * LOG N = LOG N**A. Just saying.", "likes": 0}}, {"topLevelComment": {"author": "A", "text": "I feel like Python would've been a better choice for this video because of its simplicity, but I guess the JS syntax is more common.", "likes": 1}}, {"topLevelComment": {"author": "Asesh Shrestha", "text": "Very well explained \ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"author": "MrMike44v", "text": "everything is good, but the sound of you typing is a bit distracting", "likes": 0}}, {"topLevelComment": {"author": "MD Mustaq Ahmed", "text": "Hey Brother...! Great Tutorial , Loved it and Understood every bit of the Tutorial. Hope you make more videos on Data structure and algorithms. I am really looking forward to learn from you . God bless you.", "likes": 2}}, {"topLevelComment": {"author": "Bart Zumba", "text": "I love you.", "likes": 0}}, {"topLevelComment": {"author": "ATHARVA BIRTHARIA", "text": "Man can you  give a lecture freely   and post it", "likes": 0}}, {"topLevelComment": {"author": "ATHARVA BIRTHARIA", "text": "Everybody he is the legend", "likes": 0}}, {"topLevelComment": {"author": "Ihsan Nurul Iman", "text": "what to keep in mind, the definition of Big O notation here in the video is an oversimplification. Academically, Big O is more than just a notation that determines the worst-case performance. It's a notation to find the upper bound. Basically, if an algorithm is a O(n), it's also O(^), O(2^n), and more. Also, you can determine the average-case and best-case using Big O, not only worst-case.\n\nJust watched the first 12 minutes, at 6:18 his demonstration is wrong I should say. It's not O(n) + O(1) + O(1) + O(1), butO(n) + O(n) + O(n) + O(n), which luckily also equates to O(n). The statements inside would also execute for n times just as the loop statement.", "likes": 3}, "replies": [{"author": "Ihsan Nurul Iman", "text": "@Proloy Codes gosh \ud83e\udd26", "likes": 0}, {"author": "Proloy Codes", "text": "@Ihsan Nurul Iman im not saying that the result is not the same", "likes": 0}, {"author": "Ihsan Nurul Iman", "text": "@Proloy Codes you're like saying 3*(1+1+1) is not equal to 3+3+3", "likes": 0}, {"author": "Proloy Codes", "text": "nah i think you are wrong too, its actually O(n * (1 + 1 + 1)) = O(3n) = O(n)", "likes": 0}, {"author": "Gaell", "text": "Iya, lagi beruntung aja tuh, hasil penjumlahannya sama. \nYang satu O(n+3) sama O(3n) yang sama sama O(n).", "likes": 0}]}, {"topLevelComment": {"author": "Unknown Man", "text": "the thumbnail was sick !!!!", "likes": 0}}, {"topLevelComment": {"author": "cha chacha", "text": "I have seen a lot of different stuff but this one is the best! 2 hours well invested. Bravo and thank you for these crystal clear explanations!", "likes": 4}}, {"topLevelComment": {"author": "kim92se", "text": "First time I really understand what is Big O notation !!!       as a CS student", "likes": 0}}, {"topLevelComment": {"author": "Paul-Sebastian Manole", "text": "So in O(log n), the base of that log, say log_2 of n, says how fast the function moves towards the output? ie. O(log_3 n) would be faster than O(log_2 n) for the same n, right?", "likes": 0}}, {"topLevelComment": {"author": "Paul-Sebastian Manole", "text": "0:28 isn't O(n) supposed to be on the diagonal of that graph? Or is the scale of the Operations axis larger than that of the Elements axis?", "likes": 0}}, {"topLevelComment": {"author": "Drache erkl\u00e4rt die Welt", "text": "8:20 The code always starts executing in the most inner loop within nested for-loops. Not with the first line.", "likes": 3}, "replies": [{"author": "PAW Tech", "text": "@Drache erkl\u00e4rt die Welt I don't think how it works. It enters the first for loop and reaches the inner for-loop. It won't exit the inner for-loop until the statement becomes unsatisfied. After it exits the inner loop, it will again continue the outside for-loop until the statement of the outside loop becomes unsatisfied. \nYou can test by printing out a statement between the outer and inner loops.", "likes": 1}, {"author": "Drache erkl\u00e4rt die Welt", "text": "@Bruh Gamer But it skips to the most inner loop first. You won't see the first for-loop fully iterate first.", "likes": 0}, {"author": "Bruh Gamer", "text": "not really, the for loop initializes the variable and checks the condition before skipping ahead", "likes": 2}]}, {"topLevelComment": {"author": "Thomas Ramfjord", "text": "Honestly, skimming through a bit more:\n\n* No reason at all to use recursion to illustrate O(log(n)).  It's true that recursive algorithms *on trees* often have logarithmic performance, but it's just as easy to make a non-recursive  example and it's really not confusing to use iteration for tree algorithms rather than recursion also.  The point is: at each step of *iteration* or *recursion* is that you're *multiplying or dividing* instead of *adding*.\n* Why not just jump into merge sort for nlogn and use the separate example in addition?\n* I do like the fib explanation for 2^n.  What would have been *really* cool IMO is demonstrate how you can improve it.  Easy way: memoize that function to get O(N).  Slightly harder way but still possible with algebra: rewrite the fibonnacci definition in terms fib(n/2) instead of fib(n -1).  Write an iterative solution that is O(log(n)) for this!  This one example could illustrate both how to calculate different big Os, running the different solns on different input sizes can demostrate clearly how helpful this is.  You can't type a number big enough to slow your computer down with the log solution.  You can usually get an answer from the linear one.  The 2^n one will hang forever on any nontrivial number.", "likes": 1}}, {"topLevelComment": {"author": "Thomas Ramfjord", "text": "Just glancing through this to see if it would be a good reference for people trying to transfer into coding roles in my job, but within the first 6 minutes there's a pretty glaring error in the example.  You say that you take the worst performance charactaristic, O(N) in the example, which is true.  But then in the calculation you're doing O(N) + O(1) + O(1)..., which *does* evaluate to O(N), but in the example those O(1)s are nested in the loop!!! If they were outside the loop, they would be represented as O(N) + O(1) ... like you suggested, but since they're inside, they're really getting executed N times, and each one is O(N).  I'm assuming you'll go through this in the nested example, but really the same thing applies to any kind of expensive function.  What if you were making a web request inside there? Or iterating over another array of size K? Then you would say it's O(N * K), not O(max(N, K)) == O(N) + O(K).", "likes": 1}}, {"topLevelComment": {"author": "Sanyam Singhal", "text": "At 1:34:00, how did he say that the time complexity of Fibonacci is O(2^(n-1))? If we take n as 4, there are a total of 14 recursive calls but he counted only the last 8 calls to get the time complexity.", "likes": 1}, "replies": [{"author": "Faisal Khan", "text": "Bro he is talking about each level\nIn level 1 we would have 2 calls\n\nIn level 2 we would have 4 calls \n\nIn level 3 we would make 8 calls\n\nIn level 4 we would make 16 calls\n\nAnd so on...\nSo it is growing at 2N.\n(Actually 2N-1 if you count the levels. )", "likes": 0}]}, {"topLevelComment": {"author": "Myblr App", "text": "I wish Such kinds of youtube courses were available during my college days. But till now my learning appetite is increasing exponentially.", "likes": 1}}, {"topLevelComment": {"author": "Srivatsa Joshi", "text": "WoW!!! Great Explaination", "likes": 0}}, {"topLevelComment": {"author": "Prafful Patil", "text": "This is pure gold \ud83e\udd29 thanks for making such amazing content. Initial i did not expect to stay till end of the video but boy oo boy the content quality is so good that it kept me hooked.\nLove you guys \ud83e\udd29", "likes": 6}}, {"topLevelComment": {"author": "BinaryTV", "text": "Thank you! Good video.", "likes": 0}}, {"topLevelComment": {"author": "Samir Hawaldar", "text": "Thank you so much @freecodecamp @selikapro\nSo much Informative \ud83c\udf89.", "likes": 1}}, {"topLevelComment": {"author": "Brandon N", "text": "\ud83d\udc4d\ud83c\udffe", "likes": 0}}, {"topLevelComment": {"author": "LF Zhu", "text": "This is gold, you made Big O easy to understand", "likes": 2}}, {"topLevelComment": {"author": "Sir Balafort", "text": "At 1:05:40, you don't need to specify the last element of an array in the slice function. Leaving the second argument blank will do the trick, as specifying only one argument in slice goes to the end of an array by default.", "likes": 2}}, {"topLevelComment": {"author": "Sameer", "text": "I am confused with mergesort and fibonoci functions , both are recursive and making same number of function calls . So how does mergeSort function have O(logn) and fibonoci function is O(2^n) ? Can anyone help", "likes": 0}}, {"topLevelComment": {"author": "I Vss", "text": "I finsh the video :) Thnks! I learn a lot", "likes": 0}}, {"topLevelComment": {"author": "Raktim Majumdar", "text": "We need video on space complexity", "likes": 0}}, {"topLevelComment": {"author": "mickey macke", "text": "I would rate this course about 7/10. It covers all needed information to calculate time complexity, but I'd like to hear some mathematics: where does it come from? I've been looking for a nice mathematical explanation for a long time, but I haven't found any online. It has something with asymptotes, and I also saw big-O in Wolfram Mathematics. So, technically, this is not a big-O full course, it's \"how to calculate time complexity\" course. \n\nif we use big-O to show time complexity, there must be a reason for doing so. Learning everything about number theory or big-O isn't necessary, but I think, that understanding this reason of usage is crucial to understanding of the topic.", "likes": 2}, "replies": [{"author": "Thomas Ramfjord", "text": "Big O notation has nothing to do with calculating asymtotes at all! It's just that you take the *worst case* performance of an algorithm, use variables to represent the input size, and typically take only the worst performing component.  In the first example he gave, that function will *always* iterate N times, so it's kind of a poor illustration.  Imagine a function like:\n\n    f(n):\n      var k = rand(n)\n      for(i = 0; i < k; i++) { print(i) } \n\nWhere rand(n) returns a random number between 0 and n-1.  It's possible that this will only loop zero times, if rand returns 0.  On average it will loop N/2 times.  But in the worst case it will loop N times, so we say it's O(N) instead of O(N/2). Now technically we can ignore constant factors in big O notation, so actually O(N) is the same as O(1/2 * N), but hopefully this gets the point across.\n\nYou don't need much math to calculate big O notation, but you do often need to understand how logarithms are the inverse of exponentiation, because logarithms often show up in algorithms on trees, which are kind of like exponential structures (each depth of a tree has exponentially more possible leaves than the previous depth).\n\nAlso, as someone with a CS degree - Big O isn't something you should have a full course on.  It's something that you should learn the basics of in CS-101, and then think about in every subsequent course you take, and really any time you're writing code that needs to be remotely optimized.  When I interview someone, I actually sometimes give them an example where N is known, which effectively makes it a constant.  This means that O(N^5) is actually the same as O(1) - and we shouldn't try too hard to optimize such a thing.", "likes": 3}]}, {"topLevelComment": {"author": "ArleynH", "text": "This is a very nice explanation but the graphics are just horrendous", "likes": 0}}, {"topLevelComment": {"author": "Pawan Bakle", "text": "Thankyou for this video!!", "likes": 0}}, {"topLevelComment": {"author": "Aishwarya Singh", "text": "Thank you for clearing the Big O notation concept in this video. I searched everywhere to learn that concept but didn't find any. So, when I came to know about this video, I'm extremely proud of myself for choosing this one. It has cleared all my concepts related to Big O and space complexity.", "likes": 13}}, {"topLevelComment": {"author": "Nilesh Saini", "text": "Two hours well spent!!! \nAmazing course, Clear and Concise Explanation of each topic. Thank you so much for making this video.", "likes": 27}}, {"topLevelComment": {"author": "Mihai Sabadis", "text": "thanks,just love for your work and collabs!", "likes": 0}}, {"topLevelComment": {"author": "Roman", "text": "The course is quite good, but who cares? Just look at the beautifulness of his Vim!!!", "likes": 2}}, {"topLevelComment": {"author": "Paulo Vinicius", "text": "Great course! Thank you for sharing.", "likes": 1}}, {"topLevelComment": {"author": "Giorgos Black", "text": "Thanks for the good work. I've been looking for such a course.\nOne correction if I may...\nOn the second example in the Common Mistakes chapter, the time complexity is actually O(b) when a<b and enters an infinite loop when a>b.\nFor the example to work correctly with O(a*b) complexity,  your intention was, I assume, to use different iterators for the two loops; like i and j.", "likes": 3}, "replies": [{"author": "Proloy Codes", "text": "doesn't using \"let\" instead of \"var\" avoids that problem, which is what he did?", "likes": 0}, {"author": "Kantan Coding", "text": "Oh wow \ud83d\ude43. You are absolutely right. I did not mean to use i for the nested loop. Good catch. Let me see if I can add that to my pinned comment.", "likes": 4}]}, {"topLevelComment": {"author": "Adel Balbisi Rojas", "text": "Thanks for this good course.", "likes": 2}}, {"topLevelComment": {"author": "Bishnu Kumar Bhakat", "text": "This is a clear explanation of Big O.\nThank you", "likes": 1}}, {"topLevelComment": {"author": "BGxBlagiw", "text": "Why (k) when h is height, (i) is c which is column and (j) as r who corresponds to row ?", "likes": 0}}, {"topLevelComment": {"author": "SALIM PRADHAN", "text": "Damn my eyes... Thank you bro!!! keep up the good work", "likes": 0}}, {"topLevelComment": {"author": "Raktim Majumdar", "text": "bro uses vim and that too nails it. +rep", "likes": 0}}, {"topLevelComment": {"author": "Jorge Hasbun", "text": "Excellent explanations", "likes": 1}}, {"topLevelComment": {"author": "David Shagbazyan", "text": "Why is the complexity for the problem (1:36:02)  O (n!) ???  Here i see this time copmlexity (n-1)*n! + (n-2)*(n-1)!+..+1  OR 3!*2 +  2!*1 + 1  For all tasks where there were recursive calls, you counted all the calls and added their number. If you only counted the last 6 calls where the code in the condition is executed, then why, in the case of the Fibbonchi number, you also did not count the last calls where 0 or 1 are returned as complexity, but all recursive calls?", "likes": 1}}, {"topLevelComment": {"author": "Joseph", "text": "At 13:15 it shows that 'i' is column and 'j' is row. Shouldn't that be the other was round?\nBelow is C++ code I found on the web.\n\n#include <iostream>\r\nusing namespace std;\r\n\r\nint main() {\r\n\r\n   int rows = 5;\r\n   int columns = 3;\r\n\r\n   for (int i = 1; i <= rows; ++i) {\r\n      for (int j = 1; j <= columns; ++j) {\r\n         cout << \"*  \";\r\n      }\r\n      cout << endl;\r\n   }\r\n\r\n   return 0;\r\n}", "likes": 0}}, {"topLevelComment": {"author": "B LAXMINARAYAN PATRA", "text": "Can you please upload series of videos with fully explanation of each topic", "likes": 0}}, {"topLevelComment": {"author": "B 2", "text": "we want some practice problems  so that we can calculate the time complexity of an algorithm", "likes": 0}}, {"topLevelComment": {"author": "Ify Ugwumba", "text": "I don't understand pls I tried the same code it's giving me a 4 by 2 matrix how were you able to get 4x4 matrix", "likes": 0}}, {"topLevelComment": {"author": "Sugato Ray", "text": "Very nice video. Thank you for putting this together.\nSource to this video from freecodecamp.org: https://www.freecodecamp.org/news/learn-big-o-notation/\n\ud83d\udd25 My Opinion on Using O(n) vs. O(a + b) and O(n^2) vs. O(a * b) with a slight change in the definition of n in each case. (See below)\n\nThe last section (at 1:53:46) on Time Complexity could still be stated as: \n\u2728 first example --> O(n)\nwhere, \n    n = 0.5 * (a + b) = AM(a, b)\nand AM = arithmetic mean\n\n\u2728 second example --> O(n^2)\nwhere,\n    n = sqrt(a * b) = GM(a, b)\nand GM = geometric mean\n\nSo, what one must understand is that in the first example it is still a time complexity of O(n), however, since the arguments a, b may or may not be of same value, the definition of n is effectively that of Arithmetic Mean of all the arguments (a, b). And the definition of n for the second example is that of a Geometric Mean of the arguments (a, b) for similar reasons. Can this be applied if a == b? \nYes, first example: n = a = b --> n = 0.5 * (n + n) = n. \nFor the second example, n = GM(a, b) = sqrt(a * b) = sqrt(n * n) = n\n\n\ud83d\udd25 So, as a more generic statement, time complexity for \n\n\u2728 N non-nested loops is O(n*N); where, n = AM(n1, n2, ..., nN) = (n1 + n2 + ... + nN) * (1/N)\n\u2728 N nested loops is O(n^N); where, n = GM(n1, n2, ..., nN) = (n1 * n2 * ... * nN) ^ (1/N)\n\nHere, n1, n2, ..., nN are the lengths of the N loops.", "likes": 1}}, {"topLevelComment": {"author": "dreewhispers", "text": "honestly i live freecodecamp, i learned great deal of things on it, but this course is just so slow and boring, not sure if it's me or the course but it was hella boring", "likes": 0}}, {"topLevelComment": {"author": "B B", "text": "Alot of good info here, but it's really overkill to spend so much video time explaining each iteration of a nested for loop n cubed, especially after spending so much time explaining each iteration of a nested for loop n squared.", "likes": 1}}, {"topLevelComment": {"author": "Valeriia Osypova", "text": "thank you! it is so much easier now", "likes": 0}}, {"topLevelComment": {"author": "Mintu Saren", "text": "Circle of zero.", "likes": 0}}, {"topLevelComment": {"author": "Connmary Mark", "text": "The economy hardship, recession, unemployment and loss of job caused by covid pandemic is enough to push people into financial ventures.", "likes": 26}, "replies": [{"author": "SEWERYN SZULC", "text": "This woman has really changed the life of many people from different countries and I'm a testimony of her trading platform.", "likes": 0}, {"author": "\ud835\ude76\ud835\ude98\ud835\ude8d\ud835\ude9c \ud835\ude76\ud835\ude9b\ud835\ude8a\ud835\ude8c\ud835\ude8e", "text": "@Evelyn HernandezThat's her official WhatsApp number \ud83d\udc46", "likes": 0}, {"author": "\ud835\ude76\ud835\ude98\ud835\ude8d\ud835\ude9c \ud835\ude76\ud835\ude9b\ud835\ude8a\ud835\ude8c\ud835\ude8e", "text": "+ \u2460  \u2461 \u2462 \u2460 \u2461 \u2465 \u2461 \u2468 \u2460 \u2464 \u2465", "likes": 0}, {"author": "\ud835\ude76\ud835\ude98\ud835\ude8d\ud835\ude9c \ud835\ude76\ud835\ude9b\ud835\ude8a\ud835\ude8c\ud835\ude8e", "text": "@Evelyn Hernandez I met Mrs Mitchell two years ago first time at a conference held in Manchester,\nWe made exchange of contacts, you can reach her on her  business what'sApp contact.\nLet her know I referred you to her.", "likes": 0}, {"author": "Evelyn Hernandez", "text": "Someone help out with her contact info, how can I reach out to this broker Mrs Mitchell Roland.", "likes": 0}]}, {"topLevelComment": {"author": "iChrisBirch", "text": "Great explanations and examples with good drawings.  It is highly under appreciated when you take the time and effort to make your handwriting legible and use a consistent color pattern when explaining examples.  This really makes a big difference visually in understanding the parts.  Thank you so very much!", "likes": 12}}, {"topLevelComment": {"author": "Pisces J", "text": "I wish this video here when I study in School.", "likes": 1}}, {"topLevelComment": {"author": "Gladson George", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "mark hernandez", "text": "This course is quite good but I don't need an opposing hand in sped-up motion writing out things on the board. It is very distracting and doesn't contribute to any understanding.", "likes": 0}}, {"topLevelComment": {"author": "FrancoTr20", "text": "Thanks!", "likes": 0}}, {"topLevelComment": {"author": "Amazing Alex", "text": "14:00", "likes": 0}}, {"topLevelComment": {"author": "Soubinan", "text": "You are a really good teacher!!! many thanks!!!", "likes": 3}}, {"topLevelComment": {"author": "K D", "text": "Awesome video that really helped me to learn Big O and understand it better. Thank you selikpro!!", "likes": 2}}, {"topLevelComment": {"author": "Harsh Rai", "text": "Video is good because of the content and the implementation in javascript makes it even better.", "likes": 3}}, {"topLevelComment": {"author": "Zeng QY", "text": "are O(axb) and O(a.b) the same?", "likes": 0}}, {"topLevelComment": {"author": "Vasco Ambrosio", "text": "is this beginning level of difficulty, or is it better for me to begin in other language?", "likes": 0}, "replies": [{"author": "Karan Shukla", "text": "I have watched about 1 hour and till now it's beginner level.", "likes": 2}]}, {"topLevelComment": {"author": "Konstantin Rebrov", "text": "Simply amazing visualizations! A great teacher is able to break down complex topics, and visualize them intuitively, summarizing without removing any of the details, indeed making the details easier to understand.", "likes": 44}}, {"topLevelComment": {"author": "S.R.A", "text": "Christ pls give me the attention span to get through this course. Amen", "likes": 500}, "replies": [{"author": "\u041c\u0438\u0445\u0430\u0438\u043b \u041c\u0438\u0445\u0430\u0439\u043b\u043e\u0432", "text": "@Ahmad Bodayr with all the respect to you mate, islam is from the devil and the god of islam is an idol. Christ is God and with the Holy Spirit you can move mountains", "likes": 4}, {"author": "It's Aaron", "text": "Christ Jesus can give you salvation .\ud83d\ude0a", "likes": 1}, {"author": "Shema D", "text": "Ong", "likes": 0}, {"author": "Ahmad Bodayr", "text": "Well christ can serve you nothing\nBut god can give you all the attention in the world if you asked\nISLAM\u2764", "likes": 2}, {"author": "missraeray", "text": "I need it too \ud83d\ude29\ud83d\ude4f\ud83c\udffd", "likes": 0}]}, {"topLevelComment": {"author": "love u all", "text": "They did their miracle again", "likes": 0}}, {"topLevelComment": {"author": "Bhargav Pandya", "text": "Quite possibly the best explanation of Big O that I have come across on the web period!", "likes": 9}}, {"topLevelComment": {"author": "Mohamed York", "text": "I only know python and still understanding his code 100%.\nThats what good teacher matters", "likes": 5}}, {"topLevelComment": {"author": "\u0410\u043d\u0434\u0440\u0435\u0439 \u0427\u0435\u0440\u0430\u0431\u0430\u0435\u0432", "text": "1:35:00 isn't it easier explains like that: 2^0 (for fib(4) it's first call) + 2^1 + 2^2 + 2^2 thats equals to (2^4) - 1, then we omit constant \"-1\" that gives us 2^n clearly?\nJust as variant without explaining trough 2^(n-1)", "likes": 0}}, {"topLevelComment": {"author": "Truong Ngo", "text": "OMG i'm studying it on school and u guys help me so much", "likes": 1}}, {"topLevelComment": {"author": "Faizan Rauf", "text": "YES finally something about my favourite topic!", "likes": 0}}, {"topLevelComment": {"author": "Mohit Saud", "text": "Thank you and watched the full video.", "likes": 1}}, {"topLevelComment": {"author": "Sportee Gamer", "text": "while True:\n      print (\"Amazing\")", "likes": 0}}, {"topLevelComment": {"author": "Smart Decoder", "text": "Great Tutorial Thank You Sir", "likes": 1}}, {"topLevelComment": {"author": "Random Stuff", "text": "my friend asked me to optimise his code but I didn't know enough about calculating complexity and then this course happened (\u25cf'\u25e1'\u25cf)", "likes": 0}}, {"topLevelComment": {"author": "Atul Anand", "text": "Sir can you please make a series of DSA using python\ud83d\ude4f", "likes": 1}}, {"topLevelComment": {"author": "\u0ba4\u0bc0\u0bb0\u0ba9\u0bcd", "text": "Whoa\ud83d\ude32 the much neeeeeded one ! Thanks a lot, fcc\u2764\ufe0f\ud83d\udc4f", "likes": 1}}, {"topLevelComment": {"author": "\u0db8\u0dd2\u0dc4\u0dd2\u0dbb \u0daf\u0dd2\u0dbd\u0dd6\u0dc1\u0db1", "text": "please getting a unity online ssavaival game make tutorial", "likes": 0}}, {"topLevelComment": {"author": "Prince Thomas", "text": "Throughout the Covid-19 pandemic businesses and Government faced the need to solve multiple,competing priorities simultaneously. One of the toughest: how to keep an economy going while at the same time shutting it down to protect citizens from infection. As some regions emerge from the worst of the health Crisis, it\u2019s tempting to think that there could be a return to focusing on just one main concern. But this week, Expert Christiana examined sectors,particularly defense and national infrastructure,where solving for dual imperatives is more important than ever.\nDefense forces,which typically..\n\nGreetings everyone", "likes": 33}, "replies": [{"author": "Luiz Gustavo", "text": "Insightful content, Well personally I feel, those who would allow the market dynamism determine when to trade or not are either new in crypto currency world in general or probably just naive, crypto currencies have seen far worse times than this, enlightened traders continue to make good use of the dip and pump even acquiring more equities towards trading sessions,\nmonths back I started trading, though i knew just the basics of trading, i wasnt able to capture the secret to understanding the use of signals till I got connected to trading Expert Christiana Robert . Under her guide I've been able to understand the market structure and how best to use signals for amazing returns, plus her trading classes has been so educative,", "likes": 0}, {"author": "Sonya Butler", "text": "We've seen these dip many times in the last 10 years, cannot believe people still get scared with these healthy dips, Buy the discounts! Christiana has always been good at analysing this", "likes": 0}, {"author": "George Wilson", "text": "I'm from Aberdeen \ud83c\uddec\ud83c\udde7, I and my Mate gave her a try and it's has been good returns of our investment. She good", "likes": 0}, {"author": "Emilia Chris", "text": "\ud83e\udd14\u00a0You\u00a0 trade with\u00a0 Christiana? , I'm currently on my 5th trade with her and my Ptfolio has grown big..", "likes": 0}, {"author": "Serena Williams", "text": "you're right , i really dont knw how this works but i invsted with a good manager in trades'\u00a0Christiana Robert,\u00a0she's kind & her trading strategies are top notch coupled with the little commission she charges on her trade.", "likes": 0}]}, {"topLevelComment": {"author": "Bernardo", "text": "Very good tutorial", "likes": 1}}, {"topLevelComment": {"author": "chirag agrawal", "text": "Do a video on Tree Questions also.", "likes": 0}}, {"topLevelComment": {"author": "Chou Chou", "text": "I really need this\ud83d\ude0d\ud83d\ude0d\ud83d\ude0d\nThx!!!!!", "likes": 0}}, {"topLevelComment": {"author": "\u041c\u0443\u0431\u043e\u0440\u0438\u0437 \u041c\u0438\u0440\u0437\u043e\u0435\u0432", "text": "\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"author": "Chuma Katz Lunika", "text": "very goood!!! ..south Africa thanks you!", "likes": 0}}, {"topLevelComment": {"author": "robotpsychology", "text": "I love y'all.", "likes": 0}}, {"topLevelComment": {"author": "anonymous german", "text": "Man seriously I was thinking about this today only that how hard it is and your came like a magic", "likes": 0}}, {"topLevelComment": {"author": "dv", "text": "dropping right videos right during interview season. great!!!!", "likes": 2}}, {"topLevelComment": {"author": "WT Jin", "text": "Amazing channel honestly.", "likes": 0}}, {"topLevelComment": {"author": "Matt Naganidhi", "text": "\ud83d\udc4d", "likes": 0}}, {"topLevelComment": {"author": "Chidi Mbamalu", "text": "Well detailed. Thank You so much!", "likes": 2}}, {"topLevelComment": {"author": "Cappuccino", "text": "Just in time before exams", "likes": 1}}, {"topLevelComment": {"author": "Mayank codezz", "text": "\ud83d\ude00", "likes": 0}}, {"topLevelComment": {"author": "taichikitty", "text": "Could I please have someone take a look at the Big O analysis of the following sorting algorithm?  First a description, then some Python code.\n\nDescription:  \nAssuming you are given a  list of known length and constant size datatype, treat the values in the list as \"stacks\" of bits, with the most significant bit at the top, going down to the least.  Place a pointer at the beginning and a separate pointer at the end of the list.  Looking at the current bit of interest ( boi ), which for the first pass is the top bit, advance the left pointer to the right until it is on a value whose boi is not 0.  Advance the right pointer to the left until it is on a value whose boi is not 1.  Swap the values at the two pointers.  Continue this process ( which is very similar to Quicksort's pointers ) until the pointers meet.  Then take the left portion of the list with all 0's for the boi, and sort that part based on the next bit down; do the same for the right side of the list with all 1's for boi.\n\nWhen you have iterated over all values for all bits, the list is sorted.  If it was not apparent in the above description, this sorting algorithm does no value-to-value comparison, save for checking the equality of the indices of the two pointers.  Thus, it is not under the theoretical restriction of O(NLogN) space.  \n\nThe sorting takes place within the confines of the list itself, so it appears to be O(1) space.\n\nThe number of passes per value is dependent on the number of bits (B) being sorted, so it appears to be O(NB) space.  However, for any given real-world list, the maximum number of bits is constant, yet also equal to the Base2 log of the maximum length of the list.  So, what is the \"proper\" Big O time complexity of this algorithm?\n\nThis algorithm is what I call Simple Bitsort.  If there is any interest, I can talk about Complex Bitsort, which does away with the limitation of sorting by only 1 bit at a time.\n\n# This is an implementation of Simple Bitsort\n# pat. pending\n\n\r\n\r\ndef onZero(val, shiftBit):\r\n    mask = 0b01 << shiftBit\r\n    return val & mask == 0\n\n\r\n\r\n\r\ndef bitSort(arr, begin, end, shiftBit):\r\n    if end - begin <= 0 or shiftBit < 0:\r\n        return\r\n\r\n    LP = begin - 1\r\n    RP = end + 1\r\n\r\n    while True:\r\n        LP += 1\r\n        if LP == RP:\r\n            bitSort(arr, begin, LP - 1, shiftBit - 1)\r\n            if RP <= end:\r\n                bitSort(arr, RP, end, shiftBit - 1)\r\n            return\r\n        if onZero(arr[LP], shiftBit):\r\n            continue\r\n        else:\r\n            while True:\r\n                RP -= 1\r\n                if RP == LP:\r\n                    bitSort(arr, RP, end, shiftBit - 1)\r\n                    if LP >= begin:\r\n                        bitSort(arr, begin, LP - 1, shiftBit - 1)\r\n                    return\r\n                if not onZero(arr[RP], shiftBit):\r\n                    continue\r\n                else:\r\n                    arr[LP] = arr[LP] ^ arr[RP]\r\n                    arr[RP] = arr[LP] ^ arr[RP]\r\n                    arr[LP] = arr[LP] ^ arr[RP]\r\n                    break\n\n\r\n\r\n\r\n\r\n# A short sample lists to sort\r\nif __name__ == '__main__':\r\n    print('Bitsort, pat. pend.')\r\n\r\n    arr = [5, 2, 1, 3, 0, 6, 4, 255, 12, 83, 7, 16, 119, 0]\r\n    print(arr.__repr__())\r\n    bitSort(arr, 0, len(arr) - 1, 8)\r\n    print(arr.__repr__())", "likes": 1}}, {"topLevelComment": {"author": "goblinkoma", "text": "In general a very good explanation of the topic, yet for anyone who is somewhat familiar with the basic idea of the topic or the scaling of different mathematical functions the expalations are generally very slow. I think some parts, like n^3 could have been same quality in alot less time.", "likes": 1}}, {"topLevelComment": {"author": "Andriy Tretyakov", "text": "I would rate this course about 7/10. It covers all needed information to calculate time complexity, but I'd like to hear some mathematics: where does it come from? I've been looking for a nice mathematical explanation for a long time, but I haven't found any online. It has something with asymptotes, and I also saw big-O in Wolfram Mathematics. So, technically, this is not a big-O full course, it's \"how to calculate time complexity\" course. \n\nP.S. I had noticed that a lot of people just skip the mathematical underground while learning programming. I'm really concerned about this, because it would significantly decrease the knowledge of programmers, and as a result, people would have a bad and buggy software. So please, learn some maths too.\n\nP.S.S. Can someone drop a link for a big-O notation course with more mathematical explanation. Thanks in advance.", "likes": 11}, "replies": [{"author": "Ihsan Nurul Iman", "text": "go search for Abdul Baari channel, he explained the mathematical parts nicely.", "likes": 0}, {"author": "B 2", "text": "@Kantan Coding  your explanation is good", "likes": 0}, {"author": "B 2", "text": "@Kantan Coding  bro your explanation is the best   can you provide some coding problems so i can practice to calculate time complexcity", "likes": 0}, {"author": "Bhav Sagar", "text": "You might want to check out Mathematics for Computer Science by MIT.", "likes": 3}, {"author": "Kantan Coding", "text": "@Andriy Tretyakov Of course, it's no problem! I agree that understanding the reason for its usage is crucial. I didn't do a very good job of explaining its practical usage in the real world. Thank you very much, your feedback is very helpful \ud83d\ude4f", "likes": 1}]}, {"topLevelComment": {"author": "Victor", "text": "All hail the Big O", "likes": 1}}, {"topLevelComment": {"author": "Udbhav Rohatgi", "text": "I don't care whatever it is. I love keep watching this because this is interesting. \nTeaching is great.", "likes": 0}}, {"topLevelComment": {"author": "dry humor", "text": "Are they any real world applications which use this?", "likes": 0}}, {"topLevelComment": {"author": "Srijit Mondal", "text": "Please Data structures and algorithms in java\ud83d\ude14", "likes": 2}, "replies": [{"author": "Srijit Mondal", "text": "@freeCodeCamp.org you can think this as \"Full DSA interview preparation course in x hours\"\ud83d\ude09", "likes": 2}, {"author": "freeCodeCamp.org", "text": "This may be what you are looking for: https://youtu.be/RBSGKlAvoiM", "likes": 0}]}, {"topLevelComment": {"author": "Rohan kademani", "text": "This channel is killing it it's like Top 1% of the content Thank you so much", "likes": 7}}, {"topLevelComment": {"author": "WYAT_ZA", "text": "THANK YOU.\n\nbeen wanting a video on this for a while", "likes": 2}}, {"topLevelComment": {"author": "m\u0101ng\u0101i", "text": "Thank you very much", "likes": 0}}, {"topLevelComment": {"author": "Rahul Bhardwaj", "text": "damn you guys.....i needed this!!", "likes": 1}}, {"topLevelComment": {"author": "iDevBrandon", "text": "Thank you again for creating contents in JS!!!", "likes": 0}}, {"topLevelComment": {"author": "Chad Champion", "text": "oh nO", "likes": 0}}, {"topLevelComment": {"author": "Papa John's UK", "text": "00000000000000000000hh yes", "likes": 1}}, {"topLevelComment": {"author": "As Ran", "text": "27:44 He drew us as a crippled dude and him as a caregiver lmao", "likes": 13}}, {"topLevelComment": {"author": "Bhargav Pandya", "text": "Long time awaited!", "likes": 1}}, {"topLevelComment": {"author": "\u0420\u0430\u0444 \u0422\u0442", "text": "That's what i need.", "likes": 0}}, {"topLevelComment": {"author": "Octa24", "text": "what i know is columns are the vertical arrangement, rows are the horizontal one.. cmiiw", "likes": 0}}, {"topLevelComment": {"author": "Jesser", "text": "This is what I was waiting for. Thank you.", "likes": 1}}, {"topLevelComment": {"author": "3WAYS2", "text": "'O' my god thanks!", "likes": 0}}, {"topLevelComment": {"author": "Adarsh", "text": "given an integer x, which is a power of a prime number i.e. x=p^k for some prime p and integer k. Both p and k are unknown. Assume multiplication and comparisons are unit cost. I need to find both p and k . What would be the most appropriate bound on the time complexity? I thought of using sieve of Eratosthenes but it would take O(x) time, is there something better, Binary Search maybe?", "likes": 1}}, {"topLevelComment": {"author": "Artificial Intelligence", "text": "Poor the guy who spent all the night designing the image of this video \ud83d\ude06 \n\n\nJokes aside, Great content as always.", "likes": 9}}, {"topLevelComment": {"author": "Neil Lunavat", "text": "Nice one \u2764", "likes": 0}}, {"topLevelComment": {"author": "No Copyright Gameplay Stock Videos", "text": "Any Probability of an ORACLE APEX Course? ThankYou!", "likes": 0}}, {"topLevelComment": {"author": "Nooby Pro", "text": "You dont know how much i wanted this course \n\nthank you so much Free Code Camp\nyou really deserve a lot of praise", "likes": 42}}, {"topLevelComment": {"author": "JP Ventura", "text": "Please, stop launching awesome courses! We finish one and you create another \ud83d\ude02", "likes": 27}, "replies": [{"author": "First Name Last Name", "text": "how you got that fcc icon?", "likes": 0}, {"author": "Random Stuff", "text": "@No Copyright Gameplay Stock Videos \u270c\u270c", "likes": 1}, {"author": "No Copyright Gameplay Stock Videos", "text": "@Random Stuff that's how you be a programmer.", "likes": 1}, {"author": "Random Stuff", "text": "it's hard to cope with but things r gonna go like this always \ud83d\ude23\ud83d\ude23", "likes": 1}, {"author": "No Copyright Gameplay Stock Videos", "text": "You gotta live with that anyhow!", "likes": 1}]}, {"topLevelComment": {"author": "TxzK", "text": "0:32 liked cause Vim", "likes": 1}}, {"topLevelComment": {"author": "A J", "text": "Thank's a ton! I needed this!", "likes": 0}}, {"topLevelComment": {"author": "Coefficient", "text": "Please do a golang 2021 tutorial", "likes": 3}, "replies": [{"author": "Urek Mazino", "text": "It hasn't changed much you can refer to the previous one on thus channel. I learned from there, don't have any issues so far.", "likes": 0}]}, {"topLevelComment": {"author": "Afruz Afzalovich", "text": "Why do we need to learn this. I mean where do we use it", "likes": 0}, "replies": [{"author": "Abhishek shah", "text": "You may not need to learn this if you're just developing apps", "likes": 1}, {"author": "Abhishek shah", "text": "We use it in analysis of algorithms when one has to compare which search/sort is better suited for the space and time constraints", "likes": 2}]}, {"topLevelComment": {"author": "// Archive", "text": "It's like you guys can read my mind to know just what I'm searching for", "likes": 24}, "replies": [{"author": "Mat\u00edas Pincheira", "text": "Ikr", "likes": 1}]}, {"topLevelComment": {"author": "Ahmed AL jabri", "text": "Wow you're the bomb", "likes": 1}}, {"topLevelComment": {"author": "Adon Bush", "text": "Wow! Been learning your beginner programming course but stopped because I can't follow on the big o notation part and been searching to learn more about it. You posted about it when I exactly needed it, thank you so much ! You guys are such a lifesaver!", "likes": 167}, "replies": [{"author": "Guramritpal Singh", "text": "Dutch! You better to have a Plan.", "likes": 0}]}, {"topLevelComment": {"author": "SUPRIYO CHATTERJEE", "text": "Great video please kindly make some video on Automation and how to perform automation for Windows Server and Windows Server Troubleshooting", "likes": 2}, "replies": [{"author": "Tosin Faleyimu", "text": "@SUPRIYO CHATTERJEE it\u2019s my pleasure bro", "likes": 0}, {"author": "SUPRIYO CHATTERJEE", "text": "@Tosin Faleyimu  Ok thanks mate for your valuable information I will check them tomorrow", "likes": 1}, {"author": "Tosin Faleyimu", "text": "@SUPRIYO CHATTERJEE You could find helpful scripts and articles online with some googling. I recommend going through Adam the Automator's blog.", "likes": 2}, {"author": "SUPRIYO CHATTERJEE", "text": "@Tosin Faleyimu  Thanks but I am looking for automation steps and complete process for Windows Server Migration and Windows Server Patch Management and Windows Server Monitoring and troubleshooting using automation techniques and procedures, I already know Powershell", "likes": 0}, {"author": "Tosin Faleyimu", "text": "You are welcome.  https://www.youtube.com/watch?v=UVUd9_k9C6A", "likes": 1}]}, {"topLevelComment": {"author": "kimball choo", "text": "The subject I\u2019ll never understand.", "likes": 2}, "replies": [{"author": "No Copyright Gameplay Stock Videos", "text": "I never did. Unless i broke down the Loops into actual steps!", "likes": 1}, {"author": "Alfredough", "text": "Same Log2N 2^N hardest for me to understand", "likes": 0}]}, {"topLevelComment": {"author": "Charchit Kocheta", "text": "It took me 8 seconds to put 1 comment, am I too slow", "likes": 0}}, {"topLevelComment": {"author": "Adesh Mishra", "text": "Love you all guys\ud83d\ude42", "likes": 0}}, {"topLevelComment": {"author": "Shukrullo Abduqodirov", "text": "Thanks for your efforts", "likes": 0}}, {"topLevelComment": {"author": "Musa Maali", "text": "FIRST", "likes": 1}}, {"topLevelComment": {"author": "Mohammad Qawaqneh", "text": "\ud83d\udd25.", "likes": 0}}, {"topLevelComment": {"author": "Adesh Mishra", "text": "Awesome freecodecamp \ud83e\udd1e\u270c\ufe0f\ud83d\udc4d\ud83d\ude4f", "likes": 0}}, {"topLevelComment": {"author": "Mohamed Osama", "text": "Yes thank you i've been waiting for this", "likes": 0}}, {"topLevelComment": {"author": "Hari", "text": "U guys are great \ud83d\udd25\ud83d\udd25\ud83d\udd25!!!!", "likes": 2}}, {"topLevelComment": {"author": "FlammableTFM", "text": "First", "likes": 1}}, {"topLevelComment": {"author": "tragchamp", "text": "uploaded 7 secs ago bruh", "likes": 0}}, {"topLevelComment": {"author": "Ssehgal", "text": "First comment ... Btw love the content here !", "likes": 0}}, {"topLevelComment": {"author": "Sirohi Webdev", "text": "\u2764\ufe0f", "likes": 1}}]}