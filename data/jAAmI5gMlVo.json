{"video": {"id": "jAAmI5gMlVo", "title": "Async/Await - JavaScript Tutorial", "description": "This is an in-depth look at the Async/Await feature in JavaScript.\n\nCode: https://github.com/eXtremeXR/Async-Await\n\nFirst, we're going to go through brief history of asynchronous programming in JavaScript and see how it transitioned from callbacks to promises to generators and to finally Async/Await.\n\nThen we're going to focus purely on Async/Await and we'll go through a bunch of examples.\n\nWe'll start off by learning how we can do sequential flow using Async/Await and we'll also see how we need to be careful about error handling.\n\nNext, we'll move onto parallel execution. We'll see how we can use Promise.all() function to be able to execute multiple promises in parallel. Again, we'll see why we need to be careful about our error handling.\n\nLast but not least, we'll take a look at how we can do iterations with Async/Await. We'll start off with for loop, then move onto forEach, for of loop is going to be next and finally we'll wrap that section with while loop.\n\nAt the end, we'll do a quick recap of the things we just went through.\n\n\u2b50\ufe0fContents \u2b50\ufe0f\n\u2328\ufe0f 0:00 - Introduction\n\u2328\ufe0f 1:28 - Callbacks Example\n\u2328\ufe0f 6:44 - Promises Example\n\u2328\ufe0f 9:40 - Async/Await Example\n\u2328\ufe0f 13:18 - Coding Examples Begin\n\u2328\ufe0f 14:09 - Sequential Example (Naive)\n\u2328\ufe0f 19:27 - Sequential Example (Issue)\n\u2328\ufe0f 21:18 - Sequential Example (Solution)\n\u2328\ufe0f 23:48 - Parallel Example (Naive)\n\u2328\ufe0f 27:21 - Parallel Example (Issue)\n\u2328\ufe0f 28:58 - Parallel Example (Solution)\n\u2328\ufe0f 31:55 - For Loop Example \n\u2328\ufe0f 36:49 - ForEach Example\n\u2328\ufe0f 40:06 - For-Of Example\n\u2328\ufe0f 42:06 - While Loop Example\n\u2328\ufe0f 44:03 - Recap\n\nTutorial from CodeWorkr. Check out the CodeWorkr channel for more great tutorials: https://www.youtube.com/channel/UCfYTu_qAO5T7a-8rC_74Ypw\n\n--\n\nLearn to code for free and get a developer job: https://www.freecodecamp.org\n\nRead hundreds of articles on programming: https://medium.freecodecamp.org", "duration": "PT47M3S", "likes": "1255", "views": "50999"}, "comments": [{"topLevelComment": {"author": "Nikhil Joshi", "text": "How can we start all powerplant in parallel?", "likes": 0}}, {"topLevelComment": {"author": "Anna Budonna", "text": "Great explanation, thanks!", "likes": 0}}, {"topLevelComment": {"author": "Jatin malik", "text": "Great stuff as always ! I also made a post for this , check it out  https://www.hackandstuff.com/taming-the-async-java-script-beast", "likes": 0}}, {"topLevelComment": {"author": "Madhulatha Chowdary", "text": "Hey CodeWorkr . Amazing video. a new subscriber to your channel  . Also your accent is not bad . In fact it is very good to understand and the examples you provide is very simple and clean . please do keep it up . Expecting more videos from you on tricky concepts.  \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f", "likes": 0}}, {"topLevelComment": {"author": "Sean Rasmussen", "text": "This really helped me get my head around the differences between the different async JS approaches. Thanks!", "likes": 1}}, {"topLevelComment": {"author": "Priyank Rupareliya", "text": "Very finely explained - Helped me clearly understand the fundamentals", "likes": 0}}, {"topLevelComment": {"author": "Bobby's Archive of Funniest Videos", "text": "nope, cant deal with this accent.", "likes": 0}}, {"topLevelComment": {"author": "christian onyango", "text": "the reason i like Traversy Media is because you actually start with him like you write all the functions together you create files together, these ones with pre-existing code is not as fun, but its a cool video anyways, thanks", "likes": 2}}, {"topLevelComment": {"author": "Varun Verma", "text": "I've gone thorough 20-30 videos on async await in the last few days as I am trying to learn JavaScript and Node.js - and hands down this is the best that I've seen for a beginner to learn the concept and build upon it.", "likes": 8}}, {"topLevelComment": {"author": "Akash Gvalani", "text": "Great Job!! Can you explain if Data is an array why is it declared as an Const Variable (referencing timer 26:02 seconds)?", "likes": 0}}, {"topLevelComment": {"author": "Simone Icardi", "text": "nice one!!", "likes": 0}}, {"topLevelComment": {"author": "Zayden Rosario", "text": "38:57 Try adding async before powerPlant, so it will be like this powerPlants.forEach(async powerPlant => {", "likes": 0}}, {"topLevelComment": {"author": "L A", "text": "you're such a legend. thanks for this video!", "likes": 0}}, {"topLevelComment": {"author": "szyszak", "text": "Just a little note, you didn't declare variables in for-of loops, which is a bad practice.", "likes": 0}}, {"topLevelComment": {"author": "Di Qian", "text": "Really awesome tutorial! Thx", "likes": 0}}, {"topLevelComment": {"author": "Muhammad Nadeem Bashir", "text": "Please make a tutorial on recursion  in javascript  with many examples and explanation  please thanks ..", "likes": 0}}, {"topLevelComment": {"author": "Larry Gutman", "text": "Thanks, CodeWorkr. I learned a lot. What editor are you using?", "likes": 0}, "replies": [{"author": "Hulk", "text": "@Sol Dactilera lololololololololololololololololol", "likes": 0}, {"author": "Sol Dactilera", "text": "Larry Gutman It's Microsoft Visual Studio Code", "likes": 0}]}, {"topLevelComment": {"author": "Christian Ma", "text": "Excellent video! Very well prepared and demonstrated. The little hint about async/await not working with functions using a callback themselves was awesome. That was my main point, why I still struggled. Thanks a lot!", "likes": 0}}, {"topLevelComment": {"author": "sonu gupta", "text": "nice...", "likes": 0}}, {"topLevelComment": {"author": "Richard Messi", "text": "Hi please do a course on redux. Love the long crash courses. They are great", "likes": 0}}, {"topLevelComment": {"author": "Yan P", "text": "the only useful thing in the video is the promise all function, that actually shows performance benefit. what's the point of using async/await sequencially? take note that it can even degrade performace running sequencially because of the extra overhead.", "likes": 0}, "replies": [{"author": "Yan P", "text": "@CodeWorkr btw, consider the following real life example to demonstrate the usefulness of asynchrony in life (pseudo code) :\n\nasync lifeExample() {\n prepareSoup()\n ready = await putSoupOnStove() //takes about 30 minutes to cook\n\n do {\n  runOnTreadMillFor10Min() //do workout while soup is cookin'\n } while (!ready) //open pot lid and check if soup is ready\n\n eatSoup() //eat the soup now that it's ready\n shower() //after you worked out for ~30 mins and ate soup.\n watchNetflix() //enjoy your evening\n}", "likes": 0}, {"author": "CodeWorkr", "text": "\u200b@Yan P Oh, understand what you mean now - yes, we agree on that, await-ing multiple things in sequence is making the entire flow sequential and there aren't advantages (as when using promise.all). \n\nStill, you might be using async/await throughout your project and for example a single function might make a use of both promise.all() (where applicable) and then awaiting operations in sequence where absolutely necessary, so you're still saving time/performance when you can (on promise.all() part) and then doing few things sequentially when you can't get away of doing so.\n\n// Some time will be saved because we're not sequentially calling all of them\nconst data = await Promise.all([getData01(), getData02(), getData03()])\n// (In between) Some time will be lost because of waiting on upper promise\n// Some time will be saved because we're not sequentially calling all of them\nconst results = await Promise.all([processData(data[0]), processData(data[1]), processData(data[2])])\n\nThat'd be a combination of both \"patterns\" for example.\nOf course correct me if you think I'm wrong", "likes": 0}, {"author": "Yan P", "text": "@CodeWorkr In the examples you provide in your reply and video there is no preference to async/await over sync ops. the whole purpose of async ops is that you can keep running in the background with other stuff or in parallel. if you don't do that, than there is no point using async await in the first place.", "likes": 0}, {"author": "CodeWorkr", "text": "Hey Yan! There are situations where you need to do 2 \"slow\" operations in sequence, where the latter operation depends on the data returned by the former operation. In that situation you'd actually use async/await in sequence and won't use Promise.all().\n\nAn example:\n// Get some data from the DB\nconst data = await grabDataFromDB({ id: 'something' })\n// Process said data\nconst processedData = await processData(data)\n\nYou can't really use Promise.all() here as second line depends on the results of first line.", "likes": 1}]}, {"topLevelComment": {"author": "The Pup", "text": "Generators make my head hurt", "likes": 3}}, {"topLevelComment": {"author": "sai sreenivas", "text": "Thank you", "likes": 1}}, {"topLevelComment": {"author": "TottiBln", "text": "I love You! ;)", "likes": 1}}, {"topLevelComment": {"author": "Kornel Kornecki", "text": "Thanks mate for great explanation. But please please please improve your English pronunciation - it's painful to listen.", "likes": 2}, "replies": [{"author": "Vinicius Rocha", "text": "@CodeWorkr \nI'm brazilian and I can understand you perfectly.", "likes": 1}, {"author": "Radek", "text": "No, it's not painful to listen. It's actually pretty good. Here in New York he would be one of the easier persons to understand :)", "likes": 2}, {"author": "CodeWorkr", "text": "You're welcome Kornel!  My pleasure!\nI'm trying, this was one of my older videos, hopefully I'm getting better!", "likes": 2}]}, {"topLevelComment": {"author": "Host Promo", "text": "Async is amazing, thanks for the wonderful breakdown!", "likes": 1}, "replies": [{"author": "CodeWorkr", "text": "Thanks for watching! \ud83d\ude42 Async really is amazing, best thing that has happened to Node.js (well Promises first and foremost, but then Async/Await as it's a wrapper more or less).", "likes": 0}]}, {"topLevelComment": {"author": "Divine Zeal", "text": "import asyncio\noops wrong video, cya!", "likes": 3}, "replies": [{"author": "Stumpy martin", "text": "\ud83d\udcfd\ud83d\udc7d\ud83d\ude07tytnuhuuhht GJ van and trailer", "likes": 0}, {"author": "Stumpy martin", "text": "Divine Zeal \nhttps://goo.gl/iL7Apr\nLatin numerals - Wikipedia", "likes": 0}]}, {"topLevelComment": {"author": "Abdulhadi Lababidi", "text": "Big Like before watch\r\nGreat channel ==> awesome videos\r\nKeep going guys!", "likes": 1}}, {"topLevelComment": {"author": "Jashan Bansal", "text": "https://github.com/jashanbansal0708/amazing-repositories \nExplore this guys, it will help you!", "likes": 1}}, {"topLevelComment": {"author": "77Sazaca", "text": "Nice!", "likes": 2}}, {"topLevelComment": {"author": "Paulo Cabello Acha", "text": "Just now that I'm learning Javascript. Thanks a lot guys!", "likes": 2}}, {"topLevelComment": {"author": "haris bashir", "text": "Heart", "likes": 2}}]}